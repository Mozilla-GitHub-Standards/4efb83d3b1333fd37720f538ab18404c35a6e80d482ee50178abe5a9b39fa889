!function e(t,n,r){function o(a,s){if(!n[a]){if(!t[a]){var u="function"==typeof require&&require;if(!s&&u)return u(a,!0);if(i)return i(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var l=n[a]={exports:{}};t[a][0].call(l.exports,function(e){var n=t[a][1][e];return o(n?n:e)},l,l.exports,e,t,n,r)}return n[a].exports}for(var i="function"==typeof require&&require,a=0;a<r.length;a++)o(r[a]);return o}({1:[function(e,t){"use strict";var n=e("react"),r=e("./getJSON.jsx"),o=n.createClass({displayName:"GitHubPerson",getInitialState:function(){return{username:"",name:"",html_url:"",avatar_url:""}},componentDidMount:function(){var e=this.props.handle.toLowerCase(),t=this;r("/api/user/"+e,function(e){e.avatar_url=-1!==e.avatar_url.indexOf("?")?e.avatar_url+"&s=64":e.avatar_url+"?s=64",t.isMounted()&&t.setState({username:e.login,html_url:e.html_url,avatar_url:e.avatar_url,name:e.name})},function(e,t){console.log("GOT ERROR",e,t)})},render:function(){return n.createElement("a",{href:this.state.html_url,title:this.state.name},n.createElement("div",{className:"profile-pic"},n.createElement("img",{className:"profile-pic-btn",src:this.state.avatar_url})))}});t.exports=o},{"./getJSON.jsx":9,react:216}],2:[function(e,t){"use strict";var n=e("react"),r=e("./getJSON.jsx"),o=e("react-select"),i=n.createClass({displayName:"GitHubPerson",getInitialState:function(){return{members:[]}},componentDidMount:function(){var e=this.props.team.toLowerCase(),t=this;r("/api/team/"+e,function(e){if(t.isMounted()){var n=e.map(function(e){var t=e.name;return t&&void 0!==t||(t="no name in github profile"),{label:"@"+e.login+" ("+t+")",value:"@"+e.login}});t.setState({members:n})}},function(e,t){console.log("GOT ERROR",e,t)})},render:function(){return n.createElement(o,{name:this.props.name,options:this.state.members})}});t.exports=i},{"./getJSON.jsx":9,react:216,"react-select":65}],3:[function(e,t){"use strict";var n=e("react"),r=e("./auth.jsx"),o=r.AuthMixin,i=e("./GitHubPersonChooser.jsx"),a=n.createClass({displayName:"Add",mixins:[o],render:function(){var e=n.createElement("div",null,n.createElement("a",{className:"button",onClick:this.login},"Login with Github"),n.createElement("p",null,"To create new projects you need to be logged-in to your Github account."),n.createElement("div",{className:"pagefill"}));return this.state.loggedIn&&(e=n.createElement("div",{id:"add"},n.createElement("form",{method:"POST",action:"/api/add"},n.createElement("div",{className:"question"},n.createElement("h2",null,"Give your project a title."),n.createElement("p",null,"In as few words as possible, describe what this project is about."),n.createElement("textarea",{name:"title",rows:"2"})),n.createElement("div",{className:"question"},n.createElement("h2",null,"What is the problem you are trying to solve?"),n.createElement("p",null,"Describe what’s broken or missing from the current experience."),n.createElement("textarea",{name:"problem",rows:"8"})),n.createElement("div",{className:"question"},n.createElement("h2",null,"Who are the users you are trying to impact?"),n.createElement("p",null,"Describe who is being affected by the problem you have described (visitors, teachers, staff, community)."),n.createElement("textarea",{name:"audience",rows:"8"})),n.createElement("div",{className:"question"},n.createElement("h2",null,"What does success look like?"),n.createElement("p",null,'Describe the "state change" that you wish to accomplish. Do you have metrics that we can reference?'),n.createElement("textarea",{name:"success",rows:"8"})),n.createElement("div",{className:"question"},n.createElement("h2",null,"What is your vision for a solution?"),n.createElement("p",null,"Describe a high level solution to solve the problem. Think about the most important, impactful part of the solution."),n.createElement("textarea",{name:"vision",rows:"8"})),n.createElement("div",{className:"question"},n.createElement("h2",null,"How will you measure success?"),n.createElement("p",null,"Describe the data you will use. Is there existing tracking in place? Do you need to setup new reports or dashboards?"),n.createElement("textarea",{name:"measurement",rows:"8"})),n.createElement("div",{className:"question"},n.createElement("h2",null,"Decision Maker"),n.createElement("p",null,"Who is the single person who can be relied upon to make the decisions that will come up during this initiative?"),n.createElement(i,{name:"decision",team:"MoFos"})),n.createElement("div",{className:"question"},n.createElement("h2",null,"Driver (optional)"),n.createElement("p",null,"If known, who is the single person who will drive this initiative for the heartbeat?"),n.createElement(i,{name:"driver",team:"trained drivers"})),n.createElement("button",{className:"button",type:"submit"},"Submit Project")))),n.createElement("div",null,n.createElement("div",{className:"header"},n.createElement("h2",null,"New Initiative")),n.createElement("div",{className:"main"},e))}});t.exports=a},{"./GitHubPersonChooser.jsx":2,"./auth.jsx":6,react:216}],4:[function(e){"use strict";var t=e("react"),n=e("react-router"),r=n.Route,o=n.RouteHandler,i=n.Link,a=n.DefaultRoute,s=e("./auth.jsx"),u=s.AuthBlock,c=e("./add.jsx"),l=e("./heartbeats.jsx"),p=l.Now,h=l.Next,d=e("./upcoming.jsx"),f=e("./homepage.jsx"),m=e("./design.jsx"),v=e("./audience.jsx"),g=t.createClass({displayName:"App",getInitialState:function(){return{loggedIn:!1}},render:function(){return t.createElement("div",null,t.createElement("ul",{className:"navigation"},t.createElement("li",{className:"icon-home"},t.createElement(i,{to:"/"},"Home")),t.createElement(u,null),t.createElement("li",null," "),t.createElement("li",{className:"icon-add"},t.createElement(i,{to:"add"},"Add Project")),t.createElement("li",{className:"icon-now"},t.createElement(i,{to:"now"},"This Heartbeat")),t.createElement("li",{className:"icon-next"},t.createElement(i,{to:"next"},"Next Heartbeat")),t.createElement("li",{className:"icon-upcoming"},t.createElement(i,{to:"upcoming"},"Upcoming")),t.createElement("li",null," "),t.createElement("li",{className:"icon-audience"},t.createElement(i,{to:"audience"},"Our Audience")),t.createElement("li",{className:"icon-strategy"},t.createElement("a",{href:"https://wiki.mozilla.org/Webmaker/2015"},"Strategy")),t.createElement("li",{className:"icon-dashboard"},t.createElement("a",{href:"https://mozillafoundation.geckoboard.com/dashboards/F62088172D822E2A"},"Dashboard")),t.createElement("li",null," "),t.createElement("li",{className:"icon-how"},"How We Work"),t.createElement("ul",null,t.createElement("li",null,t.createElement("a",{href:"http://book.webmaker.org"},"Process")),t.createElement("li",null,t.createElement(i,{to:"design"},"Design"))),t.createElement("li",{className:"icon-involved"},t.createElement("a",{href:"https://webmaker.org/en-US/getinvolved"},"Get Involved"))),t.createElement("input",{type:"checkbox",id:"nav-trigger",className:"nav-trigger"}),t.createElement("label",{htmlFor:"nav-trigger"}),t.createElement("div",{className:"container"},t.createElement(o,null)))},onLoggedIn:function(){this.setState({loggedIn:!0})},onLoggedOut:function(){this.setState({loggedIn:!1})}}),y=t.createElement(r,{path:"/",handler:g},t.createElement(r,{name:"add",handler:c}),t.createElement(r,{name:"now",handler:p}),t.createElement(r,{name:"next",handler:h,path:"next",title:"Next Heartbeat"}),t.createElement(r,{name:"upcoming",handler:d}),t.createElement(r,{name:"design",handler:m}),t.createElement(r,{name:"audience",handler:v}),t.createElement(a,{handler:f}));n.run(y,n.HistoryLocation,function(e){t.render(t.createElement(e,null),document.getElementById("app"))})},{"./add.jsx":3,"./audience.jsx":5,"./auth.jsx":6,"./design.jsx":7,"./heartbeats.jsx":10,"./homepage.jsx":11,"./upcoming.jsx":14,react:216,"react-router":31}],5:[function(e,t){"use strict";var n=e("react"),r=n.createClass({displayName:"Persona",getInitialState:function(){return{}},getMotivators:function(){var e=this.props.motivators.split(","),t=[];return["Attention","Community","Ambition","Self Expression"].forEach(function(r){t.push(n.createElement("li",{className:e.indexOf(r)>-1?"on":""},r))}),t},render:function(){return n.createElement("div",null,n.createElement("div",{className:"info-box"},n.createElement("h3",null,this.props.name),n.createElement("ul",{className:"traits"},n.createElement("li",null,this.props.location),n.createElement("li",null,this.props.occupation)),n.createElement("ul",{className:"motivators"},this.getMotivators())),this.props.children)}}),o=n.createClass({displayName:"Audience",render:function(){return n.createElement("div",null,n.createElement("div",{className:"header"},n.createElement("h2",null,"Our Audience")),n.createElement("div",{className:"main"},n.createElement("div",{id:"audience"},n.createElement("h2",{className:"clearfix"},"Motivators"),n.createElement("section",{className:"motivators"},n.createElement("div",{className:"subsection"},"There are principal motivators behind any product that people know and love, through which interest and ingenuity are retained. Webmaker hopes to ingnite these motivations to promote making and learning on the open, and increasingly mobile web."),n.createElement("div",{className:"subsection grid"},n.createElement("div",{className:"row-2"},n.createElement("div",{className:"col attention"},n.createElement("h3",null,"Attention"),n.createElement("p",null,"Passion for interacting with an audience.")),n.createElement("div",{className:"col community"},n.createElement("h3",null,"Community"),n.createElement("p",null,"Feeling of connection and organization with peers, friends, and acquaintances. "))),n.createElement("div",{className:"row-2"},n.createElement("div",{className:"col self-expression"},n.createElement("h3",null,"Self Expression"),n.createElement("p",null,"Ability to share and communicate knowledge, questions, and creativity with other people.")),n.createElement("div",{className:"col aspiration"},n.createElement("h3",null,"Ambition"),n.createElement("p",null,"Desire to achieve personal growth."))))),n.createElement("h2",{className:"clearfix"},"Personas"),n.createElement("section",{className:"personas"},n.createElement("div",{className:"subsection"},"To better understand Webmaker’s audience, we conducted interviews, research and analysis of real users’ motivations and struggles. Real-life users are complex and always changing, but these personas will more easily let us enter the headspace of our users who are potentially very different from us. And as we contemplate pathways through Webmaker that meet various needs, we can refer to our users by name."),n.createElement("div",{className:"subsection bare grid"},n.createElement("div",{className:"row-2"},n.createElement("div",{className:"col jane"},n.createElement(r,{name:"Jane",location:"Kenya",occupation:"Entrepreneur",motivators:"Ambition,Attention"},n.createElement("p",null,"Situated on the outskirts of Kisumu, Kenya, Jane is an entrepreneur whose new rabbit farm will give her a more stable lifestyle than her old potato distribution business."),n.createElement("p",{className:"quote"},"I learned about technology and farming from the Internet."),n.createElement("p",null,"Jane is an avid Facebook user, which let her learn the skills she needed to start her farm, and will allow her to promote and conduct business in the future."),n.createElement("p",null,"As a member of the Equity Group Foundation’s “Improve Your Business” program, her dream is to grow her new business and see it flourish."),n.createElement("p",null,"Eventually, Jane hopes to buy a smart-phone to replace her current feature-phone. She wants to use Webmaker not only to learn about creating an online presence, but to reach her clients, many of whom connect with each other primarily through mobile devices."))),n.createElement("div",{className:"col lewis"},n.createElement(r,{name:"Sadia",location:"Kenya",occupation:"Teacher, Artist",motivators:"Community,Ambition,Attention,Self Expression"},n.createElement("p",null,"Lewis is an artist living on the outskirts of Kisumu, Kenya. He studies health and community at the university nearby, and works as a spoken word artist by speaking at weddings and funerals. Currently, he is authoring his first book, but regularly practices his writing by posting quotes on his popular Facebook account."),n.createElement("p",{className:"quote"},"Every morning, I wake up wondering what I can change."),n.createElement("p",null,"With the feature phone he calls his “Walkie Talkie”, Lewis reaches people through his Facebook page, which is also his promotion platform and a method for finding work."),n.createElement("p",null,"Lewis wants to change the world, and help the children in his community. He sees Webmaker as an opportunity for reaching people and earning money, since it allows people to create content for themselves.")))),n.createElement("div",{className:"row-2"},n.createElement("div",{className:"col sadia"},n.createElement(r,{name:"Sadia",location:"Bangladesh",occupation:"Student",motivators:"Attention,Self Expression"},n.createElement("p",null,"Like many Bangladeshi girls her age, Sadia is determined to succeed in school. Her goals are set high, with heroes ranking among influential Bangladeshi bankers, entrepreneurs, and actresses."),n.createElement("p",{className:"quote"},"I love to gossip with my friends about my favourite TV shows."),n.createElement("p",null,"Her Internet usage is restricted by her parents, who want her to focus on her studies. However, her parents’ unfamiliarity with Facebook affords her some privacy, where she chats with her friends about the her favourite movies and TV shows -- when she is done her homework, of course!"),n.createElement("p",null,"Hoping to own one day a smart-phone with a powerful camera, Sadia would continue to share pictures, garnering likes and comments from her friends. Enthusiastic about Webmaker, she wants to continue to express herself through it while learning about opportunities on the Internet outside of Facebook."))),n.createElement("div",{className:"col kevin"},n.createElement(r,{name:"Kevin",location:"USA",occupation:"Student",motivators:"Community,Ambition"},n.createElement("p",null,'Currently a university sophomore, Kevin grew up in "East Side" Chicago, a.k.a. Alphabetland, where he attended high school. There, he learned to jailbreak and customize his own phones.'),n.createElement("p",null,"After hearing about his high school robotics team, he quickly joined, became captain, and led the team to the MATE Underwater Robotics competition."),n.createElement("p",null,"Kevin continued to enjoy tinkering with technology through an internship at the Adler Planetarium where he spent time writing and modifying Arduino scripts to control robot motors."),n.createElement("p",null,"Although he is a busy university student, Kevin still spends time mentoring and volunteering at the planeterium.")))),n.createElement("div",{className:"row-2"},n.createElement("div",{className:"col lajune"},n.createElement(r,{name:"LaJune",location:"USA",occupation:"Student",motivators:"Ambition,Self Expression"},n.createElement("p",null,"LaJune mixes her love for fashion, art and technology as a student of NYU Polytechnic School of Engineering’s Integrated Digital Media Program."),n.createElement("p",null,"She loves exploring and experimenting with different mediums of art. She is a craft connoisseur, always excited about a new DIY project she can recreate. LaJune is active on social media, and shares her creations as a way to communicate with others."),n.createElement("p",null,"Hoping to reflect her knowledge and passion on others, she participates as a volunteer and mentor in many Hive and Maker Party events."))),n.createElement("div",{className:"col kathryn"},n.createElement(r,{name:"Kathryn",location:"Canada",occupation:"Teacher, Coder",motivators:"Attention,Community,Ambition,Self Expression"},n.createElement("p",null,"Now heading-up Toronto’s Ladies Learning Code chapter, Kathryn hosts workshops for kids using Webmaker tools, like Thimble and X-Ray Goggles, and is routinely involved in Mozilla community events."),n.createElement("p",null,"Learning to code at a young age, she has since focused her passions for education and technology toward younger kids by showing them not only how to code, but to build interesting, shareable, open content on the web.")))))),n.createElement("h2",{className:"clearfix"},"Journey"),n.createElement("section",{className:"journey"},n.createElement("div",{className:"subsection"},"To identify and understand our audience, we have been developing a hierarchy based on usage and engagement with technology, the Internet, and the web. As it evolves, and as we learn more about our audience, we will be able to craft better activities and modeling techniques to connect with people as they become better learners, makers, and users of the web."),n.createElement("div",{className:"subsection"},n.createElement("a",{href:"/img/personas/user-journey.jpg"},n.createElement("img",{src:"/img/personas/user-journey.jpg"})))))))}});t.exports=o},{react:216}],6:[function(e,t){"use strict";var n=e("react"),r={getItem:function(e){return e?decodeURIComponent(document.cookie.replace(new RegExp("(?:(?:^|.*;)\\s*"+encodeURIComponent(e).replace(/[\-\.\+\*]/g,"\\$&")+"\\s*\\=\\s*([^;]*).*$)|^.*$"),"$1"))||null:null},setItem:function(e,t,n,r,o,i){if(!e||/^(?:expires|max\-age|path|domain|secure)$/i.test(e))return!1;var a="";if(n)switch(n.constructor){case Number:a=1/0===n?"; expires=Fri, 31 Dec 9999 23:59:59 GMT":"; max-age="+n;break;case String:a="; expires="+n;break;case Date:a="; expires="+n.toUTCString()}return document.cookie=encodeURIComponent(e)+"="+encodeURIComponent(t)+a+(o?"; domain="+o:"")+(r?"; path="+r:"")+(i?"; secure":""),!0},removeItem:function(e,t,n){return this.hasItem(e)?(document.cookie=encodeURIComponent(e)+"=; expires=Thu, 01 Jan 1970 00:00:00 GMT"+(n?"; domain="+n:"")+(t?"; path="+t:""),!0):!1},hasItem:function(e){return e?new RegExp("(?:^|;\\s*)"+encodeURIComponent(e).replace(/[\-\.\+\*]/g,"\\$&")+"\\s*\\=").test(document.cookie):!1},keys:function(){for(var e=document.cookie.replace(/((?:^|\s*;)[^\=]+)(?=;|$)|^\s*|\s*(?:\=[^;]*)?(?:\1|$)/g,"").split(/\s*(?:\=[^;]*)?;\s*/),t=e.length,n=0;t>n;n++)e[n]=decodeURIComponent(e[n]);return e}},o={onLoad:function(){var e=r.getItem("github");if(!e)return{loggedIn:!1,details:null};try{var t=JSON.parse(e.slice(2));return t?(localStorage.github=JSON.stringify(t),{loggedIn:!0,details:t}):{loggedIn:!1,details:null}}catch(n){return{loggedIn:!1,details:null}}},getCurrentUser:function(){var e=this.onLoad();return e.details&&e.details.login?e.details.login:""},login:function(){if("localhost"===location.hostname)localStorage.github=JSON.stringify({name:"pretend davidascher",handle:"davidascher"}),r.setItem("github","j="+localStorage.github),location.reload();else{var e="/auth/github"+document.location.pathname;window.location=e}},logout:function(){r.removeItem("github"),delete localStorage.github,location.reload()}},i={getInitialState:function(){var e=o.onLoad();return e},login:function(){return o.login()},logout:function(e){e.preventDefault(),o.logout(),this.setState({loggedIn:!1,details:null})}},a=n.createClass({displayName:"AuthBlock",mixins:[i],render:function(){var e=this.state.loggedIn?n.createElement("li",{className:"icon-github auth"},n.createElement("a",{onClick:this.logout},"Sign out")):n.createElement("li",{className:"icon-github auth"},n.createElement("a",{onClick:this.login},"Sign in"));return n.createElement("span",null,e)}});t.exports.AuthBlock=a,t.exports.AuthMixin=i,t.exports.auth=o},{react:216}],7:[function(e,t){"use strict";var n=e("react"),r=n.createClass({displayName:"Design",render:function(){return n.createElement("div",null,n.createElement("div",{className:"header"},n.createElement("h2",null,"Design")),n.createElement("div",{className:"main"},n.createElement("div",{id:"assets"},n.createElement("h2",{className:"clearfix"},"Design"),n.createElement("p",null,"These live on ",n.createElement("a",{href:"https://drive.google.com/drive/u/0/#folders/0B_rbDAen9prkS0N4MXRqaGo4bEE"},"Google Drive")," for now.  Each link below will take you to the relevant subdirectory."),n.createElement("ul",{className:"assets"},n.createElement("li",null,n.createElement("a",{href:"https://drive.google.com/drive/u/0/#folders/0B_rbDAen9prkS0N4MXRqaGo4bEE/0ByGu6IwBft5mNHFHVWNGSmNoNkU"},"Bootstrap")," houses Illustrator files to design using Bootstrap 3 grids"),n.createElement("li",null,n.createElement("a",{href:"https://drive.google.com/drive/u/0/#folders/0B_rbDAen9prkS0N4MXRqaGo4bEE/0B_rbDAen9prkbjJDeVYxMmhUVTQ"},"Templates")," is where we keep starter Sketch files for Webmaker pages"),n.createElement("li",null,n.createElement("a",{href:"https://drive.google.com/drive/u/0/#folders/0B_rbDAen9prkS0N4MXRqaGo4bEE/0B_rbDAen9prkekZVdTJ0VjcxUzg"},"Process")," has assets we use in redpen to indicate process state"),n.createElement("li",null,n.createElement("a",{href:"https://drive.google.com/drive/u/0/#folders/0B_rbDAen9prkS0N4MXRqaGo4bEE/0B_rbDAen9prkNXpOTzdpZ3NkUU0"},"Patterns")," tileable patterns"),n.createElement("li",null,n.createElement("a",{href:"https://drive.google.com/drive/u/0/#folders/0B_rbDAen9prkS0N4MXRqaGo4bEE/0B_rbDAen9prkZjRsMDJMa3h0WUE"},"Logos")),n.createElement("li",null,n.createElement("a",{href:"https://drive.google.com/drive/u/0/#folders/0B_rbDAen9prkS0N4MXRqaGo4bEE/0B_rbDAen9prkVmNRWnNIT0JfcHc"},"Icons")),n.createElement("li",null,n.createElement("a",{href:"https://drive.google.com/drive/u/0/#folders/0B_rbDAen9prkS0N4MXRqaGo4bEE/0B_rbDAen9prkUmd1N1lFM3E0dFk"},"Colors"))))))}});t.exports=r},{react:216}],8:[function(e,t){"use strict";var n=e("react"),r=n.createClass({displayName:"Filter",doFilter:function(){var e=this.refs.filterInput.getDOMNode().value;this.props.doFilter(e.toLowerCase())},render:function(){return n.createElement("div",{className:"filterdiv"},n.createElement("input",{className:"filter",type:"text",ref:"filterInput",placeholder:"Filter",value:this.props.query,onChange:this.doFilter}),n.createElement("i",{className:"searchIcon fa fa-search"}))}});t.exports=r},{react:216}],9:[function(e,t){"use strict";var n=function(e,t,n){var r="undefined"!=typeof XMLHttpRequest?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP");r.open("get",e,!0),r.onreadystatechange=function(){var e,o;4===r.readyState&&(e=r.status,200===e?(o=JSON.parse(r.responseText),t&&t(o)):302===e?(o=JSON.parse(r.responseText),window.location.href=o.redirect):n&&n(e))},r.send()};t.exports=n},{}],10:[function(e,t){"use strict";var n=e("react"),r=e("./getJSON.jsx"),o=e("./labels.jsx"),i="/api",a=e("./filter.jsx"),s=new Showdown.converter,u=n.createClass({displayName:"Roles",getInitialState:function(){return{_roles:{Driver:"","Lead Dev":"","Lead Design":"",Quality:""}}},componentDidMount:function(){{var e=this,t=this.props.issueId;new Firebase("https://webmakerbuild.firebaseio.com/issues").child(t).child("_roles").on("value",function(t){var n=t.val();n&&e.setState({_roles:n})})}},render:function(){var e=[],t=0;for(var r in this.state._roles){var o=decodeURIComponent(this.state._roles[r]),r=decodeURIComponent(r);t++,e.push(n.createElement("li",{key:t,className:"role"},n.createElement("span",{className:"role"},r,":"),n.createElement("span",{className:"who"},o)))}return n.createElement("ul",{className:"roles"},e)}}),c=n.createClass({displayName:"Issue",getInitialState:function(){return{}},render:function(){var e=this.props.data;if(!e)return n.createElement("div",null);var t=e.body.split("\n"),r=s.makeHtml(t[0]),i=function(){location.href=e.html_url},a=e.assignee?n.createElement("img",{src:e.assignee.avatar_url,title:"Assigned to",alt:e.assignee.login}):n.createElement("img",{src:e.user.avatar_url,title:"Created by",alt:e.user.login});return n.createElement("li",{className:"issue clearfix",onClick:i},n.createElement("div",{className:"left"},a,n.createElement("h3",null,e.title),n.createElement("p",null,n.createElement("span",{dangerouslySetInnerHTML:{__html:r}})),n.createElement(o,{labels:e.labels})),n.createElement("div",{className:"right"},n.createElement(u,{issueId:this.props.data.id})),n.createElement("div",{className:"clearfix"}))}}),l=n.createClass({displayName:"IssuesList",getInitialState:function(){return{issues:[]}},render:function(){var e=this.props.issues.map(function(e){return n.createElement(c,{key:e.id,data:e})});return n.createElement("ul",{className:"issues"},e)}}),p=n.createClass({displayName:"Heartbeat",getInitialState:function(){return{full:{p1:[],p2:[]},filtered:{p1:[],p2:[]}}},componentDidMount:function(){var e=this;r(i+"/"+e.props.path,function(t){e.isMounted()&&e.setState({full:{p1:t.issues.p1,p2:t.issues.p2},filtered:{p1:t.issues.p1,p2:t.issues.p2}})},function(){})},doFilter:function(e){var t=[],n=[];""==e&&this.setState({filtered:{p1:this.state.full.p1,p2:this.state.full.p2}}),this.state.full.p1.forEach(function(n){var r=n.labels.map(function(e){return e.name}).join(",");(-1!=n.title.toLowerCase().indexOf(e)||-1!=n.body.toLowerCase().indexOf(e)||-1!=r.toLowerCase().indexOf(e))&&t.push(n)}),this.state.full.p2.forEach(function(t){var r=t.labels.map(function(e){return e.name}).join(",");(-1!=t.title.toLowerCase().indexOf(e)||-1!=t.body.toLowerCase().indexOf(e)||-1!=r.toLowerCase().indexOf(e))&&n.push(t)}),this.setState({filtered:{p1:t,p2:n}})},render:function(){var e,t;return e=this.state.filtered.p1.length?n.createElement("div",null,n.createElement("h2",null,"Top Priorities"),n.createElement(l,{issues:this.state.filtered.p1})):null,t=this.state.filtered.p2.length?n.createElement("div",null,n.createElement("h2",null,"Other Priorities"),n.createElement(l,{issues:this.state.filtered.p2})):null,n.createElement("div",null,n.createElement("div",{className:"header"},n.createElement("h2",null,this.props.title)),n.createElement("div",{className:"filterdiv"},n.createElement(a,{className:"filter",fullset:this.state.query,doFilter:this.doFilter})),n.createElement("div",{className:"main"},n.createElement("div",{id:"sprint"},e,t)))}}),h=n.createClass({displayName:"Now",render:function(){return n.createElement(p,{path:"now",title:"Current Heartbeat"})}}),d=n.createClass({displayName:"Next",render:function(){return n.createElement(p,{path:"next",title:"Next Heartbeat"})}});t.exports.Now=h,t.exports.Next=d},{"./filter.jsx":8,"./getJSON.jsx":9,"./labels.jsx":12,react:216}],11:[function(e,t){"use strict";var n=e("react"),r=e("./getJSON.jsx"),o=e("./mentions.jsx"),i=e("./auth.jsx"),a=i.auth,s=i.AuthMixin,u=e("react-router"),c=u.Link,l=e("pluralize"),p={getInitialState:function(){return{items:[],total_count:0}},componentDidMount:function(){var e=this.makeFragment(),t=this;r("/api/github/search/issues"+e,function(e){t.isMounted()&&t.setState(e)},function(){})}},h=n.createClass({displayName:"GithubIssuesSearch",mixins:[p],makeFragment:function(){return"?q="+encodeURIComponent("assignee:"+this.props.handle+" state:open")},render:function(){var e="https://api.github.com/repos/MozillaFoundation/plan/issues",t=this.state.items.filter(function(t){return 0!==t.url.indexOf(e)});if(t=t.map(function(e){return n.createElement("li",{key:e.html_url},n.createElement("a",{href:e.html_url},e.title))}),t.length){var r=l("issue",t.length);return n.createElement("div",{id:"openissues"},n.createElement("h2",null,t.length," open ",r," assigned"),n.createElement("ul",null,t))}return n.createElement("div",{id:"openissues"},n.createElement("h2",null,"No open issues assigned, nice!"))}}),d=n.createClass({displayName:"GithubPRSearch",mixins:[p],makeFragment:function(){return"?q="+encodeURIComponent("assignee:"+this.props.handle)+"+state:open+type:pr"},render:function(){var e=this.state.items.map(function(e){return n.createElement("li",{key:e.html_url},n.createElement("a",{href:e.html_url},e.title))});if(e.length){var t=l("request",e.length);return n.createElement("div",{id:"openprs"},n.createElement("h2",null,e.length," open pull ",t),n.createElement("ul",null,e))}return n.createElement("div",{id:"openprs"},n.createElement("h2",null,"No open pull requests, nice!"))}}),f=n.createClass({displayName:"GithubInitiativesSearch",mixins:[p],makeFragment:function(){return"?q="+encodeURIComponent("assignee:"+this.props.handle)+"+state:open+org:MozillaFoundation+repo:plan"},render:function(){var e=this.state.items.map(function(e){return n.createElement("li",{key:e.html_url},n.createElement("a",{href:e.html_url},e.title))});if(e.length){var t=l("initiative",e.length);return n.createElement("div",{id:"openinitiatives"},n.createElement("h2",null,e.length," open ",t," assigned"),n.createElement("ul",null,e))}return n.createElement("div",{id:"openinitiatives"},n.createElement("h2",null,"No open initiatives assigned."))}}),m=n.createClass({displayName:"Dashboard",mixins:[s],getInitialState:function(){var e=a.getCurrentUser();return e?{handle:e}:{}},render:function(){var e=this.state.handle;return n.createElement("div",{id:"dashboard"},n.createElement("div",{className:"header"},n.createElement("h2",null,"Dashboard for ",this.state.details.name)),n.createElement("div",{className:"main"},n.createElement(f,{handle:e}),n.createElement(d,{handle:e}),n.createElement(h,{handle:e}),n.createElement(o,{handle:e})))}}),v=n.createClass({displayName:"Splash",render:function(){return n.createElement("div",{id:"splash"},n.createElement("div",{className:"masthead"},n.createElement("div",{className:"wrap"},n.createElement("h1",null,"Let's Build Webmaker Together"),n.createElement("div",{className:"center"},n.createElement(c,{className:"button btn-white",to:"add"},"Add Project"),n.createElement(c,{className:"button btn-white",to:"now"},"This Heartbeat")))),n.createElement("div",{className:"copy"},n.createElement("div",{className:"wrap"},n.createElement("div",{className:"center"},n.createElement("h4",null,"Our Mission")),n.createElement("div",{className:"columns"},n.createElement("p",null,"The Mozilla Foundation is a non-profit organization","that promotes openness, innovation and participation on","the Internet. We promote the values of an open Internet","to the broader world."),n.createElement("p",null,"Mozilla is best known for the Firefox browser, but we","advance our mission through other software projects, grants","and engagement and education efforts such as Mozilla Webmaker."),n.createElement("p",null,"Webmaker is all about building a new generation of","digital creators and webmakers, giving people the tools","and skills they need to move from using the web to actively","making the web."),n.createElement("p",null,"If you're interested in supporting our efforts, please","consider getting involved with Mozilla Webmaker, making","a donation or getting involved with the","Mozilla community.")))))}}),g=n.createClass({displayName:"Homepage",mixins:[s],render:function(){return this.state.loggedIn?n.createElement(m,null):n.createElement(v,null)}});t.exports=g},{"./auth.jsx":6,"./getJSON.jsx":9,"./mentions.jsx":13,pluralize:21,react:216,"react-router":31}],12:[function(e,t){"use strict";var n=e("react"),r=n.createClass({displayName:"Labels",render:function(){var e=this.props.labels.map(function(e){var t={backgroundColor:String(e.color),color:parseInt(e.color,16)>8388607.5?"0a3931":"white"};return n.createElement("li",{key:e.name,style:t},e.name)});return n.createElement("ul",{className:"labels"},e)}});t.exports=r},{react:216}],13:[function(e,t){"use strict";var n=e("react"),r=e("reactfire"),o=e("client-firebase"),i=e("./GitHubPerson.jsx"),a=e("./auth.jsx"),s=a.auth,u=n.createClass({displayName:"Mention",getInitialState:function(){return{issue:{state:"open",title:"",url:""}}},componentDidMount:function(){{var e=this;new o("https://debt.firebaseio.com/issues").child(this.props.comment.issue_id).on("value",function(t){var n=t.val();n&&e.setState({issue:n})})}},dismiss:function(e){new o("https://debt.firebaseio.com/asks").child(e).update({dismissed:"true"})},linesplit:function(e){var t=e.split("\n"),r=t.map(function(e){return n.createElement("span",{className:"line"},e)
});return n.createElement("div",null,r)},parseBody:function(e){if(!e)return n.createElement("span",null);var t=e.toLowerCase().indexOf("@"+this.props.handle.toLowerCase()),r=e,o=Math.min(t+("@"+this.props.handle).length+50,e.length),i=e.slice(r,t),a=i.lastIndexOf("\n");-1===a&&(a=0),i=i.slice(a,-1),a=i.lastIndexOf("\n"),-1===a&&(a=0),i=i.slice(a),0!==a&&(i="…"+i);var s=e.slice(t+("@"+this.props.handle).length,o);o!==e.length&&(s+="…");var u=e.slice(t,t+("@"+this.props.handle).length);return n.createElement("span",null,i," ",n.createElement("b",null,u)," ",s)},render:function(){var e=this.props.comment,t="closed"===this.state.issue.state?"mention hidden":"mention",r=e.ref_url,o="";if(r&&(o=r.slice(r.indexOf("/repos/")+"/repos/".length),o=o.slice(0,o.indexOf("/issues/"))),"mention"===this.props.question){var a,u=s.getCurrentUser(),c=this.dismiss.bind(this,this.props.issue_id);a=u===this.props.handle?n.createElement("a",{className:"dismiss",href:"#",onClick:c},n.createElement("i",{className:"fa fa-trash"})):n.createElement("span",null),e.body||console.log("WTF",e);var l=this.parseBody(e.body);return e.dismissed?n.createElement("span",null):n.createElement("li",{className:t},n.createElement("div",{className:"profile-pic-wrap"},n.createElement(i,{handle:e.fromwhom})),n.createElement("div",{className:"mentionblock"},n.createElement("div",null,o,"/",n.createElement("a",{href:e.ref_html_url},this.state.issue.title)," : ",a),n.createElement("div",{className:"comment"},l)))}return n.createElement("li",{className:t},n.createElement("div",{className:"profile-pic-wrap"},n.createElement(i,{handle:e.fromwhom})),n.createElement("div",{className:"mentionblock"},n.createElement("b",null,e.fromwhom)," asked for ",n.createElement("b",null,e.question)," in ",o,"/",n.createElement("a",{href:e.ref_html_url},this.state.issue.title)))}}),c=n.createClass({displayName:"MentionsList",render:function(){var e=[],t=this.props.mentions;for(var r in t)if(t.hasOwnProperty(r)){var o=t[r];for(var i in o)if(o.hasOwnProperty(i))for(var a in o[i])if(o[i].hasOwnProperty(a)){var s=o[i][a];if(s.type===this.props.type){var c=this.props.handle+"/"+r+"/"+i+"/"+s.issue_id;e.push(n.createElement(u,{key:c,issue_id:c,handle:this.props.handle,question:i,comment:s}))}}}return e.length>0?n.createElement("div",null,n.createElement("h2",{className:"mentionsheading"},this.props.title),n.createElement("p",{className:"subheading"},this.props.desc),n.createElement("ul",{className:"mentionsul"}," ",e," ")):n.createElement("div",null)}}),l=n.createClass({displayName:"Mentions",mixins:[r],getInitialState:function(){return{handle:this.props.handle}},componentWillMount:function(){var e=new o("https://debt.firebaseio.com/asks").child(this.state.handle.toLowerCase());this.bindAsObject(e,"mentions")},onChange:function(e){this.setState({handle:e.target.value})},render:function(){return n.createElement("div",null,n.createElement(c,{title:"Pending flags",type:"flag",handle:this.state.handle,mentions:this.state.mentions}),n.createElement(c,{title:"Possibly notable mentions",desc:"(mentions since you commented on an issue or dismissed them using the trash icon)",type:"mention",handle:this.state.handle,mentions:this.state.mentions}))}});t.exports=l},{"./GitHubPerson.jsx":1,"./auth.jsx":6,"client-firebase":20,react:216,reactfire:217}],14:[function(e,t){"use strict";var n=e("react"),r=e("./getJSON.jsx"),o="/api",i=e("./labels.jsx"),a=n.createClass({displayName:"IssueCard",getInitialState:function(){return{}},render:function(){var e=this.props.data;return n.createElement("li",null,n.createElement("a",{href:"{data.html_url}",target:"_blank"},n.createElement("h4",null,e.title),n.createElement(i,{labels:e.labels})))}}),s=n.createClass({displayName:"Upcoming",getInitialState:function(){return{milestones:[]}},componentDidMount:function(){var e=this;r(o+"/upcoming",function(t){e.isMounted()&&e.setState({milestones:t.milestones})},function(){})},render:function(){var e=this.state.milestones.map(function(e){var t=e.issues.map(function(e){return n.createElement(a,{key:e.id,data:e})});return n.createElement("div",{key:e.id},n.createElement("h2",{className:"clearfix"},e.title),n.createElement("ul",{className:"issues"},t))});return n.createElement("div",null,n.createElement("div",{className:"header"},n.createElement("h2",null,"Upcoming")),n.createElement("div",{className:"main"},n.createElement("div",{id:"calendar"},e)))}});t.exports=s},{"./getJSON.jsx":9,"./labels.jsx":12,react:216}],15:[function(e,t,n){function r(e,t,n){if(!(this instanceof r))return new r(e,t,n);var o,i=typeof e;if("number"===i)o=e>0?e>>>0:0;else if("string"===i)o=r.byteLength(e,t);else{if("object"!==i||null===e)throw new TypeError("must start with number, buffer, array or string");"Buffer"===e.type&&L(e.data)&&(e=e.data),o=+e.length>0?Math.floor(+e.length):0}if(o>U)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+U.toString(16)+" bytes");var a;r.TYPED_ARRAY_SUPPORT?a=r._augment(new Uint8Array(o)):(a=this,a.length=o,a._isBuffer=!0);var s;if(r.TYPED_ARRAY_SUPPORT&&"number"==typeof e.byteLength)a._set(e);else if(O(e))if(r.isBuffer(e))for(s=0;o>s;s++)a[s]=e.readUInt8(s);else for(s=0;o>s;s++)a[s]=(e[s]%256+256)%256;else if("string"===i)a.write(e,0,t);else if("number"===i&&!r.TYPED_ARRAY_SUPPORT&&!n)for(s=0;o>s;s++)a[s]=0;return o>0&&o<=r.poolSize&&(a.parent=j),a}function o(e,t,n){if(!(this instanceof o))return new o(e,t,n);var i=new r(e,t,n);return delete i.parent,i}function i(e,t,n,r){n=Number(n)||0;var o=e.length-n;r?(r=Number(r),r>o&&(r=o)):r=o;var i=t.length;if(i%2!==0)throw new Error("Invalid hex string");r>i/2&&(r=i/2);for(var a=0;r>a;a++){var s=parseInt(t.substr(2*a,2),16);if(isNaN(s))throw new Error("Invalid hex string");e[n+a]=s}return a}function a(e,t,n,r){var o=S(D(t,e.length-n),e,n,r);return o}function s(e,t,n,r){var o=S(M(t),e,n,r);return o}function u(e,t,n,r){return s(e,t,n,r)}function c(e,t,n,r){var o=S(T(t),e,n,r);return o}function l(e,t,n,r){var o=S(P(t,e.length-n),e,n,r,2);return o}function p(e,t,n){return I.fromByteArray(0===t&&n===e.length?e:e.slice(t,n))}function h(e,t,n){var r="",o="";n=Math.min(e.length,n);for(var i=t;n>i;i++)e[i]<=127?(r+=k(o)+String.fromCharCode(e[i]),o=""):o+="%"+e[i].toString(16);return r+k(o)}function d(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;n>o;o++)r+=String.fromCharCode(127&e[o]);return r}function f(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;n>o;o++)r+=String.fromCharCode(e[o]);return r}function m(e,t,n){var r=e.length;(!t||0>t)&&(t=0),(!n||0>n||n>r)&&(n=r);for(var o="",i=t;n>i;i++)o+=x(e[i]);return o}function v(e,t,n){for(var r=e.slice(t,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function g(e,t,n){if(e%1!==0||0>e)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function y(e,t,n,o,i,a){if(!r.isBuffer(e))throw new TypeError("buffer must be a Buffer instance");if(t>i||a>t)throw new RangeError("value is out of bounds");if(n+o>e.length)throw new RangeError("index out of range")}function b(e,t,n,r){0>t&&(t=65535+t+1);for(var o=0,i=Math.min(e.length-n,2);i>o;o++)e[n+o]=(t&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function E(e,t,n,r){0>t&&(t=4294967295+t+1);for(var o=0,i=Math.min(e.length-n,4);i>o;o++)e[n+o]=t>>>8*(r?o:3-o)&255}function w(e,t,n,r,o,i){if(t>o||i>t)throw new RangeError("value is out of bounds");if(n+r>e.length)throw new RangeError("index out of range");if(0>n)throw new RangeError("index out of range")}function C(e,t,n,r,o){return o||w(e,t,n,4,3.4028234663852886e38,-3.4028234663852886e38),A.write(e,t,n,r,23,4),n+4}function N(e,t,n,r,o){return o||w(e,t,n,8,1.7976931348623157e308,-1.7976931348623157e308),A.write(e,t,n,r,52,8),n+8}function R(e){if(e=_(e).replace(V,""),e.length<2)return"";for(;e.length%4!==0;)e+="=";return e}function _(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}function O(e){return L(e)||r.isBuffer(e)||e&&"object"==typeof e&&"number"==typeof e.length}function x(e){return 16>e?"0"+e.toString(16):e.toString(16)}function D(e,t){var n,r=e.length,o=null;t=t||1/0;for(var i=[],a=0;r>a;a++){if(n=e.charCodeAt(a),n>55295&&57344>n){if(!o){if(n>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(a+1===r){(t-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(56320>n){(t-=3)>-1&&i.push(239,191,189),o=n;continue}n=o-55296<<10|n-56320|65536,o=null}else o&&((t-=3)>-1&&i.push(239,191,189),o=null);if(128>n){if((t-=1)<0)break;i.push(n)}else if(2048>n){if((t-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(65536>n){if((t-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(2097152>n))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function M(e){for(var t=[],n=0;n<e.length;n++)t.push(255&e.charCodeAt(n));return t}function P(e,t){for(var n,r,o,i=[],a=0;a<e.length&&!((t-=2)<0);a++)n=e.charCodeAt(a),r=n>>8,o=n%256,i.push(o),i.push(r);return i}function T(e){return I.toByteArray(R(e))}function S(e,t,n,r,o){o&&(r-=r%o);for(var i=0;r>i&&!(i+n>=t.length||i>=e.length);i++)t[i+n]=e[i];return i}function k(e){try{return decodeURIComponent(e)}catch(t){return String.fromCharCode(65533)}}var I=e("base64-js"),A=e("ieee754"),L=e("is-array");n.Buffer=r,n.SlowBuffer=o,n.INSPECT_MAX_BYTES=50,r.poolSize=8192;var U=1073741823,j={};r.TYPED_ARRAY_SUPPORT=function(){try{var e=new ArrayBuffer(0),t=new Uint8Array(e);return t.foo=function(){return 42},42===t.foo()&&"function"==typeof t.subarray&&0===new Uint8Array(1).subarray(1,1).byteLength}catch(n){return!1}}(),r.isBuffer=function(e){return!(null==e||!e._isBuffer)},r.compare=function(e,t){if(!r.isBuffer(e)||!r.isBuffer(t))throw new TypeError("Arguments must be Buffers");for(var n=e.length,o=t.length,i=0,a=Math.min(n,o);a>i&&e[i]===t[i];i++);return i!==a&&(n=e[i],o=t[i]),o>n?-1:n>o?1:0},r.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"raw":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},r.concat=function(e,t){if(!L(e))throw new TypeError("Usage: Buffer.concat(list[, length])");if(0===e.length)return new r(0);if(1===e.length)return e[0];var n;if(void 0===t)for(t=0,n=0;n<e.length;n++)t+=e[n].length;var o=new r(t),i=0;for(n=0;n<e.length;n++){var a=e[n];a.copy(o,i),i+=a.length}return o},r.byteLength=function(e,t){var n;switch(e+="",t||"utf8"){case"ascii":case"binary":case"raw":n=e.length;break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":n=2*e.length;break;case"hex":n=e.length>>>1;break;case"utf8":case"utf-8":n=D(e).length;break;case"base64":n=T(e).length;break;default:n=e.length}return n},r.prototype.length=void 0,r.prototype.parent=void 0,r.prototype.toString=function(e,t,n){var r=!1;if(t>>>=0,n=void 0===n||1/0===n?this.length:n>>>0,e||(e="utf8"),0>t&&(t=0),n>this.length&&(n=this.length),t>=n)return"";for(;;)switch(e){case"hex":return m(this,t,n);case"utf8":case"utf-8":return h(this,t,n);case"ascii":return d(this,t,n);case"binary":return f(this,t,n);case"base64":return p(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return v(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}},r.prototype.equals=function(e){if(!r.isBuffer(e))throw new TypeError("Argument must be a Buffer");return 0===r.compare(this,e)},r.prototype.inspect=function(){var e="",t=n.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,t).match(/.{2}/g).join(" "),this.length>t&&(e+=" ... ")),"<Buffer "+e+">"},r.prototype.compare=function(e){if(!r.isBuffer(e))throw new TypeError("Argument must be a Buffer");return r.compare(this,e)},r.prototype.get=function(e){return console.log(".get() is deprecated. Access using array indexes instead."),this.readUInt8(e)},r.prototype.set=function(e,t){return console.log(".set() is deprecated. Access using array indexes instead."),this.writeUInt8(e,t)},r.prototype.write=function(e,t,n,r){if(isFinite(t))isFinite(n)||(r=n,n=void 0);else{var o=r;r=t,t=n,n=o}if(t=Number(t)||0,0>n||0>t||t>this.length)throw new RangeError("attempt to write outside buffer bounds");var p=this.length-t;n?(n=Number(n),n>p&&(n=p)):n=p,r=String(r||"utf8").toLowerCase();var h;switch(r){case"hex":h=i(this,e,t,n);break;case"utf8":case"utf-8":h=a(this,e,t,n);break;case"ascii":h=s(this,e,t,n);break;case"binary":h=u(this,e,t,n);break;case"base64":h=c(this,e,t,n);break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":h=l(this,e,t,n);break;default:throw new TypeError("Unknown encoding: "+r)}return h},r.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}},r.prototype.slice=function(e,t){var n=this.length;e=~~e,t=void 0===t?n:~~t,0>e?(e+=n,0>e&&(e=0)):e>n&&(e=n),0>t?(t+=n,0>t&&(t=0)):t>n&&(t=n),e>t&&(t=e);var o;if(r.TYPED_ARRAY_SUPPORT)o=r._augment(this.subarray(e,t));else{var i=t-e;o=new r(i,void 0,!0);for(var a=0;i>a;a++)o[a]=this[a+e]}return o.length&&(o.parent=this.parent||this),o},r.prototype.readUIntLE=function(e,t,n){e>>>=0,t>>>=0,n||g(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r},r.prototype.readUIntBE=function(e,t,n){e>>>=0,t>>>=0,n||g(e,t,this.length);for(var r=this[e+--t],o=1;t>0&&(o*=256);)r+=this[e+--t]*o;return r},r.prototype.readUInt8=function(e,t){return t||g(e,1,this.length),this[e]},r.prototype.readUInt16LE=function(e,t){return t||g(e,2,this.length),this[e]|this[e+1]<<8},r.prototype.readUInt16BE=function(e,t){return t||g(e,2,this.length),this[e]<<8|this[e+1]},r.prototype.readUInt32LE=function(e,t){return t||g(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},r.prototype.readUInt32BE=function(e,t){return t||g(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},r.prototype.readIntLE=function(e,t,n){e>>>=0,t>>>=0,n||g(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return o*=128,r>=o&&(r-=Math.pow(2,8*t)),r},r.prototype.readIntBE=function(e,t,n){e>>>=0,t>>>=0,n||g(e,t,this.length);for(var r=t,o=1,i=this[e+--r];r>0&&(o*=256);)i+=this[e+--r]*o;return o*=128,i>=o&&(i-=Math.pow(2,8*t)),i},r.prototype.readInt8=function(e,t){return t||g(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},r.prototype.readInt16LE=function(e,t){t||g(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},r.prototype.readInt16BE=function(e,t){t||g(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},r.prototype.readInt32LE=function(e,t){return t||g(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},r.prototype.readInt32BE=function(e,t){return t||g(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},r.prototype.readFloatLE=function(e,t){return t||g(e,4,this.length),A.read(this,e,!0,23,4)},r.prototype.readFloatBE=function(e,t){return t||g(e,4,this.length),A.read(this,e,!1,23,4)},r.prototype.readDoubleLE=function(e,t){return t||g(e,8,this.length),A.read(this,e,!0,52,8)},r.prototype.readDoubleBE=function(e,t){return t||g(e,8,this.length),A.read(this,e,!1,52,8)},r.prototype.writeUIntLE=function(e,t,n,r){e=+e,t>>>=0,n>>>=0,r||y(this,e,t,n,Math.pow(2,8*n),0);var o=1,i=0;for(this[t]=255&e;++i<n&&(o*=256);)this[t+i]=e/o>>>0&255;return t+n},r.prototype.writeUIntBE=function(e,t,n,r){e=+e,t>>>=0,n>>>=0,r||y(this,e,t,n,Math.pow(2,8*n),0);var o=n-1,i=1;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=e/i>>>0&255;return t+n},r.prototype.writeUInt8=function(e,t,n){return e=+e,t>>>=0,n||y(this,e,t,1,255,0),r.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=e,t+1},r.prototype.writeUInt16LE=function(e,t,n){return e=+e,t>>>=0,n||y(this,e,t,2,65535,0),r.TYPED_ARRAY_SUPPORT?(this[t]=e,this[t+1]=e>>>8):b(this,e,t,!0),t+2},r.prototype.writeUInt16BE=function(e,t,n){return e=+e,t>>>=0,n||y(this,e,t,2,65535,0),r.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=e):b(this,e,t,!1),t+2},r.prototype.writeUInt32LE=function(e,t,n){return e=+e,t>>>=0,n||y(this,e,t,4,4294967295,0),r.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=e):E(this,e,t,!0),t+4},r.prototype.writeUInt32BE=function(e,t,n){return e=+e,t>>>=0,n||y(this,e,t,4,4294967295,0),r.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=e):E(this,e,t,!1),t+4},r.prototype.writeIntLE=function(e,t,n,r){e=+e,t>>>=0,r||y(this,e,t,n,Math.pow(2,8*n-1)-1,-Math.pow(2,8*n-1));var o=0,i=1,a=0>e?1:0;for(this[t]=255&e;++o<n&&(i*=256);)this[t+o]=(e/i>>0)-a&255;return t+n},r.prototype.writeIntBE=function(e,t,n,r){e=+e,t>>>=0,r||y(this,e,t,n,Math.pow(2,8*n-1)-1,-Math.pow(2,8*n-1));var o=n-1,i=1,a=0>e?1:0;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=(e/i>>0)-a&255;return t+n},r.prototype.writeInt8=function(e,t,n){return e=+e,t>>>=0,n||y(this,e,t,1,127,-128),r.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),0>e&&(e=255+e+1),this[t]=e,t+1},r.prototype.writeInt16LE=function(e,t,n){return e=+e,t>>>=0,n||y(this,e,t,2,32767,-32768),r.TYPED_ARRAY_SUPPORT?(this[t]=e,this[t+1]=e>>>8):b(this,e,t,!0),t+2},r.prototype.writeInt16BE=function(e,t,n){return e=+e,t>>>=0,n||y(this,e,t,2,32767,-32768),r.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=e):b(this,e,t,!1),t+2},r.prototype.writeInt32LE=function(e,t,n){return e=+e,t>>>=0,n||y(this,e,t,4,2147483647,-2147483648),r.TYPED_ARRAY_SUPPORT?(this[t]=e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):E(this,e,t,!0),t+4},r.prototype.writeInt32BE=function(e,t,n){return e=+e,t>>>=0,n||y(this,e,t,4,2147483647,-2147483648),0>e&&(e=4294967295+e+1),r.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=e):E(this,e,t,!1),t+4},r.prototype.writeFloatLE=function(e,t,n){return C(this,e,t,!0,n)},r.prototype.writeFloatBE=function(e,t,n){return C(this,e,t,!1,n)},r.prototype.writeDoubleLE=function(e,t,n){return N(this,e,t,!0,n)},r.prototype.writeDoubleBE=function(e,t,n){return N(this,e,t,!1,n)},r.prototype.copy=function(e,t,n,o){var i=this;if(n||(n=0),o||0===o||(o=this.length),t>=e.length&&(t=e.length),t||(t=0),o>0&&n>o&&(o=n),o===n)return 0;if(0===e.length||0===i.length)return 0;if(0>t)throw new RangeError("targetStart out of bounds");if(0>n||n>=i.length)throw new RangeError("sourceStart out of bounds");if(0>o)throw new RangeError("sourceEnd out of bounds");o>this.length&&(o=this.length),e.length-t<o-n&&(o=e.length-t+n);var a=o-n;if(1e3>a||!r.TYPED_ARRAY_SUPPORT)for(var s=0;a>s;s++)e[s+t]=this[s+n];else e._set(this.subarray(n,n+a),t);return a},r.prototype.fill=function(e,t,n){if(e||(e=0),t||(t=0),n||(n=this.length),t>n)throw new RangeError("end < start");if(n!==t&&0!==this.length){if(0>t||t>=this.length)throw new RangeError("start out of bounds");if(0>n||n>this.length)throw new RangeError("end out of bounds");var r;if("number"==typeof e)for(r=t;n>r;r++)this[r]=e;else{var o=D(e.toString()),i=o.length;for(r=t;n>r;r++)this[r]=o[r%i]}return this}},r.prototype.toArrayBuffer=function(){if("undefined"!=typeof Uint8Array){if(r.TYPED_ARRAY_SUPPORT)return new r(this).buffer;for(var e=new Uint8Array(this.length),t=0,n=e.length;n>t;t+=1)e[t]=this[t];return e.buffer}throw new TypeError("Buffer.toArrayBuffer not supported in this browser")};var F=r.prototype;r._augment=function(e){return e.constructor=r,e._isBuffer=!0,e._get=e.get,e._set=e.set,e.get=F.get,e.set=F.set,e.write=F.write,e.toString=F.toString,e.toLocaleString=F.toString,e.toJSON=F.toJSON,e.equals=F.equals,e.compare=F.compare,e.copy=F.copy,e.slice=F.slice,e.readUIntLE=F.readUIntLE,e.readUIntBE=F.readUIntBE,e.readUInt8=F.readUInt8,e.readUInt16LE=F.readUInt16LE,e.readUInt16BE=F.readUInt16BE,e.readUInt32LE=F.readUInt32LE,e.readUInt32BE=F.readUInt32BE,e.readIntLE=F.readIntLE,e.readIntBE=F.readIntBE,e.readInt8=F.readInt8,e.readInt16LE=F.readInt16LE,e.readInt16BE=F.readInt16BE,e.readInt32LE=F.readInt32LE,e.readInt32BE=F.readInt32BE,e.readFloatLE=F.readFloatLE,e.readFloatBE=F.readFloatBE,e.readDoubleLE=F.readDoubleLE,e.readDoubleBE=F.readDoubleBE,e.writeUInt8=F.writeUInt8,e.writeUIntLE=F.writeUIntLE,e.writeUIntBE=F.writeUIntBE,e.writeUInt16LE=F.writeUInt16LE,e.writeUInt16BE=F.writeUInt16BE,e.writeUInt32LE=F.writeUInt32LE,e.writeUInt32BE=F.writeUInt32BE,e.writeIntLE=F.writeIntLE,e.writeIntBE=F.writeIntBE,e.writeInt8=F.writeInt8,e.writeInt16LE=F.writeInt16LE,e.writeInt16BE=F.writeInt16BE,e.writeInt32LE=F.writeInt32LE,e.writeInt32BE=F.writeInt32BE,e.writeFloatLE=F.writeFloatLE,e.writeFloatBE=F.writeFloatBE,e.writeDoubleLE=F.writeDoubleLE,e.writeDoubleBE=F.writeDoubleBE,e.fill=F.fill,e.inspect=F.inspect,e.toArrayBuffer=F.toArrayBuffer,e};var V=/[^+\/0-9A-z\-]/g},{"base64-js":16,ieee754:17,"is-array":18}],16:[function(e,t,n){var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";!function(e){"use strict";function t(e){var t=e.charCodeAt(0);return t===a||t===p?62:t===s||t===h?63:u>t?-1:u+10>t?t-u+26+26:l+26>t?t-l:c+26>t?t-c+26:void 0}function n(e){function n(e){c[p++]=e}var r,o,a,s,u,c;if(e.length%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var l=e.length;u="="===e.charAt(l-2)?2:"="===e.charAt(l-1)?1:0,c=new i(3*e.length/4-u),a=u>0?e.length-4:e.length;var p=0;for(r=0,o=0;a>r;r+=4,o+=3)s=t(e.charAt(r))<<18|t(e.charAt(r+1))<<12|t(e.charAt(r+2))<<6|t(e.charAt(r+3)),n((16711680&s)>>16),n((65280&s)>>8),n(255&s);return 2===u?(s=t(e.charAt(r))<<2|t(e.charAt(r+1))>>4,n(255&s)):1===u&&(s=t(e.charAt(r))<<10|t(e.charAt(r+1))<<4|t(e.charAt(r+2))>>2,n(s>>8&255),n(255&s)),c}function o(e){function t(e){return r.charAt(e)}function n(e){return t(e>>18&63)+t(e>>12&63)+t(e>>6&63)+t(63&e)}var o,i,a,s=e.length%3,u="";for(o=0,a=e.length-s;a>o;o+=3)i=(e[o]<<16)+(e[o+1]<<8)+e[o+2],u+=n(i);switch(s){case 1:i=e[e.length-1],u+=t(i>>2),u+=t(i<<4&63),u+="==";break;case 2:i=(e[e.length-2]<<8)+e[e.length-1],u+=t(i>>10),u+=t(i>>4&63),u+=t(i<<2&63),u+="="}return u}var i="undefined"!=typeof Uint8Array?Uint8Array:Array,a="+".charCodeAt(0),s="/".charCodeAt(0),u="0".charCodeAt(0),c="a".charCodeAt(0),l="A".charCodeAt(0),p="-".charCodeAt(0),h="_".charCodeAt(0);e.toByteArray=n,e.fromByteArray=o}("undefined"==typeof n?this.base64js={}:n)},{}],17:[function(e,t,n){n.read=function(e,t,n,r,o){var i,a,s=8*o-r-1,u=(1<<s)-1,c=u>>1,l=-7,p=n?o-1:0,h=n?-1:1,d=e[t+p];for(p+=h,i=d&(1<<-l)-1,d>>=-l,l+=s;l>0;i=256*i+e[t+p],p+=h,l-=8);for(a=i&(1<<-l)-1,i>>=-l,l+=r;l>0;a=256*a+e[t+p],p+=h,l-=8);if(0===i)i=1-c;else{if(i===u)return a?0/0:1/0*(d?-1:1);a+=Math.pow(2,r),i-=c}return(d?-1:1)*a*Math.pow(2,i-r)},n.write=function(e,t,n,r,o,i){var a,s,u,c=8*i-o-1,l=(1<<c)-1,p=l>>1,h=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:i-1,f=r?1:-1,m=0>t||0===t&&0>1/t?1:0;for(t=Math.abs(t),isNaN(t)||1/0===t?(s=isNaN(t)?1:0,a=l):(a=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-a))<1&&(a--,u*=2),t+=a+p>=1?h/u:h*Math.pow(2,1-p),t*u>=2&&(a++,u/=2),a+p>=l?(s=0,a=l):a+p>=1?(s=(t*u-1)*Math.pow(2,o),a+=p):(s=t*Math.pow(2,p-1)*Math.pow(2,o),a=0));o>=8;e[n+d]=255&s,d+=f,s/=256,o-=8);for(a=a<<o|s,c+=o;c>0;e[n+d]=255&a,d+=f,a/=256,c-=8);e[n+d-f]|=128*m}},{}],18:[function(e,t){var n=Array.isArray,r=Object.prototype.toString;t.exports=n||function(e){return!!e&&"[object Array]"==r.call(e)}},{}],19:[function(e,t){function n(){if(!a){a=!0;for(var e,t=i.length;t;){e=i,i=[];for(var n=-1;++n<t;)e[n]();t=i.length}a=!1}}function r(){}var o=t.exports={},i=[],a=!1;o.nextTick=function(e){i.push(e),a||setTimeout(n,0)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.on=r,o.addListener=r,o.once=r,o.off=r,o.removeListener=r,o.removeAllListeners=r,o.emit=r,o.binding=function(){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},{}],20:[function(require,module,exports){!function(){function n(e){return void 0!==e}function ba(){}function ca(e){e.rb=function(){return e.ld?e.ld:e.ld=new e}}function da(e){var t=typeof e;if("object"==t){if(!e)return"null";if(e instanceof Array)return"array";if(e instanceof Object)return t;var n=Object.prototype.toString.call(e);if("[object Window]"==n)return"object";if("[object Array]"==n||"number"==typeof e.length&&"undefined"!=typeof e.splice&&"undefined"!=typeof e.propertyIsEnumerable&&!e.propertyIsEnumerable("splice"))return"array";if("[object Function]"==n||"undefined"!=typeof e.call&&"undefined"!=typeof e.propertyIsEnumerable&&!e.propertyIsEnumerable("call"))return"function"}else if("function"==t&&"undefined"==typeof e.call)return"object";return t}function ea(e){var t=da(e);return"array"==t||"object"==t&&"number"==typeof e.length}function q(e){return"string"==typeof e}function fa(e){return"number"==typeof e}function ga(e){var t=typeof e;return"object"==t&&null!=e||"function"==t}function ha(e){return e.call.apply(e.bind,arguments)}function ia(e,t){if(!e)throw Error();if(2<arguments.length){var n=Array.prototype.slice.call(arguments,2);return function(){var r=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(r,n),e.apply(t,r)}}return function(){return e.apply(t,arguments)}}function r(){return r=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?ha:ia,r.apply(null,arguments)}function ja(e,t){function n(){}n.prototype=t.prototype,e.ke=t.prototype,e.prototype=new n,e.ie=function(e,n){return t.prototype[n].apply(e,Array.prototype.slice.call(arguments,2))}}function ka(a){if(a=String(a),/^\s*$/.test(a)?0:/^[\],:{}\s\u2028\u2029]*$/.test(a.replace(/\\["\\\/bfnrtu]/g,"@").replace(/"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g,"")))try{return eval("("+a+")")}catch(b){}throw Error("Invalid JSON string: "+a)}function la(){this.mc=void 0}function ma(e,t,n){switch(typeof t){case"string":na(t,n);break;case"number":n.push(isFinite(t)&&!isNaN(t)?t:"null");break;case"boolean":n.push(t);break;case"undefined":n.push("null");break;case"object":if(null==t){n.push("null");break}if("array"==da(t)){var r=t.length;n.push("[");for(var o="",i=0;r>i;i++)n.push(o),o=t[i],ma(e,e.mc?e.mc.call(t,String(i),o):o,n),o=",";n.push("]");break}n.push("{"),r="";for(i in t)Object.prototype.hasOwnProperty.call(t,i)&&(o=t[i],"function"!=typeof o&&(n.push(r),na(i,n),n.push(":"),ma(e,e.mc?e.mc.call(t,i,o):o,n),r=","));n.push("}");break;case"function":break;default:throw Error("Unknown type: "+typeof t)}}function na(e,t){t.push('"',e.replace(pa,function(e){if(e in oa)return oa[e];var t=e.charCodeAt(0),n="\\u";return 16>t?n+="000":256>t?n+="00":4096>t&&(n+="0"),oa[e]=n+t.toString(16)}),'"')}function qa(e){return"undefined"!=typeof JSON&&n(JSON.parse)?JSON.parse(e):ka(e)}function u(e){if("undefined"!=typeof JSON&&n(JSON.stringify))e=JSON.stringify(e);else{var t=[];ma(new la,e,t),e=t.join("")}return e}function ra(e){for(var t=[],n=0,r=0;r<e.length;r++){var o=e.charCodeAt(r);o>=55296&&56319>=o&&(o-=55296,r++,v(r<e.length,"Surrogate pair missing trail surrogate."),o=65536+(o<<10)+(e.charCodeAt(r)-56320)),128>o?t[n++]=o:(2048>o?t[n++]=o>>6|192:(65536>o?t[n++]=o>>12|224:(t[n++]=o>>18|240,t[n++]=o>>12&63|128),t[n++]=o>>6&63|128),t[n++]=63&o|128)}return t}function x(e,t,n,r){var o;if(t>r?o="at least "+t:r>n&&(o=0===n?"none":"no more than "+n),o)throw Error(e+" failed: Was called with "+r+(1===r?" argument.":" arguments.")+" Expects "+o+".")}function y(e,t,n){var r="";switch(t){case 1:r=n?"first":"First";break;case 2:r=n?"second":"Second";break;case 3:r=n?"third":"Third";break;case 4:r=n?"fourth":"Fourth";break;default:ta.assert(!1,"errorPrefix_ called with argumentNumber > 4.  Need to update it?")}return e=e+" failed: "+(r+" argument ")}function z(e,t,r,o){if((!o||n(r))&&"function"!=da(r))throw Error(y(e,t,o)+"must be a valid function.")}function ua(e,t,r){if(n(r)&&(!ga(r)||null===r))throw Error(y(e,t,!0)+"must be a valid context object.")}function A(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function va(e,t){return Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0}function ya(e){return q(e)&&0!==e.length&&!wa.test(e)}function za(e,t,r){r&&!n(t)||Aa(y(e,1,r),t)}function Aa(e,t,r,o){if(r||(r=0),o=o||[],!n(t))throw Error(e+"contains undefined"+Ba(o));if("function"==da(t))throw Error(e+"contains a function"+Ba(o)+" with contents: "+t.toString());if(Ca(t))throw Error(e+"contains "+t.toString()+Ba(o));if(r>1e3)throw new TypeError(e+"contains a cyclic object value ("+o.slice(0,100).join(".")+"...)");if(q(t)&&t.length>10485760/3&&10485760<ra(t).length)throw Error(e+"contains a string greater than 10485760 utf8 bytes"+Ba(o)+" ('"+t.substring(0,50)+"...')");if(ga(t))for(var i in t)if(A(t,i)){var a=t[i];if(".priority"!==i&&".value"!==i&&".sv"!==i&&!ya(i))throw Error(e+" contains an invalid key ("+i+")"+Ba(o)+'.  Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');o.push(i),Aa(e,a,r+1,o),o.pop()}}function Ba(e){return 0==e.length?"":" in property '"+e.join(".")+"'"}function Da(e,t){if(!ga(t))throw Error(y(e,1,!1)+" must be an object containing the children to replace.");za(e,t,!1)}function Ea(e,t,r,o){if(!(o&&!n(r)||null===r||fa(r)||q(r)||ga(r)&&A(r,".sv")))throw Error(y(e,t,o)+"must be a valid firebase priority (a string, number, or null).")}function Fa(e,t,r){if(!r||n(t))switch(t){case"value":case"child_added":case"child_removed":case"child_changed":case"child_moved":break;default:throw Error(y(e,1,r)+'must be a valid event type: "value", "child_added", "child_removed", "child_changed", or "child_moved".')}}function Ga(e,t){if(n(t)&&!ya(t))throw Error(y(e,2,!0)+'was an invalid key: "'+t+'".  Firebase keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]").')}function Ha(e,t){if(!q(t)||0===t.length||xa.test(t))throw Error(y(e,1,!1)+'was an invalid path: "'+t+'". Paths must be non-empty strings and can\'t contain ".", "#", "$", "[", or "]"')}function B(e,t){if(".info"===C(t))throw Error(e+" failed: Can't modify data under /.info/")}function D(e,t,r,o,i,a,s){if(this.m=e,this.path=t,this.Ea=r,this.fa=o,this.ya=i,this.Ca=a,this.Wa=s,n(this.fa)&&n(this.Ca)&&n(this.Ea))throw"Query: Can't combine startAt(), endAt(), and limit()."}function Ja(e){var t={};return n(e.fa)&&(t.sp=e.fa),n(e.ya)&&(t.sn=e.ya),n(e.Ca)&&(t.ep=e.Ca),n(e.Wa)&&(t.en=e.Wa),n(e.Ea)&&(t.l=e.Ea),n(e.fa)&&n(e.ya)&&null===e.fa&&null===e.ya&&(t.vf="l"),t}function Ia(e,t,n){var r={};if(t&&n)r.cancel=t,z(e,3,r.cancel,!0),r.Y=n,ua(e,4,r.Y);else if(t)if("object"==typeof t&&null!==t)r.Y=t;else{if("function"!=typeof t)throw Error(sa.je(e,3,!0)+"must either be a cancel callback or a context object.");r.cancel=t}return r}function F(e,t){if(1==arguments.length){this.n=e.split("/");for(var n=0,r=0;r<this.n.length;r++)0<this.n[r].length&&(this.n[n]=this.n[r],n++);this.n.length=n,this.da=0}else this.n=e,this.da=t}function C(e){return e.da>=e.n.length?null:e.n[e.da]}function La(e){var t=e.da;return t<e.n.length&&t++,new F(e.n,t)}function Ma(e){return e.da<e.n.length?e.n[e.n.length-1]:null}function Na(e,t){var n=C(e);if(null===n)return t;if(n===C(t))return Na(La(e),La(t));throw"INTERNAL ERROR: innerPath ("+t+") is not within outerPath ("+e+")"}function Oa(){this.children={},this.yc=0,this.value=null}function Pa(e,t,n){this.Fa=e?e:"",this.Eb=t?t:null,this.B=n?n:new Oa}function I(e,t){for(var n,r=t instanceof F?t:new F(t),o=e;null!==(n=C(r));)o=new Pa(n,o,va(o.B.children,n)||new Oa),r=La(r);return o}function J(e,t){v("undefined"!=typeof t,"Cannot set value to undefined"),e.B.value=t,Qa(e)}function Ra(e,t,n,r){n&&!r&&t(e),e.A(function(e){Ra(e,t,!0,r)}),n&&r&&t(e)}function Sa(e,t,n){for(e=n?e:e.parent();null!==e;){if(t(e))return!0;e=e.parent()}return!1}function Qa(e){if(null!==e.Eb){var t=e.Eb,n=e.Fa,r=e.f(),o=A(t.B.children,n);r&&o?(delete t.B.children[n],t.B.yc--,Qa(t)):r||o||(t.B.children[n]=e.B,t.B.yc++,Qa(t))}}function Ta(e,t){this.Ta=e?e:Ua,this.ea=t?t:Va}function Ua(e,t){return t>e?-1:e>t?1:0}function Wa(e,t){for(var n,r=e.ea,o=null;!r.f();){if(n=e.Ta(t,r.key),0===n){if(r.left.f())return o?o.key:null;for(r=r.left;!r.right.f();)r=r.right;return r.key}0>n?r=r.left:n>0&&(o=r,r=r.right)}throw Error("Attempted to find predecessor key for a nonexistent key.  What gives?")
}function Xa(e,t){for(this.ud=t,this.Zb=[];!e.f();)this.Zb.push(e),e=e.left}function Ya(e){if(0===e.Zb.length)return null;var t,n=e.Zb.pop();for(t=e.ud?e.ud(n.key,n.value):{key:n.key,value:n.value},n=n.right;!n.f();)e.Zb.push(n),n=n.left;return t}function Za(e,t,n,r,o){this.key=e,this.value=t,this.color=null!=n?n:!0,this.left=null!=r?r:Va,this.right=null!=o?o:Va}function bb(e){return e.left.f()?e:bb(e.left)}function db(e){return e.left.f()?Va:(e.left.Q()||e.left.left.Q()||(e=eb(e)),e=e.J(null,null,null,db(e.left),null),cb(e))}function cb(e){return e.right.Q()&&!e.left.Q()&&(e=hb(e)),e.left.Q()&&e.left.left.Q()&&(e=fb(e)),e.left.Q()&&e.right.Q()&&(e=gb(e)),e}function eb(e){return e=gb(e),e.right.left.Q()&&(e=e.J(null,null,null,null,fb(e.right)),e=hb(e),e=gb(e)),e}function hb(e){return e.right.J(null,null,e.color,e.J(null,null,!0,null,e.right.left),null)}function fb(e){return e.left.J(null,null,e.color,null,e.J(null,null,!0,e.left.right,null))}function gb(e){return e.J(null,null,!e.color,e.left.J(null,null,!e.left.color,null,null),e.right.J(null,null,!e.right.color,null,null))}function ib(){}function jb(e){this.Ub=e,this.hc="firebase:"}function kb(){this.nb={}}function lb(e){try{if("undefined"!=typeof window&&"undefined"!=typeof window[e]){var t=window[e];return t.setItem("firebase:sentinel","cache"),t.removeItem("firebase:sentinel"),new jb(t)}}catch(n){}return new kb}function ob(e,t,n,r){this.host=e.toLowerCase(),this.domain=this.host.substr(this.host.indexOf(".")+1),this.nc=t,this.Yb=n,this.ge=r,this.ha=mb.get("host:"+e)||this.host}function pb(e,t){t!==e.ha&&(e.ha=t,"s-"===e.ha.substr(0,2)&&mb.set("host:"+e.host,e.ha))}function qb(){this.qa=-1}function rb(){this.qa=-1,this.qa=64,this.C=[],this.xc=[],this.Ed=[],this.ec=[],this.ec[0]=128;for(var e=1;e<this.qa;++e)this.ec[e]=0;this.rc=this.$a=0,this.reset()}function sb(e,t,n){n||(n=0);var r=e.Ed;if(q(t))for(var o=0;16>o;o++)r[o]=t.charCodeAt(n)<<24|t.charCodeAt(n+1)<<16|t.charCodeAt(n+2)<<8|t.charCodeAt(n+3),n+=4;else for(o=0;16>o;o++)r[o]=t[n]<<24|t[n+1]<<16|t[n+2]<<8|t[n+3],n+=4;for(o=16;80>o;o++){var i=r[o-3]^r[o-8]^r[o-14]^r[o-16];r[o]=4294967295&(i<<1|i>>>31)}t=e.C[0],n=e.C[1];for(var a,s=e.C[2],u=e.C[3],c=e.C[4],o=0;80>o;o++)40>o?20>o?(i=u^n&(s^u),a=1518500249):(i=n^s^u,a=1859775393):60>o?(i=n&s|u&(n|s),a=2400959708):(i=n^s^u,a=3395469782),i=(t<<5|t>>>27)+i+c+a+r[o]&4294967295,c=u,u=s,s=4294967295&(n<<30|n>>>2),n=t,t=i;e.C[0]=e.C[0]+t&4294967295,e.C[1]=e.C[1]+n&4294967295,e.C[2]=e.C[2]+s&4294967295,e.C[3]=e.C[3]+u&4294967295,e.C[4]=e.C[4]+c&4294967295}function yb(e,t){var n;e:{n=e.length;for(var r=q(e)?e.split(""):e,o=0;n>o;o++)if(o in r&&t.call(void 0,r[o],o,e)){n=o;break e}n=-1}return 0>n?null:q(e)?e.charAt(n):e[n]}function Cb(e){return-1!=zb.indexOf(e)}function Jb(e,t){if(!ea(e))throw Error("encodeByteArray takes an array as a parameter");if(!Hb){Hb={},Ib={};for(var n=0;65>n;n++)Hb[n]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(n),Ib[n]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(n)}for(var n=t?Ib:Hb,r=[],o=0;o<e.length;o+=3){var i=e[o],a=o+1<e.length,s=a?e[o+1]:0,u=o+2<e.length,c=u?e[o+2]:0,l=i>>2,i=(3&i)<<4|s>>4,s=(15&s)<<2|c>>6,c=63&c;u||(c=64,a||(s=64)),r.push(n[l],n[i],n[s],n[c])}return r.join("")}function v(e,t){if(!e)throw Error("Firebase INTERNAL ASSERT FAILED:"+t)}function Lb(e){var t=ra(e);e=new rb,e.update(t);var t=[],n=8*e.rc;56>e.$a?e.update(e.ec,56-e.$a):e.update(e.ec,e.qa-(e.$a-56));for(var r=e.qa-1;r>=56;r--)e.xc[r]=255&n,n/=256;for(sb(e,e.xc),r=n=0;5>r;r++)for(var o=24;o>=0;o-=8)t[n]=e.C[r]>>o&255,++n;return Jb(t)}function Mb(){for(var e="",t=0;t<arguments.length;t++)e=ea(arguments[t])?e+Mb.apply(null,arguments[t]):"object"==typeof arguments[t]?e+u(arguments[t]):e+arguments[t],e+=" ";return e}function K(){if(!0===Ob&&(Ob=!1,null===Nb&&!0===nb.get("logging_enabled")&&Pb(!0)),Nb){var e=Mb.apply(null,arguments);Nb(e)}}function Qb(e){return function(){K(e,arguments)}}function Rb(){if("undefined"!=typeof console){var e="FIREBASE INTERNAL ERROR: "+Mb.apply(null,arguments);"undefined"!=typeof console.error?console.error(e):console.log(e)}}function Sb(){var e=Mb.apply(null,arguments);throw Error("FIREBASE FATAL ERROR: "+e)}function L(){if("undefined"!=typeof console){var e="FIREBASE WARNING: "+Mb.apply(null,arguments);"undefined"!=typeof console.warn?console.warn(e):console.log(e)}}function Ca(e){return fa(e)&&(e!=e||e==Number.POSITIVE_INFINITY||e==Number.NEGATIVE_INFINITY)}function Tb(e){if("complete"===document.readyState)e();else{var t=!1,n=function(){document.body?t||(t=!0,e()):setTimeout(n,10)};document.addEventListener?(document.addEventListener("DOMContentLoaded",n,!1),window.addEventListener("load",n,!1)):document.attachEvent&&(document.attachEvent("onreadystatechange",function(){"complete"===document.readyState&&n()}),window.attachEvent("onload",n))}}function Ub(e,t){return e!==t?null===e?-1:null===t?1:typeof e!=typeof t?"number"==typeof e?-1:1:e>t?1:-1:0}function Vb(e,t){if(e===t)return 0;var n=Wb(e),r=Wb(t);return null!==n?null!==r?0==n-r?e.length-t.length:n-r:-1:null!==r?1:t>e?-1:1}function Xb(e,t){if(t&&e in t)return t[e];throw Error("Missing required key ("+e+") in object: "+u(t))}function Ka(e){if("object"!=typeof e||null===e)return u(e);var t,n=[];for(t in e)n.push(t);n.sort(),t="{";for(var r=0;r<n.length;r++)0!==r&&(t+=","),t+=u(n[r]),t+=":",t+=Ka(e[n[r]]);return t+"}"}function Yb(e,t){if(e.length<=t)return[e];for(var n=[],r=0;r<e.length;r+=t)n.push(r+t>e?e.substring(r,e.length):e.substring(r,r+t));return n}function Zb(e,t){if("array"==da(e))for(var n=0;n<e.length;++n)t(n,e[n]);else $b(e,t)}function ac(e,t){return t?r(e,t):e}function bc(e){v(!Ca(e),"Invalid JSON number");var t,n,r,o;for(0===e?(r=n=0,t=-1/0===1/e?1:0):(t=0>e,e=Math.abs(e),e>=Math.pow(2,-1022)?(r=Math.min(Math.floor(Math.log(e)/Math.LN2),1023),n=r+1023,r=Math.round(e*Math.pow(2,52-r)-Math.pow(2,52))):(n=0,r=Math.round(e/Math.pow(2,-1074)))),o=[],e=52;e;e-=1)o.push(r%2?1:0),r=Math.floor(r/2);for(e=11;e;e-=1)o.push(n%2?1:0),n=Math.floor(n/2);for(o.push(t?1:0),o.reverse(),t=o.join(""),n="",e=0;64>e;e+=8)r=parseInt(t.substr(e,8),2).toString(16),1===r.length&&(r="0"+r),n+=r;return n.toLowerCase()}function cc(e){var t="Unknown Error";return"too_big"===e?t="The data requested exceeds the maximum size that can be accessed with a single request.":"permission_denied"==e?t="Client doesn't have permission to access the desired data.":"unavailable"==e&&(t="The service is unavailable"),t=Error(e+": "+t),t.code=e.toUpperCase(),t}function Wb(e){return dc.test(e)&&(e=Number(e),e>=-2147483648&&2147483647>=e)?e:null}function ec(e){try{e()}catch(t){setTimeout(function(){throw t},0)}}function fc(e,t){this.F=e,v(null!==this.F,"LeafNode shouldn't be created with null value."),this.gb="undefined"!=typeof t?t:null}function ic(e,t){return Ub(e.ka,t.ka)||Vb(e.name,t.name)}function jc(e,t){return Vb(e.name,t.name)}function kc(e,t){return Vb(e,t)}function N(e,t){this.o=e||new Ta(kc),this.gb="undefined"!=typeof t?t:null}function lc(e,t,n){N.call(this,e,n),null===t&&(t=new Ta(ic),e.Da(function(e,n){t=t.sa({name:e,ka:n.k()},n)})),this.xa=t}function O(e,t){if(null===e)return M;var n=null;if("object"==typeof e&&".priority"in e?n=e[".priority"]:"undefined"!=typeof t&&(n=t),v(null===n||"string"==typeof n||"number"==typeof n||"object"==typeof n&&".sv"in n,"Invalid priority type found: "+typeof n),"object"==typeof e&&".value"in e&&null!==e[".value"]&&(e=e[".value"]),"object"!=typeof e||".sv"in e)return new fc(e,n);if(e instanceof Array){var r=M,o=e;return $b(o,function(e,t){if(A(o,t)&&"."!==t.substring(0,1)){var n=O(e);(n.P()||!n.f())&&(r=r.H(t,n))}}),r.Ia(n)}var i=[],a={},s=!1,u=e;Zb(u,function(e,t){if("string"!=typeof t||"."!==t.substring(0,1)){var n=O(u[t]);n.f()||(s=s||null!==n.k(),i.push({name:t,ka:n.k()}),a[t]=n)}});var c=nc(i,a,!1);if(s){var l=nc(i,a,!0);return new lc(c,l,n)}return new N(c,n)}function pc(e){this.count=parseInt(Math.log(e+1)/oc,10),this.ed=this.count-1,this.Gd=e+1&parseInt(Array(this.count+1).join("1"),2)}function qc(e){var t=!(e.Gd&1<<e.ed);return e.ed--,t}function nc(e,t,n){function r(o,i){var a=i-o;if(0==a)return null;if(1==a){var a=e[o].name,s=n?e[o]:a;return new Za(s,t[a],!1,null,null)}var s=parseInt(a/2,10)+o,u=r(o,s),c=r(s+1,i),a=e[s].name,s=n?e[s]:a;return new Za(s,t[a],!1,u,c)}var o=n?ic:jc;e.sort(o);var i=function(o){function i(o,i){var c=u-o,l=u;u-=o;var p=e[c].name,c=new Za(n?e[c]:p,t[p],i,null,r(c+1,l));a?a.left=c:s=c,a=c}for(var a=null,s=null,u=e.length,c=0;c<o.count;++c){var l=qc(o),p=Math.pow(2,o.count-(c+1));l?i(p,!1):(i(p,!1),i(p,!0))}return s}(new pc(e.length)),o=n?ic:kc;return null!==i?new Ta(o,i):new Ta(o)}function gc(e){return"number"==typeof e?"number:"+bc(e):"string:"+e}function P(e,t){this.B=e,this.kc=t}function rc(e){v("array"==da(e)&&0<e.length,"Requires a non-empty array"),this.Fd=e,this.wb={}}function sc(e,t){v(yb(e.Fd,function(e){return e===t}),"Unknown event: "+t)}function tc(){rc.call(this,["visible"]);var e,t;if("undefined"!=typeof document&&"undefined"!=typeof document.addEventListener&&("undefined"!=typeof document.hidden?(t="visibilitychange",e="hidden"):"undefined"!=typeof document.mozHidden?(t="mozvisibilitychange",e="mozHidden"):"undefined"!=typeof document.msHidden?(t="msvisibilitychange",e="msHidden"):"undefined"!=typeof document.webkitHidden&&(t="webkitvisibilitychange",e="webkitHidden")),this.lb=!0,t){var n=this;document.addEventListener(t,function(){var t=!document[e];t!==n.lb&&(n.lb=t,n.bd("visible",t))},!1)}}function uc(){if(rc.call(this,["online"]),this.Cb=!0,"undefined"!=typeof window&&"undefined"!=typeof window.addEventListener){var e=this;window.addEventListener("online",function(){e.Cb||e.bd("online",!0),e.Cb=!0},!1),window.addEventListener("offline",function(){e.Cb&&e.bd("online",!1),e.Cb=!1},!1)}}function $b(e,t){for(var n in e)t.call(void 0,e[n],n,e)}function vc(e){var t,n=[],r=0;for(t in e)n[r++]=t;return n}function wc(e){var t,n={};for(t in e)n[t]=e[t];return n}function xc(){this.ob={}}function yc(e,t,r){n(r)||(r=1),A(e.ob,t)||(e.ob[t]=0),e.ob[t]+=r}function zc(e){this.Hd=e,this.Wb=null}function Ac(e,t){this.Zc={},this.qc=new zc(e),this.u=t,setTimeout(r(this.sd,this),10+6e4*Math.random())}function Dc(e){return e=e.toString(),Bc[e]||(Bc[e]=new xc),Bc[e]}function Ec(e,t){var n=e.toString();return Cc[n]||(Cc[n]=t()),Cc[n]}function Q(e,t,n){this.Ac=e,this.e=Qb(this.Ac),this.frames=this.ub=null,this.ad=0,this.aa=Dc(t),this.Ua=(t.nc?"wss://":"ws://")+t.ha+"/.ws?v=5",t.host!==t.ha&&(this.Ua=this.Ua+"&ns="+t.Yb),n&&(this.Ua=this.Ua+"&s="+n)}function Ic(e,t){if(e.frames.push(t),e.frames.length==e.ad){var n=e.frames.join("");e.frames=null,n=qa(n),e.Td(n)}}function Hc(e){clearInterval(e.ub),e.ub=setInterval(function(){e.W&&e.W.send("0"),Hc(e)},45e3)}function Jc(e){this.Pc=e,this.gc=[],this.Va=0,this.zc=-1,this.Na=null}function Kc(e,t,n){e.zc=t,e.Na=n,e.zc<e.Va&&(e.Na(),e.Na=null)}function Lc(e,t,n){for(e.gc[t]=n;e.gc[e.Va];){var r=e.gc[e.Va];delete e.gc[e.Va];for(var o=0;o<r.length;++o)if(r[o]){var i=e;ec(function(){i.Pc(r[o])})}if(e.Va===e.zc){e.Na&&(clearTimeout(e.Na),e.Na(),e.Na=null);break}e.Va++}}function Mc(){this.set={}}function R(e,t){$b(e.set,function(e,n){t(n,e)})}function Nc(e,t,n){this.Ac=e,this.e=Qb(e),this.aa=Dc(t),this.pc=n,this.pb=!1,this.Qb=function(e){t.host!==t.ha&&(e.ns=t.Yb);var n,r=[];for(n in e)e.hasOwnProperty(n)&&r.push(n+"="+e[n]);return(t.nc?"https://":"http://")+t.ha+"/.lp?"+r.join("&")}}function Qc(e,t,n,r){if(this.Qb=r,this.ja=n,this.Rc=new Mc,this.Gb=[],this.Bc=Math.floor(1e8*Math.random()),this.oc=!0,this.sc=Kb(),window["pLPCommand"+this.sc]=e,window["pRTLPCB"+this.sc]=t,e=document.createElement("iframe"),e.style.display="none",!document.body)throw"Document body has not initialized. Wait to initialize Firebase until after the document is ready.";document.body.appendChild(e);try{e.contentWindow.document||K("No IE domain setting required")}catch(o){e.src="javascript:void((function(){document.open();document.domain='"+document.domain+"';document.close();})())"}e.contentDocument?e.Ba=e.contentDocument:e.contentWindow?e.Ba=e.contentWindow.document:e.document&&(e.Ba=e.document),this.Z=e,e="",this.Z.src&&"javascript:"===this.Z.src.substr(0,11)&&(e='<script>document.domain="'+document.domain+'";</script>'),e="<html><body>"+e+"</body></html>";try{this.Z.Ba.open(),this.Z.Ba.write(e),this.Z.Ba.close()}catch(i){K("frame writing exception"),i.stack&&K(i.stack),K(i)}}function Sc(e){if(e.vc&&e.oc&&e.Rc.count()<(0<e.Gb.length?2:1)){e.Bc++;var t={};t.id=e.Rd,t.pw=e.Sd,t.ser=e.Bc;for(var t=e.Qb(t),n="",r=0;0<e.Gb.length&&1870>=e.Gb[0].fd.length+30+n.length;){var o=e.Gb.shift(),n=n+"&seg"+r+"="+o.ae+"&ts"+r+"="+o.fe+"&d"+r+"="+o.fd;r++}return Vc(e,t+n,e.Bc),!0}return!1}function Vc(e,t,n){function r(){e.Rc.remove(n),Sc(e)}e.Rc.add(n);var o=setTimeout(r,25e3);Rc(e,t,function(){clearTimeout(o),r()})}function Rc(e,t,n){setTimeout(function(){try{if(e.oc){var r=e.Z.Ba.createElement("script");r.type="text/javascript",r.async=!0,r.src=t,r.onload=r.onreadystatechange=function(){var e=r.readyState;e&&"loaded"!==e&&"complete"!==e||(r.onload=r.onreadystatechange=null,r.parentNode&&r.parentNode.removeChild(r),n())},r.onerror=function(){K("Long-poll script failed to load: "+t),e.oc=!1,e.close()},e.Z.Ba.body.appendChild(r)}}catch(o){}},1)}function Wc(e){Xc(this,e)}function Xc(e,t){var n=Q&&Q.isAvailable(),r=n&&!(mb.nd||!0===mb.get("previous_websocket_failure"));if(t.ge&&(n||L("wss:// URL used, but browser isn't known to support websockets.  Trying anyway."),r=!0),r)e.Nb=[Q];else{var o=e.Nb=[];Zb(Yc,function(e,t){t&&t.isAvailable()&&o.push(t)})}}function Zc(e){if(0<e.Nb.length)return e.Nb[0];throw Error("No transports available")}function $c(e,t,n,r,o,i){this.id=e,this.e=Qb("c:"+this.id+":"),this.Pc=n,this.Bb=r,this.T=o,this.Oc=i,this.N=t,this.fc=[],this.cd=0,this.Ad=new Wc(t),this.na=0,this.e("Connection created"),ad(this)}function ad(e){var t=Zc(e.Ad);e.K=new t("c:"+e.id+":"+e.cd++,e.N),e.Tc=t.responsesRequiredToBeHealthy||0;var n=bd(e,e.K),r=cd(e,e.K);e.Ob=e.K,e.Lb=e.K,e.w=null,e.ab=!1,setTimeout(function(){e.K&&e.K.open(n,r)},0),t=t.healthyTimeout||0,t>0&&(e.Vb=setTimeout(function(){e.Vb=null,e.ab||(e.e("Closing unhealthy connection after timeout."),e.close())},t))}function cd(e,t){return function(n){t===e.K?(e.K=null,n||0!==e.na?1===e.na&&e.e("Realtime connection lost."):(e.e("Realtime connection failed."),"s-"===e.N.ha.substr(0,2)&&(mb.remove("host:"+e.N.host),e.N.ha=e.N.host)),e.close()):t===e.w?(e.e("Secondary connection lost."),n=e.w,e.w=null,e.Ob!==n&&e.Lb!==n||e.close()):e.e("closing an old connection")}}function bd(e,t){return function(n){if(2!=e.na)if(t===e.Lb){var r=Xb("t",n);if(n=Xb("d",n),"c"==r){if(r=Xb("t",n),"d"in n)if(n=n.d,"h"===r){var r=n.ts,o=n.v,i=n.h;e.pc=n.s,pb(e.N,i),0==e.na&&(e.K.start(),dd(e,e.K,r),"5"!==o&&L("Protocol version mismatch detected"),n=e.Ad,(n=1<n.Nb.length?n.Nb[1]:null)&&ed(e,n))}else if("n"===r){for(e.e("recvd end transmission on primary"),e.Lb=e.w,n=0;n<e.fc.length;++n)e.cc(e.fc[n]);e.fc=[],fd(e)}else"s"===r?(e.e("Connection shutdown command received. Shutting down..."),e.Oc&&(e.Oc(n),e.Oc=null),e.T=null,e.close()):"r"===r?(e.e("Reset packet received.  New host: "+n),pb(e.N,n),1===e.na?e.close():(gd(e),ad(e))):"e"===r?Rb("Server Error: "+n):"o"===r?(e.e("got pong on primary."),hd(e),id(e)):Rb("Unknown control packet command: "+r)}else"d"==r&&e.cc(n)}else if(t===e.w)if(r=Xb("t",n),n=Xb("d",n),"c"==r)"t"in n&&(n=n.t,"a"===n?jd(e):"r"===n?(e.e("Got a reset on secondary, closing it"),e.w.close(),e.Ob!==e.w&&e.Lb!==e.w||e.close()):"o"===n&&(e.e("got pong on secondary."),e.wd--,jd(e)));else{if("d"!=r)throw Error("Unknown protocol layer: "+r);e.fc.push(n)}else e.e("message on old connection")}}function fd(e){e.Ob===e.w&&e.Lb===e.w&&(e.e("cleaning up and promoting a connection: "+e.w.Ac),e.K=e.w,e.w=null)}function jd(e){0>=e.wd?(e.e("Secondary connection is healthy."),e.ab=!0,e.w.Lc(),e.w.start(),e.e("sending client ack on secondary"),e.w.send({t:"c",d:{t:"a",d:{}}}),e.e("Ending transmission on primary"),e.K.send({t:"c",d:{t:"n",d:{}}}),e.Ob=e.w,fd(e)):(e.e("sending ping on secondary."),e.w.send({t:"c",d:{t:"p",d:{}}}))}function hd(e){e.ab||(e.Tc--,0>=e.Tc&&(e.e("Primary connection is healthy."),e.ab=!0,e.K.Lc()))}function ed(e,t){e.w=new t("c:"+e.id+":"+e.cd++,e.N,e.pc),e.wd=t.responsesRequiredToBeHealthy||0,e.w.open(bd(e,e.w),cd(e,e.w)),setTimeout(function(){e.w&&(e.e("Timed out trying to upgrade."),e.w.close())},6e4)}function dd(e,t,n){e.e("Realtime connection established."),e.K=t,e.na=1,e.Bb&&(e.Bb(n),e.Bb=null),0===e.Tc?(e.e("Primary connection is healthy."),e.ab=!0):setTimeout(function(){id(e)},5e3)}function id(e){e.ab||1!==e.na||(e.e("sending ping on primary."),kd(e,{t:"c",d:{t:"p",d:{}}}))}function kd(e,t){if(1!==e.na)throw"Connection is not connected";e.Ob.send(t)}function gd(e){e.e("Shutting down all connections"),e.K&&(e.K.close(),e.K=null),e.w&&(e.w.close(),e.w=null),e.Vb&&(clearTimeout(e.Vb),e.Vb=null)}function ld(e,t,n,r,o,i){this.id=md++,this.e=Qb("p:"+this.id+":"),this.Ra=!0,this.ia={},this.U=[],this.Db=0,this.Ab=[],this.S=!1,this.ua=1e3,this.Xb=3e5,this.dc=t||ba,this.bc=n||ba,this.zb=r||ba,this.Qc=o||ba,this.Gc=i||ba,this.N=e,this.Vc=null,this.Kb={},this.$d=0,this.vb=this.Kc=null,nd(this,0),tc.rb().fb("visible",this.Vd,this),-1===e.host.indexOf("fblocal")&&uc.rb().fb("online",this.Ud,this)}function pd(e,t,n){var r=t.toString(),o=t.path().toString();e.ia[o]=e.ia[o]||{},v(!e.ia[o][r],"listen() called twice for same path/queryId."),e.ia[o][r]={hb:t.hb(),D:n},e.S&&qd(e,o,r,t.hb(),n)}function qd(e,t,n,r,o){e.e("Listen on "+t+" for "+n);var i={p:t};r=vb(r,function(e){return Ja(e)}),"{}"!==n&&(i.q=r),i.h=e.Gc(t),e.Ga("l",i,function(r){e.e("listen response",r),r=r.s,"ok"!==r&&rd(e,t,n),o&&o(r)})}function sd(e){var t=e.Ka;e.S&&t&&e.Ga("auth",{cred:t.Id},function(n){var r=n.s;n=n.d||"error","ok"!==r&&e.Ka===t&&delete e.Ka,e.zb("ok"===r),t.gd?"ok"!==r&&t.Sb&&t.Sb(r,n):(t.gd=!0,t.ba&&t.ba(r,n))})}function td(e,t,n,r){t=t.toString(),rd(e,t,n)&&e.S&&ud(e,t,n,r)}function ud(e,t,n,r){e.e("Unlisten on "+t+" for "+n),t={p:t},r=vb(r,function(e){return Ja(e)}),"{}"!==n&&(t.q=r),e.Ga("u",t)}function vd(e,t,n,r){e.S?wd(e,"o",t,n,r):e.Ab.push({Sc:t,action:"o",data:n,D:r})}function xd(e,t,n,r){e.S?wd(e,"om",t,n,r):e.Ab.push({Sc:t,action:"om",data:n,D:r})}function wd(e,t,n,r,o){n={p:n,d:r},e.e("onDisconnect "+t,n),e.Ga(t,n,function(e){o&&setTimeout(function(){o(e.s,e.d)},0)})}function zd(e,t,n,r){yd(e,"m",t,n,r,void 0)}function yd(e,t,r,o,i,a){r={p:r,d:o},n(a)&&(r.h=a),e.U.push({action:t,td:r,D:i}),e.Db++,t=e.U.length-1,e.S&&Ad(e,t)}function Ad(e,t){var n=e.U[t].action,r=e.U[t].td,o=e.U[t].D;e.U[t].Xd=e.S,e.Ga(n,r,function(r){e.e(n+" response",r),delete e.U[t],e.Db--,0===e.Db&&(e.U=[]),o&&o(r.s,r.d)})}function nd(e,t){v(!e.la,"Scheduling a connect when we're already connected/ing?"),e.Xa&&clearTimeout(e.Xa),e.Xa=setTimeout(function(){e.Xa=null,Cd(e)},t)}function Cd(e){if(e.Ra){e.e("Making a connection attempt"),e.Kc=(new Date).getTime(),e.vb=null;var t=r(e.cc,e),n=r(e.Bb,e),o=r(e.pd,e),i=e.id+":"+od++;e.la=new $c(i,e.N,t,n,o,function(t){L(t+" ("+e.N.toString()+")"),e.Ra=!1})}}function Bd(e,t,n){n=n?vb(n,function(e){return Ka(e)}).join("$"):"{}",(e=rd(e,t,n))&&e.D&&e.D("permission_denied")}function rd(e,t,n){t=new F(t).toString(),n||(n="{}");var r=e.ia[t][n];return delete e.ia[t][n],r}function Dd(){this.o=this.F=null}function Ed(e,t,n){if(t.f())e.F=n,e.o=null;else if(null!==e.F)e.F=e.F.Aa(t,n);else{null==e.o&&(e.o=new Mc);var r=C(t);e.o.contains(r)||e.o.add(r,new Dd),e=e.o.get(r),t=La(t),Ed(e,t,n)}}function Fd(e,t){if(t.f())return e.F=null,e.o=null,!0;if(null!==e.F){if(e.F.P())return!1;var n=e.F;return e.F=null,n.A(function(t,n){Ed(e,new F(t),n)}),Fd(e,t)}return null!==e.o?(n=C(t),t=La(t),e.o.contains(n)&&Fd(e.o.get(n),t)&&e.o.remove(n),e.o.f()?(e.o=null,!0):!1):!0}function Gd(e,t,n){null!==e.F?n(t,e.F):e.A(function(e,r){var o=new F(t.toString()+"/"+e);Gd(r,o,n)})}function Hd(){this.$=M}function S(e,t){return e.$.L(t)}function T(e,t,n){e.$=e.$.Aa(t,n)}function Id(){this.va=new Hd,this.M=new Hd,this.pa=new Hd,this.Fb=new Pa}function Jd(e,t,n){return T(e.va,t,n),Kd(e,t)}function Kd(e,t){for(var n=S(e.va,t),r=S(e.M,t),o=I(e.Fb,t),i=!1,a=o;null!==a;){if(null!==a.j()){i=!0;break}a=a.parent()}return i?!1:(n=Ld(n,r,o),n!==r?(T(e.M,t,n),!0):!1)}function Ld(e,t,n){return n.f()?e:null!==n.j()?t:(e=e||M,n.A(function(r){r=r.name();var o=e.O(r),i=t.O(r),a=I(n,r),o=Ld(o,i,a);e=e.H(r,o)}),e)}function Md(e,t){ub(t,function(t){var n=t.be;t=I(e.Fb,t.path);var r=t.j();v(null!==r,"pendingPut should not be null."),r===n&&J(t,null)})}function Nd(e,t){return e&&"object"==typeof e?(v(".sv"in e,"Unexpected leaf node or priority contents"),t[e[".sv"]]):e}function Od(e,t){var n=new Dd;return Gd(e,new F(""),function(e,r){Ed(n,e,Pd(r,t))}),n}function Pd(e,t){var n,r=Nd(e.k(),t);if(e.P()){var o=Nd(e.j(),t);return o!==e.j()||r!==e.k()?new fc(o,r):e}return n=e,r!==e.k()&&(n=n.Ia(r)),e.A(function(e,r){var o=Pd(r,t);o!==r&&(n=n.H(e,o))}),n}function Qd(){this.Ya=[]}function Rd(e,t){if(0!==t.length)for(var n=0;n<t.length;n++)e.Ya.push(t[n])}function Sd(e){var t=e.ba,n=e.yd,r=e.Hb;ec(function(){t(n,r)})}function U(e,t,n,r){this.type=e,this.wa=t,this.ca=n,this.Hb=r}function Td(e){this.R=e,this.ra=[],this.Dc=new Qd}function Ud(e,t,n,r,o){e.ra.push({type:t,ba:n,cancel:r,Y:o}),r=[];var i=Vd(e.i);e.tb&&i.push(new U("value",e.i));for(var a=0;a<i.length;a++)if(i[a].type===t){var s=new E(e.R.m,e.R.path);i[a].ca&&(s=s.G(i[a].ca)),r.push({ba:ac(n,o),yd:new P(i[a].wa,s),Hb:i[a].Hb})}Rd(e.Dc,r)}function Wd(e,t){for(var n=[],r=0;r<t.length;r++){var o=t[r],i=o.type,a=new E(e.R.m,e.R.path);for(t[r].ca&&(a=a.G(t[r].ca)),a=new P(t[r].wa,a),"value"!==o.type||a.sb()?"value"!==o.type&&(i+=" "+a.name()):i+="("+a.V()+")",K(e.R.m.u.id+": event:"+e.R.path+":"+e.R.Pa()+":"+i),i=0;i<e.ra.length;i++){var s=e.ra[i];t[r].type===s.type&&n.push({ba:ac(s.ba,s.Y),yd:a,Hb:o.Hb})}}Rd(e.Dc,n)}function Vd(e){var t=[];if(!e.P()){var n=null;e.A(function(e,r){t.push(new U("child_added",r,e,n)),n=e})}return t}function Xd(e){e.tb||(e.tb=!0,Wd(e,[new U("value",e.i)]))}function Yd(e,t){Td.call(this,e),this.i=t}function Zd(e,t){this.Tb=e,this.Mc=t}function $d(e,t,n,r,o){var i=e.L(n),a=t.L(n);if(r=new Zd(r,o),o=ae(r,n,i,a),a=!i.f()&&!a.f()&&i.k()!==a.k(),o||a)for(i=n,n=o;null!==i.parent();){var s=e.L(i);o=t.L(i);var u=i.parent();if(!r.Tb||I(r.Tb,u).j()){var c=t.L(u),l=[],i=Ma(i);s.f()?(s=c.ga(i,o),l.push(new U("child_added",o,i,s))):o.f()?l.push(new U("child_removed",s,i)):(s=c.ga(i,o),a&&l.push(new U("child_moved",o,i,s)),n&&l.push(new U("child_changed",o,i,s))),r.Mc(u,c,l)}a&&(a=!1,n=!0),i=u}}function ae(e,t,n,r){var o,i=[];return n===r?o=!1:n.P()&&r.P()?o=n.j()!==r.j():n.P()?(be(e,t,M,r,i),o=!0):r.P()?(be(e,t,n,M,i),o=!0):o=be(e,t,n,r,i),o?e.Mc(t,r,i):n.k()!==r.k()&&e.Mc(t,r,null),o}function be(e,t,r,o,i){var a,s,u,c,l=!1,p=!e.Tb||!I(e.Tb,t).f(),h=[],d=[],f=[],m=[],v={},g={};for(a=r.Za(),u=Ya(a),s=o.Za(),c=Ya(s);null!==u||null!==c;)if(r=c,r=null===u?1:null===r?-1:u.key===r.key?0:ic({name:u.key,ka:u.value.k()},{name:r.key,ka:r.value.k()}),0>r?(l=va(v,u.key),n(l)?(f.push({Fc:u,$c:h[l]}),h[l]=null):(g[u.key]=d.length,d.push(u)),l=!0,u=Ya(a)):(r>0?(l=va(g,c.key),n(l)?(f.push({Fc:d[l],$c:c}),d[l]=null):(v[c.key]=h.length,h.push(c)),l=!0):(r=t.G(c.key),(r=ae(e,r,u.value,c.value))&&(m.push(c),l=!0),u.value.k()!==c.value.k()&&(f.push({Fc:u,$c:c}),l=!0),u=Ya(a)),c=Ya(s)),!p&&l)return!0;for(p=0;p<d.length;p++)(v=d[p])&&(r=t.G(v.key),ae(e,r,v.value,M),i.push(new U("child_removed",v.value,v.key)));for(p=0;p<h.length;p++)(v=h[p])&&(r=t.G(v.key),d=o.ga(v.key,v.value),ae(e,r,M,v.value),i.push(new U("child_added",v.value,v.key,d)));for(p=0;p<f.length;p++)v=f[p].Fc,h=f[p].$c,r=t.G(h.key),d=o.ga(h.key,h.value),i.push(new U("child_moved",h.value,h.key,d)),(r=ae(e,r,v.value,h.value))&&m.push(h);for(p=0;p<m.length;p++)e=m[p],d=o.ga(e.key,e.value),i.push(new U("child_changed",e.value,e.key,d));return l}function ce(){this.X=this.za=null,this.set={}}function de(e,t,n){e.add(t,n),e.X||(e.X=n.R.path)}function ee(e){var t=e.za;return e.za=null,t}function fe(e){return e.contains("default")}function ge(e){return null!=e.za&&fe(e)}function he(e,t){Td.call(this,e),this.i=M,this.jc(t,Vd(t))}function ie(e,t,n,r){if(e.P())return null;var o=null;return(r?e.Ec:e.A).call(e,function(e,r){return je(t,e,r)&&(o=e,n--,0===n)?!0:void 0}),o}function je(e,t,n){for(var r=0;r<e.length;r++)if(!e[r](t,n.k()))return!1;return!0}function ke(e,t){this.u=e,this.g=t,this.ac=t.$,this.oa=new Pa}function ne(e,t,n,r,o){var i,a=e.get(t);if(i=a){i=!1;for(var s=a.ra.length-1;s>=0;s--){var u=a.ra[s];if(!(n&&u.type!==n||r&&u.ba!==r||o&&u.Y!==o)&&(a.ra.splice(s,1),i=!0,n&&r))break}}return(n=i&&!(0<a.ra.length))&&e.remove(t),n}function oe(e,t,n,r,o){t=t?t.Pa():null;var i=[];return t&&"default"!==t?ne(e,t,n,r,o)&&i.push(t):ub(e.keys(),function(t){ne(e,t,n,r,o)&&i.push(t)}),i}function pe(e,t,n,r,o,i){var a=t.path(),a=I(e.oa,a);if(n=oe(t,n,r,o,i),t.f()&&J(a,null),r=qe(a),0<n.length&&!r){for(r=a,o=a.parent(),n=!1;!n&&o;){if(i=o.j()){v(!ge(i));var s=r.name(),u=!1;R(i,function(e,t){u=t.Hc(s)||u}),u&&(n=!0)}r=o,o=o.parent()}return r=null,ge(t)||(t=ee(t),r=re(e,a),t&&t()),n?null:r}return null}function se(e,t,n){Ra(I(e.oa,t),function(e){(e=e.j())&&R(e,function(e,t){Xd(t)})},n,!0)}function W(e,t,n){function r(e){do{if(a[e.toString()])return!0;e=e.parent()}while(null!==e);return!1}var o=e.ac,i=e.g.$;e.ac=i;for(var a={},s=0;s<n.length;s++)a[n[s].toString()]=!0;$d(o,i,t,e.oa,function(n,o,i){if(t.contains(n)){var a=r(n);a&&se(e,n,!1),e.ic(n,o,i),a&&se(e,n,!0)}else e.ic(n,o,i)}),r(t)&&se(e,t,!0),te(e,t)}function te(e,t){var n=I(e.oa,t);Ra(n,function(e){(e=e.j())&&R(e,function(e,t){t.Ib()})},!0,!0),Sa(n,function(e){(e=e.j())&&R(e,function(e,t){t.Ib()})},!1)}function qe(e){return Sa(e,function(e){return e.j()&&ge(e.j())})}function me(e,t,n,r,o){if(ge(n)||qe(t))de(n,r,o);else{var i,a;n.f()||(i=n.toString(),a=n.hb()),de(n,r,o),n.setActive(ue(e,n)),i&&a&&td(e.u,n.path(),i,a)}ge(n)&&Ra(t,function(e){(e=e.j())&&(e.za&&e.za(),e.za=null)})}function re(e,t){function n(t){var o=t.j();if(o&&fe(o))r.push(o.path()),null==o.za&&o.setActive(ue(e,o));else{if(o){null!=o.za||o.setActive(ue(e,o));var i={};R(o,function(e,t){t.i.A(function(e){A(i,e)||(i[e]=!0,e=o.path().G(e),r.push(e))})})}t.A(n)}}var r=[];return n(t),r}function ue(e,t){if(e.u){var n,r=e.u,o=t.path(),i=t.toString(),a=t.hb(),s=t.keys(),u=fe(t);return pd(e.u,t,function(r){"ok"!==r?(r=cc(r),L("on() or once() for "+t.path().toString()+" failed: "+r.toString()),ve(e,t,r)):n||(u?se(e,t.path(),!0):ub(s,function(e){(e=t.get(e))&&Xd(e)}),te(e,t.path()))}),function(){n=!0,td(r,o,i,a)}}return ba}function ve(e,t,n){t&&(R(t,function(e,t){for(var r=0;r<t.ra.length;r++){var o=t.ra[r];o.cancel&&ac(o.cancel,o.Y)(n)}}),pe(e,t))}function le(e,t){return"default"===e.Pa()?new Yd(e,t):new he(e,t)}function we(e,t,n,r,o){var i=t.path();t=e.qb(i,t,r,o);var a=M,s=[];return $b(t,function(t,u){var c=new F(u);3===t||1===t?a=a.H(u,r.L(c)):(2===t&&s.push({path:i.G(u),ta:M}),s=s.concat(xe(e,r.L(c),I(n,c),o)))}),[{path:i,ta:a}].concat(s)}function ye(e,t,n,r){var o;e:{var i=I(e.oa,t);o=i.parent();for(var a=[];null!==o;){var s=o.j();if(null!==s){if(fe(s)){o=[{path:t,ta:n}];break e}if(s=e.qb(t,s,n,r),i=va(s,i.name()),3===i||1===i){o=[{path:t,ta:n}];break e}2===i&&a.push({path:t,ta:M})}i=o,o=o.parent()}o=a}return 1!=o.length||o[0].ta.f()&&!n.f()?(a=I(e.oa,t),i=a.j(),null!==i?fe(i)?o.push({path:t,ta:n}):o=o.concat(we(e,i,a,n,r)):o=o.concat(xe(e,n,a,r)),o):o}function xe(e,t,n,r){var o=n.j();if(null!==o)return fe(o)?[{path:n.path(),ta:t}]:we(e,o,n,t,r);var i=[];return n.A(function(n){var o=t.P()?M:t.O(n.name());n=xe(e,o,n,r),i=i.concat(n)}),i}function ze(e){this.N=e,this.aa=Dc(e),this.u=new ld(this.N,r(this.dc,this),r(this.bc,this),r(this.zb,this),r(this.Qc,this),r(this.Gc,this)),this.zd=Ec(e,r(function(){return new Ac(this.aa,this.u)},this)),this.Sa=new Pa,this.Ha=new Hd,this.g=new Id,this.I=new ke(this.u,this.g.pa),this.Ic=new Hd,this.Jc=new ke(null,this.Ic),Ae(this,"connected",!1),Ae(this,"authenticated",!1),this.T=new Dd,this.Cc=0}function Be(e){return e=S(e.Ic,new F(".info/serverTimeOffset")).V()||0,(new Date).getTime()+e}function Ce(e){return e=e={timestamp:Be(e)},e.timestamp=e.timestamp||(new Date).getTime(),e}function Ae(e,t,n){t=new F("/.info/"+t),T(e.Ic,t,O(n)),W(e.Jc,t,[t])}function Ee(e){e.e("onDisconnectEvents");var t=[],n=Ce(e);Gd(Od(e.T,n),new F(""),function(n,r){var o=ye(e.I,n,r,e.g.M);t.push.apply(t,e.g.set(n,o)),o=Fe(e,n),De(e,o),W(e.I,o,[n])}),Md(e.g,t),e.T=new Dd}function Ge(e,t,n,r){var o=O(n);vd(e.u,t.toString(),o.V(!0),function(n,i){"ok"===n&&Ed(e.T,t,o),X(r,n,i)})}function He(e,t,n,r,o){var i=O(n,r);vd(e.u,t.toString(),i.V(!0),function(n,r){"ok"===n&&Ed(e.T,t,i),X(o,n,r)})}function Ie(e,t,n,r){var o,i=!0;for(o in n)i=!1;i?(K("onDisconnect().update() called with empty data.  Don't do anything."),X(r,"ok")):xd(e.u,t.toString(),n,function(o,i){if("ok"===o)for(var a in n){var s=O(n[a]);Ed(e.T,t.G(a),s)}X(r,o,i)})}function Je(e){yc(e.aa,"deprecated_on_disconnect"),e.zd.Zc.deprecated_on_disconnect=!0}function X(e,t,n){e&&ec(function(){if("ok"==t)e(null,n);else{var r=(t||"error").toUpperCase(),o=r;n&&(o+=": "+n),o=Error(o),o.code=r,e(o)}})}function Ke(e,t,r,o,i){function a(){}e.e("transaction on "+t);var s=new E(e,t);if(s.fb("value",a),r={path:t,update:r,D:o,status:null,qd:Kb(),wc:i,vd:0,tc:function(){s.yb("value",a)},uc:null},e.Ha.$=Le(e,e.Ha.$,e.g.M.$,e.Sa),o=r.update(S(e.Ha,t).V()),n(o)){Aa("transaction failed: Data returned ",o),r.status=1,i=I(e.Sa,t);var u=i.j()||[];u.push(r),J(i,u),u="object"==typeof o&&null!==o&&A(o,".priority")?o[".priority"]:S(e.g.M,t).k(),i=Ce(e),o=O(o,u),o=Pd(o,i),T(e.Ha,t,o),r.wc&&(T(e.g.pa,t,o),W(e.I,t,[t])),Me(e)}else r.tc(),r.D&&(e=Ne(e,t),r.D(null,!1,e))}function Me(e,t){var n=t||e.Sa;if(t||Oe(e,n),null!==n.j()){var r=Pe(e,n);v(0<r.length),xb(r,function(e){return 1===e.status})&&Qe(e,n.path(),r)}else n.sb()&&n.A(function(t){Me(e,t)})}function Qe(e,t,n){for(var o=0;o<n.length;o++)v(1===n[o].status,"tryToSendTransactionQueue_: items in queue should all be run."),n[o].status=2,n[o].vd++;var i=S(e.g.M,t).hash();T(e.g.M,t,S(e.g.pa,t));for(var a=S(e.Ha,t).V(!0),s=Kb(),u=Re(n),o=0;o<u.length;o++)J(I(e.g.Fb,u[o]),s);e.u.put(t.toString(),a,function(i){for(e.e("transaction put response",{path:t.toString(),status:i}),o=0;o<u.length;o++){var a=I(e.g.Fb,u[o]),c=a.j();v(null!==c,"sendTransactionQueue_: pendingPut should not be null."),c===s&&(J(a,null),T(e.g.M,u[o],S(e.g.va,u[o])))}if("ok"===i){for(i=[],o=0;o<n.length;o++)n[o].status=3,n[o].D&&(a=Ne(e,n[o].path),i.push(r(n[o].D,null,null,!0,a))),n[o].tc();for(Oe(e,I(e.Sa,t)),Me(e),o=0;o<i.length;o++)ec(i[o])}else{if("datastale"===i)for(o=0;o<n.length;o++)n[o].status=4===n[o].status?5:1;else for(L("transaction at "+t+" failed: "+i),o=0;o<n.length;o++)n[o].status=5,n[o].uc=i;i=De(e,t),W(e.I,i,[t])}},i)}function Re(e){for(var t={},n=0;n<e.length;n++)e[n].wc&&(t[e[n].path.toString()]=e[n].path);e=[];for(var r in t)e.push(t[r]);return e}function De(e,t){var o=Se(e,t),i=o.path(),o=Pe(e,o);if(T(e.g.pa,i,S(e.g.M,i)),T(e.Ha,i,S(e.g.M,i)),0!==o.length){for(var a=S(e.g.pa,i),s=a,u=[],c=0;c<o.length;c++){var l,p=Na(i,o[c].path),h=!1;if(v(null!==p,"rerunTransactionsUnderNode_: relativePath should not be null."),5===o[c].status)h=!0,l=o[c].uc;else if(1===o[c].status)if(25<=o[c].vd)h=!0,l="maxretry";else{var d=a.L(p),f=o[c].update(d.V());if(n(f)){Aa("transaction failed: Data returned ",f);var m=O(f);"object"==typeof f&&null!=f&&A(f,".priority")||(m=m.Ia(d.k())),a=a.Aa(p,m),o[c].wc&&(s=s.Aa(p,m))}else h=!0,l="nodata"}h&&(o[c].status=3,setTimeout(o[c].tc,0),o[c].D&&(h=new E(e,o[c].path),p=new P(a.L(p),h),u.push("nodata"===l?r(o[c].D,null,null,!1,p):r(o[c].D,null,Error(l),!1,p))))}for(T(e.Ha,i,a),T(e.g.pa,i,s),Oe(e,e.Sa),c=0;c<u.length;c++)ec(u[c]);Me(e)}return i}function Se(e,t){for(var n,r=e.Sa;null!==(n=C(t))&&null===r.j();)r=I(r,n),t=La(t);
return r}function Pe(e,t){var n=[];return Te(e,t,n),n.sort(function(e,t){return e.qd-t.qd}),n}function Te(e,t,n){var r=t.j();if(null!==r)for(var o=0;o<r.length;o++)n.push(r[o]);t.A(function(t){Te(e,t,n)})}function Oe(e,t){var n=t.j();if(n){for(var r=0,o=0;o<n.length;o++)3!==n[o].status&&(n[r]=n[o],r++);n.length=r,J(t,0<n.length?n:null)}t.A(function(t){Oe(e,t)})}function Fe(e,t){var n=Se(e,t).path(),r=I(e.Sa,t);return Sa(r,function(e){Ue(e)}),Ue(r),Ra(r,function(e){Ue(e)}),n}function Ue(e){var t=e.j();if(null!==t){for(var n=[],o=-1,i=0;i<t.length;i++)4!==t[i].status&&(2===t[i].status?(v(o===i-1,"All SENT items should be at beginning of queue."),o=i,t[i].status=4,t[i].uc="set"):(v(1===t[i].status),t[i].tc(),t[i].D&&n.push(r(t[i].D,null,Error("set"),!1,null))));for(-1===o?J(e,null):t.length=o+1,i=0;i<n.length;i++)ec(n[i])}}function Ne(e,t){var n=new E(e,t);return new P(S(e.Ha,t),n)}function Le(e,t,n,r){if(r.f())return n;if(null!=r.j())return t;var o=n;return r.A(function(r){var i=r.name(),a=new F(i);r=Le(e,t.L(a),n.L(a),r),o=o.H(i,r)}),o}function Y(){this.ib={}}function $(e,t,n){this.Jb=e,this.X=t,this.Fa=n}function E(e,t){var n,r;if(e instanceof ze)n=e,r=t;else{x("new Firebase",1,2,arguments.length);var o=arguments[0];r=n="";var i=!0,a="";if(q(o)){var s=o.indexOf("//");if(s>=0)var u=o.substring(0,s-1),o=o.substring(s+2);s=o.indexOf("/"),-1===s&&(s=o.length),n=o.substring(0,s);var o=o.substring(s+1),c=n.split(".");if(3==c.length){if(s=c[2].indexOf(":"),i=s>=0?"https"===u||"wss"===u:!0,"firebase"===c[1])Sb(n+" is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead");else for(r=c[0],a="",o=("/"+o).split("/"),s=0;s<o.length;s++)if(0<o[s].length){c=o[s];try{c=decodeURIComponent(c.replace(/\+/g," "))}catch(l){}a+="/"+c}r=r.toLowerCase()}else Sb("Cannot parse Firebase url. Please use https:<YOUR FIREBASE>.firebaseio.com")}if(i||"undefined"!=typeof window&&window.location&&window.location.protocol&&-1!==window.location.protocol.indexOf("https:")&&L("Insecure Firebase access from a secure page. Please use https in calls to new Firebase()."),n=new ob(n,i,r,"ws"===u||"wss"===u),r=new F(a),i=r.toString(),!(u=!q(n.host)||0===n.host.length||!ya(n.Yb))&&(u=0!==i.length)&&(i&&(i=i.replace(/^\/*\.info(\/|$)/,"/")),u=!(q(i)&&0!==i.length&&!xa.test(i))),u)throw Error(y("new Firebase",1,!1)+'must be a valid firebase URL and the path can\'t contain ".", "#", "$", "[", or "]".');if(t){if(!(t instanceof Y))throw Error("Expected a valid Firebase.Context for second argument to new Firebase()");i=t}else i=Y.rb();u=n.toString(),o=va(i.ib,u),o||(o=new ze(n),i.ib[u]=o),n=o}D.call(this,n,r)}function Pb(e,t){v(!t||!0===e||!1===e,"Can't turn on custom loggers persistently."),!0===e?("undefined"!=typeof console&&("function"==typeof console.log?Nb=r(console.log,console):"object"==typeof console.log&&(Nb=function(e){console.log(e)})),t&&nb.set("logging_enabled",!0)):e?Nb=e:(Nb=null,nb.remove("logging_enabled"))}var h,aa=this,oa={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","	":"\\t","":"\\u000b"},pa=/\uffff/.test("￿")?/[\\\"\x00-\x1f\x7f-\uffff]/g:/[\\\"\x00-\x1f\x7f-\xff]/g,sa={},ta={},wa=/[\[\].#$\/]/,xa=/[\[\].#$]/;D.prototype.Uc=function(){return x("Query.ref",0,0,arguments.length),new E(this.m,this.path)},D.prototype.ref=D.prototype.Uc,D.prototype.fb=function(e,t){x("Query.on",2,4,arguments.length),Fa("Query.on",e,!1),z("Query.on",2,t,!1);var n=Ia("Query.on",arguments[2],arguments[3]);return this.m.Rb(this,e,t,n.cancel,n.Y),t},D.prototype.on=D.prototype.fb,D.prototype.yb=function(e,t,n){x("Query.off",0,3,arguments.length),Fa("Query.off",e,!0),z("Query.off",2,t,!0),ua("Query.off",3,n),this.m.lc(this,e,t,n)},D.prototype.off=D.prototype.yb,D.prototype.Wd=function(e,t){function n(a){i&&(i=!1,o.yb(e,n),t.call(r.Y,a))}x("Query.once",2,4,arguments.length),Fa("Query.once",e,!1),z("Query.once",2,t,!1);var r=Ia("Query.once",arguments[2],arguments[3]),o=this,i=!0;this.fb(e,n,function(t){o.yb(e,n),r.cancel&&r.cancel.call(r.Y,t)})},D.prototype.once=D.prototype.Wd,D.prototype.Pd=function(e){if(x("Query.limit",1,1,arguments.length),!fa(e)||Math.floor(e)!==e||0>=e)throw"Query.limit: First argument must be a positive integer.";return new D(this.m,this.path,e,this.fa,this.ya,this.Ca,this.Wa)},D.prototype.limit=D.prototype.Pd,D.prototype.ee=function(e,t){return x("Query.startAt",0,2,arguments.length),Ea("Query.startAt",1,e,!0),Ga("Query.startAt",t),n(e)||(t=e=null),new D(this.m,this.path,this.Ea,e,t,this.Ca,this.Wa)},D.prototype.startAt=D.prototype.ee,D.prototype.Jd=function(e,t){return x("Query.endAt",0,2,arguments.length),Ea("Query.endAt",1,e,!0),Ga("Query.endAt",t),new D(this.m,this.path,this.Ea,this.fa,this.ya,e,t)},D.prototype.endAt=D.prototype.Jd,D.prototype.Pa=function(){var e=Ka(Ja(this));return"{}"===e?"default":e},h=F.prototype,h.toString=function(){for(var e="",t=this.da;t<this.n.length;t++)""!==this.n[t]&&(e+="/"+this.n[t]);return e||"/"},h.parent=function(){if(this.da>=this.n.length)return null;for(var e=[],t=this.da;t<this.n.length-1;t++)e.push(this.n[t]);return new F(e,0)},h.G=function(e){for(var t=[],n=this.da;n<this.n.length;n++)t.push(this.n[n]);if(e instanceof F)for(n=e.da;n<e.n.length;n++)t.push(e.n[n]);else for(e=e.split("/"),n=0;n<e.length;n++)0<e[n].length&&t.push(e[n]);return new F(t,0)},h.f=function(){return this.da>=this.n.length},h.contains=function(e){var t=0;if(this.n.length>e.n.length)return!1;for(;t<this.n.length;){if(this.n[t]!==e.n[t])return!1;++t}return!0},h=Pa.prototype,h.j=function(){return this.B.value},h.sb=function(){return 0<this.B.yc},h.f=function(){return null===this.j()&&!this.sb()},h.A=function(e){for(var t in this.B.children)e(new Pa(t,this,this.B.children[t]))},h.path=function(){return new F(null===this.Eb?this.Fa:this.Eb.path()+"/"+this.Fa)},h.name=function(){return this.Fa},h.parent=function(){return this.Eb},h=Ta.prototype,h.sa=function(e,t){return new Ta(this.Ta,this.ea.sa(e,t,this.Ta).J(null,null,!1,null,null))},h.remove=function(e){return new Ta(this.Ta,this.ea.remove(e,this.Ta).J(null,null,!1,null,null))},h.get=function(e){for(var t,n=this.ea;!n.f();){if(t=this.Ta(e,n.key),0===t)return n.value;0>t?n=n.left:t>0&&(n=n.right)}return null},h.f=function(){return this.ea.f()},h.count=function(){return this.ea.count()},h.xb=function(){return this.ea.xb()},h.bb=function(){return this.ea.bb()},h.Da=function(e){return this.ea.Da(e)},h.Qa=function(e){return this.ea.Qa(e)},h.Za=function(e){return new Xa(this.ea,e)},h=Za.prototype,h.J=function(e,t,n,r,o){return new Za(null!=e?e:this.key,null!=t?t:this.value,null!=n?n:this.color,null!=r?r:this.left,null!=o?o:this.right)},h.count=function(){return this.left.count()+1+this.right.count()},h.f=function(){return!1},h.Da=function(e){return this.left.Da(e)||e(this.key,this.value)||this.right.Da(e)},h.Qa=function(e){return this.right.Qa(e)||e(this.key,this.value)||this.left.Qa(e)},h.xb=function(){return bb(this).key},h.bb=function(){return this.right.f()?this.key:this.right.bb()},h.sa=function(e,t,n){var r,o;return o=this,r=n(e,o.key),o=0>r?o.J(null,null,null,o.left.sa(e,t,n),null):0===r?o.J(null,t,null,null,null):o.J(null,null,null,null,o.right.sa(e,t,n)),cb(o)},h.remove=function(e,t){var n,r;if(n=this,0>t(e,n.key))n.left.f()||n.left.Q()||n.left.left.Q()||(n=eb(n)),n=n.J(null,null,null,n.left.remove(e,t),null);else{if(n.left.Q()&&(n=fb(n)),n.right.f()||n.right.Q()||n.right.left.Q()||(n=gb(n),n.left.left.Q()&&(n=fb(n),n=gb(n))),0===t(e,n.key)){if(n.right.f())return Va;r=bb(n.right),n=n.J(r.key,r.value,null,null,db(n.right))}n=n.J(null,null,null,null,n.right.remove(e,t))}return cb(n)},h.Q=function(){return this.color},h=ib.prototype,h.J=function(){return this},h.sa=function(e,t){return new Za(e,t,null)},h.remove=function(){return this},h.count=function(){return 0},h.f=function(){return!0},h.Da=function(){return!1},h.Qa=function(){return!1},h.xb=function(){return null},h.bb=function(){return null},h.Q=function(){return!1};var Va=new ib;jb.prototype.set=function(e,t){null==t?this.Ub.removeItem(this.hc+e):this.Ub.setItem(this.hc+e,u(t))},jb.prototype.get=function(e){return e=this.Ub.getItem(this.hc+e),null==e?null:qa(e)},jb.prototype.remove=function(e){this.Ub.removeItem(this.hc+e)},jb.prototype.nd=!1,kb.prototype.set=function(e,t){null==t?delete this.nb[e]:this.nb[e]=t},kb.prototype.get=function(e){return A(this.nb,e)?this.nb[e]:null},kb.prototype.remove=function(e){delete this.nb[e]},kb.prototype.nd=!0;var mb=lb("localStorage"),nb=lb("sessionStorage");ob.prototype.toString=function(){return(this.nc?"https://":"http://")+this.host},ja(rb,qb),rb.prototype.reset=function(){this.C[0]=1732584193,this.C[1]=4023233417,this.C[2]=2562383102,this.C[3]=271733878,this.C[4]=3285377520,this.rc=this.$a=0},rb.prototype.update=function(e,t){n(t)||(t=e.length);for(var r=t-this.qa,o=0,i=this.xc,a=this.$a;t>o;){if(0==a)for(;r>=o;)sb(this,e,o),o+=this.qa;if(q(e)){for(;t>o;)if(i[a]=e.charCodeAt(o),++a,++o,a==this.qa){sb(this,i),a=0;break}}else for(;t>o;)if(i[a]=e[o],++a,++o,a==this.qa){sb(this,i),a=0;break}}this.$a=a,this.rc+=t};var tb=Array.prototype,ub=tb.forEach?function(e,t,n){tb.forEach.call(e,t,n)}:function(e,t,n){for(var r=e.length,o=q(e)?e.split(""):e,i=0;r>i;i++)i in o&&t.call(n,o[i],i,e)},vb=tb.map?function(e,t,n){return tb.map.call(e,t,n)}:function(e,t,n){for(var r=e.length,o=Array(r),i=q(e)?e.split(""):e,a=0;r>a;a++)a in i&&(o[a]=t.call(n,i[a],a,e));return o},wb=tb.reduce?function(e,t,n,o){return o&&(t=r(t,o)),tb.reduce.call(e,t,n)}:function(e,t,n,r){var o=n;return ub(e,function(n,i){o=t.call(r,o,n,i,e)}),o},xb=tb.every?function(e,t,n){return tb.every.call(e,t,n)}:function(e,t,n){for(var r=e.length,o=q(e)?e.split(""):e,i=0;r>i;i++)if(i in o&&!t.call(n,o[i],i,e))return!1;return!0},zb;e:{var Ab=aa.navigator;if(Ab){var Bb=Ab.userAgent;if(Bb){zb=Bb;break e}}zb=""}var Db=Cb("Opera")||Cb("OPR"),Eb=Cb("Trident")||Cb("MSIE"),Fb=Cb("Gecko")&&-1==zb.toLowerCase().indexOf("webkit")&&!(Cb("Trident")||Cb("MSIE")),Gb=-1!=zb.toLowerCase().indexOf("webkit");!function(){var e,t="";return Db&&aa.opera?(t=aa.opera.version,"function"==da(t)?t():t):(Fb?e=/rv\:([^\);]+)(\)|;)/:Eb?e=/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/:Gb&&(e=/WebKit\/(\S+)/),e&&(t=(t=e.exec(zb))?t[1]:""),Eb&&(e=(e=aa.document)?e.documentMode:void 0,e>parseFloat(t))?String(e):t)}();var Hb=null,Ib=null,Kb=function(){var e=1;return function(){return e++}}(),Nb=null,Ob=!0,dc=/^-?\d{1,10}$/;h=fc.prototype,h.P=function(){return!0},h.k=function(){return this.gb},h.Ia=function(e){return new fc(this.F,e)},h.O=function(){return M},h.L=function(e){return null===C(e)?this:M},h.ga=function(){return null},h.H=function(e,t){return(new N).H(e,t).Ia(this.gb)},h.Aa=function(e,t){var n=C(e);return null===n?t:this.H(n,M.Aa(La(e),t))},h.f=function(){return!1},h.$b=function(){return 0},h.V=function(e){return e&&null!==this.k()?{".value":this.j(),".priority":this.k()}:this.j()},h.hash=function(){var e="";null!==this.k()&&(e+="priority:"+gc(this.k())+":");var t=typeof this.F,e=e+(t+":"),e="number"===t?e+bc(this.F):e+this.F;return Lb(e)},h.j=function(){return this.F},h.toString=function(){return"string"==typeof this.F?this.F:'"'+this.F+'"'},h=N.prototype,h.P=function(){return!1},h.k=function(){return this.gb},h.Ia=function(e){return new N(this.o,e)},h.H=function(e,t){var n=this.o.remove(e);return t&&t.f()&&(t=null),null!==t&&(n=n.sa(e,t)),t&&null!==t.k()?new lc(n,null,this.gb):new N(n,this.gb)},h.Aa=function(e,t){var n=C(e);if(null===n)return t;var r=this.O(n).Aa(La(e),t);return this.H(n,r)},h.f=function(){return this.o.f()},h.$b=function(){return this.o.count()};var mc=/^\d+$/;h=N.prototype,h.V=function(e){if(this.f())return null;var t={},n=0,r=0,o=!0;if(this.A(function(i,a){t[i]=a.V(e),n++,o&&mc.test(i)?r=Math.max(r,Number(i)):o=!1}),!e&&o&&2*n>r){var i,a=[];for(i in t)a[i]=t[i];return a}return e&&null!==this.k()&&(t[".priority"]=this.k()),t},h.hash=function(){var e="";return null!==this.k()&&(e+="priority:"+gc(this.k())+":"),this.A(function(t,n){var r=n.hash();""!==r&&(e+=":"+t+":"+r)}),""===e?"":Lb(e)},h.O=function(e){return e=this.o.get(e),null===e?M:e},h.L=function(e){var t=C(e);return null===t?this:this.O(t).L(La(e))},h.ga=function(e){return Wa(this.o,e)},h.hd=function(){return this.o.xb()},h.kd=function(){return this.o.bb()},h.A=function(e){return this.o.Da(e)},h.Ec=function(e){return this.o.Qa(e)},h.Za=function(){return this.o.Za()},h.toString=function(){var e="{",t=!0;return this.A(function(n,r){t?t=!1:e+=", ",e+='"'+n+'" : '+r.toString()}),e+="}"};var M=new N;ja(lc,N),h=lc.prototype,h.H=function(e,t){var n=this.O(e),r=this.o,o=this.xa;return null!==n&&(r=r.remove(e),o=o.remove({name:e,ka:n.k()})),t&&t.f()&&(t=null),null!==t&&(r=r.sa(e,t),o=o.sa({name:e,ka:t.k()},t)),new lc(r,o,this.k())},h.ga=function(e,t){var n=Wa(this.xa,{name:e,ka:t.k()});return n?n.name:null},h.A=function(e){return this.xa.Da(function(t,n){return e(t.name,n)})},h.Ec=function(e){return this.xa.Qa(function(t,n){return e(t.name,n)})},h.Za=function(){return this.xa.Za(function(e,t){return{key:e.name,value:t}})},h.hd=function(){return this.xa.f()?null:this.xa.xb().name},h.kd=function(){return this.xa.f()?null:this.xa.bb().name};var oc=Math.log(2);P.prototype.V=function(){return x("Firebase.DataSnapshot.val",0,0,arguments.length),this.B.V()},P.prototype.val=P.prototype.V,P.prototype.Kd=function(){return x("Firebase.DataSnapshot.exportVal",0,0,arguments.length),this.B.V(!0)},P.prototype.exportVal=P.prototype.Kd,P.prototype.G=function(e){x("Firebase.DataSnapshot.child",0,1,arguments.length),fa(e)&&(e=String(e)),Ha("Firebase.DataSnapshot.child",e);var t=new F(e),n=this.kc.G(t);return new P(this.B.L(t),n)},P.prototype.child=P.prototype.G,P.prototype.Hc=function(e){x("Firebase.DataSnapshot.hasChild",1,1,arguments.length),Ha("Firebase.DataSnapshot.hasChild",e);var t=new F(e);return!this.B.L(t).f()},P.prototype.hasChild=P.prototype.Hc,P.prototype.k=function(){return x("Firebase.DataSnapshot.getPriority",0,0,arguments.length),this.B.k()},P.prototype.getPriority=P.prototype.k,P.prototype.forEach=function(e){if(x("Firebase.DataSnapshot.forEach",1,1,arguments.length),z("Firebase.DataSnapshot.forEach",1,e,!1),this.B.P())return!1;var t=this;return this.B.A(function(n,r){return e(new P(r,t.kc.G(n)))})},P.prototype.forEach=P.prototype.forEach,P.prototype.sb=function(){return x("Firebase.DataSnapshot.hasChildren",0,0,arguments.length),this.B.P()?!1:!this.B.f()},P.prototype.hasChildren=P.prototype.sb,P.prototype.name=function(){return x("Firebase.DataSnapshot.name",0,0,arguments.length),this.kc.name()},P.prototype.name=P.prototype.name,P.prototype.$b=function(){return x("Firebase.DataSnapshot.numChildren",0,0,arguments.length),this.B.$b()},P.prototype.numChildren=P.prototype.$b,P.prototype.Uc=function(){return x("Firebase.DataSnapshot.ref",0,0,arguments.length),this.kc},P.prototype.ref=P.prototype.Uc,rc.prototype.bd=function(e){for(var t=this.wb[e]||[],n=0;n<t.length;n++)t[n].ba.apply(t[n].Y,Array.prototype.slice.call(arguments,1))},rc.prototype.fb=function(e,t,n){sc(this,e),this.wb[e]=this.wb[e]||[],this.wb[e].push({ba:t,Y:n}),(e=this.jd(e))&&t.apply(n,e)},rc.prototype.yb=function(e,t,n){sc(this,e),e=this.wb[e]||[];for(var r=0;r<e.length;r++)if(e[r].ba===t&&(!n||n===e[r].Y)){e.splice(r,1);break}},ja(tc,rc),ca(tc),tc.prototype.jd=function(e){return v("visible"===e,"Unknown event type: "+e),[this.lb]},ja(uc,rc),ca(uc),uc.prototype.jd=function(e){return v("online"===e,"Unknown event type: "+e),[this.Cb]},xc.prototype.get=function(){return wc(this.ob)},zc.prototype.get=function(){var e=this.Hd.get(),t=wc(e);if(this.Wb)for(var n in this.Wb)t[n]-=this.Wb[n];return this.Wb=e,t},Ac.prototype.sd=function(){var e,t=this.qc.get(),n={},o=!1;for(e in t)0<t[e]&&A(this.Zc,e)&&(n[e]=t[e],o=!0);o&&(t=this.u,t.S&&(n={c:n},t.e("reportStats",n),t.Ga("s",n))),setTimeout(r(this.sd,this),6e5*Math.random())};var Bc={},Cc={},Fc=null;"undefined"!=typeof MozWebSocket?Fc=MozWebSocket:"undefined"!=typeof WebSocket&&(Fc=WebSocket);var Gc;Q.prototype.open=function(e,t){this.ja=t,this.Td=e,this.e("Websocket connecting to "+this.Ua),this.W=new Fc(this.Ua),this.pb=!1,mb.set("previous_websocket_failure",!0);var n=this;this.W.onopen=function(){n.e("Websocket connected."),n.pb=!0},this.W.onclose=function(){n.e("Websocket connection was disconnected."),n.W=null,n.Oa()},this.W.onmessage=function(e){if(null!==n.W)if(e=e.data,yc(n.aa,"bytes_received",e.length),Hc(n),null!==n.frames)Ic(n,e);else{e:{if(v(null===n.frames,"We already have a frame buffer"),6>=e.length){var t=Number(e);if(!isNaN(t)){n.ad=t,n.frames=[],e=null;break e}}n.ad=1,n.frames=[]}null!==e&&Ic(n,e)}},this.W.onerror=function(e){n.e("WebSocket error.  Closing connection."),(e=e.message||e.data)&&n.e(e),n.Oa()}},Q.prototype.start=function(){},Q.isAvailable=function(){var e=!1;if("undefined"!=typeof navigator&&navigator.userAgent){var t=navigator.userAgent.match(/Android ([0-9]{0,}\.[0-9]{0,})/);t&&1<t.length&&4.4>parseFloat(t[1])&&(e=!0)}return!e&&null!==Fc&&!Gc},Q.responsesRequiredToBeHealthy=2,Q.healthyTimeout=3e4,h=Q.prototype,h.Lc=function(){mb.remove("previous_websocket_failure")},h.send=function(e){Hc(this),e=u(e),yc(this.aa,"bytes_sent",e.length),e=Yb(e,16384),1<e.length&&this.W.send(String(e.length));for(var t=0;t<e.length;t++)this.W.send(e[t])},h.Mb=function(){this.Ma=!0,this.ub&&(clearInterval(this.ub),this.ub=null),this.W&&(this.W.close(),this.W=null)},h.Oa=function(){this.Ma||(this.e("WebSocket is closing itself"),this.Mb(),this.ja&&(this.ja(this.pb),this.ja=null))},h.close=function(){this.Ma||(this.e("WebSocket is being closed"),this.Mb())},h=Mc.prototype,h.add=function(e,t){this.set[e]=null!==t?t:!0},h.contains=function(e){return A(this.set,e)},h.get=function(e){return this.contains(e)?this.set[e]:void 0},h.remove=function(e){delete this.set[e]},h.f=function(){var e;e:{e=this.set;for(var t in e){e=!1;break e}e=!0}return e},h.count=function(){var e,t=this.set,n=0;for(e in t)n++;return n},h.keys=function(){var e=[];return $b(this.set,function(t,n){e.push(n)}),e};var Oc,Pc;Nc.prototype.open=function(e,t){this.dd=0,this.T=t,this.od=new Jc(e),this.Ma=!1;var n=this;this.Ja=setTimeout(function(){n.e("Timed out trying to connect."),n.Oa(),n.Ja=null},3e4),Tb(function(){if(!n.Ma){n.ma=new Qc(function(e,t,r){if(yc(n.aa,"bytes_received",u(arguments).length),n.ma)if(n.Ja&&(clearTimeout(n.Ja),n.Ja=null),n.pb=!0,"start"==e)n.id=t,n.rd=r;else{if("close"!==e)throw Error("Unrecognized command received: "+e);t?(n.ma.oc=!1,Kc(n.od,t,function(){n.Oa()})):n.Oa()}},function(e,t){yc(n.aa,"bytes_received",u(arguments).length),Lc(n.od,e,t)},function(){n.Oa()},n.Qb);var e={start:"t"};e.ser=Math.floor(1e8*Math.random()),n.ma.sc&&(e.cb=n.ma.sc),e.v="5",n.pc&&(e.s=n.pc),e=n.Qb(e),n.e("Connecting via long-poll to "+e),Rc(n.ma,e,function(){})}})},Nc.prototype.start=function(){var e=this.ma,t=this.rd;for(e.Rd=this.id,e.Sd=t,e.vc=!0;Sc(e););e=this.id,t=this.rd,this.eb=document.createElement("iframe");var n={dframe:"t"};n.id=e,n.pw=t,this.eb.src=this.Qb(n),this.eb.style.display="none",document.body.appendChild(this.eb)},Nc.isAvailable=function(){return!(Pc||"object"==typeof window&&window.chrome&&window.chrome.extension&&!/^chrome/.test(window.location.href)||"object"==typeof Windows&&"object"==typeof Windows.he)},h=Nc.prototype,h.Lc=function(){},h.Mb=function(){this.Ma=!0,this.ma&&(this.ma.close(),this.ma=null),this.eb&&(document.body.removeChild(this.eb),this.eb=null),this.Ja&&(clearTimeout(this.Ja),this.Ja=null)},h.Oa=function(){this.Ma||(this.e("Longpoll is closing itself"),this.Mb(),this.T&&(this.T(this.pb),this.T=null))},h.close=function(){this.Ma||(this.e("Longpoll is being closed."),this.Mb())},h.send=function(e){e=u(e),yc(this.aa,"bytes_sent",e.length),e=ra(e),e=Jb(e,!0),e=Yb(e,1840);for(var t=0;t<e.length;t++){var n=this.ma;n.Gb.push({ae:this.dd,fe:e.length,fd:e[t]}),n.vc&&Sc(n),this.dd++}},Qc.prototype.close=function(){if(this.vc=!1,this.Z){this.Z.Ba.body.innerHTML="";var e=this;setTimeout(function(){null!==e.Z&&(document.body.removeChild(e.Z),e.Z=null)},0)}var t=this.ja;t&&(this.ja=null,t())};var Yc=[Nc,Q];$c.prototype.xd=function(e){kd(this,{t:"d",d:e})},$c.prototype.cc=function(e){hd(this),this.Pc(e)},$c.prototype.close=function(){2!==this.na&&(this.e("Closing realtime connection."),this.na=2,gd(this),this.T&&(this.T(),this.T=null))};var md=0,od=0;h=ld.prototype,h.Ga=function(e,t,n){var r=++this.$d;e={r:r,a:e,b:t},this.e(u(e)),v(this.S,"sendRequest_ call when we're not connected not allowed."),this.la.xd(e),n&&(this.Kb[r]=n)},h.mb=function(e,t,n){if(this.Ka={Id:e,gd:!1,ba:t,Sb:n},this.e("Authenticating using credential: "+this.Ka),sd(this),!(t=40==e.length))e:{var r;try{var o=e.split(".");if(3!==o.length){t=!1;break e}var i;t:{try{if("undefined"!=typeof atob){i=atob(o[1]);break t}}catch(a){K("base64DecodeIfNativeSupport failed: ",a)}i=null}null!==i&&(r=qa(i))}catch(s){K("isAdminAuthToken_ failed",s)}t="object"==typeof r&&!0===va(r,"admin")}t&&(this.e("Admin auth credential detected.  Reducing max reconnect time."),this.Xb=3e4)},h.Pb=function(e){delete this.Ka,this.zb(!1),this.S&&this.Ga("unauth",{},function(t){e(t.s,t.d)})},h.Nc=function(e,t){this.S?wd(this,"oc",e,null,t):this.Ab.push({Sc:e,action:"oc",data:null,D:t})},h.put=function(e,t,n,r){yd(this,"p",e,t,n,r)},h.cc=function(e){if("r"in e){this.e("from server: "+u(e));var t=e.r,n=this.Kb[t];n&&(delete this.Kb[t],n(e.b))}else{if("error"in e)throw"A server-side error has occurred: "+e.error;"a"in e&&(t=e.a,n=e.b,this.e("handleServerMessage",t,n),"d"===t?this.dc(n.p,n.d,!1):"m"===t?this.dc(n.p,n.d,!0):"c"===t?Bd(this,n.p,n.q):"ac"===t?(e=n.s,t=n.d,n=this.Ka,delete this.Ka,n&&n.Sb&&n.Sb(e,t),this.zb(!1)):"sd"===t?this.Vc?this.Vc(n):"msg"in n&&"undefined"!=typeof console&&console.log("FIREBASE: "+n.msg.replace("\n","\nFIREBASE: ")):Rb("Unrecognized action received from server: "+u(t)+"\nAre you using the latest client?"))}},h.Bb=function(e){this.e("connection ready"),this.S=!0,this.vb=(new Date).getTime(),this.Qc({serverTimeOffset:e-(new Date).getTime()}),sd(this);for(var t in this.ia)for(var n in this.ia[t])e=this.ia[t][n],qd(this,t,n,e.hb,e.D);for(t=0;t<this.U.length;t++)this.U[t]&&Ad(this,t);for(;this.Ab.length;)t=this.Ab.shift(),wd(this,t.action,t.Sc,t.data,t.D);this.bc(!0)},h.Vd=function(e){e&&!this.lb&&this.ua===this.Xb&&(this.e("Window became visible.  Reducing delay."),this.ua=1e3,this.la||nd(this,0)),this.lb=e},h.Ud=function(e){e?(this.e("Browser went online.  Reconnecting."),this.ua=1e3,this.Ra=!0,this.la||nd(this,0)):(this.e("Browser went offline.  Killing connection; don't reconnect."),this.Ra=!1,this.la&&this.la.close())},h.pd=function(){this.e("data client disconnected"),this.S=!1,this.la=null;for(var e=0;e<this.U.length;e++){var t=this.U[e];t&&"h"in t.td&&t.Xd&&(t.D&&t.D("disconnect"),delete this.U[e],this.Db--)}if(0===this.Db&&(this.U=[]),this.Ra)this.lb?this.vb&&(3e4<(new Date).getTime()-this.vb&&(this.ua=1e3),this.vb=null):(this.e("Window isn't visible.  Delaying reconnect."),this.ua=this.Xb,this.Kc=(new Date).getTime()),e=Math.max(0,this.ua-((new Date).getTime()-this.Kc)),e*=Math.random(),this.e("Trying to reconnect in "+e+"ms"),nd(this,e),this.ua=Math.min(this.Xb,1.3*this.ua);else for(var n in this.Kb)delete this.Kb[n];this.bc(!1)},h.La=function(){this.Ra=!1,this.la?this.la.close():(this.Xa&&(clearTimeout(this.Xa),this.Xa=null),this.S&&this.pd())},h.jb=function(){this.Ra=!0,this.ua=1e3,this.S||nd(this,0)},Dd.prototype.A=function(e){null!==this.o&&R(this.o,function(t,n){e(t,n)})},Hd.prototype.toString=function(){return this.$.toString()},Id.prototype.set=function(e,t){var n=this,r=[];return ub(t,function(e){var t=e.path;e=e.ta;var o=Kb();J(I(n.Fb,t),o),T(n.M,t,e),r.push({path:t,be:o})}),r},Qd.prototype.Ib=function(){for(var e=0;e<this.Ya.length;e++)if(this.Ya[e]){var t=this.Ya[e];this.Ya[e]=null,Sd(t)}this.Ya=[]},Td.prototype.ic=function(e,t){t=this.jc(e,t),null!=t&&Wd(this,t)},Td.prototype.Ib=function(){this.Dc.Ib()},ja(Yd,Td),Yd.prototype.jc=function(e,t){return this.i=e,this.tb&&null!=t&&t.push(new U("value",this.i)),t},Yd.prototype.qb=function(){return{}},ja(ce,Mc),h=ce.prototype,h.setActive=function(e){this.za=e},h.defaultView=function(){return fe(this)?this.get("default"):null},h.path=function(){return this.X},h.toString=function(){return vb(this.keys(),function(e){return"default"===e?"{}":e}).join("$")},h.hb=function(){var e=[];return R(this,function(t,n){e.push(n.R)}),e},ja(he,Td),he.prototype.jc=function(e,t){if(null===t)return t;var r=[],o=this.R;n(o.fa)&&r.push(n(o.ya)&&null!=o.ya?function(e,t){var n=Ub(t,o.fa);return n>0||0===n&&0<=Vb(e,o.ya)}:function(e,t){return 0<=Ub(t,o.fa)}),n(o.Ca)&&r.push(n(o.Wa)?function(e,t){var n=Ub(t,o.Ca);return 0>n||0===n&&0>=Vb(e,o.Wa)}:function(e,t){return 0>=Ub(t,o.Ca)});var i=null,a=null;if(n(this.R.Ea))if(n(this.R.fa)){if(i=ie(e,r,this.R.Ea,!1)){var s=e.O(i).k();r.push(function(e,t){var n=Ub(t,s);return 0>n||0===n&&0>=Vb(e,i)})}}else if(a=ie(e,r,this.R.Ea,!0)){var u=e.O(a).k();r.push(function(e,t){var n=Ub(t,u);return n>0||0===n&&0<=Vb(e,a)})}for(var c=[],l=[],p=[],h=[],d=0;d<t.length;d++){var f=t[d].ca,m=t[d].wa;switch(t[d].type){case"child_added":je(r,f,m)&&(this.i=this.i.H(f,m),l.push(t[d]));break;case"child_removed":this.i.O(f).f()||(this.i=this.i.H(f,null),c.push(t[d]));break;case"child_changed":!this.i.O(f).f()&&je(r,f,m)&&(this.i=this.i.H(f,m),h.push(t[d]));break;case"child_moved":var v=!this.i.O(f).f(),g=je(r,f,m);v?g?(this.i=this.i.H(f,m),p.push(t[d])):(c.push(new U("child_removed",this.i.O(f),f)),this.i=this.i.H(f,null)):g&&(this.i=this.i.H(f,m),l.push(t[d]))}}var y=i||a;if(y){var b=(d=null!==a)?this.i.hd():this.i.kd(),E=!1,w=!1,C=this;(d?e.Ec:e.A).call(e,function(e,t){return w||null!==b||(w=!0),w&&E?!0:(E?(c.push(new U("child_removed",C.i.O(e),e)),C.i=C.i.H(e,null)):w&&(l.push(new U("child_added",t,e)),C.i=C.i.H(e,t)),b===e&&(w=!0),void(e===y&&(E=!0)))})}for(d=0;d<l.length;d++)r=l[d],f=this.i.ga(r.ca,r.wa),c.push(new U("child_added",r.wa,r.ca,f));for(d=0;d<p.length;d++)r=p[d],f=this.i.ga(r.ca,r.wa),c.push(new U("child_moved",r.wa,r.ca,f));for(d=0;d<h.length;d++)r=h[d],f=this.i.ga(r.ca,r.wa),c.push(new U("child_changed",r.wa,r.ca,f));return this.tb&&0<c.length&&c.push(new U("value",this.i)),c},he.prototype.Hc=function(e){return this.i.O(e)!==M},he.prototype.qb=function(e,t,n){var r={};this.i.P()||this.i.A(function(e){r[e]=3});var o=this.i;n=S(n,new F(""));var i=new Pa;J(I(i,this.R.path),!0),t=M.Aa(e,t);var a=this;return $d(n,t,e,i,function(e,t,n){null!==n&&e.toString()===a.R.path.toString()&&a.jc(t,n)}),this.i.P()?$b(r,function(e,t){r[t]=2}):(this.i.A(function(e){A(r,e)||(r[e]=1)}),$b(r,function(e,t){a.i.O(t).f()&&(r[t]=2)})),this.i=o,r},ke.prototype.Rb=function(e,t,n,r,o){var i=e.path,a=I(this.oa,i),s=a.j();null===s?(s=new ce,J(a,s)):v(!s.f(),"We shouldn't be storing empty QueryMaps");var u=e.Pa();if(s.contains(u))e=s.get(u),Ud(e,t,n,r,o);else{var c=this.g.$.L(i);e=le(e,c),me(this,a,s,u,e),Ud(e,t,n,r,o),(t=(t=Sa(I(this.oa,i),function(e){var t;return(t=e.j()&&e.j().defaultView())&&(t=e.j().defaultView().tb),t?!0:void 0},!0))||null===this.u&&!S(this.g,i).f())&&Xd(e)}e.Ib()},ke.prototype.lc=function(e,t,n,r){var o=I(this.oa,e.path).j();return null===o?null:pe(this,o,e,t,n,r)},ke.prototype.ic=function(e,t,n){e=I(this.oa,e).j(),null!==e&&R(e,function(e,r){r.ic(t,n)})},ke.prototype.qb=function(e,t,n,r){function o(e){$b(e,function(e,t){i[t]=3===e?3:(va(i,t)||e)===e?e:3})}var i={};return R(t,function(t,i){o(i.qb(e,n,r))}),n.P()||n.A(function(e){A(i,e)||(i[e]=4)}),i},h=ze.prototype,h.toString=function(){return(this.N.nc?"https://":"http://")+this.N.host},h.name=function(){return this.N.Yb},h.dc=function(e,t,n){this.Cc++,this.md&&(t=this.md(e,t));var r,o,i=[];for(9<=e.length&&e.lastIndexOf(".priority")===e.length-9?(r=new F(e.substring(0,e.length-9)),o=S(this.g.va,r).Ia(t),i.push(r)):n?(r=new F(e),o=S(this.g.va,r),$b(t,function(e,t){var n=new F(t);".priority"===t?o=o.Ia(e):(o=o.Aa(n,O(e)),i.push(r.G(t)))})):(r=new F(e),o=O(t),i.push(r)),e=ye(this.I,r,o,this.g.M),t=!1,n=0;n<e.length;++n){var a=e[n];t=Jd(this.g,a.path,a.ta)||t}t&&(r=De(this,r)),W(this.I,r,i)},h.bc=function(e){Ae(this,"connected",e),!1===e&&Ee(this)},h.Qc=function(e){var t=this;Zb(e,function(e,n){Ae(t,n,e)})},h.Gc=function(e){return e=new F(e),S(this.g.va,e).hash()},h.zb=function(e){Ae(this,"authenticated",e)},h.mb=function(e,t,n){"firebaseio-demo.com"===this.N.domain&&L("FirebaseRef.auth() not supported on demo (*.firebaseio-demo.com) Firebases. Please use on production (*.firebaseio.com) Firebases only."),this.u.mb(e,function(e,n){X(t,e,n)},function(e,t){if(L("auth() was canceled: "+t),n){var r=Error(t);r.code=e.toUpperCase(),n(r)}})},h.Pb=function(e){this.u.Pb(function(t,n){X(e,t,n)})},h.kb=function(e,t,n,r){this.e("set",{path:e.toString(),value:t,ka:n});var o=Ce(this);t=O(t,n);var o=Pd(t,o),o=ye(this.I,e,o,this.g.M),i=this.g.set(e,o),a=this;this.u.put(e.toString(),t.V(!0),function(t,n){"ok"!==t&&L("set at "+e+" failed: "+t),Md(a.g,i),Kd(a.g,e);var o=De(a,e);W(a.I,o,[]),X(r,t,n)}),o=Fe(this,e),De(this,o),W(this.I,o,[e])},h.update=function(e,t,n){this.e("update",{path:e.toString(),value:t});var r,o=S(this.g.pa,e),i=!0,a=[],s=Ce(this),u=[];for(r in t){var i=!1,c=O(t[r]),c=Pd(c,s),o=o.H(r,c),l=e.G(r);a.push(l),c=ye(this.I,l,c,this.g.M),u=u.concat(this.g.set(e,c))}if(i)K("update() called with empty data.  Don't do anything."),X(n,"ok");else{var p=this;zd(this.u,e.toString(),t,function(t,r){v("ok"===t||"permission_denied"===t,"merge at "+e+" failed."),"ok"!==t&&L("update at "+e+" failed: "+t),Md(p.g,u),Kd(p.g,e);var o=De(p,e);W(p.I,o,[]),X(n,t,r)}),t=Fe(this,e),De(this,t),W(p.I,t,a)}},h.Wc=function(e,t,n){this.e("setPriority",{path:e.toString(),ka:t});var r=Ce(this),r=Nd(t,r),r=S(this.g.M,e).Ia(r),r=ye(this.I,e,r,this.g.M),o=this.g.set(e,r),i=this;this.u.put(e.toString()+"/.priority",t,function(t,r){"permission_denied"===t&&L("setPriority at "+e+" failed: "+t),Md(i.g,o),Kd(i.g,e);var a=De(i,e);W(i.I,a,[]),X(n,t,r)}),t=De(this,e),W(i.I,t,[])},h.Nc=function(e,t){var n=this;this.u.Nc(e.toString(),function(r,o){"ok"===r&&Fd(n.T,e),X(t,r,o)})},h.Rb=function(e,t,n,r,o){".info"===C(e.path)?this.Jc.Rb(e,t,n,r,o):this.I.Rb(e,t,n,r,o)},h.lc=function(e,t,n,r){if(".info"===C(e.path))this.Jc.lc(e,t,n,r);else{if(t=this.I.lc(e,t,n,r),n=null!==t){n=this.g,r=e.path;for(var o=[],i=0;i<t.length;++i)o[i]=S(n.va,t[i]);for(T(n.va,r,M),i=0;i<t.length;++i)T(n.va,t[i],o[i]);n=Kd(n,r)}n&&(v(this.g.pa.$===this.I.ac,"We should have raised any outstanding events by now.  Else, we'll blow them away."),T(this.g.pa,e.path,S(this.g.M,e.path)),this.I.ac=this.g.pa.$)}},h.La=function(){this.u.La()},h.jb=function(){this.u.jb()},h.Xc=function(e){if("undefined"!=typeof console){e?(this.qc||(this.qc=new zc(this.aa)),e=this.qc.get()):e=this.aa.get();var t,n=wb(vc(e),function(e,t){return Math.max(t.length,e)},0);for(t in e){for(var r=e[t],o=t.length;n+2>o;o++)t+=" ";console.log(t+r)}}},h.Yc=function(e){yc(this.aa,e),this.zd.Zc[e]=!0},h.e=function(){K("r:"+this.u.id+":",arguments)},ca(Y),Y.prototype.La=function(){for(var e in this.ib)this.ib[e].La()},Y.prototype.interrupt=Y.prototype.La,Y.prototype.jb=function(){for(var e in this.ib)this.ib[e].jb()},Y.prototype.resume=Y.prototype.jb;var Z={Nd:function(e){var t=N.prototype.hash;N.prototype.hash=e;var n=fc.prototype.hash;return fc.prototype.hash=e,function(){N.prototype.hash=t,fc.prototype.hash=n}}};Z.hijackHash=Z.Nd,Z.Pa=function(e){return e.Pa()},Z.queryIdentifier=Z.Pa,Z.Qd=function(e){return e.m.u.ia},Z.listens=Z.Qd,Z.Yd=function(e){return e.m.u.la},Z.refConnection=Z.Yd,Z.Cd=ld,Z.DataConnection=Z.Cd,ld.prototype.sendRequest=ld.prototype.Ga,ld.prototype.interrupt=ld.prototype.La,Z.Dd=$c,Z.RealTimeConnection=Z.Dd,$c.prototype.sendRequest=$c.prototype.xd,$c.prototype.close=$c.prototype.close,Z.Bd=ob,Z.ConnectionTarget=Z.Bd,Z.Ld=function(){Oc=Gc=!0},Z.forceLongPolling=Z.Ld,Z.Md=function(){Pc=!0},Z.forceWebSockets=Z.Md,Z.de=function(e,t){e.m.u.Vc=t},Z.setSecurityDebugCallback=Z.de,Z.Xc=function(e,t){e.m.Xc(t)},Z.stats=Z.Xc,Z.Yc=function(e,t){e.m.Yc(t)
},Z.statsIncrementCounter=Z.Yc,Z.Cc=function(e){return e.m.Cc},Z.Od=function(e,t){e.m.md=t},Z.interceptServerData=Z.Od,$.prototype.cancel=function(e){x("Firebase.onDisconnect().cancel",0,1,arguments.length),z("Firebase.onDisconnect().cancel",1,e,!0),this.Jb.Nc(this.X,e)},$.prototype.cancel=$.prototype.cancel,$.prototype.remove=function(e){x("Firebase.onDisconnect().remove",0,1,arguments.length),B("Firebase.onDisconnect().remove",this.X),z("Firebase.onDisconnect().remove",1,e,!0),Ge(this.Jb,this.X,null,e)},$.prototype.remove=$.prototype.remove,$.prototype.set=function(e,t){x("Firebase.onDisconnect().set",1,2,arguments.length),B("Firebase.onDisconnect().set",this.X),za("Firebase.onDisconnect().set",e,!1),z("Firebase.onDisconnect().set",2,t,!0),Ge(this.Jb,this.X,e,t)},$.prototype.set=$.prototype.set,$.prototype.kb=function(e,t,n){if(x("Firebase.onDisconnect().setWithPriority",2,3,arguments.length),B("Firebase.onDisconnect().setWithPriority",this.X),za("Firebase.onDisconnect().setWithPriority",e,!1),Ea("Firebase.onDisconnect().setWithPriority",2,t,!1),z("Firebase.onDisconnect().setWithPriority",3,n,!0),".length"===this.Fa||".keys"===this.Fa)throw"Firebase.onDisconnect().setWithPriority failed: "+this.Fa+" is a read-only object.";He(this.Jb,this.X,e,t,n)},$.prototype.setWithPriority=$.prototype.kb,$.prototype.update=function(e,t){x("Firebase.onDisconnect().update",1,2,arguments.length),B("Firebase.onDisconnect().update",this.X),Da("Firebase.onDisconnect().update",e),z("Firebase.onDisconnect().update",2,t,!0),Ie(this.Jb,this.X,e,t)},$.prototype.update=$.prototype.update;var Ve=function(){var e=0,t=[];return function(n){var r=n===e;e=n;for(var o=Array(8),i=7;i>=0;i--)o[i]="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".charAt(n%64),n=Math.floor(n/64);if(v(0===n,"Cannot push at time == 0"),n=o.join(""),r){for(i=11;i>=0&&63===t[i];i--)t[i]=0;t[i]++}else for(i=0;12>i;i++)t[i]=Math.floor(64*Math.random());for(i=0;12>i;i++)n+="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".charAt(t[i]);return v(20===n.length,"NextPushId: Length should be 20."),n}}();ja(E,D);var We=E,Xe=["Firebase"],Ye=aa;Xe[0]in Ye||!Ye.execScript||Ye.execScript("var "+Xe[0]);for(var Ze;Xe.length&&(Ze=Xe.shift());)!Xe.length&&n(We)?Ye[Ze]=We:Ye=Ye[Ze]?Ye[Ze]:Ye[Ze]={};E.prototype.name=function(){return x("Firebase.name",0,0,arguments.length),this.path.f()?null:Ma(this.path)},E.prototype.name=E.prototype.name,E.prototype.G=function(e){if(x("Firebase.child",1,1,arguments.length),fa(e))e=String(e);else if(!(e instanceof F))if(null===C(this.path)){var t=e;t&&(t=t.replace(/^\/*\.info(\/|$)/,"/")),Ha("Firebase.child",t)}else Ha("Firebase.child",e);return new E(this.m,this.path.G(e))},E.prototype.child=E.prototype.G,E.prototype.parent=function(){x("Firebase.parent",0,0,arguments.length);var e=this.path.parent();return null===e?null:new E(this.m,e)},E.prototype.parent=E.prototype.parent,E.prototype.root=function(){x("Firebase.ref",0,0,arguments.length);for(var e=this;null!==e.parent();)e=e.parent();return e},E.prototype.root=E.prototype.root,E.prototype.toString=function(){x("Firebase.toString",0,0,arguments.length);var e;if(null===this.parent())e=this.m.toString();else{e=this.parent().toString()+"/";var t=this.name();e+=encodeURIComponent(String(t))}return e},E.prototype.toString=E.prototype.toString,E.prototype.set=function(e,t){x("Firebase.set",1,2,arguments.length),B("Firebase.set",this.path),za("Firebase.set",e,!1),z("Firebase.set",2,t,!0),this.m.kb(this.path,e,null,t)},E.prototype.set=E.prototype.set,E.prototype.update=function(e,t){if(x("Firebase.update",1,2,arguments.length),B("Firebase.update",this.path),Da("Firebase.update",e),z("Firebase.update",2,t,!0),A(e,".priority"))throw Error("update() does not currently support updating .priority.");this.m.update(this.path,e,t)},E.prototype.update=E.prototype.update,E.prototype.kb=function(e,t,n){if(x("Firebase.setWithPriority",2,3,arguments.length),B("Firebase.setWithPriority",this.path),za("Firebase.setWithPriority",e,!1),Ea("Firebase.setWithPriority",2,t,!1),z("Firebase.setWithPriority",3,n,!0),".length"===this.name()||".keys"===this.name())throw"Firebase.setWithPriority failed: "+this.name()+" is a read-only object.";this.m.kb(this.path,e,t,n)},E.prototype.setWithPriority=E.prototype.kb,E.prototype.remove=function(e){x("Firebase.remove",0,1,arguments.length),B("Firebase.remove",this.path),z("Firebase.remove",1,e,!0),this.set(null,e)},E.prototype.remove=E.prototype.remove,E.prototype.transaction=function(e,t,r){if(x("Firebase.transaction",1,3,arguments.length),B("Firebase.transaction",this.path),z("Firebase.transaction",1,e,!1),z("Firebase.transaction",2,t,!0),n(r)&&"boolean"!=typeof r)throw Error(y("Firebase.transaction",3,!0)+"must be a boolean.");if(".length"===this.name()||".keys"===this.name())throw"Firebase.transaction failed: "+this.name()+" is a read-only object.";"undefined"==typeof r&&(r=!0),Ke(this.m,this.path,e,t,r)},E.prototype.transaction=E.prototype.transaction,E.prototype.Wc=function(e,t){x("Firebase.setPriority",1,2,arguments.length),B("Firebase.setPriority",this.path),Ea("Firebase.setPriority",1,e,!1),z("Firebase.setPriority",2,t,!0),this.m.Wc(this.path,e,t)},E.prototype.setPriority=E.prototype.Wc,E.prototype.push=function(e,t){x("Firebase.push",0,2,arguments.length),B("Firebase.push",this.path),za("Firebase.push",e,!0),z("Firebase.push",2,t,!0);var n=Be(this.m),n=Ve(n),n=this.G(n);return"undefined"!=typeof e&&null!==e&&n.set(e,t),n},E.prototype.push=E.prototype.push,E.prototype.ja=function(){return new $(this.m,this.path,this.name())},E.prototype.onDisconnect=E.prototype.ja,E.prototype.Zd=function(){L("FirebaseRef.removeOnDisconnect() being deprecated. Please use FirebaseRef.onDisconnect().remove() instead."),this.ja().remove(),Je(this.m)},E.prototype.removeOnDisconnect=E.prototype.Zd,E.prototype.ce=function(e){L("FirebaseRef.setOnDisconnect(value) being deprecated. Please use FirebaseRef.onDisconnect().set(value) instead."),this.ja().set(e),Je(this.m)},E.prototype.setOnDisconnect=E.prototype.ce,E.prototype.mb=function(e,t,n){if(x("Firebase.auth",1,3,arguments.length),!q(e))throw Error(y("Firebase.auth",1,!1)+"must be a valid credential (a string).");z("Firebase.auth",2,t,!0),z("Firebase.auth",3,t,!0),this.m.mb(e,t,n)},E.prototype.auth=E.prototype.mb,E.prototype.Pb=function(e){x("Firebase.unauth",0,1,arguments.length),z("Firebase.unauth",1,e,!0),this.m.Pb(e)},E.prototype.unauth=E.prototype.Pb,E.goOffline=function(){x("Firebase.goOffline",0,0,arguments.length),Y.rb().La()},E.goOnline=function(){x("Firebase.goOnline",0,0,arguments.length),Y.rb().jb()},E.enableLogging=Pb,E.ServerValue={TIMESTAMP:{".sv":"timestamp"}},E.INTERNAL=Z,E.Context=Y}(),module.exports=Firebase},{}],21:[function(e,t,n){!function(r,o){"function"==typeof e&&"object"==typeof n&&"object"==typeof t?t.exports=o():"function"==typeof define&&define.amd?define(function(){return o()}):r.pluralize=o()}(this,function(){function e(e){return e.charAt(0).toUpperCase()+e.substr(1).toLowerCase()}function t(e){return"string"==typeof e?new RegExp("^"+e+"$","i"):e}function n(t,n){return t===t.toUpperCase()?n.toUpperCase():t[0]===t[0].toUpperCase()?e(n):n.toLowerCase()}function r(e,t){return e.replace(/\$(\d{1,2})/g,function(e,n){return t[n]||""})}function o(e,t){if(!e.length||c.hasOwnProperty(e))return e;for(var o=t.length;o--;){var i=t[o];if(i[0].test(e))return e.replace(i[0],function(e,t,o){var a=r(i[1],arguments);return""===e?n(o[t-1],a):n(e,a)})}return e}function i(e,t,r){return function(i){var a=i.toLowerCase();return t.hasOwnProperty(a)?n(i,a):e.hasOwnProperty(a)?n(i,e[a]):o(i,r)}}function a(e,t,n){var r=1===t?a.singular(e):a.plural(e);return(n?t+" ":"")+r}var s=[],u=[],c={},l={},p={};return a.plural=i(p,l,s),a.singular=i(l,p,u),a.addPluralRule=function(e,n){s.push([t(e),n])},a.addSingularRule=function(e,n){u.push([t(e),n])},a.addUncountableRule=function(e){return"string"==typeof e?c[e.toLowerCase()]=!0:(a.addPluralRule(e,"$0"),void a.addSingularRule(e,"$0"))},a.addIrregularRule=function(e,t){t=t.toLowerCase(),e=e.toLowerCase(),p[e]=t,l[t]=e},[["I","we"],["me","us"],["he","they"],["she","they"],["them","them"],["myself","ourselves"],["yourself","yourselves"],["itself","themselves"],["herself","themselves"],["himself","themselves"],["themself","themselves"],["this","these"],["that","those"],["echo","echoes"],["dingo","dingoes"],["volcano","volcanoes"],["tornado","tornadoes"],["torpedo","torpedoes"],["genus","genera"],["viscus","viscera"],["stigma","stigmata"],["stoma","stomata"],["dogma","dogmata"],["lemma","lemmata"],["schema","schemata"],["anathema","anathemata"],["ox","oxen"],["axe","axes"],["die","dice"],["yes","yeses"],["foot","feet"],["eave","eaves"],["goose","geese"],["tooth","teeth"],["quiz","quizzes"],["human","humans"],["proof","proofs"],["carve","carves"],["valve","valves"],["thief","thieves"],["genie","genies"],["groove","grooves"],["pickaxe","pickaxes"],["whiskey","whiskies"]].forEach(function(e){return a.addIrregularRule(e[0],e[1])}),[[/s?$/i,"s"],[/([^aeiou]ese)$/i,"$1"],[/(ax|test)is$/i,"$1es"],[/(alias|[^aou]us|tlas|gas|ris)$/i,"$1es"],[/(e[mn]u)s?$/i,"$1s"],[/([^l]ias|[aeiou]las|[emjzr]as|[iu]am)$/i,"$1"],[/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i,"$1i"],[/(alumn|alg|vertebr)(?:a|ae)$/i,"$1ae"],[/(seraph|cherub)(?:im)?$/i,"$1im"],[/(her|at|gr)o$/i,"$1oes"],[/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i,"$1a"],[/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|\w+hedr)(?:a|on)$/i,"$1a"],[/sis$/i,"ses"],[/(?:(i)fe|(ar|l|ea|eo|oa|hoo)f)$/i,"$1$2ves"],[/([^aeiouy]|qu)y$/i,"$1ies"],[/([^ch][ieo][ln])ey$/i,"$1ies"],[/(x|ch|ss|sh|zz)$/i,"$1es"],[/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i,"$1ices"],[/(m|l)(?:ice|ouse)$/i,"$1ice"],[/(pe)(?:rson|ople)$/i,"$1ople"],[/(child)(?:ren)?$/i,"$1ren"],[/eaux$/i,"$0"],[/m[ae]n$/i,"men"]].forEach(function(e){return a.addPluralRule(e[0],e[1])}),[[/s$/i,""],[/(ss)$/i,"$1"],[/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(?:sis|ses)$/i,"$1sis"],[/(^analy)(?:sis|ses)$/i,"$1sis"],[/([^aeflor])ves$/i,"$1fe"],[/(hive|tive|dr?ive)s$/i,"$1"],[/(ar|(?:wo|[ae])l|[eo][ao])ves$/i,"$1f"],[/([^aeiouy]|qu)ies$/i,"$1y"],[/(^[pl]|zomb|^(?:neck)?t|[aeo][lt]|cut)ies$/i,"$1ie"],[/([^c][eor]n|smil)ies$/i,"$1ey"],[/(m|l)ice$/i,"$1ouse"],[/(seraph|cherub)im$/i,"$1"],[/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|tlas|gas|(?:her|at|gr)o|ris)(?:es)?$/i,"$1"],[/(e[mn]u)s?$/i,"$1"],[/(movie|twelve)s$/i,"$1"],[/(cris|test|diagnos)(?:is|es)$/i,"$1is"],[/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i,"$1us"],[/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)a$/i,"$1um"],[/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|\w+hedr)a$/i,"$1on"],[/(alumn|alg|vertebr)ae$/i,"$1a"],[/(cod|mur|sil|vert|ind)ices$/i,"$1ex"],[/(matr|append)ices$/i,"$1ix"],[/(pe)(rson|ople)$/i,"$1rson"],[/(child)ren$/i,"$1"],[/(eau)x?$/i,"$1"],[/men$/i,"man"]].forEach(function(e){return a.addSingularRule(e[0],e[1])}),["advice","agenda","bison","bream","buffalo","carp","chassis","cod","cooperation","corps","digestion","debris","diabetes","energy","equipment","elk","excretion","expertise","flounder","gallows","graffiti","headquarters","health","herpes","highjinks","homework","information","jeans","justice","kudos","labour","machinery","mackerel","media","mews","moose","news","pike","plankton","pliers","pollution","premises","rain","rice","salmon","scissors","series","sewage","shambles","shrimp","species","staff","swine","trout","tuna","whiting","wildebeest","wildlife",/pox$/i,/ois$/i,/deer$/i,/fish$/i,/sheep$/i,/measles$/i,/[^aeiou]ese$/i].forEach(a.addUncountableRule),a})},{}],22:[function(e,t){var n={PUSH:"push",REPLACE:"replace",POP:"pop"};t.exports=n},{}],23:[function(e,t){var n=e("../actions/LocationActions"),r={updateScrollPosition:function(e,t){switch(t){case n.PUSH:case n.REPLACE:window.scrollTo(0,0);break;case n.POP:e?window.scrollTo(e.x,e.y):window.scrollTo(0,0)}}};t.exports=r},{"../actions/LocationActions":22}],24:[function(e,t){var n={updateScrollPosition:function(){window.scrollTo(0,0)}};t.exports=n},{}],25:[function(e,t){var n=e("react"),r=e("../mixins/FakeNode"),o=e("../utils/PropTypes"),i=n.createClass({displayName:"DefaultRoute",mixins:[r],propTypes:{name:n.PropTypes.string,path:o.falsy,handler:n.PropTypes.func.isRequired}});t.exports=i},{"../mixins/FakeNode":35,"../utils/PropTypes":46,react:216}],26:[function(e,t){function n(e){return 0===e.button}function r(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}var o=e("react"),i=e("react/lib/cx"),a=e("react/lib/Object.assign"),s=e("../mixins/Navigation"),u=e("../mixins/State"),c=o.createClass({displayName:"Link",mixins:[s,u],propTypes:{activeClassName:o.PropTypes.string.isRequired,to:o.PropTypes.string.isRequired,params:o.PropTypes.object,query:o.PropTypes.object,onClick:o.PropTypes.func},getDefaultProps:function(){return{activeClassName:"active"}},handleClick:function(e){var t,o=!0;this.props.onClick&&(t=this.props.onClick(e)),!r(e)&&n(e)&&((t===!1||e.defaultPrevented===!0)&&(o=!1),e.preventDefault(),o&&this.transitionTo(this.props.to,this.props.params,this.props.query))},getHref:function(){return this.makeHref(this.props.to,this.props.params,this.props.query)},getClassName:function(){var e={};return this.props.className&&(e[this.props.className]=!0),this.isActive(this.props.to,this.props.params,this.props.query)&&(e[this.props.activeClassName]=!0),i(e)},render:function(){var e=a({},this.props,{href:this.getHref(),className:this.getClassName(),onClick:this.handleClick});return o.DOM.a(e,this.props.children)}});t.exports=c},{"../mixins/Navigation":36,"../mixins/State":40,react:216,"react/lib/Object.assign":95,"react/lib/cx":174}],27:[function(e,t){var n=e("react"),r=e("../mixins/FakeNode"),o=e("../utils/PropTypes"),i=n.createClass({displayName:"NotFoundRoute",mixins:[r],propTypes:{name:n.PropTypes.string,path:o.falsy,handler:n.PropTypes.func.isRequired}});t.exports=i},{"../mixins/FakeNode":35,"../utils/PropTypes":46,react:216}],28:[function(e,t){var n=e("react"),r=e("../mixins/FakeNode"),o=e("../utils/PropTypes"),i=n.createClass({displayName:"Redirect",mixins:[r],propTypes:{path:n.PropTypes.string,from:n.PropTypes.string,to:n.PropTypes.string,handler:o.falsy}});t.exports=i},{"../mixins/FakeNode":35,"../utils/PropTypes":46,react:216}],29:[function(e,t){var n=e("react"),r=e("../mixins/FakeNode"),o=n.createClass({displayName:"Route",mixins:[r],propTypes:{name:n.PropTypes.string,path:n.PropTypes.string,handler:n.PropTypes.func.isRequired,ignoreScrollBehavior:n.PropTypes.bool}});t.exports=o},{"../mixins/FakeNode":35,react:216}],30:[function(e,t){var n=e("react"),r=e("../mixins/RouteHandler"),o=n.createClass({displayName:"RouteHandler",mixins:[r],getDefaultProps:function(){return{ref:"__routeHandler__"}},render:function(){return this.getRouteHandler()}});t.exports=o},{"../mixins/RouteHandler":38,react:216}],31:[function(e,t,n){n.DefaultRoute=e("./components/DefaultRoute"),n.Link=e("./components/Link"),n.NotFoundRoute=e("./components/NotFoundRoute"),n.Redirect=e("./components/Redirect"),n.Route=e("./components/Route"),n.RouteHandler=e("./components/RouteHandler"),n.HashLocation=e("./locations/HashLocation"),n.HistoryLocation=e("./locations/HistoryLocation"),n.RefreshLocation=e("./locations/RefreshLocation"),n.ImitateBrowserBehavior=e("./behaviors/ImitateBrowserBehavior"),n.ScrollToTopBehavior=e("./behaviors/ScrollToTopBehavior"),n.Navigation=e("./mixins/Navigation"),n.State=e("./mixins/State"),n.create=e("./utils/createRouter"),n.run=e("./utils/runRouter"),n.History=e("./utils/History")},{"./behaviors/ImitateBrowserBehavior":23,"./behaviors/ScrollToTopBehavior":24,"./components/DefaultRoute":25,"./components/Link":26,"./components/NotFoundRoute":27,"./components/Redirect":28,"./components/Route":29,"./components/RouteHandler":30,"./locations/HashLocation":32,"./locations/HistoryLocation":33,"./locations/RefreshLocation":34,"./mixins/Navigation":36,"./mixins/State":40,"./utils/History":43,"./utils/createRouter":49,"./utils/runRouter":53}],32:[function(e,t){function n(){return c.decode(window.location.href.split("#")[1]||"")}function r(){var e=n();return"/"===e.charAt(0)?!0:(h.replace("/"+e),!1)}function o(e){e===s.PUSH&&(u.length+=1);var t={path:n(),type:e};l.forEach(function(e){e(t)})}function i(){r()&&(o(a||s.POP),a=null)}var a,s=e("../actions/LocationActions"),u=e("../utils/History"),c=e("../utils/Path"),l=[],p=!1,h={addChangeListener:function(e){l.push(e),r(),p||(window.addEventListener?window.addEventListener("hashchange",i,!1):window.attachEvent("onhashchange",i),p=!0)},removeChangeListener:function(e){for(var t=0,n=l.length;n>t;t++)if(l[t]===e){l.splice(t,1);break}window.removeEventListener?window.removeEventListener("hashchange",i,!1):window.removeEvent("onhashchange",i),0===l.length&&(p=!1)},push:function(e){a=s.PUSH,window.location.hash=c.encode(e)},replace:function(e){a=s.REPLACE,window.location.replace(window.location.pathname+"#"+c.encode(e))},pop:function(){a=s.POP,u.back()},getCurrentPath:n,toString:function(){return"<HashLocation>"}};t.exports=h},{"../actions/LocationActions":22,"../utils/History":43,"../utils/Path":44}],33:[function(e,t){function n(){return s.decode(window.location.pathname+window.location.search)}function r(e){var t={path:n(),type:e};u.forEach(function(e){e(t)})}function o(){r(i.POP)}var i=e("../actions/LocationActions"),a=e("../utils/History"),s=e("../utils/Path"),u=[],c=!1,l={addChangeListener:function(e){u.push(e),c||(window.addEventListener?window.addEventListener("popstate",o,!1):window.attachEvent("popstate",o),c=!0)},removeChangeListener:function(e){for(var t=0,n=u.length;n>t;t++)if(u[t]===e){u.splice(t,1);break}window.addEventListener?window.removeEventListener("popstate",o):window.removeEvent("popstate",o),0===u.length&&(c=!1)},push:function(e){window.history.pushState({path:e},"",s.encode(e)),a.length+=1,r(i.PUSH)},replace:function(e){window.history.replaceState({path:e},"",s.encode(e)),r(i.REPLACE)},pop:a.back,getCurrentPath:n,toString:function(){return"<HistoryLocation>"}};t.exports=l},{"../actions/LocationActions":22,"../utils/History":43,"../utils/Path":44}],34:[function(e,t){var n=e("./HistoryLocation"),r=e("../utils/History"),o=e("../utils/Path"),i={push:function(e){window.location=o.encode(e)},replace:function(e){window.location.replace(o.encode(e))},pop:r.back,getCurrentPath:n.getCurrentPath,toString:function(){return"<RefreshLocation>"}};t.exports=i},{"../utils/History":43,"../utils/Path":44,"./HistoryLocation":33}],35:[function(e,t){var n=e("react/lib/invariant"),r={render:function(){n(!1,"%s elements should not be rendered",this.constructor.displayName)}};t.exports=r},{"react/lib/invariant":196}],36:[function(e,t){var n=e("react"),r={contextTypes:{makePath:n.PropTypes.func.isRequired,makeHref:n.PropTypes.func.isRequired,transitionTo:n.PropTypes.func.isRequired,replaceWith:n.PropTypes.func.isRequired,goBack:n.PropTypes.func.isRequired},makePath:function(e,t,n){return this.context.makePath(e,t,n)},makeHref:function(e,t,n){return this.context.makeHref(e,t,n)},transitionTo:function(e,t,n){this.context.transitionTo(e,t,n)},replaceWith:function(e,t,n){this.context.replaceWith(e,t,n)},goBack:function(){this.context.goBack()}};t.exports=r},{react:216}],37:[function(e,t){var n=e("react"),r={childContextTypes:{makePath:n.PropTypes.func.isRequired,makeHref:n.PropTypes.func.isRequired,transitionTo:n.PropTypes.func.isRequired,replaceWith:n.PropTypes.func.isRequired,goBack:n.PropTypes.func.isRequired},getChildContext:function(){return{makePath:this.constructor.makePath,makeHref:this.constructor.makeHref,transitionTo:this.constructor.transitionTo,replaceWith:this.constructor.replaceWith,goBack:this.constructor.goBack}}};t.exports=r},{react:216}],38:[function(e,t){var n=e("react");t.exports={contextTypes:{getRouteAtDepth:n.PropTypes.func.isRequired,getRouteComponents:n.PropTypes.func.isRequired,routeHandlers:n.PropTypes.array.isRequired},childContextTypes:{routeHandlers:n.PropTypes.array.isRequired},getChildContext:function(){return{routeHandlers:this.context.routeHandlers.concat([this])}},getRouteDepth:function(){return this.context.routeHandlers.length-1},componentDidMount:function(){this._updateRouteComponent()},componentDidUpdate:function(){this._updateRouteComponent()},_updateRouteComponent:function(){var e=this.getRouteDepth(),t=this.context.getRouteComponents();t[e]=this.refs[this.props.ref||"__routeHandler__"]},getRouteHandler:function(e){var t=this.context.getRouteAtDepth(this.getRouteDepth());return t?n.createElement(t.handler,e||this.props):null}}},{react:216}],39:[function(e,t){function n(e,t){if(!t)return!0;if(e.pathname===t.pathname)return!1;var n=e.routes,r=t.routes,o=n.filter(function(e){return-1!==r.indexOf(e)});return!o.some(function(e){return e.ignoreScrollBehavior})}var r=e("react/lib/invariant"),o=e("react/lib/ExecutionEnvironment").canUseDOM,i=e("../utils/getWindowScrollPosition"),a={statics:{recordScrollPosition:function(e){this.scrollHistory||(this.scrollHistory={}),this.scrollHistory[e]=i()},getScrollPosition:function(e){return this.scrollHistory||(this.scrollHistory={}),this.scrollHistory[e]||null}},componentWillMount:function(){r(null==this.getScrollBehavior()||o,"Cannot use scroll behavior without a DOM")},componentDidMount:function(){this._updateScroll()},componentDidUpdate:function(e,t){this._updateScroll(t)},_updateScroll:function(e){if(n(this.state,e)){var t=this.getScrollBehavior();t&&t.updateScrollPosition(this.constructor.getScrollPosition(this.state.path),this.state.action)}}};t.exports=a},{"../utils/getWindowScrollPosition":51,"react/lib/ExecutionEnvironment":90,"react/lib/invariant":196}],40:[function(e,t){var n=e("react"),r={contextTypes:{getCurrentPath:n.PropTypes.func.isRequired,getCurrentRoutes:n.PropTypes.func.isRequired,getCurrentPathname:n.PropTypes.func.isRequired,getCurrentParams:n.PropTypes.func.isRequired,getCurrentQuery:n.PropTypes.func.isRequired,isActive:n.PropTypes.func.isRequired},getPath:function(){return this.context.getCurrentPath()},getRoutes:function(){return this.context.getCurrentRoutes()},getPathname:function(){return this.context.getCurrentPathname()},getParams:function(){return this.context.getCurrentParams()},getQuery:function(){return this.context.getCurrentQuery()},isActive:function(e,t,n){return this.context.isActive(e,t,n)}};t.exports=r},{react:216}],41:[function(e,t){function n(e,t){return e.some(function(e){return e.name===t})}function r(e,t){for(var n in t)if(String(e[n])!==String(t[n]))return!1;return!0}function o(e,t){for(var n in t)if(String(e[n])!==String(t[n]))return!1;return!0}var i=e("react"),a=e("react/lib/Object.assign"),s=e("../utils/Path"),u={getCurrentPath:function(){return this.state.path},getCurrentRoutes:function(){return this.state.routes.slice(0)},getCurrentPathname:function(){return this.state.pathname},getCurrentParams:function(){return a({},this.state.params)},getCurrentQuery:function(){return a({},this.state.query)},isActive:function(e,t,i){return s.isAbsolute(e)?e===this.state.path:n(this.state.routes,e)&&r(this.state.params,t)&&(null==i||o(this.state.query,i))},childContextTypes:{getCurrentPath:i.PropTypes.func.isRequired,getCurrentRoutes:i.PropTypes.func.isRequired,getCurrentPathname:i.PropTypes.func.isRequired,getCurrentParams:i.PropTypes.func.isRequired,getCurrentQuery:i.PropTypes.func.isRequired,isActive:i.PropTypes.func.isRequired},getChildContext:function(){return{getCurrentPath:this.getCurrentPath,getCurrentRoutes:this.getCurrentRoutes,getCurrentPathname:this.getCurrentPathname,getCurrentParams:this.getCurrentParams,getCurrentQuery:this.getCurrentQuery,isActive:this.isActive}}};t.exports=u},{"../utils/Path":44,react:216,"react/lib/Object.assign":95}],42:[function(e,t){function n(){}t.exports=n},{}],43:[function(e,t){var n=e("react/lib/invariant"),r=e("react/lib/ExecutionEnvironment").canUseDOM,o={back:function(){n(r,"Cannot use History.back without a DOM"),o.length-=1,window.history.back()},length:1};t.exports=o},{"react/lib/ExecutionEnvironment":90,"react/lib/invariant":196}],44:[function(e,t){function n(e){if(!(e in l)){var t=[],n=e.replace(a,function(e,n){return n?(t.push(n),"([^/?#]+)"):"*"===e?(t.push("splat"),"(.*?)"):"\\"+e});l[e]={matcher:new RegExp("^"+n+"$","i"),paramNames:t}}return l[e]}var r=e("react/lib/invariant"),o=e("qs/lib/utils").merge,i=e("qs"),a=/:([a-zA-Z_$][a-zA-Z0-9_$]*)|[*.()\[\]\\+|{}^$]/g,s=/:([a-zA-Z_$][a-zA-Z0-9_$?]*[?]?)|[*]/g,u=/\/\/\?|\/\?/g,c=/\?(.+)/,l={},p={decode:function(e){return decodeURI(e.replace(/\+/g," "))},encode:function(e){return encodeURI(e).replace(/%20/g,"+")},extractParamNames:function(e){return n(e).paramNames},extractParams:function(e,t){var r=n(e),o=t.match(r.matcher);if(!o)return null;var i={};return r.paramNames.forEach(function(e,t){i[e]=o[t+1]}),i},injectParams:function(e,t){t=t||{};var n=0;return e.replace(s,function(o,i){if(i=i||"splat","?"!==i.slice(-1))r(null!=t[i],'Missing "'+i+'" parameter for path "'+e+'"');else if(i=i.slice(0,-1),null==t[i])return"";var a;return"splat"===i&&Array.isArray(t[i])?(a=t[i][n++],r(null!=a,"Missing splat # "+n+' for path "'+e+'"')):a=t[i],a}).replace(u,"/")},extractQuery:function(e){var t=e.match(c);return t&&i.parse(t[1])},withoutQuery:function(e){return e.replace(c,"")},withQuery:function(e,t){var n=p.extractQuery(e);n&&(t=t?o(n,t):n);var r=t&&i.stringify(t);return r?p.withoutQuery(e)+"?"+r:e},isAbsolute:function(e){return"/"===e.charAt(0)},normalize:function(e){return e.replace(/^\/*/,"/")},join:function(e,t){return e.replace(/\/*$/,"/")+t}};t.exports=p},{qs:55,"qs/lib/utils":59,"react/lib/invariant":196}],45:[function(e,t){var n=e("when/lib/Promise");t.exports=n},{"when/lib/Promise":60}],46:[function(e,t){var n={falsy:function(e,t,n){return e[t]?new Error("<"+n+'> may not have a "'+t+'" prop'):void 0}};t.exports=n},{}],47:[function(e,t){function n(e,t,n){this.to=e,this.params=t,this.query=n}t.exports=n},{}],48:[function(e,t){function n(e,t){var n;try{n=e.reduce(function(e,t){return e?e.then(t):t()},null)}catch(r){return t(r)}n?n.then(function(){setTimeout(t)},function(e){setTimeout(function(){t(e)})}):t()}function r(e,t,r,o){r=s(r);var i=s(t).map(function(t,n){return function(){var o=t.handler;if(!e.isAborted&&o.willTransitionFrom)return o.willTransitionFrom(e,r[n]);var i=e._promise;return e._promise=null,i}});n(i,o)}function o(e,t,r,o,i){var a=t.map(function(t){return function(){var n=t.handler;!e.isAborted&&n.willTransitionTo&&n.willTransitionTo(e,r,o);var i=e._promise;return e._promise=null,i}});n(a,i)}function i(e,t){this.path=e,this.abortReason=null,this.isAborted=!1,this.retry=t.bind(this),this._promise=null}var a=e("react/lib/Object.assign"),s=e("./reversedArray"),u=e("./Redirect"),c=e("./Promise");a(i.prototype,{abort:function(e){this.isAborted||(this.abortReason=e,this.isAborted=!0)},redirect:function(e,t,n){this.abort(new u(e,t,n))},wait:function(e){this._promise=c.resolve(e)},from:function(e,t,n){return r(this,e,t,n)},to:function(e,t,n,r){return o(this,e,t,n,r)}}),t.exports=i},{"./Promise":45,"./Redirect":47,"./reversedArray":52,"react/lib/Object.assign":95}],49:[function(e,t){(function(n){function r(e){throw e}function o(e,t){if("string"==typeof t)throw new Error("Unhandled aborted transition! Reason: "+e);e instanceof M||(e instanceof x?t.replace(this.makePath(e.to,e.params,e.query)):t.pop())}function i(e,t,n,r){for(var o,s,u,c=0,l=t.length;l>c;++c){if(s=t[c],o=i(e,s.childRoutes,s.defaultRoute,s.notFoundRoute),null!=o)return o.routes.unshift(s),o;if(u=P.extractParams(s.path,e))return a(s,u)}return n&&(u=P.extractParams(n.path,e))?a(n,u):r&&(u=P.extractParams(r.path,e))?a(r,u):o}function a(e,t){return{routes:[e],params:t}}function s(e,t){for(var n in t)if(t.hasOwnProperty(n)&&e[n]!==t[n])return!1;return!0}function u(e,t,n,r,o,i){return e.some(function(e){if(e!==t)return!1;for(var a,u=t.paramNames,c=0,l=u.length;l>c;++c)if(a=u[c],r[a]!==n[a])return!1;return s(o,i)&&s(i,o)})}function c(e){function t(){A=L,L={}}e=e||{},"function"==typeof e?e={routes:e}:Array.isArray(e)&&(e={routes:e});var a=[],s={},c=[],f=e.location||T,x=e.scrollBehavior||S,k=e.onError||r,I=e.onAbort||o,A={},L={},U=null;"string"==typeof f?p(!d||"test"===n.env.NODE_ENV,"You should not use a static location in a DOM environment because the router will not be kept in sync with the current URL"):h(d,"You cannot use %s without a DOM",f),f!==y||R()||(f=b);var j=l.createClass({displayName:"Router",mixins:[E,w,C],statics:{defaultRoute:null,notFoundRoute:null,addRoutes:function(e){a.push.apply(a,N(e,this,s))},makePath:function(e,t,n){var r;if(P.isAbsolute(e))r=P.normalize(e);else{var o=s[e];h(o,'Unable to find <Route name="%s">',e),r=o.path}return P.withQuery(P.injectParams(r,t),n)},makeHref:function(e,t,n){var r=this.makePath(e,t,n);return f===g?"#"+r:r},transitionTo:function(e,t,n){h("string"!=typeof f,"You cannot use transitionTo with a static location");var r=this.makePath(e,t,n);U?f.replace(r):f.push(r)},replaceWith:function(e,t,n){h("string"!=typeof f,"You cannot use replaceWith with a static location"),f.replace(this.makePath(e,t,n))},goBack:function(){return h("string"!=typeof f,"You cannot use goBack with a static location"),D.length>1||f===b?(f.pop(),!0):(p(!1,"goBack() was ignored because there is no router history"),!1)},match:function(e){return i(e,a,this.defaultRoute,this.notFoundRoute)||null},dispatch:function(e,t,n){U&&(U.abort(new M),U=null);var r=A.path;if(r!==e){r&&t!==v.REPLACE&&this.recordScrollPosition(r);var o=P.withoutQuery(e),i=this.match(o);p(null!=i,'No route matches path "%s". Make sure you have <Route path="%s"> somewhere in your routes',e,e),null==i&&(i={});var a,s,l=A.routes||[],h=A.params||{},d=A.query||{},f=i.routes||[],m=i.params||{},g=P.extractQuery(e)||{};l.length?(a=l.filter(function(e){return!u(f,e,h,m,d,g)}),s=f.filter(function(e){return!u(l,e,h,m,d,g)})):(a=[],s=f);var y=new _(e,this.replaceWith.bind(this,e));U=y,y.from(a,c,function(r){return r||y.isAborted?n.call(j,r,y):void y.to(s,m,g,function(r){return r||y.isAborted?n.call(j,r,y):(L.path=e,L.action=t,L.pathname=o,L.routes=f,L.params=m,L.query=g,void n.call(j,null,y))})})}},run:function(e){var t=function(t,n){U=null,t?k.call(j,t):n.isAborted?I.call(j,n.abortReason,f):e.call(j,j,L)};if("string"==typeof f)j.dispatch(f,null,t);else{var n=function(e){j.dispatch(e.path,e.type,t)};f.addChangeListener&&f.addChangeListener(n),j.dispatch(f.getCurrentPath(),null,t)}},teardown:function(){f.removeChangeListener(this.changeListener)}},propTypes:{children:O.falsy},getLocation:function(){return f},getScrollBehavior:function(){return x},getRouteAtDepth:function(e){var t=this.state.routes;return t&&t[e]},getRouteComponents:function(){return c},getInitialState:function(){return t(),A},componentWillReceiveProps:function(){t(),this.setState(A)},componentWillUnmount:function(){j.teardown()},render:function(){return this.getRouteAtDepth(0)?l.createElement(m,this.props):null},childContextTypes:{getRouteAtDepth:l.PropTypes.func.isRequired,getRouteComponents:l.PropTypes.func.isRequired,routeHandlers:l.PropTypes.array.isRequired},getChildContext:function(){return{getRouteComponents:this.getRouteComponents,getRouteAtDepth:this.getRouteAtDepth,routeHandlers:[this]}}});return e.routes&&j.addRoutes(e.routes),j}var l=e("react"),p=e("react/lib/warning"),h=e("react/lib/invariant"),d=e("react/lib/ExecutionEnvironment").canUseDOM,f=e("../behaviors/ImitateBrowserBehavior"),m=e("../components/RouteHandler"),v=e("../actions/LocationActions"),g=e("../locations/HashLocation"),y=e("../locations/HistoryLocation"),b=e("../locations/RefreshLocation"),E=e("../mixins/NavigationContext"),w=e("../mixins/StateContext"),C=e("../mixins/Scrolling"),N=e("./createRoutesFromChildren"),R=e("./supportsHistory"),_=e("./Transition"),O=e("./PropTypes"),x=e("./Redirect"),D=e("./History"),M=e("./Cancellation"),P=e("./Path"),T=d?g:"/",S=d?f:null;
t.exports=c}).call(this,e("_process"))},{"../actions/LocationActions":22,"../behaviors/ImitateBrowserBehavior":23,"../components/RouteHandler":30,"../locations/HashLocation":32,"../locations/HistoryLocation":33,"../locations/RefreshLocation":34,"../mixins/NavigationContext":37,"../mixins/Scrolling":39,"../mixins/StateContext":41,"./Cancellation":42,"./History":43,"./Path":44,"./PropTypes":46,"./Redirect":47,"./Transition":48,"./createRoutesFromChildren":50,"./supportsHistory":54,_process:19,react:216,"react/lib/ExecutionEnvironment":90,"react/lib/invariant":196,"react/lib/warning":215}],50:[function(e,t){function n(e,t,n){return a.createClass({statics:{willTransitionTo:function(r,o,i){r.redirect(e,t||o,n||i)}},render:function(){return null}})}function r(e,t,n){for(var r in t)if(t.hasOwnProperty(r)){var o=t[r](n,r,e);o instanceof Error&&s(!1,o.message)}}function o(e,t,o){var a=e.type,s=e.props,h=a&&a.displayName||"UnknownComponent";u(-1!==f.indexOf(a),'Unrecognized route configuration element "<%s>"',h),a.propTypes&&r(h,a.propTypes,s);var m={name:s.name};s.ignoreScrollBehavior&&(m.ignoreScrollBehavior=!0),a===p.type?(m.handler=n(s.to,s.params,s.query),s.path=s.path||s.from||"*"):m.handler=s.handler;var v=t&&t.path||"/";if((s.path||s.name)&&a!==c.type&&a!==l.type){var g=s.path||s.name;d.isAbsolute(g)||(g=d.join(v,g)),m.path=d.normalize(g)}else m.path=v,a===l.type&&(m.path+="*");return m.paramNames=d.extractParamNames(m.path),t&&Array.isArray(t.paramNames)&&t.paramNames.forEach(function(e){u(-1!==m.paramNames.indexOf(e),'The nested route path "%s" is missing the "%s" parameter of its parent path "%s"',m.path,e,t.path)}),s.name&&(u(null==o[s.name],'You cannot use the name "%s" for more than one route',s.name),o[s.name]=m),a===l.type?(u(t,"<NotFoundRoute> must have a parent <Route>"),u(null==t.notFoundRoute,"You may not have more than one <NotFoundRoute> per <Route>"),t.notFoundRoute=m,null):a===c.type?(u(t,"<DefaultRoute> must have a parent <Route>"),u(null==t.defaultRoute,"You may not have more than one <DefaultRoute> per <Route>"),t.defaultRoute=m,null):(m.childRoutes=i(s.children,m,o),m)}function i(e,t,n){var r=[];return a.Children.forEach(e,function(e){(e=o(e,t,n))&&r.push(e)}),r}var a=e("react"),s=e("react/lib/warning"),u=e("react/lib/invariant"),c=e("../components/DefaultRoute"),l=e("../components/NotFoundRoute"),p=e("../components/Redirect"),h=e("../components/Route"),d=e("./Path"),f=[c.type,l.type,p.type,h.type];t.exports=i},{"../components/DefaultRoute":25,"../components/NotFoundRoute":27,"../components/Redirect":28,"../components/Route":29,"./Path":44,react:216,"react/lib/invariant":196,"react/lib/warning":215}],51:[function(e,t){function n(){return r(o,"Cannot get current scroll position without a DOM"),{x:window.pageXOffset||document.documentElement.scrollLeft,y:window.pageYOffset||document.documentElement.scrollTop}}var r=e("react/lib/invariant"),o=e("react/lib/ExecutionEnvironment").canUseDOM;t.exports=n},{"react/lib/ExecutionEnvironment":90,"react/lib/invariant":196}],52:[function(e,t){function n(e){return e.slice(0).reverse()}t.exports=n},{}],53:[function(e,t){function n(e,t,n){"function"==typeof t&&(n=t,t=null);var o=r({routes:e,location:t});return o.run(n),o}var r=e("./createRouter");t.exports=n},{"./createRouter":49}],54:[function(e,t){function n(){var e=navigator.userAgent;return-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone")?window.history&&"pushState"in window.history:!1}t.exports=n},{}],55:[function(e,t){t.exports=e("./lib")},{"./lib":56}],56:[function(e,t){var n=e("./stringify"),r=e("./parse");t.exports={stringify:n,parse:r}},{"./parse":57,"./stringify":58}],57:[function(e,t){var n=e("./utils"),r={delimiter:"&",depth:5,arrayLimit:20,parameterLimit:1e3};r.parseValues=function(e,t){for(var r={},o=e.split(t.delimiter,1/0===t.parameterLimit?void 0:t.parameterLimit),i=0,a=o.length;a>i;++i){var s=o[i],u=-1===s.indexOf("]=")?s.indexOf("="):s.indexOf("]=")+1;if(-1===u)r[n.decode(s)]="";else{var c=n.decode(s.slice(0,u)),l=n.decode(s.slice(u+1));r[c]=r[c]?[].concat(r[c]).concat(l):l}}return r},r.parseObject=function(e,t,n){if(!e.length)return t;var o=e.shift(),i={};if("[]"===o)i=[],i=i.concat(r.parseObject(e,t,n));else{var a="["===o[0]&&"]"===o[o.length-1]?o.slice(1,o.length-1):o,s=parseInt(a,10);!isNaN(s)&&o!==a&&s<=n.arrayLimit?(i=[],i[s]=r.parseObject(e,t,n)):i[a]=r.parseObject(e,t,n)}return i},r.parseKeys=function(e,t,n){if(e){var o=/^([^\[\]]*)/,i=/(\[[^\[\]]*\])/g,a=o.exec(e);if(!Object.prototype.hasOwnProperty(a[1])){var s=[];a[1]&&s.push(a[1]);for(var u=0;null!==(a=i.exec(e))&&u<n.depth;)++u,Object.prototype.hasOwnProperty(a[1].replace(/\[|\]/g,""))||s.push(a[1]);return a&&s.push("["+e.slice(a.index)+"]"),r.parseObject(s,t,n)}}},t.exports=function(e,t){if(""===e||null===e||"undefined"==typeof e)return{};t=t||{},t.delimiter="string"==typeof t.delimiter||n.isRegExp(t.delimiter)?t.delimiter:r.delimiter,t.depth="number"==typeof t.depth?t.depth:r.depth,t.arrayLimit="number"==typeof t.arrayLimit?t.arrayLimit:r.arrayLimit,t.parameterLimit="number"==typeof t.parameterLimit?t.parameterLimit:r.parameterLimit;for(var o="string"==typeof e?r.parseValues(e,t):e,i={},a=Object.keys(o),s=0,u=a.length;u>s;++s){var c=a[s],l=r.parseKeys(c,o[c],t);i=n.merge(i,l)}return n.compact(i)}},{"./utils":59}],58:[function(e,t){var n=e("./utils"),r={delimiter:"&"};r.stringify=function(e,t){if(n.isBuffer(e)?e=e.toString():e instanceof Date?e=e.toISOString():null===e&&(e=""),"string"==typeof e||"number"==typeof e||"boolean"==typeof e)return[encodeURIComponent(t)+"="+encodeURIComponent(e)];var o=[];for(var i in e)e.hasOwnProperty(i)&&(o=o.concat(r.stringify(e[i],t+"["+i+"]")));return o},t.exports=function(e,t){t=t||{};var n="undefined"==typeof t.delimiter?r.delimiter:t.delimiter,o=[];for(var i in e)e.hasOwnProperty(i)&&(o=o.concat(r.stringify(e[i],i)));return o.join(n)}},{"./utils":59}],59:[function(e,t,n){(function(e){n.arrayToObject=function(e){for(var t={},n=0,r=e.length;r>n;++n)"undefined"!=typeof e[n]&&(t[n]=e[n]);return t},n.merge=function(e,t){if(!t)return e;if(Array.isArray(t)){for(var r=0,o=t.length;o>r;++r)"undefined"!=typeof t[r]&&(e[r]="object"==typeof e[r]?n.merge(e[r],t[r]):t[r]);return e}if(Array.isArray(e)){if("object"!=typeof t)return e.push(t),e;e=n.arrayToObject(e)}for(var i=Object.keys(t),a=0,s=i.length;s>a;++a){var u=i[a],c=t[u];e[u]=c&&"object"==typeof c&&e[u]?n.merge(e[u],c):c}return e},n.decode=function(e){try{return decodeURIComponent(e.replace(/\+/g," "))}catch(t){return e}},n.compact=function(e,t){if("object"!=typeof e||null===e)return e;t=t||[];var r=t.indexOf(e);if(-1!==r)return t[r];if(t.push(e),Array.isArray(e)){for(var o=[],i=0,a=e.length;a>i;++i)"undefined"!=typeof e[i]&&o.push(e[i]);return o}for(var s=Object.keys(e),i=0,u=s.length;u>i;++i){var c=s[i];e[c]=n.compact(e[c],t)}return e},n.isRegExp=function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},n.isBuffer=function(t){return"undefined"!=typeof e?e.isBuffer(t):!1}}).call(this,e("buffer").Buffer)},{buffer:15}],60:[function(e,t){!function(e){"use strict";e(function(e){var t=e("./makePromise"),n=e("./Scheduler"),r=e("./async");return t({scheduler:new n(r)})})}("function"==typeof define&&define.amd?define:function(n){t.exports=n(e)})},{"./Scheduler":62,"./async":63,"./makePromise":64}],61:[function(e,t){!function(e){"use strict";e(function(){function e(e){this.head=this.tail=this.length=0,this.buffer=new Array(1<<e)}return e.prototype.push=function(e){return this.length===this.buffer.length&&this._ensureCapacity(2*this.length),this.buffer[this.tail]=e,this.tail=this.tail+1&this.buffer.length-1,++this.length,this.length},e.prototype.shift=function(){var e=this.buffer[this.head];return this.buffer[this.head]=void 0,this.head=this.head+1&this.buffer.length-1,--this.length,e},e.prototype._ensureCapacity=function(e){var t,n=this.head,r=this.buffer,o=new Array(e),i=0;if(0===n)for(t=this.length;t>i;++i)o[i]=r[i];else{for(e=r.length,t=this.tail;e>n;++i,++n)o[i]=r[n];for(n=0;t>n;++i,++n)o[i]=r[n]}this.buffer=o,this.head=0,this.tail=this.length},e})}("function"==typeof define&&define.amd?define:function(e){t.exports=e()})},{}],62:[function(e,t){!function(e){"use strict";e(function(e){function t(e){this._async=e,this._queue=new r(15),this._afterQueue=new r(5),this._running=!1;var t=this;this.drain=function(){t._drain()}}function n(e){for(;e.length>0;)e.shift().run()}var r=e("./Queue");return t.prototype.enqueue=function(e){this._add(this._queue,e)},t.prototype.afterQueue=function(e){this._add(this._afterQueue,e)},t.prototype._drain=function(){n(this._queue),this._running=!1,n(this._afterQueue)},t.prototype._add=function(e,t){e.push(t),this._running||(this._running=!0,this._async(this.drain))},t})}("function"==typeof define&&define.amd?define:function(n){t.exports=n(e)})},{"./Queue":61}],63:[function(e,t){(function(n){!function(e){"use strict";e(function(e){var t,r;return t="undefined"!=typeof n&&null!==n&&"function"==typeof n.nextTick?function(e){n.nextTick(e)}:(r="function"==typeof MutationObserver&&MutationObserver||"function"==typeof WebKitMutationObserver&&WebKitMutationObserver)?function(e,t){function n(){var e=r;r=void 0,e()}var r,o=e.createElement("div"),i=new t(n);return i.observe(o,{attributes:!0}),function(e){r=e,o.setAttribute("class","x")}}(document,r):function(e){var t;try{t=e("vertx")}catch(n){}if(t){if("function"==typeof t.runOnLoop)return t.runOnLoop;if("function"==typeof t.runOnContext)return t.runOnContext}var r=setTimeout;return function(e){r(e,0)}}(e)})}("function"==typeof define&&define.amd?define:function(n){t.exports=n(e)})}).call(this,e("_process"))},{_process:19}],64:[function(e,t){!function(e){"use strict";e(function(){return function(e){function t(e,t){this._handler=e===d?t:n(e)}function n(e){function t(e){o.resolve(e)}function n(e){o.reject(e)}function r(e){o.notify(e)}var o=new m;try{e(t,n,r)}catch(i){n(i)}return o}function r(e){return x(e)?e:new t(d,new v(l(e)))}function o(e){return new t(d,new v(new b(e)))}function i(){return H}function a(){return new t(d,new m)}function s(e){function n(e,t,n){this[e]=t,0===--c&&n.become(new y(this))}var r,o,i,a,s=new m,c=e.length>>>0,l=new Array(c);for(r=0;r<e.length;++r)if(i=e[r],void 0!==i||r in e)if(D(i))if(o=p(i),a=o.state(),0===a)o.fold(n,r,l,s);else{if(!(a>0)){u(e,r+1,o),s.become(o);break}l[r]=o.value,--c}else l[r]=i,--c;else--c;return 0===c&&s.become(new y(l)),new t(d,s)}function u(e,t,n){var r,o,i;for(r=t;r<e.length;++r)i=e[r],D(i)&&(o=p(i),o!==n&&o.visit(o,void 0,o._unreport))}function c(e){if(Object(e)===e&&0===e.length)return i();var n,r,o=new m;for(n=0;n<e.length;++n)r=e[n],void 0!==r&&n in e&&l(r).visit(o,o.resolve,o.reject);return new t(d,o)}function l(e){return x(e)?e._handler.join():D(e)?h(e):new y(e)}function p(e){return x(e)?e._handler.join():h(e)}function h(e){try{var t=e.then;return"function"==typeof t?new g(t,e):new y(e)}catch(n){return new b(n)}}function d(){}function f(){}function m(e,n){t.createContext(this,n),this.consumers=void 0,this.receiver=e,this.handler=void 0,this.resolved=!1}function v(e){this.handler=e}function g(e,t){m.call(this),U.enqueue(new _(e,t,this))}function y(e){t.createContext(this),this.value=e}function b(e){t.createContext(this),this.id=++V,this.value=e,this.handled=!1,this.reported=!1,this._report()}function E(e,t){this.rejection=e,this.context=t}function w(e){this.rejection=e}function C(){return new b(new TypeError("Promise cycle"))}function N(e,t){this.continuation=e,this.handler=t}function R(e,t){this.handler=t,this.value=e}function _(e,t,n){this._then=e,this.thenable=t,this.resolver=n}function O(e,t,n,r,o){try{e.call(t,n,r,o)}catch(i){r(i)}}function x(e){return e instanceof t}function D(e){return("object"==typeof e||"function"==typeof e)&&null!==e}function M(e,n,r,o){return"function"!=typeof e?o.become(n):(t.enterContext(n),S(e,n.value,r,o),void t.exitContext())}function P(e,n,r,o,i){return"function"!=typeof e?i.become(r):(t.enterContext(r),k(e,n,r.value,o,i),void t.exitContext())}function T(e,n,r,o,i){return"function"!=typeof e?i.notify(n):(t.enterContext(r),I(e,n,o,i),void t.exitContext())}function S(e,t,n,r){try{r.become(l(e.call(n,t)))}catch(o){r.become(new b(o))}}function k(e,t,n,r,o){try{e.call(r,t,n,o)}catch(i){o.become(new b(i))}}function I(e,t,n,r){try{r.notify(e.call(n,t))}catch(o){r.notify(o)}}function A(e,t){t.prototype=j(e.prototype),t.prototype.constructor=t}function L(){}var U=e.scheduler,j=Object.create||function(e){function t(){}return t.prototype=e,new t};t.resolve=r,t.reject=o,t.never=i,t._defer=a,t._handler=l,t.prototype.then=function(e,t){var n=this._handler,r=n.join().state();if("function"!=typeof e&&r>0||"function"!=typeof t&&0>r)return new this.constructor(d,n);var o=this._beget(),i=o._handler;return n.chain(i,n.receiver,e,t,arguments.length>2?arguments[2]:void 0),o},t.prototype["catch"]=function(e){return this.then(void 0,e)},t.prototype._beget=function(){var e=this._handler,t=new m(e.receiver,e.join().context);return new this.constructor(d,t)},t.all=s,t.race=c,d.prototype.when=d.prototype.become=d.prototype.notify=d.prototype.fail=d.prototype._unreport=d.prototype._report=L,d.prototype._state=0,d.prototype.state=function(){return this._state},d.prototype.join=function(){for(var e=this;void 0!==e.handler;)e=e.handler;return e},d.prototype.chain=function(e,t,n,r,o){this.when({resolver:e,receiver:t,fulfilled:n,rejected:r,progress:o})},d.prototype.visit=function(e,t,n,r){this.chain(F,e,t,n,r)},d.prototype.fold=function(e,t,n,r){this.visit(r,function(r){e.call(n,t,r,this)},r.reject,r.notify)},A(d,f),f.prototype.become=function(e){e.fail()};var F=new f;A(d,m),m.prototype._state=0,m.prototype.resolve=function(e){this.become(l(e))},m.prototype.reject=function(e){this.resolved||this.become(new b(e))},m.prototype.join=function(){if(!this.resolved)return this;for(var e=this;void 0!==e.handler;)if(e=e.handler,e===this)return this.handler=C();return e},m.prototype.run=function(){var e=this.consumers,t=this.join();this.consumers=void 0;for(var n=0;n<e.length;++n)t.when(e[n])},m.prototype.become=function(e){this.resolved||(this.resolved=!0,this.handler=e,void 0!==this.consumers&&U.enqueue(this),void 0!==this.context&&e._report(this.context))},m.prototype.when=function(e){this.resolved?U.enqueue(new N(e,this.handler)):void 0===this.consumers?this.consumers=[e]:this.consumers.push(e)},m.prototype.notify=function(e){this.resolved||U.enqueue(new R(e,this))},m.prototype.fail=function(e){var t="undefined"==typeof e?this.context:e;this.resolved&&this.handler.join().fail(t)},m.prototype._report=function(e){this.resolved&&this.handler.join()._report(e)},m.prototype._unreport=function(){this.resolved&&this.handler.join()._unreport()},A(d,v),v.prototype.when=function(e){U.enqueue(new N(e,this))},v.prototype._report=function(e){this.join()._report(e)},v.prototype._unreport=function(){this.join()._unreport()},A(m,g),A(d,y),y.prototype._state=1,y.prototype.fold=function(e,t,n,r){P(e,t,this,n,r)},y.prototype.when=function(e){M(e.fulfilled,this,e.receiver,e.resolver)};var V=0;A(d,b),b.prototype._state=-1,b.prototype.fold=function(e,t,n,r){r.become(this)},b.prototype.when=function(e){"function"==typeof e.rejected&&this._unreport(),M(e.rejected,this,e.receiver,e.resolver)},b.prototype._report=function(e){U.afterQueue(new E(this,e))},b.prototype._unreport=function(){this.handled=!0,U.afterQueue(new w(this))},b.prototype.fail=function(e){t.onFatalRejection(this,void 0===e?this.context:e)},E.prototype.run=function(){this.rejection.handled||(this.rejection.reported=!0,t.onPotentiallyUnhandledRejection(this.rejection,this.context))},w.prototype.run=function(){this.rejection.reported&&t.onPotentiallyUnhandledRejectionHandled(this.rejection)},t.createContext=t.enterContext=t.exitContext=t.onPotentiallyUnhandledRejection=t.onPotentiallyUnhandledRejectionHandled=t.onFatalRejection=L;var B=new d,H=new t(d,B);return N.prototype.run=function(){this.handler.join().when(this.continuation)},R.prototype.run=function(){var e=this.handler.consumers;if(void 0!==e)for(var t,n=0;n<e.length;++n)t=e[n],T(t.progress,this.value,this.handler,t.receiver,t.resolver)},_.prototype.run=function(){function e(e){r.resolve(e)}function t(e){r.reject(e)}function n(e){r.notify(e)}var r=this.resolver;O(this._then,this.thenable,e,t,n)},t}})}("function"==typeof define&&define.amd?define:function(e){t.exports=e()})},{}],65:[function(e,t){"use strict";var n=e("underscore"),r=e("react"),o=e("react-input-autosize"),i=e("classnames"),a=e("./Value"),s=0,u=r.createClass({displayName:"Select",propTypes:{value:r.PropTypes.any,multi:r.PropTypes.bool,options:r.PropTypes.array,delimiter:r.PropTypes.string,asyncOptions:r.PropTypes.func,autoload:r.PropTypes.bool,placeholder:r.PropTypes.string,noResultsText:r.PropTypes.string,clearable:r.PropTypes.bool,clearValueText:r.PropTypes.string,clearAllText:r.PropTypes.string,searchPromptText:r.PropTypes.string,name:r.PropTypes.string,onChange:r.PropTypes.func,className:r.PropTypes.string,filterOption:r.PropTypes.func,filterOptions:r.PropTypes.func,matchPos:r.PropTypes.string,matchProp:r.PropTypes.string},getDefaultProps:function(){return{value:void 0,options:[],delimiter:",",asyncOptions:void 0,autoload:!0,placeholder:"Select...",noResultsText:"No results found",clearable:!0,clearValueText:"Clear value",clearAllText:"Clear all",searchPromptText:"Type to search",name:void 0,onChange:void 0,className:void 0,matchPos:"any",matchProp:"any"}},getInitialState:function(){return{options:this.props.options,isFocused:!1,isOpen:!1,isLoading:!1}},componentWillMount:function(){this._optionsCache={},this._optionsFilterString="",this.setState(this.getStateFromValue(this.props.value)),this.props.asyncOptions&&this.props.autoload&&this.autoloadAsyncOptions()},componentWillUnmount:function(){clearTimeout(this._blurTimeout),clearTimeout(this._focusTimeout)},componentWillReceiveProps:function(e){e.value!==this.state.value&&this.setState(this.getStateFromValue(e.value,e.options)),JSON.stringify(e.options)!==JSON.stringify(this.props.options)&&this.setState({options:e.options,filteredOptions:this.filterOptions(e.options)})},componentDidUpdate:function(){if(this._focusAfterUpdate&&(clearTimeout(this._blurTimeout),this._focusTimeout=setTimeout(function(){this.refs.input.focus(),this._focusAfterUpdate=!1}.bind(this),50)),this._focusedOptionReveal){if(this.refs.focused&&this.refs.menu){var e=this.refs.focused.getDOMNode(),t=this.refs.menu.getDOMNode(),n=e.getBoundingClientRect(),r=t.getBoundingClientRect();(n.bottom>r.bottom||n.top<r.top)&&(t.scrollTop=e.offsetTop+e.clientHeight-t.offsetHeight)}this._focusedOptionReveal=!1}},getStateFromValue:function(e,t){t||(t=this.state.options),this._optionsFilterString="";var n=this.initValuesArray(e,t),r=this.filterOptions(t,n);return{value:n.map(function(e){return e.value}).join(this.props.delimiter),values:n,inputValue:"",filteredOptions:r,placeholder:!this.props.multi&&n.length?n[0].label:this.props.placeholder,focusedOption:!this.props.multi&&n.length?n[0]:r[0]}},initValuesArray:function(e,t){return Array.isArray(e)||(e="string"==typeof e?e.split(this.props.delimiter):e?[e]:[]),e.map(function(e){return"string"==typeof e?e=n.findWhere(t,{value:e})||{value:e,label:e}:e}.bind(this))},setValue:function(e){this._focusAfterUpdate=!0;var t=this.getStateFromValue(e);t.isOpen=!1,this.fireChangeEvent(t),this.setState(t)},selectValue:function(e){this.props.multi?e&&this.addValue(e):this.setValue(e)},addValue:function(e){this.setValue(this.state.values.concat(e))},popValue:function(){this.setValue(n.initial(this.state.values))},removeValue:function(e){this.setValue(n.without(this.state.values,e))},clearValue:function(e){e&&"mousedown"==e.type&&0!==e.button||this.setValue(null)},resetValue:function(){this.setValue(this.state.value)},fireChangeEvent:function(e){e.value!==this.state.value&&this.props.onChange&&this.props.onChange(e.value,e.values)},handleMouseDown:function(e){("mousedown"!=e.type||0===e.button)&&(e.stopPropagation(),e.preventDefault(),this.state.isFocused?this.setState({isOpen:!0}):(this._openAfterFocus=!0,this.refs.input.focus()))},handleInputFocus:function(){this.setState({isFocused:!0,isOpen:this.state.isOpen||this._openAfterFocus}),this._openAfterFocus=!1},handleInputBlur:function(){this._blurTimeout=setTimeout(function(){this._focusAfterUpdate||this.setState({isOpen:!1,isFocused:!1})}.bind(this),50)},handleKeyDown:function(e){switch(e.keyCode){case 8:return void(this.state.inputValue||this.popValue());case 9:if(e.shiftKey||!this.state.isOpen||!this.state.focusedOption)return;this.selectFocusedOption();break;case 13:this.selectFocusedOption();break;case 27:this.state.isOpen?this.resetValue():this.clearValue();break;case 38:this.focusPreviousOption();break;case 40:this.focusNextOption();break;default:return}e.preventDefault()},handleInputChange:function(e){if(this._optionsFilterString=e.target.value,this.props.asyncOptions)this.setState({isLoading:!0,inputValue:e.target.value}),this.loadAsyncOptions(e.target.value,{isLoading:!1,isOpen:!0});else{var t=this.filterOptions(this.state.options);this.setState({isOpen:!0,inputValue:e.target.value,filteredOptions:t,focusedOption:n.contains(t,this.state.focusedOption)?this.state.focusedOption:t[0]})}},autoloadAsyncOptions:function(){this.loadAsyncOptions("",{},function(){})},loadAsyncOptions:function(e,t){for(var r=0;r<=e.length;r++){var o=e.slice(0,r);if(this._optionsCache[o]&&(e===o||this._optionsCache[o].complete)){var i=this._optionsCache[o].options;return void this.setState(n.extend({options:i,filteredOptions:this.filterOptions(i)},t))}}var a=this._currentRequestId=s++;this.props.asyncOptions(e,function(r,o){this._optionsCache[e]=o,a===this._currentRequestId&&this.setState(n.extend({options:o.options,filteredOptions:this.filterOptions(o.options)},t))}.bind(this))},filterOptions:function(e,t){var r=this._optionsFilterString,o=(t||this.state.values).map(function(e){return e.value});if(this.props.filterOptions)return this.props.filterOptions.call(this,e,r,o);var i=function(e){return this.props.multi&&n.contains(o,e.value)?!1:this.props.filterOption?this.props.filterOption.call(this,e,r):r&&"start"!==this.props.matchPos?"label"!==this.props.matchProp&&e.value.toLowerCase().indexOf(r.toLowerCase())>=0||"value"!==this.props.matchProp&&e.label.toLowerCase().indexOf(r.toLowerCase())>=0:"label"!==this.props.matchProp&&e.value.toLowerCase().substr(0,r.length)===r||"value"!==this.props.matchProp&&e.label.toLowerCase().substr(0,r.length)===r};return n.filter(e,i,this)},selectFocusedOption:function(){return this.selectValue(this.state.focusedOption)},focusOption:function(e){this.setState({focusedOption:e})},focusNextOption:function(){this.focusAdjacentOption("next")},focusPreviousOption:function(){this.focusAdjacentOption("previous")},focusAdjacentOption:function(e){this._focusedOptionReveal=!0;var t=this.state.filteredOptions;if(!this.state.isOpen)return void this.setState({isOpen:!0,inputValue:"",focusedOption:this.state.focusedOption||t["next"===e?0:t.length-1]});if(t.length){for(var n=-1,r=0;r<t.length;r++)if(this.state.focusedOption===t[r]){n=r;break}var o=t[0];"next"===e&&n>-1&&n<t.length-1?o=t[n+1]:"previous"===e&&(o=n>0?t[n-1]:t[t.length-1]),this.setState({focusedOption:o})}},unfocusOption:function(e){this.state.focusedOption===e&&this.setState({focusedOption:null})},buildMenu:function(){var e=this.state.focusedOption?this.state.focusedOption.value:null,t=n.map(this.state.filteredOptions,function(t){var n=e===t.value,o=i({"Select-option":!0,"is-focused":n}),a=n?"focused":null,s=this.focusOption.bind(this,t),u=this.unfocusOption.bind(this,t),c=this.selectValue.bind(this,t);return r.createElement("div",{ref:a,key:"option-"+t.value,className:o,onMouseEnter:s,onMouseLeave:u,onMouseDown:c,onClick:c},t.label)},this);return t.length?t:r.createElement("div",{className:"Select-noresults"},this.props.asyncOptions&&!this.state.inputValue?this.props.searchPromptText:this.props.noResultsText)},render:function(){var e=i("Select",this.props.className,{"is-multi":this.props.multi,"is-open":this.state.isOpen,"is-focused":this.state.isFocused,"is-loading":this.state.isLoading,"has-value":this.state.value}),t=[];this.props.multi&&this.state.values.forEach(function(e){var o=n.extend({key:e.value,onRemove:this.removeValue.bind(this,e)},e);t.push(r.createElement(a,o))},this),this.state.inputValue||this.props.multi&&t.length||t.push(r.createElement("div",{className:"Select-placeholder",key:"placeholder"},this.state.placeholder));var s=this.state.isLoading?r.createElement("span",{className:"Select-loading","aria-hidden":"true"}):null,u=this.props.clearable&&this.state.value?r.createElement("span",{className:"Select-clear",title:this.props.multi?this.props.clearAllText:this.props.clearValueText,"aria-label":this.props.multi?this.props.clearAllText:this.props.clearValueText,onMouseDown:this.clearValue,onClick:this.clearValue,dangerouslySetInnerHTML:{__html:"&times;"}}):null,c=this.state.isOpen?r.createElement("div",{ref:"menu",onMouseDown:this.handleMouseDown,className:"Select-menu"},this.buildMenu()):null;return r.createElement("div",{ref:"wrapper",className:e},r.createElement("input",{type:"hidden",ref:"value",name:this.props.name,value:this.state.value}),r.createElement("div",{className:"Select-control",ref:"control",onKeyDown:this.handleKeyDown,onMouseDown:this.handleMouseDown,onTouchEnd:this.handleMouseDown},t,r.createElement(o,{className:"Select-input",tabIndex:this.props.tabIndex,ref:"input",value:this.state.inputValue,onFocus:this.handleInputFocus,onBlur:this.handleInputBlur,onChange:this.handleInputChange,minWidth:"5"}),r.createElement("span",{className:"Select-arrow"}),s,u),c)}});t.exports=u},{"./Value":66,classnames:67,react:216,"react-input-autosize":68,underscore:69}],66:[function(e,t){"use strict";var n=(e("underscore"),e("react")),r=(e("classnames"),n.createClass({displayName:"Value",propTypes:{label:n.PropTypes.string.isRequired},blockEvent:function(e){e.stopPropagation()},render:function(){return n.createElement("div",{className:"Select-item"},n.createElement("span",{className:"Select-item-icon",onMouseDown:this.blockEvent,onClick:this.props.onRemove,onTouchEnd:this.props.onRemove},"×"),n.createElement("span",{className:"Select-item-label"},this.props.label))}}));t.exports=r},{classnames:67,react:216,underscore:69}],67:[function(e,t){function n(){for(var e=arguments,t=[],n=0;n<e.length;n++){var r=e[n];if(null!=r)if("string"==typeof r)t.push(r);else if("object"==typeof r)for(var o in r)r.hasOwnProperty(o)&&r[o]&&t.push(o)}return t.join(" ")}t.exports=n},{}],68:[function(e,t){"use strict";var n=e("react"),r={position:"absolute",visibility:"hidden",height:0,width:0,overflow:"scroll",whiteSpace:"nowrap"},o=n.createClass({displayName:"AutosizeInput",propTypes:{value:n.PropTypes.any,defaultValue:n.PropTypes.any,onChange:n.PropTypes.func,style:n.PropTypes.object,className:n.PropTypes.string,inputStyle:n.PropTypes.object,inputClassName:n.PropTypes.string},getDefaultProps:function(){return{minWidth:1}},getInitialState:function(){return{inputWidth:this.props.minWidth}},componentDidMount:function(){this.copyInputStyles(),this.updateInputWidth()},componentDidUpdate:function(){this.updateInputWidth()},copyInputStyles:function(){if(this.isMounted()&&window.getComputedStyle){var e=window.getComputedStyle(this.refs.input.getDOMNode()),t=this.refs.sizer.getDOMNode();t.style.fontSize=e.fontSize,t.style.fontFamily=e.fontFamily}},updateInputWidth:function(){if(this.isMounted()){var e=this.refs.sizer.getDOMNode().scrollWidth+2;e<this.props.minWidth&&(e=this.props.minWidth),e!==this.state.inputWidth&&this.setState({inputWidth:e})}},getInput:function(){return this.refs.input},focus:function(){this.refs.input.getDOMNode().focus()},select:function(){this.refs.input.getDOMNode().select()},render:function(){var e=(this.props.value||"").replace(/ /g,"&nbsp;"),t=this.props.style||{};t.display="inline-block";var o=this.props.inputStyle||{};return o.width=this.state.inputWidth,n.createElement("div",{className:this.props.className,style:t},n.createElement("input",n.__spread({},this.props,{ref:"input",className:this.props.inputClassName,style:o})),n.createElement("div",{ref:"sizer",style:r,dangerouslySetInnerHTML:{__html:e}}))}});t.exports=o},{react:216}],69:[function(e,t,n){(function(){var e=this,r=e._,o=Array.prototype,i=Object.prototype,a=Function.prototype,s=o.push,u=o.slice,c=o.concat,l=i.toString,p=i.hasOwnProperty,h=Array.isArray,d=Object.keys,f=a.bind,m=function(e){return e instanceof m?e:this instanceof m?void(this._wrapped=e):new m(e)};"undefined"!=typeof n?("undefined"!=typeof t&&t.exports&&(n=t.exports=m),n._=m):e._=m,m.VERSION="1.7.0";var v=function(e,t,n){if(void 0===t)return e;switch(null==n?3:n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)};case 4:return function(n,r,o,i){return e.call(t,n,r,o,i)}}return function(){return e.apply(t,arguments)}};m.iteratee=function(e,t,n){return null==e?m.identity:m.isFunction(e)?v(e,t,n):m.isObject(e)?m.matches(e):m.property(e)},m.each=m.forEach=function(e,t,n){if(null==e)return e;t=v(t,n);var r,o=e.length;if(o===+o)for(r=0;o>r;r++)t(e[r],r,e);else{var i=m.keys(e);for(r=0,o=i.length;o>r;r++)t(e[i[r]],i[r],e)}return e},m.map=m.collect=function(e,t,n){if(null==e)return[];t=m.iteratee(t,n);for(var r,o=e.length!==+e.length&&m.keys(e),i=(o||e).length,a=Array(i),s=0;i>s;s++)r=o?o[s]:s,a[s]=t(e[r],r,e);return a};var g="Reduce of empty array with no initial value";m.reduce=m.foldl=m.inject=function(e,t,n,r){null==e&&(e=[]),t=v(t,r,4);var o,i=e.length!==+e.length&&m.keys(e),a=(i||e).length,s=0;if(arguments.length<3){if(!a)throw new TypeError(g);n=e[i?i[s++]:s++]}for(;a>s;s++)o=i?i[s]:s,n=t(n,e[o],o,e);return n},m.reduceRight=m.foldr=function(e,t,n,r){null==e&&(e=[]),t=v(t,r,4);var o,i=e.length!==+e.length&&m.keys(e),a=(i||e).length;if(arguments.length<3){if(!a)throw new TypeError(g);n=e[i?i[--a]:--a]}for(;a--;)o=i?i[a]:a,n=t(n,e[o],o,e);return n},m.find=m.detect=function(e,t,n){var r;return t=m.iteratee(t,n),m.some(e,function(e,n,o){return t(e,n,o)?(r=e,!0):void 0}),r},m.filter=m.select=function(e,t,n){var r=[];return null==e?r:(t=m.iteratee(t,n),m.each(e,function(e,n,o){t(e,n,o)&&r.push(e)}),r)},m.reject=function(e,t,n){return m.filter(e,m.negate(m.iteratee(t)),n)},m.every=m.all=function(e,t,n){if(null==e)return!0;t=m.iteratee(t,n);var r,o,i=e.length!==+e.length&&m.keys(e),a=(i||e).length;for(r=0;a>r;r++)if(o=i?i[r]:r,!t(e[o],o,e))return!1;return!0},m.some=m.any=function(e,t,n){if(null==e)return!1;t=m.iteratee(t,n);var r,o,i=e.length!==+e.length&&m.keys(e),a=(i||e).length;for(r=0;a>r;r++)if(o=i?i[r]:r,t(e[o],o,e))return!0;return!1},m.contains=m.include=function(e,t){return null==e?!1:(e.length!==+e.length&&(e=m.values(e)),m.indexOf(e,t)>=0)},m.invoke=function(e,t){var n=u.call(arguments,2),r=m.isFunction(t);return m.map(e,function(e){return(r?t:e[t]).apply(e,n)})},m.pluck=function(e,t){return m.map(e,m.property(t))},m.where=function(e,t){return m.filter(e,m.matches(t))},m.findWhere=function(e,t){return m.find(e,m.matches(t))},m.max=function(e,t,n){var r,o,i=-1/0,a=-1/0;if(null==t&&null!=e){e=e.length===+e.length?e:m.values(e);for(var s=0,u=e.length;u>s;s++)r=e[s],r>i&&(i=r)}else t=m.iteratee(t,n),m.each(e,function(e,n,r){o=t(e,n,r),(o>a||o===-1/0&&i===-1/0)&&(i=e,a=o)});return i},m.min=function(e,t,n){var r,o,i=1/0,a=1/0;if(null==t&&null!=e){e=e.length===+e.length?e:m.values(e);for(var s=0,u=e.length;u>s;s++)r=e[s],i>r&&(i=r)}else t=m.iteratee(t,n),m.each(e,function(e,n,r){o=t(e,n,r),(a>o||1/0===o&&1/0===i)&&(i=e,a=o)});return i},m.shuffle=function(e){for(var t,n=e&&e.length===+e.length?e:m.values(e),r=n.length,o=Array(r),i=0;r>i;i++)t=m.random(0,i),t!==i&&(o[i]=o[t]),o[t]=n[i];return o},m.sample=function(e,t,n){return null==t||n?(e.length!==+e.length&&(e=m.values(e)),e[m.random(e.length-1)]):m.shuffle(e).slice(0,Math.max(0,t))
},m.sortBy=function(e,t,n){return t=m.iteratee(t,n),m.pluck(m.map(e,function(e,n,r){return{value:e,index:n,criteria:t(e,n,r)}}).sort(function(e,t){var n=e.criteria,r=t.criteria;if(n!==r){if(n>r||void 0===n)return 1;if(r>n||void 0===r)return-1}return e.index-t.index}),"value")};var y=function(e){return function(t,n,r){var o={};return n=m.iteratee(n,r),m.each(t,function(r,i){var a=n(r,i,t);e(o,r,a)}),o}};m.groupBy=y(function(e,t,n){m.has(e,n)?e[n].push(t):e[n]=[t]}),m.indexBy=y(function(e,t,n){e[n]=t}),m.countBy=y(function(e,t,n){m.has(e,n)?e[n]++:e[n]=1}),m.sortedIndex=function(e,t,n,r){n=m.iteratee(n,r,1);for(var o=n(t),i=0,a=e.length;a>i;){var s=i+a>>>1;n(e[s])<o?i=s+1:a=s}return i},m.toArray=function(e){return e?m.isArray(e)?u.call(e):e.length===+e.length?m.map(e,m.identity):m.values(e):[]},m.size=function(e){return null==e?0:e.length===+e.length?e.length:m.keys(e).length},m.partition=function(e,t,n){t=m.iteratee(t,n);var r=[],o=[];return m.each(e,function(e,n,i){(t(e,n,i)?r:o).push(e)}),[r,o]},m.first=m.head=m.take=function(e,t,n){return null==e?void 0:null==t||n?e[0]:0>t?[]:u.call(e,0,t)},m.initial=function(e,t,n){return u.call(e,0,Math.max(0,e.length-(null==t||n?1:t)))},m.last=function(e,t,n){return null==e?void 0:null==t||n?e[e.length-1]:u.call(e,Math.max(e.length-t,0))},m.rest=m.tail=m.drop=function(e,t,n){return u.call(e,null==t||n?1:t)},m.compact=function(e){return m.filter(e,m.identity)};var b=function(e,t,n,r){if(t&&m.every(e,m.isArray))return c.apply(r,e);for(var o=0,i=e.length;i>o;o++){var a=e[o];m.isArray(a)||m.isArguments(a)?t?s.apply(r,a):b(a,t,n,r):n||r.push(a)}return r};m.flatten=function(e,t){return b(e,t,!1,[])},m.without=function(e){return m.difference(e,u.call(arguments,1))},m.uniq=m.unique=function(e,t,n,r){if(null==e)return[];m.isBoolean(t)||(r=n,n=t,t=!1),null!=n&&(n=m.iteratee(n,r));for(var o=[],i=[],a=0,s=e.length;s>a;a++){var u=e[a];if(t)a&&i===u||o.push(u),i=u;else if(n){var c=n(u,a,e);m.indexOf(i,c)<0&&(i.push(c),o.push(u))}else m.indexOf(o,u)<0&&o.push(u)}return o},m.union=function(){return m.uniq(b(arguments,!0,!0,[]))},m.intersection=function(e){if(null==e)return[];for(var t=[],n=arguments.length,r=0,o=e.length;o>r;r++){var i=e[r];if(!m.contains(t,i)){for(var a=1;n>a&&m.contains(arguments[a],i);a++);a===n&&t.push(i)}}return t},m.difference=function(e){var t=b(u.call(arguments,1),!0,!0,[]);return m.filter(e,function(e){return!m.contains(t,e)})},m.zip=function(e){if(null==e)return[];for(var t=m.max(arguments,"length").length,n=Array(t),r=0;t>r;r++)n[r]=m.pluck(arguments,r);return n},m.object=function(e,t){if(null==e)return{};for(var n={},r=0,o=e.length;o>r;r++)t?n[e[r]]=t[r]:n[e[r][0]]=e[r][1];return n},m.indexOf=function(e,t,n){if(null==e)return-1;var r=0,o=e.length;if(n){if("number"!=typeof n)return r=m.sortedIndex(e,t),e[r]===t?r:-1;r=0>n?Math.max(0,o+n):n}for(;o>r;r++)if(e[r]===t)return r;return-1},m.lastIndexOf=function(e,t,n){if(null==e)return-1;var r=e.length;for("number"==typeof n&&(r=0>n?r+n+1:Math.min(r,n+1));--r>=0;)if(e[r]===t)return r;return-1},m.range=function(e,t,n){arguments.length<=1&&(t=e||0,e=0),n=n||1;for(var r=Math.max(Math.ceil((t-e)/n),0),o=Array(r),i=0;r>i;i++,e+=n)o[i]=e;return o};var E=function(){};m.bind=function(e,t){var n,r;if(f&&e.bind===f)return f.apply(e,u.call(arguments,1));if(!m.isFunction(e))throw new TypeError("Bind must be called on a function");return n=u.call(arguments,2),r=function(){if(!(this instanceof r))return e.apply(t,n.concat(u.call(arguments)));E.prototype=e.prototype;var o=new E;E.prototype=null;var i=e.apply(o,n.concat(u.call(arguments)));return m.isObject(i)?i:o}},m.partial=function(e){var t=u.call(arguments,1);return function(){for(var n=0,r=t.slice(),o=0,i=r.length;i>o;o++)r[o]===m&&(r[o]=arguments[n++]);for(;n<arguments.length;)r.push(arguments[n++]);return e.apply(this,r)}},m.bindAll=function(e){var t,n,r=arguments.length;if(1>=r)throw new Error("bindAll must be passed function names");for(t=1;r>t;t++)n=arguments[t],e[n]=m.bind(e[n],e);return e},m.memoize=function(e,t){var n=function(r){var o=n.cache,i=t?t.apply(this,arguments):r;return m.has(o,i)||(o[i]=e.apply(this,arguments)),o[i]};return n.cache={},n},m.delay=function(e,t){var n=u.call(arguments,2);return setTimeout(function(){return e.apply(null,n)},t)},m.defer=function(e){return m.delay.apply(m,[e,1].concat(u.call(arguments,1)))},m.throttle=function(e,t,n){var r,o,i,a=null,s=0;n||(n={});var u=function(){s=n.leading===!1?0:m.now(),a=null,i=e.apply(r,o),a||(r=o=null)};return function(){var c=m.now();s||n.leading!==!1||(s=c);var l=t-(c-s);return r=this,o=arguments,0>=l||l>t?(clearTimeout(a),a=null,s=c,i=e.apply(r,o),a||(r=o=null)):a||n.trailing===!1||(a=setTimeout(u,l)),i}},m.debounce=function(e,t,n){var r,o,i,a,s,u=function(){var c=m.now()-a;t>c&&c>0?r=setTimeout(u,t-c):(r=null,n||(s=e.apply(i,o),r||(i=o=null)))};return function(){i=this,o=arguments,a=m.now();var c=n&&!r;return r||(r=setTimeout(u,t)),c&&(s=e.apply(i,o),i=o=null),s}},m.wrap=function(e,t){return m.partial(t,e)},m.negate=function(e){return function(){return!e.apply(this,arguments)}},m.compose=function(){var e=arguments,t=e.length-1;return function(){for(var n=t,r=e[t].apply(this,arguments);n--;)r=e[n].call(this,r);return r}},m.after=function(e,t){return function(){return--e<1?t.apply(this,arguments):void 0}},m.before=function(e,t){var n;return function(){return--e>0?n=t.apply(this,arguments):t=null,n}},m.once=m.partial(m.before,2),m.keys=function(e){if(!m.isObject(e))return[];if(d)return d(e);var t=[];for(var n in e)m.has(e,n)&&t.push(n);return t},m.values=function(e){for(var t=m.keys(e),n=t.length,r=Array(n),o=0;n>o;o++)r[o]=e[t[o]];return r},m.pairs=function(e){for(var t=m.keys(e),n=t.length,r=Array(n),o=0;n>o;o++)r[o]=[t[o],e[t[o]]];return r},m.invert=function(e){for(var t={},n=m.keys(e),r=0,o=n.length;o>r;r++)t[e[n[r]]]=n[r];return t},m.functions=m.methods=function(e){var t=[];for(var n in e)m.isFunction(e[n])&&t.push(n);return t.sort()},m.extend=function(e){if(!m.isObject(e))return e;for(var t,n,r=1,o=arguments.length;o>r;r++){t=arguments[r];for(n in t)p.call(t,n)&&(e[n]=t[n])}return e},m.pick=function(e,t,n){var r,o={};if(null==e)return o;if(m.isFunction(t)){t=v(t,n);for(r in e){var i=e[r];t(i,r,e)&&(o[r]=i)}}else{var a=c.apply([],u.call(arguments,1));e=new Object(e);for(var s=0,l=a.length;l>s;s++)r=a[s],r in e&&(o[r]=e[r])}return o},m.omit=function(e,t,n){if(m.isFunction(t))t=m.negate(t);else{var r=m.map(c.apply([],u.call(arguments,1)),String);t=function(e,t){return!m.contains(r,t)}}return m.pick(e,t,n)},m.defaults=function(e){if(!m.isObject(e))return e;for(var t=1,n=arguments.length;n>t;t++){var r=arguments[t];for(var o in r)void 0===e[o]&&(e[o]=r[o])}return e},m.clone=function(e){return m.isObject(e)?m.isArray(e)?e.slice():m.extend({},e):e},m.tap=function(e,t){return t(e),e};var w=function(e,t,n,r){if(e===t)return 0!==e||1/e===1/t;if(null==e||null==t)return e===t;e instanceof m&&(e=e._wrapped),t instanceof m&&(t=t._wrapped);var o=l.call(e);if(o!==l.call(t))return!1;switch(o){case"[object RegExp]":case"[object String]":return""+e==""+t;case"[object Number]":return+e!==+e?+t!==+t:0===+e?1/+e===1/t:+e===+t;case"[object Date]":case"[object Boolean]":return+e===+t}if("object"!=typeof e||"object"!=typeof t)return!1;for(var i=n.length;i--;)if(n[i]===e)return r[i]===t;var a=e.constructor,s=t.constructor;if(a!==s&&"constructor"in e&&"constructor"in t&&!(m.isFunction(a)&&a instanceof a&&m.isFunction(s)&&s instanceof s))return!1;n.push(e),r.push(t);var u,c;if("[object Array]"===o){if(u=e.length,c=u===t.length)for(;u--&&(c=w(e[u],t[u],n,r)););}else{var p,h=m.keys(e);if(u=h.length,c=m.keys(t).length===u)for(;u--&&(p=h[u],c=m.has(t,p)&&w(e[p],t[p],n,r)););}return n.pop(),r.pop(),c};m.isEqual=function(e,t){return w(e,t,[],[])},m.isEmpty=function(e){if(null==e)return!0;if(m.isArray(e)||m.isString(e)||m.isArguments(e))return 0===e.length;for(var t in e)if(m.has(e,t))return!1;return!0},m.isElement=function(e){return!(!e||1!==e.nodeType)},m.isArray=h||function(e){return"[object Array]"===l.call(e)},m.isObject=function(e){var t=typeof e;return"function"===t||"object"===t&&!!e},m.each(["Arguments","Function","String","Number","Date","RegExp"],function(e){m["is"+e]=function(t){return l.call(t)==="[object "+e+"]"}}),m.isArguments(arguments)||(m.isArguments=function(e){return m.has(e,"callee")}),"function"!=typeof/./&&(m.isFunction=function(e){return"function"==typeof e||!1}),m.isFinite=function(e){return isFinite(e)&&!isNaN(parseFloat(e))},m.isNaN=function(e){return m.isNumber(e)&&e!==+e},m.isBoolean=function(e){return e===!0||e===!1||"[object Boolean]"===l.call(e)},m.isNull=function(e){return null===e},m.isUndefined=function(e){return void 0===e},m.has=function(e,t){return null!=e&&p.call(e,t)},m.noConflict=function(){return e._=r,this},m.identity=function(e){return e},m.constant=function(e){return function(){return e}},m.noop=function(){},m.property=function(e){return function(t){return t[e]}},m.matches=function(e){var t=m.pairs(e),n=t.length;return function(e){if(null==e)return!n;e=new Object(e);for(var r=0;n>r;r++){var o=t[r],i=o[0];if(o[1]!==e[i]||!(i in e))return!1}return!0}},m.times=function(e,t,n){var r=Array(Math.max(0,e));t=v(t,n,1);for(var o=0;e>o;o++)r[o]=t(o);return r},m.random=function(e,t){return null==t&&(t=e,e=0),e+Math.floor(Math.random()*(t-e+1))},m.now=Date.now||function(){return(new Date).getTime()};var C={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},N=m.invert(C),R=function(e){var t=function(t){return e[t]},n="(?:"+m.keys(e).join("|")+")",r=RegExp(n),o=RegExp(n,"g");return function(e){return e=null==e?"":""+e,r.test(e)?e.replace(o,t):e}};m.escape=R(C),m.unescape=R(N),m.result=function(e,t){if(null==e)return void 0;var n=e[t];return m.isFunction(n)?e[t]():n};var _=0;m.uniqueId=function(e){var t=++_+"";return e?e+t:t},m.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var O=/(.)^/,x={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},D=/\\|'|\r|\n|\u2028|\u2029/g,M=function(e){return"\\"+x[e]};m.template=function(e,t,n){!t&&n&&(t=n),t=m.defaults({},t,m.templateSettings);var r=RegExp([(t.escape||O).source,(t.interpolate||O).source,(t.evaluate||O).source].join("|")+"|$","g"),o=0,i="__p+='";e.replace(r,function(t,n,r,a,s){return i+=e.slice(o,s).replace(D,M),o=s+t.length,n?i+="'+\n((__t=("+n+"))==null?'':_.escape(__t))+\n'":r?i+="'+\n((__t=("+r+"))==null?'':__t)+\n'":a&&(i+="';\n"+a+"\n__p+='"),t}),i+="';\n",t.variable||(i="with(obj||{}){\n"+i+"}\n"),i="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+i+"return __p;\n";try{var a=new Function(t.variable||"obj","_",i)}catch(s){throw s.source=i,s}var u=function(e){return a.call(this,e,m)},c=t.variable||"obj";return u.source="function("+c+"){\n"+i+"}",u},m.chain=function(e){var t=m(e);return t._chain=!0,t};var P=function(e){return this._chain?m(e).chain():e};m.mixin=function(e){m.each(m.functions(e),function(t){var n=m[t]=e[t];m.prototype[t]=function(){var e=[this._wrapped];return s.apply(e,arguments),P.call(this,n.apply(m,e))}})},m.mixin(m),m.each(["pop","push","reverse","shift","sort","splice","unshift"],function(e){var t=o[e];m.prototype[e]=function(){var n=this._wrapped;return t.apply(n,arguments),"shift"!==e&&"splice"!==e||0!==n.length||delete n[0],P.call(this,n)}}),m.each(["concat","join","slice"],function(e){var t=o[e];m.prototype[e]=function(){return P.call(this,t.apply(this._wrapped,arguments))}}),m.prototype.value=function(){return this._wrapped},"function"==typeof define&&define.amd&&define("underscore",[],function(){return m})}).call(this)},{}],70:[function(e,t){"use strict";var n=e("./focusNode"),r={componentDidMount:function(){this.props.autoFocus&&n(this.getDOMNode())}};t.exports=r},{"./focusNode":181}],71:[function(e,t){"use strict";function n(){var e=window.opera;return"object"==typeof e&&"function"==typeof e.version&&parseInt(e.version(),10)<=12}function r(e){return(e.ctrlKey||e.altKey||e.metaKey)&&!(e.ctrlKey&&e.altKey)}var o=e("./EventConstants"),i=e("./EventPropagators"),a=e("./ExecutionEnvironment"),s=e("./SyntheticInputEvent"),u=e("./keyOf"),c=a.canUseDOM&&"TextEvent"in window&&!("documentMode"in document||n()),l=32,p=String.fromCharCode(l),h=o.topLevelTypes,d={beforeInput:{phasedRegistrationNames:{bubbled:u({onBeforeInput:null}),captured:u({onBeforeInputCapture:null})},dependencies:[h.topCompositionEnd,h.topKeyPress,h.topTextInput,h.topPaste]}},f=null,m=!1,v={eventTypes:d,extractEvents:function(e,t,n,o){var a;if(c)switch(e){case h.topKeyPress:var u=o.which;if(u!==l)return;m=!0,a=p;break;case h.topTextInput:if(a=o.data,a===p&&m)return;break;default:return}else{switch(e){case h.topPaste:f=null;break;case h.topKeyPress:o.which&&!r(o)&&(f=String.fromCharCode(o.which));break;case h.topCompositionEnd:f=o.data}if(null===f)return;a=f}if(a){var v=s.getPooled(d.beforeInput,n,o);return v.data=a,f=null,i.accumulateTwoPhaseDispatches(v),v}}};t.exports=v},{"./EventConstants":84,"./EventPropagators":89,"./ExecutionEnvironment":90,"./SyntheticInputEvent":158,"./keyOf":203}],72:[function(e,t){"use strict";function n(e,t){return e+t.charAt(0).toUpperCase()+t.substring(1)}var r={columnCount:!0,flex:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,strokeOpacity:!0},o=["Webkit","ms","Moz","O"];Object.keys(r).forEach(function(e){o.forEach(function(t){r[n(t,e)]=r[e]})});var i={background:{backgroundImage:!0,backgroundPosition:!0,backgroundRepeat:!0,backgroundColor:!0},border:{borderWidth:!0,borderStyle:!0,borderColor:!0},borderBottom:{borderBottomWidth:!0,borderBottomStyle:!0,borderBottomColor:!0},borderLeft:{borderLeftWidth:!0,borderLeftStyle:!0,borderLeftColor:!0},borderRight:{borderRightWidth:!0,borderRightStyle:!0,borderRightColor:!0},borderTop:{borderTopWidth:!0,borderTopStyle:!0,borderTopColor:!0},font:{fontStyle:!0,fontVariant:!0,fontWeight:!0,fontSize:!0,lineHeight:!0,fontFamily:!0}},a={isUnitlessNumber:r,shorthandPropertyExpansions:i};t.exports=a},{}],73:[function(e,t){(function(n){"use strict";var r=e("./CSSProperty"),o=e("./ExecutionEnvironment"),i=e("./camelizeStyleName"),a=e("./dangerousStyleValue"),s=e("./hyphenateStyleName"),u=e("./memoizeStringOnly"),c=e("./warning"),l=u(function(e){return s(e)}),p="cssFloat";if(o.canUseDOM&&void 0===document.documentElement.style.cssFloat&&(p="styleFloat"),"production"!==n.env.NODE_ENV)var h={},d=function(e){h.hasOwnProperty(e)&&h[e]||(h[e]=!0,"production"!==n.env.NODE_ENV?c(!1,"Unsupported style property "+e+". Did you mean "+i(e)+"?"):null)};var f={createMarkupForStyles:function(e){var t="";for(var r in e)if(e.hasOwnProperty(r)){"production"!==n.env.NODE_ENV&&r.indexOf("-")>-1&&d(r);var o=e[r];null!=o&&(t+=l(r)+":",t+=a(r,o)+";")}return t||null},setValueForStyles:function(e,t){var o=e.style;for(var i in t)if(t.hasOwnProperty(i)){"production"!==n.env.NODE_ENV&&i.indexOf("-")>-1&&d(i);var s=a(i,t[i]);if("float"===i&&(i=p),s)o[i]=s;else{var u=r.shorthandPropertyExpansions[i];if(u)for(var c in u)o[c]="";else o[i]=""}}}};t.exports=f}).call(this,e("_process"))},{"./CSSProperty":72,"./ExecutionEnvironment":90,"./camelizeStyleName":169,"./dangerousStyleValue":175,"./hyphenateStyleName":194,"./memoizeStringOnly":205,"./warning":215,_process:19}],74:[function(e,t){(function(n){"use strict";function r(){this._callbacks=null,this._contexts=null}var o=e("./PooledClass"),i=e("./Object.assign"),a=e("./invariant");i(r.prototype,{enqueue:function(e,t){this._callbacks=this._callbacks||[],this._contexts=this._contexts||[],this._callbacks.push(e),this._contexts.push(t)},notifyAll:function(){var e=this._callbacks,t=this._contexts;if(e){"production"!==n.env.NODE_ENV?a(e.length===t.length,"Mismatched list of contexts in callback queue"):a(e.length===t.length),this._callbacks=null,this._contexts=null;for(var r=0,o=e.length;o>r;r++)e[r].call(t[r]);e.length=0,t.length=0}},reset:function(){this._callbacks=null,this._contexts=null},destructor:function(){this.reset()}}),o.addPoolingTo(r),t.exports=r}).call(this,e("_process"))},{"./Object.assign":95,"./PooledClass":96,"./invariant":196,_process:19}],75:[function(e,t){"use strict";function n(e){return"SELECT"===e.nodeName||"INPUT"===e.nodeName&&"file"===e.type}function r(e){var t=C.getPooled(x.change,M,e);b.accumulateTwoPhaseDispatches(t),w.batchedUpdates(o,t)}function o(e){y.enqueueEvents(e),y.processEventQueue()}function i(e,t){D=e,M=t,D.attachEvent("onchange",r)}function a(){D&&(D.detachEvent("onchange",r),D=null,M=null)}function s(e,t,n){return e===O.topChange?n:void 0}function u(e,t,n){e===O.topFocus?(a(),i(t,n)):e===O.topBlur&&a()}function c(e,t){D=e,M=t,P=e.value,T=Object.getOwnPropertyDescriptor(e.constructor.prototype,"value"),Object.defineProperty(D,"value",I),D.attachEvent("onpropertychange",p)}function l(){D&&(delete D.value,D.detachEvent("onpropertychange",p),D=null,M=null,P=null,T=null)}function p(e){if("value"===e.propertyName){var t=e.srcElement.value;t!==P&&(P=t,r(e))}}function h(e,t,n){return e===O.topInput?n:void 0}function d(e,t,n){e===O.topFocus?(l(),c(t,n)):e===O.topBlur&&l()}function f(e){return e!==O.topSelectionChange&&e!==O.topKeyUp&&e!==O.topKeyDown||!D||D.value===P?void 0:(P=D.value,M)}function m(e){return"INPUT"===e.nodeName&&("checkbox"===e.type||"radio"===e.type)}function v(e,t,n){return e===O.topClick?n:void 0}var g=e("./EventConstants"),y=e("./EventPluginHub"),b=e("./EventPropagators"),E=e("./ExecutionEnvironment"),w=e("./ReactUpdates"),C=e("./SyntheticEvent"),N=e("./isEventSupported"),R=e("./isTextInputElement"),_=e("./keyOf"),O=g.topLevelTypes,x={change:{phasedRegistrationNames:{bubbled:_({onChange:null}),captured:_({onChangeCapture:null})},dependencies:[O.topBlur,O.topChange,O.topClick,O.topFocus,O.topInput,O.topKeyDown,O.topKeyUp,O.topSelectionChange]}},D=null,M=null,P=null,T=null,S=!1;E.canUseDOM&&(S=N("change")&&(!("documentMode"in document)||document.documentMode>8));var k=!1;E.canUseDOM&&(k=N("input")&&(!("documentMode"in document)||document.documentMode>9));var I={get:function(){return T.get.call(this)},set:function(e){P=""+e,T.set.call(this,e)}},A={eventTypes:x,extractEvents:function(e,t,r,o){var i,a;if(n(t)?S?i=s:a=u:R(t)?k?i=h:(i=f,a=d):m(t)&&(i=v),i){var c=i(e,t,r);if(c){var l=C.getPooled(x.change,c,o);return b.accumulateTwoPhaseDispatches(l),l}}a&&a(e,t,r)}};t.exports=A},{"./EventConstants":84,"./EventPluginHub":86,"./EventPropagators":89,"./ExecutionEnvironment":90,"./ReactUpdates":148,"./SyntheticEvent":156,"./isEventSupported":197,"./isTextInputElement":199,"./keyOf":203}],76:[function(e,t){"use strict";var n=0,r={createReactRootIndex:function(){return n++}};t.exports=r},{}],77:[function(e,t){"use strict";function n(e){switch(e){case g.topCompositionStart:return b.compositionStart;case g.topCompositionEnd:return b.compositionEnd;case g.topCompositionUpdate:return b.compositionUpdate}}function r(e,t){return e===g.topKeyDown&&t.keyCode===f}function o(e,t){switch(e){case g.topKeyUp:return-1!==d.indexOf(t.keyCode);case g.topKeyDown:return t.keyCode!==f;case g.topKeyPress:case g.topMouseDown:case g.topBlur:return!0;default:return!1}}function i(e){this.root=e,this.startSelection=c.getSelection(e),this.startValue=this.getText()}var a=e("./EventConstants"),s=e("./EventPropagators"),u=e("./ExecutionEnvironment"),c=e("./ReactInputSelection"),l=e("./SyntheticCompositionEvent"),p=e("./getTextContentAccessor"),h=e("./keyOf"),d=[9,13,27,32],f=229,m=u.canUseDOM&&"CompositionEvent"in window,v=!m||"documentMode"in document&&document.documentMode>8&&document.documentMode<=11,g=a.topLevelTypes,y=null,b={compositionEnd:{phasedRegistrationNames:{bubbled:h({onCompositionEnd:null}),captured:h({onCompositionEndCapture:null})},dependencies:[g.topBlur,g.topCompositionEnd,g.topKeyDown,g.topKeyPress,g.topKeyUp,g.topMouseDown]},compositionStart:{phasedRegistrationNames:{bubbled:h({onCompositionStart:null}),captured:h({onCompositionStartCapture:null})},dependencies:[g.topBlur,g.topCompositionStart,g.topKeyDown,g.topKeyPress,g.topKeyUp,g.topMouseDown]},compositionUpdate:{phasedRegistrationNames:{bubbled:h({onCompositionUpdate:null}),captured:h({onCompositionUpdateCapture:null})},dependencies:[g.topBlur,g.topCompositionUpdate,g.topKeyDown,g.topKeyPress,g.topKeyUp,g.topMouseDown]}};i.prototype.getText=function(){return this.root.value||this.root[p()]},i.prototype.getData=function(){var e=this.getText(),t=this.startSelection.start,n=this.startValue.length-this.startSelection.end;return e.substr(t,e.length-n-t)};var E={eventTypes:b,extractEvents:function(e,t,a,u){var c,p;if(m?c=n(e):y?o(e,u)&&(c=b.compositionEnd):r(e,u)&&(c=b.compositionStart),v&&(y||c!==b.compositionStart?c===b.compositionEnd&&y&&(p=y.getData(),y=null):y=new i(t)),c){var h=l.getPooled(c,a,u);return p&&(h.data=p),s.accumulateTwoPhaseDispatches(h),h}}};t.exports=E},{"./EventConstants":84,"./EventPropagators":89,"./ExecutionEnvironment":90,"./ReactInputSelection":128,"./SyntheticCompositionEvent":154,"./getTextContentAccessor":191,"./keyOf":203}],78:[function(e,t){(function(n){"use strict";function r(e,t,n){e.insertBefore(t,e.childNodes[n]||null)}var o,i=e("./Danger"),a=e("./ReactMultiChildUpdateTypes"),s=e("./getTextContentAccessor"),u=e("./invariant"),c=s();o="textContent"===c?function(e,t){e.textContent=t}:function(e,t){for(;e.firstChild;)e.removeChild(e.firstChild);if(t){var n=e.ownerDocument||document;e.appendChild(n.createTextNode(t))}};var l={dangerouslyReplaceNodeWithMarkup:i.dangerouslyReplaceNodeWithMarkup,updateTextContent:o,processUpdates:function(e,t){for(var s,c=null,l=null,p=0;s=e[p];p++)if(s.type===a.MOVE_EXISTING||s.type===a.REMOVE_NODE){var h=s.fromIndex,d=s.parentNode.childNodes[h],f=s.parentID;"production"!==n.env.NODE_ENV?u(d,"processUpdates(): Unable to find child %s of element. This probably means the DOM was unexpectedly mutated (e.g., by the browser), usually due to forgetting a <tbody> when using tables, nesting tags like <form>, <p>, or <a>, or using non-SVG elements in an <svg> parent. Try inspecting the child nodes of the element with React ID `%s`.",h,f):u(d),c=c||{},c[f]=c[f]||[],c[f][h]=d,l=l||[],l.push(d)}var m=i.dangerouslyRenderMarkup(t);if(l)for(var v=0;v<l.length;v++)l[v].parentNode.removeChild(l[v]);for(var g=0;s=e[g];g++)switch(s.type){case a.INSERT_MARKUP:r(s.parentNode,m[s.markupIndex],s.toIndex);break;case a.MOVE_EXISTING:r(s.parentNode,c[s.parentID][s.fromIndex],s.toIndex);break;case a.TEXT_CONTENT:o(s.parentNode,s.textContent);break;case a.REMOVE_NODE:}}};t.exports=l}).call(this,e("_process"))},{"./Danger":81,"./ReactMultiChildUpdateTypes":134,"./getTextContentAccessor":191,"./invariant":196,_process:19}],79:[function(e,t){(function(n){"use strict";function r(e,t){return(e&t)===t}var o=e("./invariant"),i={MUST_USE_ATTRIBUTE:1,MUST_USE_PROPERTY:2,HAS_SIDE_EFFECTS:4,HAS_BOOLEAN_VALUE:8,HAS_NUMERIC_VALUE:16,HAS_POSITIVE_NUMERIC_VALUE:48,HAS_OVERLOADED_BOOLEAN_VALUE:64,injectDOMPropertyConfig:function(e){var t=e.Properties||{},a=e.DOMAttributeNames||{},u=e.DOMPropertyNames||{},c=e.DOMMutationMethods||{};e.isCustomAttribute&&s._isCustomAttributeFunctions.push(e.isCustomAttribute);for(var l in t){"production"!==n.env.NODE_ENV?o(!s.isStandardName.hasOwnProperty(l),"injectDOMPropertyConfig(...): You're trying to inject DOM property '%s' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.",l):o(!s.isStandardName.hasOwnProperty(l)),s.isStandardName[l]=!0;var p=l.toLowerCase();if(s.getPossibleStandardName[p]=l,a.hasOwnProperty(l)){var h=a[l];s.getPossibleStandardName[h]=l,s.getAttributeName[l]=h}else s.getAttributeName[l]=p;s.getPropertyName[l]=u.hasOwnProperty(l)?u[l]:l,s.getMutationMethod[l]=c.hasOwnProperty(l)?c[l]:null;var d=t[l];s.mustUseAttribute[l]=r(d,i.MUST_USE_ATTRIBUTE),s.mustUseProperty[l]=r(d,i.MUST_USE_PROPERTY),s.hasSideEffects[l]=r(d,i.HAS_SIDE_EFFECTS),s.hasBooleanValue[l]=r(d,i.HAS_BOOLEAN_VALUE),s.hasNumericValue[l]=r(d,i.HAS_NUMERIC_VALUE),s.hasPositiveNumericValue[l]=r(d,i.HAS_POSITIVE_NUMERIC_VALUE),s.hasOverloadedBooleanValue[l]=r(d,i.HAS_OVERLOADED_BOOLEAN_VALUE),"production"!==n.env.NODE_ENV?o(!s.mustUseAttribute[l]||!s.mustUseProperty[l],"DOMProperty: Cannot require using both attribute and property: %s",l):o(!s.mustUseAttribute[l]||!s.mustUseProperty[l]),"production"!==n.env.NODE_ENV?o(s.mustUseProperty[l]||!s.hasSideEffects[l],"DOMProperty: Properties that have side effects must use property: %s",l):o(s.mustUseProperty[l]||!s.hasSideEffects[l]),"production"!==n.env.NODE_ENV?o(!!s.hasBooleanValue[l]+!!s.hasNumericValue[l]+!!s.hasOverloadedBooleanValue[l]<=1,"DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s",l):o(!!s.hasBooleanValue[l]+!!s.hasNumericValue[l]+!!s.hasOverloadedBooleanValue[l]<=1)}}},a={},s={ID_ATTRIBUTE_NAME:"data-reactid",isStandardName:{},getPossibleStandardName:{},getAttributeName:{},getPropertyName:{},getMutationMethod:{},mustUseAttribute:{},mustUseProperty:{},hasSideEffects:{},hasBooleanValue:{},hasNumericValue:{},hasPositiveNumericValue:{},hasOverloadedBooleanValue:{},_isCustomAttributeFunctions:[],isCustomAttribute:function(e){for(var t=0;t<s._isCustomAttributeFunctions.length;t++){var n=s._isCustomAttributeFunctions[t];if(n(e))return!0}return!1},getDefaultValueForProperty:function(e,t){var n,r=a[e];return r||(a[e]=r={}),t in r||(n=document.createElement(e),r[t]=n[t]),r[t]},injection:i};t.exports=s}).call(this,e("_process"))},{"./invariant":196,_process:19}],80:[function(e,t){(function(n){"use strict";function r(e,t){return null==t||o.hasBooleanValue[e]&&!t||o.hasNumericValue[e]&&isNaN(t)||o.hasPositiveNumericValue[e]&&1>t||o.hasOverloadedBooleanValue[e]&&t===!1}var o=e("./DOMProperty"),i=e("./escapeTextForBrowser"),a=e("./memoizeStringOnly"),s=e("./warning"),u=a(function(e){return i(e)+'="'});if("production"!==n.env.NODE_ENV)var c={children:!0,dangerouslySetInnerHTML:!0,key:!0,ref:!0},l={},p=function(e){if(!(c.hasOwnProperty(e)&&c[e]||l.hasOwnProperty(e)&&l[e])){l[e]=!0;var t=e.toLowerCase(),r=o.isCustomAttribute(t)?t:o.getPossibleStandardName.hasOwnProperty(t)?o.getPossibleStandardName[t]:null;"production"!==n.env.NODE_ENV?s(null==r,"Unknown DOM property "+e+". Did you mean "+r+"?"):null}};var h={createMarkupForID:function(e){return u(o.ID_ATTRIBUTE_NAME)+i(e)+'"'},createMarkupForProperty:function(e,t){if(o.isStandardName.hasOwnProperty(e)&&o.isStandardName[e]){if(r(e,t))return"";var a=o.getAttributeName[e];return o.hasBooleanValue[e]||o.hasOverloadedBooleanValue[e]&&t===!0?i(a):u(a)+i(t)+'"'}return o.isCustomAttribute(e)?null==t?"":u(e)+i(t)+'"':("production"!==n.env.NODE_ENV&&p(e),null)},setValueForProperty:function(e,t,i){if(o.isStandardName.hasOwnProperty(t)&&o.isStandardName[t]){var a=o.getMutationMethod[t];if(a)a(e,i);else if(r(t,i))this.deleteValueForProperty(e,t);else if(o.mustUseAttribute[t])e.setAttribute(o.getAttributeName[t],""+i);else{var s=o.getPropertyName[t];o.hasSideEffects[t]&&""+e[s]==""+i||(e[s]=i)}}else o.isCustomAttribute(t)?null==i?e.removeAttribute(t):e.setAttribute(t,""+i):"production"!==n.env.NODE_ENV&&p(t)},deleteValueForProperty:function(e,t){if(o.isStandardName.hasOwnProperty(t)&&o.isStandardName[t]){var r=o.getMutationMethod[t];if(r)r(e,void 0);else if(o.mustUseAttribute[t])e.removeAttribute(o.getAttributeName[t]);else{var i=o.getPropertyName[t],a=o.getDefaultValueForProperty(e.nodeName,i);o.hasSideEffects[t]&&""+e[i]===a||(e[i]=a)}}else o.isCustomAttribute(t)?e.removeAttribute(t):"production"!==n.env.NODE_ENV&&p(t)}};t.exports=h}).call(this,e("_process"))},{"./DOMProperty":79,"./escapeTextForBrowser":179,"./memoizeStringOnly":205,"./warning":215,_process:19}],81:[function(e,t){(function(n){"use strict";function r(e){return e.substring(1,e.indexOf(" "))}var o=e("./ExecutionEnvironment"),i=e("./createNodesFromMarkup"),a=e("./emptyFunction"),s=e("./getMarkupWrap"),u=e("./invariant"),c=/^(<[^ \/>]+)/,l="data-danger-index",p={dangerouslyRenderMarkup:function(e){"production"!==n.env.NODE_ENV?u(o.canUseDOM,"dangerouslyRenderMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use React.renderToString for server rendering."):u(o.canUseDOM);for(var t,p={},h=0;h<e.length;h++)"production"!==n.env.NODE_ENV?u(e[h],"dangerouslyRenderMarkup(...): Missing markup."):u(e[h]),t=r(e[h]),t=s(t)?t:"*",p[t]=p[t]||[],p[t][h]=e[h];var d=[],f=0;for(t in p)if(p.hasOwnProperty(t)){var m=p[t];for(var v in m)if(m.hasOwnProperty(v)){var g=m[v];m[v]=g.replace(c,"$1 "+l+'="'+v+'" ')}var y=i(m.join(""),a);for(h=0;h<y.length;++h){var b=y[h];b.hasAttribute&&b.hasAttribute(l)?(v=+b.getAttribute(l),b.removeAttribute(l),"production"!==n.env.NODE_ENV?u(!d.hasOwnProperty(v),"Danger: Assigning to an already-occupied result index."):u(!d.hasOwnProperty(v)),d[v]=b,f+=1):"production"!==n.env.NODE_ENV&&console.error("Danger: Discarding unexpected node:",b)}}return"production"!==n.env.NODE_ENV?u(f===d.length,"Danger: Did not assign to every index of resultList."):u(f===d.length),"production"!==n.env.NODE_ENV?u(d.length===e.length,"Danger: Expected markup to render %s nodes, but rendered %s.",e.length,d.length):u(d.length===e.length),d},dangerouslyReplaceNodeWithMarkup:function(e,t){"production"!==n.env.NODE_ENV?u(o.canUseDOM,"dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use React.renderToString for server rendering."):u(o.canUseDOM),"production"!==n.env.NODE_ENV?u(t,"dangerouslyReplaceNodeWithMarkup(...): Missing markup."):u(t),"production"!==n.env.NODE_ENV?u("html"!==e.tagName.toLowerCase(),"dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See renderComponentToString()."):u("html"!==e.tagName.toLowerCase());var r=i(t,a)[0];e.parentNode.replaceChild(r,e)}};t.exports=p}).call(this,e("_process"))},{"./ExecutionEnvironment":90,"./createNodesFromMarkup":173,"./emptyFunction":177,"./getMarkupWrap":188,"./invariant":196,_process:19}],82:[function(e,t){"use strict";var n=e("./keyOf"),r=[n({ResponderEventPlugin:null}),n({SimpleEventPlugin:null}),n({TapEventPlugin:null}),n({EnterLeaveEventPlugin:null}),n({ChangeEventPlugin:null}),n({SelectEventPlugin:null}),n({CompositionEventPlugin:null}),n({BeforeInputEventPlugin:null}),n({AnalyticsEventPlugin:null}),n({MobileSafariClickEventPlugin:null})];t.exports=r},{"./keyOf":203}],83:[function(e,t){"use strict";var n=e("./EventConstants"),r=e("./EventPropagators"),o=e("./SyntheticMouseEvent"),i=e("./ReactMount"),a=e("./keyOf"),s=n.topLevelTypes,u=i.getFirstReactDOM,c={mouseEnter:{registrationName:a({onMouseEnter:null}),dependencies:[s.topMouseOut,s.topMouseOver]},mouseLeave:{registrationName:a({onMouseLeave:null}),dependencies:[s.topMouseOut,s.topMouseOver]}},l=[null,null],p={eventTypes:c,extractEvents:function(e,t,n,a){if(e===s.topMouseOver&&(a.relatedTarget||a.fromElement))return null;if(e!==s.topMouseOut&&e!==s.topMouseOver)return null;var p;if(t.window===t)p=t;else{var h=t.ownerDocument;p=h?h.defaultView||h.parentWindow:window}var d,f;if(e===s.topMouseOut?(d=t,f=u(a.relatedTarget||a.toElement)||p):(d=p,f=t),d===f)return null;var m=d?i.getID(d):"",v=f?i.getID(f):"",g=o.getPooled(c.mouseLeave,m,a);g.type="mouseleave",g.target=d,g.relatedTarget=f;var y=o.getPooled(c.mouseEnter,v,a);return y.type="mouseenter",y.target=f,y.relatedTarget=d,r.accumulateEnterLeaveDispatches(g,y,m,v),l[0]=g,l[1]=y,l}};t.exports=p},{"./EventConstants":84,"./EventPropagators":89,"./ReactMount":132,"./SyntheticMouseEvent":160,"./keyOf":203}],84:[function(e,t){"use strict";var n=e("./keyMirror"),r=n({bubbled:null,captured:null}),o=n({topBlur:null,topChange:null,topClick:null,topCompositionEnd:null,topCompositionStart:null,topCompositionUpdate:null,topContextMenu:null,topCopy:null,topCut:null,topDoubleClick:null,topDrag:null,topDragEnd:null,topDragEnter:null,topDragExit:null,topDragLeave:null,topDragOver:null,topDragStart:null,topDrop:null,topError:null,topFocus:null,topInput:null,topKeyDown:null,topKeyPress:null,topKeyUp:null,topLoad:null,topMouseDown:null,topMouseMove:null,topMouseOut:null,topMouseOver:null,topMouseUp:null,topPaste:null,topReset:null,topScroll:null,topSelectionChange:null,topSubmit:null,topTextInput:null,topTouchCancel:null,topTouchEnd:null,topTouchMove:null,topTouchStart:null,topWheel:null}),i={topLevelTypes:o,PropagationPhases:r};
t.exports=i},{"./keyMirror":202}],85:[function(e,t){(function(n){var r=e("./emptyFunction"),o={listen:function(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!1),{remove:function(){e.removeEventListener(t,n,!1)}}):e.attachEvent?(e.attachEvent("on"+t,n),{remove:function(){e.detachEvent("on"+t,n)}}):void 0},capture:function(e,t,o){return e.addEventListener?(e.addEventListener(t,o,!0),{remove:function(){e.removeEventListener(t,o,!0)}}):("production"!==n.env.NODE_ENV&&console.error("Attempted to listen to events during the capture phase on a browser that does not support the capture phase. Your application will not receive some events."),{remove:r})},registerDefault:function(){}};t.exports=o}).call(this,e("_process"))},{"./emptyFunction":177,_process:19}],86:[function(e,t){(function(n){"use strict";function r(){var e=!h||!h.traverseTwoPhase||!h.traverseEnterLeave;if(e)throw new Error("InstanceHandle not injected before use!")}var o=e("./EventPluginRegistry"),i=e("./EventPluginUtils"),a=e("./accumulateInto"),s=e("./forEachAccumulated"),u=e("./invariant"),c={},l=null,p=function(e){if(e){var t=i.executeDispatch,n=o.getPluginModuleForEvent(e);n&&n.executeDispatch&&(t=n.executeDispatch),i.executeDispatchesInOrder(e,t),e.isPersistent()||e.constructor.release(e)}},h=null,d={injection:{injectMount:i.injection.injectMount,injectInstanceHandle:function(e){h=e,"production"!==n.env.NODE_ENV&&r()},getInstanceHandle:function(){return"production"!==n.env.NODE_ENV&&r(),h},injectEventPluginOrder:o.injectEventPluginOrder,injectEventPluginsByName:o.injectEventPluginsByName},eventNameDispatchConfigs:o.eventNameDispatchConfigs,registrationNameModules:o.registrationNameModules,putListener:function(e,t,r){"production"!==n.env.NODE_ENV?u(!r||"function"==typeof r,"Expected %s listener to be a function, instead got type %s",t,typeof r):u(!r||"function"==typeof r);var o=c[t]||(c[t]={});o[e]=r},getListener:function(e,t){var n=c[t];return n&&n[e]},deleteListener:function(e,t){var n=c[t];n&&delete n[e]},deleteAllListeners:function(e){for(var t in c)delete c[t][e]},extractEvents:function(e,t,n,r){for(var i,s=o.plugins,u=0,c=s.length;c>u;u++){var l=s[u];if(l){var p=l.extractEvents(e,t,n,r);p&&(i=a(i,p))}}return i},enqueueEvents:function(e){e&&(l=a(l,e))},processEventQueue:function(){var e=l;l=null,s(e,p),"production"!==n.env.NODE_ENV?u(!l,"processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."):u(!l)},__purge:function(){c={}},__getListenerBank:function(){return c}};t.exports=d}).call(this,e("_process"))},{"./EventPluginRegistry":87,"./EventPluginUtils":88,"./accumulateInto":166,"./forEachAccumulated":182,"./invariant":196,_process:19}],87:[function(e,t){(function(n){"use strict";function r(){if(s)for(var e in u){var t=u[e],r=s.indexOf(e);if("production"!==n.env.NODE_ENV?a(r>-1,"EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.",e):a(r>-1),!c.plugins[r]){"production"!==n.env.NODE_ENV?a(t.extractEvents,"EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.",e):a(t.extractEvents),c.plugins[r]=t;var i=t.eventTypes;for(var l in i)"production"!==n.env.NODE_ENV?a(o(i[l],t,l),"EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.",l,e):a(o(i[l],t,l))}}}function o(e,t,r){"production"!==n.env.NODE_ENV?a(!c.eventNameDispatchConfigs.hasOwnProperty(r),"EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.",r):a(!c.eventNameDispatchConfigs.hasOwnProperty(r)),c.eventNameDispatchConfigs[r]=e;var o=e.phasedRegistrationNames;if(o){for(var s in o)if(o.hasOwnProperty(s)){var u=o[s];i(u,t,r)}return!0}return e.registrationName?(i(e.registrationName,t,r),!0):!1}function i(e,t,r){"production"!==n.env.NODE_ENV?a(!c.registrationNameModules[e],"EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.",e):a(!c.registrationNameModules[e]),c.registrationNameModules[e]=t,c.registrationNameDependencies[e]=t.eventTypes[r].dependencies}var a=e("./invariant"),s=null,u={},c={plugins:[],eventNameDispatchConfigs:{},registrationNameModules:{},registrationNameDependencies:{},injectEventPluginOrder:function(e){"production"!==n.env.NODE_ENV?a(!s,"EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React."):a(!s),s=Array.prototype.slice.call(e),r()},injectEventPluginsByName:function(e){var t=!1;for(var o in e)if(e.hasOwnProperty(o)){var i=e[o];u.hasOwnProperty(o)&&u[o]===i||("production"!==n.env.NODE_ENV?a(!u[o],"EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.",o):a(!u[o]),u[o]=i,t=!0)}t&&r()},getPluginModuleForEvent:function(e){var t=e.dispatchConfig;if(t.registrationName)return c.registrationNameModules[t.registrationName]||null;for(var n in t.phasedRegistrationNames)if(t.phasedRegistrationNames.hasOwnProperty(n)){var r=c.registrationNameModules[t.phasedRegistrationNames[n]];if(r)return r}return null},_resetEventPlugins:function(){s=null;for(var e in u)u.hasOwnProperty(e)&&delete u[e];c.plugins.length=0;var t=c.eventNameDispatchConfigs;for(var n in t)t.hasOwnProperty(n)&&delete t[n];var r=c.registrationNameModules;for(var o in r)r.hasOwnProperty(o)&&delete r[o]}};t.exports=c}).call(this,e("_process"))},{"./invariant":196,_process:19}],88:[function(e,t){(function(n){"use strict";function r(e){return e===g.topMouseUp||e===g.topTouchEnd||e===g.topTouchCancel}function o(e){return e===g.topMouseMove||e===g.topTouchMove}function i(e){return e===g.topMouseDown||e===g.topTouchStart}function a(e,t){var r=e._dispatchListeners,o=e._dispatchIDs;if("production"!==n.env.NODE_ENV&&d(e),Array.isArray(r))for(var i=0;i<r.length&&!e.isPropagationStopped();i++)t(e,r[i],o[i]);else r&&t(e,r,o)}function s(e,t,n){e.currentTarget=v.Mount.getNode(n);var r=t(e,n);return e.currentTarget=null,r}function u(e,t){a(e,t),e._dispatchListeners=null,e._dispatchIDs=null}function c(e){var t=e._dispatchListeners,r=e._dispatchIDs;if("production"!==n.env.NODE_ENV&&d(e),Array.isArray(t)){for(var o=0;o<t.length&&!e.isPropagationStopped();o++)if(t[o](e,r[o]))return r[o]}else if(t&&t(e,r))return r;return null}function l(e){var t=c(e);return e._dispatchIDs=null,e._dispatchListeners=null,t}function p(e){"production"!==n.env.NODE_ENV&&d(e);var t=e._dispatchListeners,r=e._dispatchIDs;"production"!==n.env.NODE_ENV?m(!Array.isArray(t),"executeDirectDispatch(...): Invalid `event`."):m(!Array.isArray(t));var o=t?t(e,r):null;return e._dispatchListeners=null,e._dispatchIDs=null,o}function h(e){return!!e._dispatchListeners}var d,f=e("./EventConstants"),m=e("./invariant"),v={Mount:null,injectMount:function(e){v.Mount=e,"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?m(e&&e.getNode,"EventPluginUtils.injection.injectMount(...): Injected Mount module is missing getNode."):m(e&&e.getNode))}},g=f.topLevelTypes;"production"!==n.env.NODE_ENV&&(d=function(e){var t=e._dispatchListeners,r=e._dispatchIDs,o=Array.isArray(t),i=Array.isArray(r),a=i?r.length:r?1:0,s=o?t.length:t?1:0;"production"!==n.env.NODE_ENV?m(i===o&&a===s,"EventPluginUtils: Invalid `event`."):m(i===o&&a===s)});var y={isEndish:r,isMoveish:o,isStartish:i,executeDirectDispatch:p,executeDispatch:s,executeDispatchesInOrder:u,executeDispatchesInOrderStopAtTrue:l,hasDispatches:h,injection:v,useTouchEvents:!1};t.exports=y}).call(this,e("_process"))},{"./EventConstants":84,"./invariant":196,_process:19}],89:[function(e,t){(function(n){"use strict";function r(e,t,n){var r=t.dispatchConfig.phasedRegistrationNames[n];return v(e,r)}function o(e,t,o){if("production"!==n.env.NODE_ENV&&!e)throw new Error("Dispatching id must not be null");var i=t?m.bubbled:m.captured,a=r(e,o,i);a&&(o._dispatchListeners=d(o._dispatchListeners,a),o._dispatchIDs=d(o._dispatchIDs,e))}function i(e){e&&e.dispatchConfig.phasedRegistrationNames&&h.injection.getInstanceHandle().traverseTwoPhase(e.dispatchMarker,o,e)}function a(e,t,n){if(n&&n.dispatchConfig.registrationName){var r=n.dispatchConfig.registrationName,o=v(e,r);o&&(n._dispatchListeners=d(n._dispatchListeners,o),n._dispatchIDs=d(n._dispatchIDs,e))}}function s(e){e&&e.dispatchConfig.registrationName&&a(e.dispatchMarker,null,e)}function u(e){f(e,i)}function c(e,t,n,r){h.injection.getInstanceHandle().traverseEnterLeave(n,r,a,e,t)}function l(e){f(e,s)}var p=e("./EventConstants"),h=e("./EventPluginHub"),d=e("./accumulateInto"),f=e("./forEachAccumulated"),m=p.PropagationPhases,v=h.getListener,g={accumulateTwoPhaseDispatches:u,accumulateDirectDispatches:l,accumulateEnterLeaveDispatches:c};t.exports=g}).call(this,e("_process"))},{"./EventConstants":84,"./EventPluginHub":86,"./accumulateInto":166,"./forEachAccumulated":182,_process:19}],90:[function(e,t){"use strict";var n=!("undefined"==typeof window||!window.document||!window.document.createElement),r={canUseDOM:n,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:n&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:n&&!!window.screen,isInWorker:!n};t.exports=r},{}],91:[function(e,t){"use strict";var n,r=e("./DOMProperty"),o=e("./ExecutionEnvironment"),i=r.injection.MUST_USE_ATTRIBUTE,a=r.injection.MUST_USE_PROPERTY,s=r.injection.HAS_BOOLEAN_VALUE,u=r.injection.HAS_SIDE_EFFECTS,c=r.injection.HAS_NUMERIC_VALUE,l=r.injection.HAS_POSITIVE_NUMERIC_VALUE,p=r.injection.HAS_OVERLOADED_BOOLEAN_VALUE;if(o.canUseDOM){var h=document.implementation;n=h&&h.hasFeature&&h.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure","1.1")}var d={isCustomAttribute:RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),Properties:{accept:null,acceptCharset:null,accessKey:null,action:null,allowFullScreen:i|s,allowTransparency:i,alt:null,async:s,autoComplete:null,autoPlay:s,cellPadding:null,cellSpacing:null,charSet:i,checked:a|s,classID:i,className:n?i:a,cols:i|l,colSpan:null,content:null,contentEditable:null,contextMenu:i,controls:a|s,coords:null,crossOrigin:null,data:null,dateTime:i,defer:s,dir:null,disabled:i|s,download:p,draggable:null,encType:null,form:i,formAction:i,formEncType:i,formMethod:i,formNoValidate:s,formTarget:i,frameBorder:i,height:i,hidden:i|s,href:null,hrefLang:null,htmlFor:null,httpEquiv:null,icon:null,id:a,label:null,lang:null,list:i,loop:a|s,manifest:i,marginHeight:null,marginWidth:null,max:null,maxLength:i,media:i,mediaGroup:null,method:null,min:null,multiple:a|s,muted:a|s,name:null,noValidate:s,open:null,pattern:null,placeholder:null,poster:null,preload:null,radioGroup:null,readOnly:a|s,rel:null,required:s,role:i,rows:i|l,rowSpan:null,sandbox:null,scope:null,scrolling:null,seamless:i|s,selected:a|s,shape:null,size:i|l,sizes:i,span:l,spellCheck:null,src:null,srcDoc:a,srcSet:i,start:c,step:null,style:null,tabIndex:null,target:null,title:null,type:null,useMap:null,value:a|u,width:i,wmode:i,autoCapitalize:null,autoCorrect:null,itemProp:i,itemScope:i|s,itemType:i,property:null},DOMAttributeNames:{acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMPropertyNames:{autoCapitalize:"autocapitalize",autoComplete:"autocomplete",autoCorrect:"autocorrect",autoFocus:"autofocus",autoPlay:"autoplay",encType:"enctype",hrefLang:"hreflang",radioGroup:"radiogroup",spellCheck:"spellcheck",srcDoc:"srcdoc",srcSet:"srcset"}};t.exports=d},{"./DOMProperty":79,"./ExecutionEnvironment":90}],92:[function(e,t){(function(n){"use strict";function r(e){"production"!==n.env.NODE_ENV?c(null==e.props.checkedLink||null==e.props.valueLink,"Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don't want to use valueLink and vice versa."):c(null==e.props.checkedLink||null==e.props.valueLink)}function o(e){r(e),"production"!==n.env.NODE_ENV?c(null==e.props.value&&null==e.props.onChange,"Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don't want to use valueLink."):c(null==e.props.value&&null==e.props.onChange)}function i(e){r(e),"production"!==n.env.NODE_ENV?c(null==e.props.checked&&null==e.props.onChange,"Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don't want to use checkedLink"):c(null==e.props.checked&&null==e.props.onChange)}function a(e){this.props.valueLink.requestChange(e.target.value)}function s(e){this.props.checkedLink.requestChange(e.target.checked)}var u=e("./ReactPropTypes"),c=e("./invariant"),l={button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0},p={Mixin:{propTypes:{value:function(e,t){return!e[t]||l[e.type]||e.onChange||e.readOnly||e.disabled?void 0:new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.")},checked:function(e,t){return!e[t]||e.onChange||e.readOnly||e.disabled?void 0:new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")},onChange:u.func}},getValue:function(e){return e.props.valueLink?(o(e),e.props.valueLink.value):e.props.value},getChecked:function(e){return e.props.checkedLink?(i(e),e.props.checkedLink.value):e.props.checked},getOnChange:function(e){return e.props.valueLink?(o(e),a):e.props.checkedLink?(i(e),s):e.props.onChange}};t.exports=p}).call(this,e("_process"))},{"./ReactPropTypes":141,"./invariant":196,_process:19}],93:[function(e,t){(function(n){"use strict";function r(e){e.remove()}var o=e("./ReactBrowserEventEmitter"),i=e("./accumulateInto"),a=e("./forEachAccumulated"),s=e("./invariant"),u={trapBubbledEvent:function(e,t){"production"!==n.env.NODE_ENV?s(this.isMounted(),"Must be mounted to trap events"):s(this.isMounted());var r=o.trapBubbledEvent(e,t,this.getDOMNode());this._localEventListeners=i(this._localEventListeners,r)},componentWillUnmount:function(){this._localEventListeners&&a(this._localEventListeners,r)}};t.exports=u}).call(this,e("_process"))},{"./ReactBrowserEventEmitter":99,"./accumulateInto":166,"./forEachAccumulated":182,"./invariant":196,_process:19}],94:[function(e,t){"use strict";var n=e("./EventConstants"),r=e("./emptyFunction"),o=n.topLevelTypes,i={eventTypes:null,extractEvents:function(e,t,n,i){if(e===o.topTouchStart){var a=i.target;a&&!a.onclick&&(a.onclick=r)}}};t.exports=i},{"./EventConstants":84,"./emptyFunction":177}],95:[function(e,t){function n(e){if(null==e)throw new TypeError("Object.assign target cannot be null or undefined");for(var t=Object(e),n=Object.prototype.hasOwnProperty,r=1;r<arguments.length;r++){var o=arguments[r];if(null!=o){var i=Object(o);for(var a in i)n.call(i,a)&&(t[a]=i[a])}}return t}t.exports=n},{}],96:[function(e,t){(function(n){"use strict";var r=e("./invariant"),o=function(e){var t=this;if(t.instancePool.length){var n=t.instancePool.pop();return t.call(n,e),n}return new t(e)},i=function(e,t){var n=this;if(n.instancePool.length){var r=n.instancePool.pop();return n.call(r,e,t),r}return new n(e,t)},a=function(e,t,n){var r=this;if(r.instancePool.length){var o=r.instancePool.pop();return r.call(o,e,t,n),o}return new r(e,t,n)},s=function(e,t,n,r,o){var i=this;if(i.instancePool.length){var a=i.instancePool.pop();return i.call(a,e,t,n,r,o),a}return new i(e,t,n,r,o)},u=function(e){var t=this;"production"!==n.env.NODE_ENV?r(e instanceof t,"Trying to release an instance into a pool of a different type."):r(e instanceof t),e.destructor&&e.destructor(),t.instancePool.length<t.poolSize&&t.instancePool.push(e)},c=10,l=o,p=function(e,t){var n=e;return n.instancePool=[],n.getPooled=t||l,n.poolSize||(n.poolSize=c),n.release=u,n},h={addPoolingTo:p,oneArgumentPooler:o,twoArgumentPooler:i,threeArgumentPooler:a,fiveArgumentPooler:s};t.exports=h}).call(this,e("_process"))},{"./invariant":196,_process:19}],97:[function(e,t){(function(n){"use strict";var r=e("./DOMPropertyOperations"),o=e("./EventPluginUtils"),i=e("./ReactChildren"),a=e("./ReactComponent"),s=e("./ReactCompositeComponent"),u=e("./ReactContext"),c=e("./ReactCurrentOwner"),l=e("./ReactElement"),p=e("./ReactElementValidator"),h=e("./ReactDOM"),d=e("./ReactDOMComponent"),f=e("./ReactDefaultInjection"),m=e("./ReactInstanceHandles"),v=e("./ReactLegacyElement"),g=e("./ReactMount"),y=e("./ReactMultiChild"),b=e("./ReactPerf"),E=e("./ReactPropTypes"),w=e("./ReactServerRendering"),C=e("./ReactTextComponent"),N=e("./Object.assign"),R=e("./deprecated"),_=e("./onlyChild");f.inject();var O=l.createElement,x=l.createFactory;"production"!==n.env.NODE_ENV&&(O=p.createElement,x=p.createFactory),O=v.wrapCreateElement(O),x=v.wrapCreateFactory(x);var D=b.measure("React","render",g.render),M={Children:{map:i.map,forEach:i.forEach,count:i.count,only:_},DOM:h,PropTypes:E,initializeTouchEvents:function(e){o.useTouchEvents=e},createClass:s.createClass,createElement:O,createFactory:x,constructAndRenderComponent:g.constructAndRenderComponent,constructAndRenderComponentByID:g.constructAndRenderComponentByID,render:D,renderToString:w.renderToString,renderToStaticMarkup:w.renderToStaticMarkup,unmountComponentAtNode:g.unmountComponentAtNode,isValidClass:v.isValidClass,isValidElement:l.isValidElement,withContext:u.withContext,__spread:N,renderComponent:R("React","renderComponent","render",this,D),renderComponentToString:R("React","renderComponentToString","renderToString",this,w.renderToString),renderComponentToStaticMarkup:R("React","renderComponentToStaticMarkup","renderToStaticMarkup",this,w.renderToStaticMarkup),isValidComponent:R("React","isValidComponent","isValidElement",this,l.isValidElement)};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject&&__REACT_DEVTOOLS_GLOBAL_HOOK__.inject({Component:a,CurrentOwner:c,DOMComponent:d,DOMPropertyOperations:r,InstanceHandles:m,Mount:g,MultiChild:y,TextComponent:C}),"production"!==n.env.NODE_ENV){var P=e("./ExecutionEnvironment");if(P.canUseDOM&&window.top===window.self){navigator.userAgent.indexOf("Chrome")>-1&&"undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&console.debug("Download the React DevTools for a better development experience: http://fb.me/react-devtools");for(var T=[Array.isArray,Array.prototype.every,Array.prototype.forEach,Array.prototype.indexOf,Array.prototype.map,Date.now,Function.prototype.bind,Object.keys,String.prototype.split,String.prototype.trim,Object.create,Object.freeze],S=0;S<T.length;S++)if(!T[S]){console.error("One or more ES5 shim/shams expected by React are not available: http://fb.me/react-warning-polyfills");break}}}M.version="0.12.2",t.exports=M}).call(this,e("_process"))},{"./DOMPropertyOperations":80,"./EventPluginUtils":88,"./ExecutionEnvironment":90,"./Object.assign":95,"./ReactChildren":100,"./ReactComponent":101,"./ReactCompositeComponent":103,"./ReactContext":104,"./ReactCurrentOwner":105,"./ReactDOM":106,"./ReactDOMComponent":108,"./ReactDefaultInjection":118,"./ReactElement":121,"./ReactElementValidator":122,"./ReactInstanceHandles":129,"./ReactLegacyElement":130,"./ReactMount":132,"./ReactMultiChild":133,"./ReactPerf":137,"./ReactPropTypes":141,"./ReactServerRendering":145,"./ReactTextComponent":147,"./deprecated":176,"./onlyChild":207,_process:19}],98:[function(e,t){(function(n){"use strict";var r=e("./ReactEmptyComponent"),o=e("./ReactMount"),i=e("./invariant"),a={getDOMNode:function(){return"production"!==n.env.NODE_ENV?i(this.isMounted(),"getDOMNode(): A component must be mounted to have a DOM node."):i(this.isMounted()),r.isNullComponentID(this._rootNodeID)?null:o.getNode(this._rootNodeID)}};t.exports=a}).call(this,e("_process"))},{"./ReactEmptyComponent":123,"./ReactMount":132,"./invariant":196,_process:19}],99:[function(e,t){"use strict";function n(e){return Object.prototype.hasOwnProperty.call(e,f)||(e[f]=h++,l[e[f]]={}),l[e[f]]}var r=e("./EventConstants"),o=e("./EventPluginHub"),i=e("./EventPluginRegistry"),a=e("./ReactEventEmitterMixin"),s=e("./ViewportMetrics"),u=e("./Object.assign"),c=e("./isEventSupported"),l={},p=!1,h=0,d={topBlur:"blur",topChange:"change",topClick:"click",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topWheel:"wheel"},f="_reactListenersID"+String(Math.random()).slice(2),m=u({},a,{ReactEventListener:null,injection:{injectReactEventListener:function(e){e.setHandleTopLevel(m.handleTopLevel),m.ReactEventListener=e}},setEnabled:function(e){m.ReactEventListener&&m.ReactEventListener.setEnabled(e)},isEnabled:function(){return!(!m.ReactEventListener||!m.ReactEventListener.isEnabled())},listenTo:function(e,t){for(var o=t,a=n(o),s=i.registrationNameDependencies[e],u=r.topLevelTypes,l=0,p=s.length;p>l;l++){var h=s[l];a.hasOwnProperty(h)&&a[h]||(h===u.topWheel?c("wheel")?m.ReactEventListener.trapBubbledEvent(u.topWheel,"wheel",o):c("mousewheel")?m.ReactEventListener.trapBubbledEvent(u.topWheel,"mousewheel",o):m.ReactEventListener.trapBubbledEvent(u.topWheel,"DOMMouseScroll",o):h===u.topScroll?c("scroll",!0)?m.ReactEventListener.trapCapturedEvent(u.topScroll,"scroll",o):m.ReactEventListener.trapBubbledEvent(u.topScroll,"scroll",m.ReactEventListener.WINDOW_HANDLE):h===u.topFocus||h===u.topBlur?(c("focus",!0)?(m.ReactEventListener.trapCapturedEvent(u.topFocus,"focus",o),m.ReactEventListener.trapCapturedEvent(u.topBlur,"blur",o)):c("focusin")&&(m.ReactEventListener.trapBubbledEvent(u.topFocus,"focusin",o),m.ReactEventListener.trapBubbledEvent(u.topBlur,"focusout",o)),a[u.topBlur]=!0,a[u.topFocus]=!0):d.hasOwnProperty(h)&&m.ReactEventListener.trapBubbledEvent(h,d[h],o),a[h]=!0)}},trapBubbledEvent:function(e,t,n){return m.ReactEventListener.trapBubbledEvent(e,t,n)},trapCapturedEvent:function(e,t,n){return m.ReactEventListener.trapCapturedEvent(e,t,n)},ensureScrollValueMonitoring:function(){if(!p){var e=s.refreshScrollValues;m.ReactEventListener.monitorScrollValue(e),p=!0}},eventNameDispatchConfigs:o.eventNameDispatchConfigs,registrationNameModules:o.registrationNameModules,putListener:o.putListener,getListener:o.getListener,deleteListener:o.deleteListener,deleteAllListeners:o.deleteAllListeners});t.exports=m},{"./EventConstants":84,"./EventPluginHub":86,"./EventPluginRegistry":87,"./Object.assign":95,"./ReactEventEmitterMixin":125,"./ViewportMetrics":165,"./isEventSupported":197}],100:[function(e,t){(function(n){"use strict";function r(e,t){this.forEachFunction=e,this.forEachContext=t}function o(e,t,n,r){var o=e;o.forEachFunction.call(o.forEachContext,t,r)}function i(e,t,n){if(null==e)return e;var i=r.getPooled(t,n);h(e,o,i),r.release(i)}function a(e,t,n){this.mapResult=e,this.mapFunction=t,this.mapContext=n}function s(e,t,r,o){var i=e,a=i.mapResult,s=!a.hasOwnProperty(r);if("production"!==n.env.NODE_ENV?d(s,"ReactChildren.map(...): Encountered two children with the same key, `%s`. Child keys must be unique; when two children share a key, only the first child will be used.",r):null,s){var u=i.mapFunction.call(i.mapContext,t,o);a[r]=u}}function u(e,t,n){if(null==e)return e;var r={},o=a.getPooled(r,t,n);return h(e,s,o),a.release(o),r}function c(){return null}function l(e){return h(e,c,null)}var p=e("./PooledClass"),h=e("./traverseAllChildren"),d=e("./warning"),f=p.twoArgumentPooler,m=p.threeArgumentPooler;p.addPoolingTo(r,f),p.addPoolingTo(a,m);var v={forEach:i,map:u,count:l};t.exports=v}).call(this,e("_process"))},{"./PooledClass":96,"./traverseAllChildren":214,"./warning":215,_process:19}],101:[function(e,t){(function(n){"use strict";var r=e("./ReactElement"),o=e("./ReactOwner"),i=e("./ReactUpdates"),a=e("./Object.assign"),s=e("./invariant"),u=e("./keyMirror"),c=u({MOUNTED:null,UNMOUNTED:null}),l=!1,p=null,h=null,d={injection:{injectEnvironment:function(e){"production"!==n.env.NODE_ENV?s(!l,"ReactComponent: injectEnvironment() can only be called once."):s(!l),h=e.mountImageIntoNode,p=e.unmountIDFromEnvironment,d.BackendIDOperations=e.BackendIDOperations,l=!0}},LifeCycle:c,BackendIDOperations:null,Mixin:{isMounted:function(){return this._lifeCycleState===c.MOUNTED},setProps:function(e,t){var n=this._pendingElement||this._currentElement;this.replaceProps(a({},n.props,e),t)},replaceProps:function(e,t){"production"!==n.env.NODE_ENV?s(this.isMounted(),"replaceProps(...): Can only update a mounted component."):s(this.isMounted()),"production"!==n.env.NODE_ENV?s(0===this._mountDepth,"replaceProps(...): You called `setProps` or `replaceProps` on a component with a parent. This is an anti-pattern since props will get reactively updated when rendered. Instead, change the owner's `render` method to pass the correct value as props to the component where it is created."):s(0===this._mountDepth),this._pendingElement=r.cloneAndReplaceProps(this._pendingElement||this._currentElement,e),i.enqueueUpdate(this,t)},_setPropsInternal:function(e,t){var n=this._pendingElement||this._currentElement;this._pendingElement=r.cloneAndReplaceProps(n,a({},n.props,e)),i.enqueueUpdate(this,t)},construct:function(e){this.props=e.props,this._owner=e._owner,this._lifeCycleState=c.UNMOUNTED,this._pendingCallbacks=null,this._currentElement=e,this._pendingElement=null},mountComponent:function(e,t,r){"production"!==n.env.NODE_ENV?s(!this.isMounted(),"mountComponent(%s, ...): Can only mount an unmounted component. Make sure to avoid storing components between renders or reusing a single component instance in multiple places.",e):s(!this.isMounted());var i=this._currentElement.ref;if(null!=i){var a=this._currentElement._owner;o.addComponentAsRefTo(this,i,a)}this._rootNodeID=e,this._lifeCycleState=c.MOUNTED,this._mountDepth=r},unmountComponent:function(){"production"!==n.env.NODE_ENV?s(this.isMounted(),"unmountComponent(): Can only unmount a mounted component."):s(this.isMounted());var e=this._currentElement.ref;null!=e&&o.removeComponentAsRefFrom(this,e,this._owner),p(this._rootNodeID),this._rootNodeID=null,this._lifeCycleState=c.UNMOUNTED},receiveComponent:function(e,t){"production"!==n.env.NODE_ENV?s(this.isMounted(),"receiveComponent(...): Can only update a mounted component."):s(this.isMounted()),this._pendingElement=e,this.performUpdateIfNecessary(t)},performUpdateIfNecessary:function(e){if(null!=this._pendingElement){var t=this._currentElement,n=this._pendingElement;this._currentElement=n,this.props=n.props,this._owner=n._owner,this._pendingElement=null,this.updateComponent(e,t)}},updateComponent:function(e,t){var n=this._currentElement;(n._owner!==t._owner||n.ref!==t.ref)&&(null!=t.ref&&o.removeComponentAsRefFrom(this,t.ref,t._owner),null!=n.ref&&o.addComponentAsRefTo(this,n.ref,n._owner))},mountComponentIntoNode:function(e,t,n){var r=i.ReactReconcileTransaction.getPooled();r.perform(this._mountComponentIntoNode,this,e,t,r,n),i.ReactReconcileTransaction.release(r)},_mountComponentIntoNode:function(e,t,n,r){var o=this.mountComponent(e,n,0);h(o,t,r)},isOwnedBy:function(e){return this._owner===e},getSiblingByRef:function(e){var t=this._owner;return t&&t.refs?t.refs[e]:null}}};t.exports=d}).call(this,e("_process"))},{"./Object.assign":95,"./ReactElement":121,"./ReactOwner":136,"./ReactUpdates":148,"./invariant":196,"./keyMirror":202,_process:19}],102:[function(e,t){(function(n){"use strict";var r=e("./ReactDOMIDOperations"),o=e("./ReactMarkupChecksum"),i=e("./ReactMount"),a=e("./ReactPerf"),s=e("./ReactReconcileTransaction"),u=e("./getReactRootElementInContainer"),c=e("./invariant"),l=e("./setInnerHTML"),p=1,h=9,d={ReactReconcileTransaction:s,BackendIDOperations:r,unmountIDFromEnvironment:function(e){i.purgeID(e)},mountImageIntoNode:a.measure("ReactComponentBrowserEnvironment","mountImageIntoNode",function(e,t,r){if("production"!==n.env.NODE_ENV?c(t&&(t.nodeType===p||t.nodeType===h),"mountComponentIntoNode(...): Target container is not valid."):c(t&&(t.nodeType===p||t.nodeType===h)),r){if(o.canReuseMarkup(e,u(t)))return;"production"!==n.env.NODE_ENV?c(t.nodeType!==h,"You're trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side."):c(t.nodeType!==h),"production"!==n.env.NODE_ENV&&console.warn("React attempted to use reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server.")}"production"!==n.env.NODE_ENV?c(t.nodeType!==h,"You're trying to render a component to the document but you didn't use server rendering. We can't do this without using server rendering due to cross-browser quirks. See renderComponentToString() for server rendering."):c(t.nodeType!==h),l(t,e)})};t.exports=d}).call(this,e("_process"))},{"./ReactDOMIDOperations":110,"./ReactMarkupChecksum":131,"./ReactMount":132,"./ReactPerf":137,"./ReactReconcileTransaction":143,"./getReactRootElementInContainer":190,"./invariant":196,"./setInnerHTML":210,_process:19}],103:[function(e,t){(function(n){"use strict";function r(e){var t=e._owner||null;return t&&t.constructor&&t.constructor.displayName?" Check the render method of `"+t.constructor.displayName+"`.":""}function o(e,t,r){for(var o in t)t.hasOwnProperty(o)&&("production"!==n.env.NODE_ENV?D("function"==typeof t[o],"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",e.displayName||"ReactCompositeComponent",R[r],o):D("function"==typeof t[o]))}function i(e,t){var r=j.hasOwnProperty(t)?j[t]:null;B.hasOwnProperty(t)&&("production"!==n.env.NODE_ENV?D(r===L.OVERRIDE_BASE,"ReactCompositeComponentInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.",t):D(r===L.OVERRIDE_BASE)),e.hasOwnProperty(t)&&("production"!==n.env.NODE_ENV?D(r===L.DEFINE_MANY||r===L.DEFINE_MANY_MERGED,"ReactCompositeComponentInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",t):D(r===L.DEFINE_MANY||r===L.DEFINE_MANY_MERGED))}function a(e){var t=e._compositeLifeCycleState;"production"!==n.env.NODE_ENV?D(e.isMounted()||t===V.MOUNTING,"replaceState(...): Can only update a mounted or mounting component."):D(e.isMounted()||t===V.MOUNTING),"production"!==n.env.NODE_ENV?D(null==f.current,"replaceState(...): Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."):D(null==f.current),"production"!==n.env.NODE_ENV?D(t!==V.UNMOUNTING,"replaceState(...): Cannot update while unmounting component. This usually means you called setState() on an unmounted component."):D(t!==V.UNMOUNTING)}function s(e,t){if(t){"production"!==n.env.NODE_ENV?D(!b.isValidFactory(t),"ReactCompositeComponent: You're attempting to use a component class as a mixin. Instead, just use a regular object."):D(!b.isValidFactory(t)),"production"!==n.env.NODE_ENV?D(!m.isValidElement(t),"ReactCompositeComponent: You're attempting to use a component as a mixin. Instead, just use a regular object."):D(!m.isValidElement(t));
var r=e.prototype;t.hasOwnProperty(A)&&F.mixins(e,t.mixins);for(var o in t)if(t.hasOwnProperty(o)&&o!==A){var a=t[o];if(i(r,o),F.hasOwnProperty(o))F[o](e,a);else{var s=j.hasOwnProperty(o),u=r.hasOwnProperty(o),c=a&&a.__reactDontBind,h="function"==typeof a,d=h&&!s&&!u&&!c;if(d)r.__reactAutoBindMap||(r.__reactAutoBindMap={}),r.__reactAutoBindMap[o]=a,r[o]=a;else if(u){var f=j[o];"production"!==n.env.NODE_ENV?D(s&&(f===L.DEFINE_MANY_MERGED||f===L.DEFINE_MANY),"ReactCompositeComponent: Unexpected spec policy %s for key %s when mixing in component specs.",f,o):D(s&&(f===L.DEFINE_MANY_MERGED||f===L.DEFINE_MANY)),f===L.DEFINE_MANY_MERGED?r[o]=l(r[o],a):f===L.DEFINE_MANY&&(r[o]=p(r[o],a))}else r[o]=a,"production"!==n.env.NODE_ENV&&"function"==typeof a&&t.displayName&&(r[o].displayName=t.displayName+"_"+o)}}}}function u(e,t){if(t)for(var r in t){var o=t[r];if(t.hasOwnProperty(r)){var i=r in F;"production"!==n.env.NODE_ENV?D(!i,'ReactCompositeComponent: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.',r):D(!i);var a=r in e;"production"!==n.env.NODE_ENV?D(!a,"ReactCompositeComponent: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",r):D(!a),e[r]=o}}}function c(e,t){return"production"!==n.env.NODE_ENV?D(e&&t&&"object"==typeof e&&"object"==typeof t,"mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects"):D(e&&t&&"object"==typeof e&&"object"==typeof t),S(t,function(t,r){"production"!==n.env.NODE_ENV?D(void 0===e[r],"mergeObjectsWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.",r):D(void 0===e[r]),e[r]=t}),e}function l(e,t){return function(){var n=e.apply(this,arguments),r=t.apply(this,arguments);return null==n?r:null==r?n:c(n,r)}}function p(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}var h=e("./ReactComponent"),d=e("./ReactContext"),f=e("./ReactCurrentOwner"),m=e("./ReactElement"),v=e("./ReactElementValidator"),g=e("./ReactEmptyComponent"),y=e("./ReactErrorUtils"),b=e("./ReactLegacyElement"),E=e("./ReactOwner"),w=e("./ReactPerf"),C=e("./ReactPropTransferer"),N=e("./ReactPropTypeLocations"),R=e("./ReactPropTypeLocationNames"),_=e("./ReactUpdates"),O=e("./Object.assign"),x=e("./instantiateReactComponent"),D=e("./invariant"),M=e("./keyMirror"),P=e("./keyOf"),T=e("./monitorCodeUse"),S=e("./mapObject"),k=e("./shouldUpdateReactComponent"),I=e("./warning"),A=P({mixins:null}),L=M({DEFINE_ONCE:null,DEFINE_MANY:null,OVERRIDE_BASE:null,DEFINE_MANY_MERGED:null}),U=[],j={mixins:L.DEFINE_MANY,statics:L.DEFINE_MANY,propTypes:L.DEFINE_MANY,contextTypes:L.DEFINE_MANY,childContextTypes:L.DEFINE_MANY,getDefaultProps:L.DEFINE_MANY_MERGED,getInitialState:L.DEFINE_MANY_MERGED,getChildContext:L.DEFINE_MANY_MERGED,render:L.DEFINE_ONCE,componentWillMount:L.DEFINE_MANY,componentDidMount:L.DEFINE_MANY,componentWillReceiveProps:L.DEFINE_MANY,shouldComponentUpdate:L.DEFINE_ONCE,componentWillUpdate:L.DEFINE_MANY,componentDidUpdate:L.DEFINE_MANY,componentWillUnmount:L.DEFINE_MANY,updateComponent:L.OVERRIDE_BASE},F={displayName:function(e,t){e.displayName=t},mixins:function(e,t){if(t)for(var n=0;n<t.length;n++)s(e,t[n])},childContextTypes:function(e,t){o(e,t,N.childContext),e.childContextTypes=O({},e.childContextTypes,t)},contextTypes:function(e,t){o(e,t,N.context),e.contextTypes=O({},e.contextTypes,t)},getDefaultProps:function(e,t){e.getDefaultProps=e.getDefaultProps?l(e.getDefaultProps,t):t},propTypes:function(e,t){o(e,t,N.prop),e.propTypes=O({},e.propTypes,t)},statics:function(e,t){u(e,t)}},V=M({MOUNTING:null,UNMOUNTING:null,RECEIVING_PROPS:null}),B={construct:function(){h.Mixin.construct.apply(this,arguments),E.Mixin.construct.apply(this,arguments),this.state=null,this._pendingState=null,this.context=null,this._compositeLifeCycleState=null},isMounted:function(){return h.Mixin.isMounted.call(this)&&this._compositeLifeCycleState!==V.MOUNTING},mountComponent:w.measure("ReactCompositeComponent","mountComponent",function(e,t,r){h.Mixin.mountComponent.call(this,e,t,r),this._compositeLifeCycleState=V.MOUNTING,this.__reactAutoBindMap&&this._bindAutoBindMethods(),this.context=this._processContext(this._currentElement._context),this.props=this._processProps(this.props),this.state=this.getInitialState?this.getInitialState():null,"production"!==n.env.NODE_ENV?D("object"==typeof this.state&&!Array.isArray(this.state),"%s.getInitialState(): must return an object or null",this.constructor.displayName||"ReactCompositeComponent"):D("object"==typeof this.state&&!Array.isArray(this.state)),this._pendingState=null,this._pendingForceUpdate=!1,this.componentWillMount&&(this.componentWillMount(),this._pendingState&&(this.state=this._pendingState,this._pendingState=null)),this._renderedComponent=x(this._renderValidatedComponent(),this._currentElement.type),this._compositeLifeCycleState=null;var o=this._renderedComponent.mountComponent(e,t,r+1);return this.componentDidMount&&t.getReactMountReady().enqueue(this.componentDidMount,this),o}),unmountComponent:function(){this._compositeLifeCycleState=V.UNMOUNTING,this.componentWillUnmount&&this.componentWillUnmount(),this._compositeLifeCycleState=null,this._renderedComponent.unmountComponent(),this._renderedComponent=null,h.Mixin.unmountComponent.call(this)},setState:function(e,t){"production"!==n.env.NODE_ENV?D("object"==typeof e||null==e,"setState(...): takes an object of state variables to update."):D("object"==typeof e||null==e),"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?I(null!=e,"setState(...): You passed an undefined or null state object; instead, use forceUpdate()."):null),this.replaceState(O({},this._pendingState||this.state,e),t)},replaceState:function(e,t){a(this),this._pendingState=e,this._compositeLifeCycleState!==V.MOUNTING&&_.enqueueUpdate(this,t)},_processContext:function(e){var t=null,r=this.constructor.contextTypes;if(r){t={};for(var o in r)t[o]=e[o];"production"!==n.env.NODE_ENV&&this._checkPropTypes(r,t,N.context)}return t},_processChildContext:function(e){var t=this.getChildContext&&this.getChildContext(),r=this.constructor.displayName||"ReactCompositeComponent";if(t){"production"!==n.env.NODE_ENV?D("object"==typeof this.constructor.childContextTypes,"%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",r):D("object"==typeof this.constructor.childContextTypes),"production"!==n.env.NODE_ENV&&this._checkPropTypes(this.constructor.childContextTypes,t,N.childContext);for(var o in t)"production"!==n.env.NODE_ENV?D(o in this.constructor.childContextTypes,'%s.getChildContext(): key "%s" is not defined in childContextTypes.',r,o):D(o in this.constructor.childContextTypes);return O({},e,t)}return e},_processProps:function(e){if("production"!==n.env.NODE_ENV){var t=this.constructor.propTypes;t&&this._checkPropTypes(t,e,N.prop)}return e},_checkPropTypes:function(e,t,o){var i=this.constructor.displayName;for(var a in e)if(e.hasOwnProperty(a)){var s=e[a](t,a,i,o);if(s instanceof Error){var u=r(this);"production"!==n.env.NODE_ENV?I(!1,s.message+u):null}}},performUpdateIfNecessary:function(e){var t=this._compositeLifeCycleState;if(t!==V.MOUNTING&&t!==V.RECEIVING_PROPS&&(null!=this._pendingElement||null!=this._pendingState||this._pendingForceUpdate)){var r=this.context,o=this.props,i=this._currentElement;null!=this._pendingElement&&(i=this._pendingElement,r=this._processContext(i._context),o=this._processProps(i.props),this._pendingElement=null,this._compositeLifeCycleState=V.RECEIVING_PROPS,this.componentWillReceiveProps&&this.componentWillReceiveProps(o,r)),this._compositeLifeCycleState=null;var a=this._pendingState||this.state;this._pendingState=null;var s=this._pendingForceUpdate||!this.shouldComponentUpdate||this.shouldComponentUpdate(o,a,r);"production"!==n.env.NODE_ENV&&"undefined"==typeof s&&console.warn((this.constructor.displayName||"ReactCompositeComponent")+".shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false."),s?(this._pendingForceUpdate=!1,this._performComponentUpdate(i,o,a,r,e)):(this._currentElement=i,this.props=o,this.state=a,this.context=r,this._owner=i._owner)}},_performComponentUpdate:function(e,t,n,r,o){var i=this._currentElement,a=this.props,s=this.state,u=this.context;this.componentWillUpdate&&this.componentWillUpdate(t,n,r),this._currentElement=e,this.props=t,this.state=n,this.context=r,this._owner=e._owner,this.updateComponent(o,i),this.componentDidUpdate&&o.getReactMountReady().enqueue(this.componentDidUpdate.bind(this,a,s,u),this)},receiveComponent:function(e,t){(e!==this._currentElement||null==e._owner)&&h.Mixin.receiveComponent.call(this,e,t)},updateComponent:w.measure("ReactCompositeComponent","updateComponent",function(e,t){h.Mixin.updateComponent.call(this,e,t);var n=this._renderedComponent,r=n._currentElement,o=this._renderValidatedComponent();if(k(r,o))n.receiveComponent(o,e);else{var i=this._rootNodeID,a=n._rootNodeID;n.unmountComponent(),this._renderedComponent=x(o,this._currentElement.type);var s=this._renderedComponent.mountComponent(i,e,this._mountDepth+1);h.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(a,s)}}),forceUpdate:function(e){var t=this._compositeLifeCycleState;"production"!==n.env.NODE_ENV?D(this.isMounted()||t===V.MOUNTING,"forceUpdate(...): Can only force an update on mounted or mounting components."):D(this.isMounted()||t===V.MOUNTING),"production"!==n.env.NODE_ENV?D(t!==V.UNMOUNTING&&null==f.current,"forceUpdate(...): Cannot force an update while unmounting component or within a `render` function."):D(t!==V.UNMOUNTING&&null==f.current),this._pendingForceUpdate=!0,_.enqueueUpdate(this,e)},_renderValidatedComponent:w.measure("ReactCompositeComponent","_renderValidatedComponent",function(){var e,t=d.current;d.current=this._processChildContext(this._currentElement._context),f.current=this;try{e=this.render(),null===e||e===!1?(e=g.getEmptyComponent(),g.registerNullComponentID(this._rootNodeID)):g.deregisterNullComponentID(this._rootNodeID)}finally{d.current=t,f.current=null}return"production"!==n.env.NODE_ENV?D(m.isValidElement(e),"%s.render(): A valid ReactComponent must be returned. You may have returned undefined, an array or some other invalid object.",this.constructor.displayName||"ReactCompositeComponent"):D(m.isValidElement(e)),e}),_bindAutoBindMethods:function(){for(var e in this.__reactAutoBindMap)if(this.__reactAutoBindMap.hasOwnProperty(e)){var t=this.__reactAutoBindMap[e];this[e]=this._bindAutoBindMethod(y.guard(t,this.constructor.displayName+"."+e))}},_bindAutoBindMethod:function(e){var t=this,r=e.bind(t);if("production"!==n.env.NODE_ENV){r.__reactBoundContext=t,r.__reactBoundMethod=e,r.__reactBoundArguments=null;var o=t.constructor.displayName,i=r.bind;r.bind=function(n){for(var a=[],s=1,u=arguments.length;u>s;s++)a.push(arguments[s]);if(n!==t&&null!==n)T("react_bind_warning",{component:o}),console.warn("bind(): React component methods may only be bound to the component instance. See "+o);else if(!a.length)return T("react_bind_warning",{component:o}),console.warn("bind(): You are binding a component method to the component. React does this for you automatically in a high-performance way, so you can safely remove this call. See "+o),r;var c=i.apply(r,arguments);return c.__reactBoundContext=t,c.__reactBoundMethod=e,c.__reactBoundArguments=a,c}}return r}},H=function(){};O(H.prototype,h.Mixin,E.Mixin,C.Mixin,B);var W={LifeCycle:V,Base:H,createClass:function(e){var t=function(){};t.prototype=new H,t.prototype.constructor=t,U.forEach(s.bind(null,t)),s(t,e),t.getDefaultProps&&(t.defaultProps=t.getDefaultProps()),"production"!==n.env.NODE_ENV?D(t.prototype.render,"createClass(...): Class specification must implement a `render` method."):D(t.prototype.render),"production"!==n.env.NODE_ENV&&t.prototype.componentShouldUpdate&&(T("react_component_should_update_warning",{component:e.displayName}),console.warn((e.displayName||"A component")+" has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value."));for(var r in j)t.prototype[r]||(t.prototype[r]=null);return b.wrapFactory("production"!==n.env.NODE_ENV?v.createFactory(t):m.createFactory(t))},injection:{injectMixin:function(e){U.push(e)}}};t.exports=W}).call(this,e("_process"))},{"./Object.assign":95,"./ReactComponent":101,"./ReactContext":104,"./ReactCurrentOwner":105,"./ReactElement":121,"./ReactElementValidator":122,"./ReactEmptyComponent":123,"./ReactErrorUtils":124,"./ReactLegacyElement":130,"./ReactOwner":136,"./ReactPerf":137,"./ReactPropTransferer":138,"./ReactPropTypeLocationNames":139,"./ReactPropTypeLocations":140,"./ReactUpdates":148,"./instantiateReactComponent":195,"./invariant":196,"./keyMirror":202,"./keyOf":203,"./mapObject":204,"./monitorCodeUse":206,"./shouldUpdateReactComponent":212,"./warning":215,_process:19}],104:[function(e,t){"use strict";var n=e("./Object.assign"),r={current:{},withContext:function(e,t){var o,i=r.current;r.current=n({},i,e);try{o=t()}finally{r.current=i}return o}};t.exports=r},{"./Object.assign":95}],105:[function(e,t){"use strict";var n={current:null};t.exports=n},{}],106:[function(e,t){(function(n){"use strict";function r(e){return a.markNonLegacyFactory("production"!==n.env.NODE_ENV?i.createFactory(e):o.createFactory(e))}var o=e("./ReactElement"),i=e("./ReactElementValidator"),a=e("./ReactLegacyElement"),s=e("./mapObject"),u=s({a:"a",abbr:"abbr",address:"address",area:"area",article:"article",aside:"aside",audio:"audio",b:"b",base:"base",bdi:"bdi",bdo:"bdo",big:"big",blockquote:"blockquote",body:"body",br:"br",button:"button",canvas:"canvas",caption:"caption",cite:"cite",code:"code",col:"col",colgroup:"colgroup",data:"data",datalist:"datalist",dd:"dd",del:"del",details:"details",dfn:"dfn",dialog:"dialog",div:"div",dl:"dl",dt:"dt",em:"em",embed:"embed",fieldset:"fieldset",figcaption:"figcaption",figure:"figure",footer:"footer",form:"form",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",head:"head",header:"header",hr:"hr",html:"html",i:"i",iframe:"iframe",img:"img",input:"input",ins:"ins",kbd:"kbd",keygen:"keygen",label:"label",legend:"legend",li:"li",link:"link",main:"main",map:"map",mark:"mark",menu:"menu",menuitem:"menuitem",meta:"meta",meter:"meter",nav:"nav",noscript:"noscript",object:"object",ol:"ol",optgroup:"optgroup",option:"option",output:"output",p:"p",param:"param",picture:"picture",pre:"pre",progress:"progress",q:"q",rp:"rp",rt:"rt",ruby:"ruby",s:"s",samp:"samp",script:"script",section:"section",select:"select",small:"small",source:"source",span:"span",strong:"strong",style:"style",sub:"sub",summary:"summary",sup:"sup",table:"table",tbody:"tbody",td:"td",textarea:"textarea",tfoot:"tfoot",th:"th",thead:"thead",time:"time",title:"title",tr:"tr",track:"track",u:"u",ul:"ul","var":"var",video:"video",wbr:"wbr",circle:"circle",defs:"defs",ellipse:"ellipse",g:"g",line:"line",linearGradient:"linearGradient",mask:"mask",path:"path",pattern:"pattern",polygon:"polygon",polyline:"polyline",radialGradient:"radialGradient",rect:"rect",stop:"stop",svg:"svg",text:"text",tspan:"tspan"},r);t.exports=u}).call(this,e("_process"))},{"./ReactElement":121,"./ReactElementValidator":122,"./ReactLegacyElement":130,"./mapObject":204,_process:19}],107:[function(e,t){"use strict";var n=e("./AutoFocusMixin"),r=e("./ReactBrowserComponentMixin"),o=e("./ReactCompositeComponent"),i=e("./ReactElement"),a=e("./ReactDOM"),s=e("./keyMirror"),u=i.createFactory(a.button.type),c=s({onClick:!0,onDoubleClick:!0,onMouseDown:!0,onMouseMove:!0,onMouseUp:!0,onClickCapture:!0,onDoubleClickCapture:!0,onMouseDownCapture:!0,onMouseMoveCapture:!0,onMouseUpCapture:!0}),l=o.createClass({displayName:"ReactDOMButton",mixins:[n,r],render:function(){var e={};for(var t in this.props)!this.props.hasOwnProperty(t)||this.props.disabled&&c[t]||(e[t]=this.props[t]);return u(e,this.props.children)}});t.exports=l},{"./AutoFocusMixin":70,"./ReactBrowserComponentMixin":98,"./ReactCompositeComponent":103,"./ReactDOM":106,"./ReactElement":121,"./keyMirror":202}],108:[function(e,t){(function(n){"use strict";function r(e){e&&("production"!==n.env.NODE_ENV?y(null==e.children||null==e.dangerouslySetInnerHTML,"Can only set one of `children` or `props.dangerouslySetInnerHTML`."):y(null==e.children||null==e.dangerouslySetInnerHTML),"production"!==n.env.NODE_ENV&&e.contentEditable&&null!=e.children&&console.warn("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."),"production"!==n.env.NODE_ENV?y(null==e.style||"object"==typeof e.style,"The `style` prop expects a mapping from style properties to values, not a string."):y(null==e.style||"object"==typeof e.style))}function o(e,t,r,o){"production"!==n.env.NODE_ENV&&("onScroll"!==t||b("scroll",!0)||(w("react_no_scroll_event"),console.warn("This browser doesn't support the `onScroll` event")));var i=d.findReactContainerForID(e);if(i){var a=i.nodeType===x?i.ownerDocument:i;N(t,a)}o.getPutListenerQueue().enqueuePutListener(e,t,r)}function i(e){T.call(P,e)||("production"!==n.env.NODE_ENV?y(M.test(e),"Invalid tag: %s",e):y(M.test(e)),P[e]=!0)}function a(e){i(e),this._tag=e,this.tagName=e.toUpperCase()}var s=e("./CSSPropertyOperations"),u=e("./DOMProperty"),c=e("./DOMPropertyOperations"),l=e("./ReactBrowserComponentMixin"),p=e("./ReactComponent"),h=e("./ReactBrowserEventEmitter"),d=e("./ReactMount"),f=e("./ReactMultiChild"),m=e("./ReactPerf"),v=e("./Object.assign"),g=e("./escapeTextForBrowser"),y=e("./invariant"),b=e("./isEventSupported"),E=e("./keyOf"),w=e("./monitorCodeUse"),C=h.deleteListener,N=h.listenTo,R=h.registrationNameModules,_={string:!0,number:!0},O=E({style:null}),x=1,D={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},M=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,P={},T={}.hasOwnProperty;a.displayName="ReactDOMComponent",a.Mixin={mountComponent:m.measure("ReactDOMComponent","mountComponent",function(e,t,n){p.Mixin.mountComponent.call(this,e,t,n),r(this.props);var o=D[this._tag]?"":"</"+this._tag+">";return this._createOpenTagMarkupAndPutListeners(t)+this._createContentMarkup(t)+o}),_createOpenTagMarkupAndPutListeners:function(e){var t=this.props,n="<"+this._tag;for(var r in t)if(t.hasOwnProperty(r)){var i=t[r];if(null!=i)if(R.hasOwnProperty(r))o(this._rootNodeID,r,i,e);else{r===O&&(i&&(i=t.style=v({},t.style)),i=s.createMarkupForStyles(i));var a=c.createMarkupForProperty(r,i);a&&(n+=" "+a)}}if(e.renderToStaticMarkup)return n+">";var u=c.createMarkupForID(this._rootNodeID);return n+" "+u+">"},_createContentMarkup:function(e){var t=this.props.dangerouslySetInnerHTML;if(null!=t){if(null!=t.__html)return t.__html}else{var n=_[typeof this.props.children]?this.props.children:null,r=null!=n?null:this.props.children;if(null!=n)return g(n);if(null!=r){var o=this.mountChildren(r,e);return o.join("")}}return""},receiveComponent:function(e,t){(e!==this._currentElement||null==e._owner)&&p.Mixin.receiveComponent.call(this,e,t)},updateComponent:m.measure("ReactDOMComponent","updateComponent",function(e,t){r(this._currentElement.props),p.Mixin.updateComponent.call(this,e,t),this._updateDOMProperties(t.props,e),this._updateDOMChildren(t.props,e)}),_updateDOMProperties:function(e,t){var n,r,i,a=this.props;for(n in e)if(!a.hasOwnProperty(n)&&e.hasOwnProperty(n))if(n===O){var s=e[n];for(r in s)s.hasOwnProperty(r)&&(i=i||{},i[r]="")}else R.hasOwnProperty(n)?C(this._rootNodeID,n):(u.isStandardName[n]||u.isCustomAttribute(n))&&p.BackendIDOperations.deletePropertyByID(this._rootNodeID,n);for(n in a){var c=a[n],l=e[n];if(a.hasOwnProperty(n)&&c!==l)if(n===O)if(c&&(c=a.style=v({},c)),l){for(r in l)!l.hasOwnProperty(r)||c&&c.hasOwnProperty(r)||(i=i||{},i[r]="");for(r in c)c.hasOwnProperty(r)&&l[r]!==c[r]&&(i=i||{},i[r]=c[r])}else i=c;else R.hasOwnProperty(n)?o(this._rootNodeID,n,c,t):(u.isStandardName[n]||u.isCustomAttribute(n))&&p.BackendIDOperations.updatePropertyByID(this._rootNodeID,n,c)}i&&p.BackendIDOperations.updateStylesByID(this._rootNodeID,i)},_updateDOMChildren:function(e,t){var n=this.props,r=_[typeof e.children]?e.children:null,o=_[typeof n.children]?n.children:null,i=e.dangerouslySetInnerHTML&&e.dangerouslySetInnerHTML.__html,a=n.dangerouslySetInnerHTML&&n.dangerouslySetInnerHTML.__html,s=null!=r?null:e.children,u=null!=o?null:n.children,c=null!=r||null!=i,l=null!=o||null!=a;null!=s&&null==u?this.updateChildren(null,t):c&&!l&&this.updateTextContent(""),null!=o?r!==o&&this.updateTextContent(""+o):null!=a?i!==a&&p.BackendIDOperations.updateInnerHTMLByID(this._rootNodeID,a):null!=u&&this.updateChildren(u,t)},unmountComponent:function(){this.unmountChildren(),h.deleteAllListeners(this._rootNodeID),p.Mixin.unmountComponent.call(this)}},v(a.prototype,p.Mixin,a.Mixin,f.Mixin,l),t.exports=a}).call(this,e("_process"))},{"./CSSPropertyOperations":73,"./DOMProperty":79,"./DOMPropertyOperations":80,"./Object.assign":95,"./ReactBrowserComponentMixin":98,"./ReactBrowserEventEmitter":99,"./ReactComponent":101,"./ReactMount":132,"./ReactMultiChild":133,"./ReactPerf":137,"./escapeTextForBrowser":179,"./invariant":196,"./isEventSupported":197,"./keyOf":203,"./monitorCodeUse":206,_process:19}],109:[function(e,t){"use strict";var n=e("./EventConstants"),r=e("./LocalEventTrapMixin"),o=e("./ReactBrowserComponentMixin"),i=e("./ReactCompositeComponent"),a=e("./ReactElement"),s=e("./ReactDOM"),u=a.createFactory(s.form.type),c=i.createClass({displayName:"ReactDOMForm",mixins:[o,r],render:function(){return u(this.props)},componentDidMount:function(){this.trapBubbledEvent(n.topLevelTypes.topReset,"reset"),this.trapBubbledEvent(n.topLevelTypes.topSubmit,"submit")}});t.exports=c},{"./EventConstants":84,"./LocalEventTrapMixin":93,"./ReactBrowserComponentMixin":98,"./ReactCompositeComponent":103,"./ReactDOM":106,"./ReactElement":121}],110:[function(e,t){(function(n){"use strict";var r=e("./CSSPropertyOperations"),o=e("./DOMChildrenOperations"),i=e("./DOMPropertyOperations"),a=e("./ReactMount"),s=e("./ReactPerf"),u=e("./invariant"),c=e("./setInnerHTML"),l={dangerouslySetInnerHTML:"`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.",style:"`style` must be set using `updateStylesByID()`."},p={updatePropertyByID:s.measure("ReactDOMIDOperations","updatePropertyByID",function(e,t,r){var o=a.getNode(e);"production"!==n.env.NODE_ENV?u(!l.hasOwnProperty(t),"updatePropertyByID(...): %s",l[t]):u(!l.hasOwnProperty(t)),null!=r?i.setValueForProperty(o,t,r):i.deleteValueForProperty(o,t)}),deletePropertyByID:s.measure("ReactDOMIDOperations","deletePropertyByID",function(e,t,r){var o=a.getNode(e);"production"!==n.env.NODE_ENV?u(!l.hasOwnProperty(t),"updatePropertyByID(...): %s",l[t]):u(!l.hasOwnProperty(t)),i.deleteValueForProperty(o,t,r)}),updateStylesByID:s.measure("ReactDOMIDOperations","updateStylesByID",function(e,t){var n=a.getNode(e);r.setValueForStyles(n,t)}),updateInnerHTMLByID:s.measure("ReactDOMIDOperations","updateInnerHTMLByID",function(e,t){var n=a.getNode(e);c(n,t)}),updateTextContentByID:s.measure("ReactDOMIDOperations","updateTextContentByID",function(e,t){var n=a.getNode(e);o.updateTextContent(n,t)}),dangerouslyReplaceNodeWithMarkupByID:s.measure("ReactDOMIDOperations","dangerouslyReplaceNodeWithMarkupByID",function(e,t){var n=a.getNode(e);o.dangerouslyReplaceNodeWithMarkup(n,t)}),dangerouslyProcessChildrenUpdates:s.measure("ReactDOMIDOperations","dangerouslyProcessChildrenUpdates",function(e,t){for(var n=0;n<e.length;n++)e[n].parentNode=a.getNode(e[n].parentID);o.processUpdates(e,t)})};t.exports=p}).call(this,e("_process"))},{"./CSSPropertyOperations":73,"./DOMChildrenOperations":78,"./DOMPropertyOperations":80,"./ReactMount":132,"./ReactPerf":137,"./invariant":196,"./setInnerHTML":210,_process:19}],111:[function(e,t){"use strict";var n=e("./EventConstants"),r=e("./LocalEventTrapMixin"),o=e("./ReactBrowserComponentMixin"),i=e("./ReactCompositeComponent"),a=e("./ReactElement"),s=e("./ReactDOM"),u=a.createFactory(s.img.type),c=i.createClass({displayName:"ReactDOMImg",tagName:"IMG",mixins:[o,r],render:function(){return u(this.props)},componentDidMount:function(){this.trapBubbledEvent(n.topLevelTypes.topLoad,"load"),this.trapBubbledEvent(n.topLevelTypes.topError,"error")}});t.exports=c},{"./EventConstants":84,"./LocalEventTrapMixin":93,"./ReactBrowserComponentMixin":98,"./ReactCompositeComponent":103,"./ReactDOM":106,"./ReactElement":121}],112:[function(e,t){(function(n){"use strict";function r(){this.isMounted()&&this.forceUpdate()}var o=e("./AutoFocusMixin"),i=e("./DOMPropertyOperations"),a=e("./LinkedValueUtils"),s=e("./ReactBrowserComponentMixin"),u=e("./ReactCompositeComponent"),c=e("./ReactElement"),l=e("./ReactDOM"),p=e("./ReactMount"),h=e("./ReactUpdates"),d=e("./Object.assign"),f=e("./invariant"),m=c.createFactory(l.input.type),v={},g=u.createClass({displayName:"ReactDOMInput",mixins:[o,a.Mixin,s],getInitialState:function(){var e=this.props.defaultValue;return{initialChecked:this.props.defaultChecked||!1,initialValue:null!=e?e:null}},render:function(){var e=d({},this.props);e.defaultChecked=null,e.defaultValue=null;var t=a.getValue(this);e.value=null!=t?t:this.state.initialValue;var n=a.getChecked(this);return e.checked=null!=n?n:this.state.initialChecked,e.onChange=this._handleChange,m(e,this.props.children)},componentDidMount:function(){var e=p.getID(this.getDOMNode());v[e]=this},componentWillUnmount:function(){var e=this.getDOMNode(),t=p.getID(e);delete v[t]},componentDidUpdate:function(){var e=this.getDOMNode();null!=this.props.checked&&i.setValueForProperty(e,"checked",this.props.checked||!1);var t=a.getValue(this);null!=t&&i.setValueForProperty(e,"value",""+t)},_handleChange:function(e){var t,o=a.getOnChange(this);o&&(t=o.call(this,e)),h.asap(r,this);var i=this.props.name;if("radio"===this.props.type&&null!=i){for(var s=this.getDOMNode(),u=s;u.parentNode;)u=u.parentNode;for(var c=u.querySelectorAll("input[name="+JSON.stringify(""+i)+'][type="radio"]'),l=0,d=c.length;d>l;l++){var m=c[l];if(m!==s&&m.form===s.form){var g=p.getID(m);"production"!==n.env.NODE_ENV?f(g,"ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported."):f(g);var y=v[g];"production"!==n.env.NODE_ENV?f(y,"ReactDOMInput: Unknown radio button ID %s.",g):f(y),h.asap(r,y)}}}return t}});t.exports=g}).call(this,e("_process"))},{"./AutoFocusMixin":70,"./DOMPropertyOperations":80,"./LinkedValueUtils":92,"./Object.assign":95,"./ReactBrowserComponentMixin":98,"./ReactCompositeComponent":103,"./ReactDOM":106,"./ReactElement":121,"./ReactMount":132,"./ReactUpdates":148,"./invariant":196,_process:19}],113:[function(e,t){(function(n){"use strict";var r=e("./ReactBrowserComponentMixin"),o=e("./ReactCompositeComponent"),i=e("./ReactElement"),a=e("./ReactDOM"),s=e("./warning"),u=i.createFactory(a.option.type),c=o.createClass({displayName:"ReactDOMOption",mixins:[r],componentWillMount:function(){"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?s(null==this.props.selected,"Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."):null)},render:function(){return u(this.props,this.props.children)}});t.exports=c}).call(this,e("_process"))},{"./ReactBrowserComponentMixin":98,"./ReactCompositeComponent":103,"./ReactDOM":106,"./ReactElement":121,"./warning":215,_process:19}],114:[function(e,t){"use strict";function n(){this.isMounted()&&(this.setState({value:this._pendingValue}),this._pendingValue=0)}function r(e,t){if(null!=e[t])if(e.multiple){if(!Array.isArray(e[t]))return new Error("The `"+t+"` prop supplied to <select> must be an array if `multiple` is true.")}else if(Array.isArray(e[t]))return new Error("The `"+t+"` prop supplied to <select> must be a scalar value if `multiple` is false.")}function o(e,t){var n,r,o,i=e.props.multiple,a=null!=t?t:e.state.value,s=e.getDOMNode().options;if(i)for(n={},r=0,o=a.length;o>r;++r)n[""+a[r]]=!0;else n=""+a;for(r=0,o=s.length;o>r;r++){var u=i?n.hasOwnProperty(s[r].value):s[r].value===n;u!==s[r].selected&&(s[r].selected=u)}}var i=e("./AutoFocusMixin"),a=e("./LinkedValueUtils"),s=e("./ReactBrowserComponentMixin"),u=e("./ReactCompositeComponent"),c=e("./ReactElement"),l=e("./ReactDOM"),p=e("./ReactUpdates"),h=e("./Object.assign"),d=c.createFactory(l.select.type),f=u.createClass({displayName:"ReactDOMSelect",mixins:[i,a.Mixin,s],propTypes:{defaultValue:r,value:r},getInitialState:function(){return{value:this.props.defaultValue||(this.props.multiple?[]:"")}},componentWillMount:function(){this._pendingValue=null},componentWillReceiveProps:function(e){!this.props.multiple&&e.multiple?this.setState({value:[this.state.value]}):this.props.multiple&&!e.multiple&&this.setState({value:this.state.value[0]})},render:function(){var e=h({},this.props);return e.onChange=this._handleChange,e.value=null,d(e,this.props.children)},componentDidMount:function(){o(this,a.getValue(this))},componentDidUpdate:function(e){var t=a.getValue(this),n=!!e.multiple,r=!!this.props.multiple;(null!=t||n!==r)&&o(this,t)},_handleChange:function(e){var t,r=a.getOnChange(this);r&&(t=r.call(this,e));var o;if(this.props.multiple){o=[];for(var i=e.target.options,s=0,u=i.length;u>s;s++)i[s].selected&&o.push(i[s].value)}else o=e.target.value;return this._pendingValue=o,p.asap(n,this),t}});t.exports=f},{"./AutoFocusMixin":70,"./LinkedValueUtils":92,"./Object.assign":95,"./ReactBrowserComponentMixin":98,"./ReactCompositeComponent":103,"./ReactDOM":106,"./ReactElement":121,"./ReactUpdates":148}],115:[function(e,t){"use strict";function n(e,t,n,r){return e===n&&t===r}function r(e){var t=document.selection,n=t.createRange(),r=n.text.length,o=n.duplicate();o.moveToElementText(e),o.setEndPoint("EndToStart",n);var i=o.text.length,a=i+r;return{start:i,end:a}}function o(e){var t=window.getSelection&&window.getSelection();if(!t||0===t.rangeCount)return null;var r=t.anchorNode,o=t.anchorOffset,i=t.focusNode,a=t.focusOffset,s=t.getRangeAt(0),u=n(t.anchorNode,t.anchorOffset,t.focusNode,t.focusOffset),c=u?0:s.toString().length,l=s.cloneRange();l.selectNodeContents(e),l.setEnd(s.startContainer,s.startOffset);var p=n(l.startContainer,l.startOffset,l.endContainer,l.endOffset),h=p?0:l.toString().length,d=h+c,f=document.createRange();f.setStart(r,o),f.setEnd(i,a);var m=f.collapsed;return{start:m?d:h,end:m?h:d}}function i(e,t){var n,r,o=document.selection.createRange().duplicate();"undefined"==typeof t.end?(n=t.start,r=n):t.start>t.end?(n=t.end,r=t.start):(n=t.start,r=t.end),o.moveToElementText(e),o.moveStart("character",n),o.setEndPoint("EndToStart",o),o.moveEnd("character",r-n),o.select()}function a(e,t){if(window.getSelection){var n=window.getSelection(),r=e[c()].length,o=Math.min(t.start,r),i="undefined"==typeof t.end?o:Math.min(t.end,r);if(!n.extend&&o>i){var a=i;i=o,o=a}var s=u(e,o),l=u(e,i);if(s&&l){var p=document.createRange();p.setStart(s.node,s.offset),n.removeAllRanges(),o>i?(n.addRange(p),n.extend(l.node,l.offset)):(p.setEnd(l.node,l.offset),n.addRange(p))}}}var s=e("./ExecutionEnvironment"),u=e("./getNodeForCharacterOffset"),c=e("./getTextContentAccessor"),l=s.canUseDOM&&document.selection,p={getOffsets:l?r:o,setOffsets:l?i:a};t.exports=p},{"./ExecutionEnvironment":90,"./getNodeForCharacterOffset":189,"./getTextContentAccessor":191}],116:[function(e,t){(function(n){"use strict";function r(){this.isMounted()&&this.forceUpdate()}var o=e("./AutoFocusMixin"),i=e("./DOMPropertyOperations"),a=e("./LinkedValueUtils"),s=e("./ReactBrowserComponentMixin"),u=e("./ReactCompositeComponent"),c=e("./ReactElement"),l=e("./ReactDOM"),p=e("./ReactUpdates"),h=e("./Object.assign"),d=e("./invariant"),f=e("./warning"),m=c.createFactory(l.textarea.type),v=u.createClass({displayName:"ReactDOMTextarea",mixins:[o,a.Mixin,s],getInitialState:function(){var e=this.props.defaultValue,t=this.props.children;
null!=t&&("production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?f(!1,"Use the `defaultValue` or `value` props instead of setting children on <textarea>."):null),"production"!==n.env.NODE_ENV?d(null==e,"If you supply `defaultValue` on a <textarea>, do not pass children."):d(null==e),Array.isArray(t)&&("production"!==n.env.NODE_ENV?d(t.length<=1,"<textarea> can only have at most one child."):d(t.length<=1),t=t[0]),e=""+t),null==e&&(e="");var r=a.getValue(this);return{initialValue:""+(null!=r?r:e)}},render:function(){var e=h({},this.props);return"production"!==n.env.NODE_ENV?d(null==e.dangerouslySetInnerHTML,"`dangerouslySetInnerHTML` does not make sense on <textarea>."):d(null==e.dangerouslySetInnerHTML),e.defaultValue=null,e.value=null,e.onChange=this._handleChange,m(e,this.state.initialValue)},componentDidUpdate:function(){var e=a.getValue(this);if(null!=e){var t=this.getDOMNode();i.setValueForProperty(t,"value",""+e)}},_handleChange:function(e){var t,n=a.getOnChange(this);return n&&(t=n.call(this,e)),p.asap(r,this),t}});t.exports=v}).call(this,e("_process"))},{"./AutoFocusMixin":70,"./DOMPropertyOperations":80,"./LinkedValueUtils":92,"./Object.assign":95,"./ReactBrowserComponentMixin":98,"./ReactCompositeComponent":103,"./ReactDOM":106,"./ReactElement":121,"./ReactUpdates":148,"./invariant":196,"./warning":215,_process:19}],117:[function(e,t){"use strict";function n(){this.reinitializeTransaction()}var r=e("./ReactUpdates"),o=e("./Transaction"),i=e("./Object.assign"),a=e("./emptyFunction"),s={initialize:a,close:function(){p.isBatchingUpdates=!1}},u={initialize:a,close:r.flushBatchedUpdates.bind(r)},c=[u,s];i(n.prototype,o.Mixin,{getTransactionWrappers:function(){return c}});var l=new n,p={isBatchingUpdates:!1,batchedUpdates:function(e,t,n){var r=p.isBatchingUpdates;p.isBatchingUpdates=!0,r?e(t,n):l.perform(e,null,t,n)}};t.exports=p},{"./Object.assign":95,"./ReactUpdates":148,"./Transaction":164,"./emptyFunction":177}],118:[function(e,t){(function(n){"use strict";function r(){if(_.EventEmitter.injectReactEventListener(R),_.EventPluginHub.injectEventPluginOrder(u),_.EventPluginHub.injectInstanceHandle(O),_.EventPluginHub.injectMount(x),_.EventPluginHub.injectEventPluginsByName({SimpleEventPlugin:P,EnterLeaveEventPlugin:c,ChangeEventPlugin:i,CompositionEventPlugin:s,MobileSafariClickEventPlugin:h,SelectEventPlugin:D,BeforeInputEventPlugin:o}),_.NativeComponent.injectGenericComponentClass(v),_.NativeComponent.injectComponentClasses({button:g,form:y,img:b,input:E,option:w,select:C,textarea:N,html:S("html"),head:S("head"),body:S("body")}),_.CompositeComponent.injectMixin(d),_.DOMProperty.injectDOMPropertyConfig(p),_.DOMProperty.injectDOMPropertyConfig(T),_.EmptyComponent.injectEmptyComponent("noscript"),_.Updates.injectReconcileTransaction(f.ReactReconcileTransaction),_.Updates.injectBatchingStrategy(m),_.RootIndex.injectCreateReactRootIndex(l.canUseDOM?a.createReactRootIndex:M.createReactRootIndex),_.Component.injectEnvironment(f),"production"!==n.env.NODE_ENV){var t=l.canUseDOM&&window.location.href||"";if(/[?&]react_perf\b/.test(t)){var r=e("./ReactDefaultPerf");r.start()}}}var o=e("./BeforeInputEventPlugin"),i=e("./ChangeEventPlugin"),a=e("./ClientReactRootIndex"),s=e("./CompositionEventPlugin"),u=e("./DefaultEventPluginOrder"),c=e("./EnterLeaveEventPlugin"),l=e("./ExecutionEnvironment"),p=e("./HTMLDOMPropertyConfig"),h=e("./MobileSafariClickEventPlugin"),d=e("./ReactBrowserComponentMixin"),f=e("./ReactComponentBrowserEnvironment"),m=e("./ReactDefaultBatchingStrategy"),v=e("./ReactDOMComponent"),g=e("./ReactDOMButton"),y=e("./ReactDOMForm"),b=e("./ReactDOMImg"),E=e("./ReactDOMInput"),w=e("./ReactDOMOption"),C=e("./ReactDOMSelect"),N=e("./ReactDOMTextarea"),R=e("./ReactEventListener"),_=e("./ReactInjection"),O=e("./ReactInstanceHandles"),x=e("./ReactMount"),D=e("./SelectEventPlugin"),M=e("./ServerReactRootIndex"),P=e("./SimpleEventPlugin"),T=e("./SVGDOMPropertyConfig"),S=e("./createFullPageComponent");t.exports={inject:r}}).call(this,e("_process"))},{"./BeforeInputEventPlugin":71,"./ChangeEventPlugin":75,"./ClientReactRootIndex":76,"./CompositionEventPlugin":77,"./DefaultEventPluginOrder":82,"./EnterLeaveEventPlugin":83,"./ExecutionEnvironment":90,"./HTMLDOMPropertyConfig":91,"./MobileSafariClickEventPlugin":94,"./ReactBrowserComponentMixin":98,"./ReactComponentBrowserEnvironment":102,"./ReactDOMButton":107,"./ReactDOMComponent":108,"./ReactDOMForm":109,"./ReactDOMImg":111,"./ReactDOMInput":112,"./ReactDOMOption":113,"./ReactDOMSelect":114,"./ReactDOMTextarea":116,"./ReactDefaultBatchingStrategy":117,"./ReactDefaultPerf":119,"./ReactEventListener":126,"./ReactInjection":127,"./ReactInstanceHandles":129,"./ReactMount":132,"./SVGDOMPropertyConfig":149,"./SelectEventPlugin":150,"./ServerReactRootIndex":151,"./SimpleEventPlugin":152,"./createFullPageComponent":172,_process:19}],119:[function(e,t){"use strict";function n(e){return Math.floor(100*e)/100}function r(e,t,n){e[t]=(e[t]||0)+n}var o=e("./DOMProperty"),i=e("./ReactDefaultPerfAnalysis"),a=e("./ReactMount"),s=e("./ReactPerf"),u=e("./performanceNow"),c={_allMeasurements:[],_mountStack:[0],_injected:!1,start:function(){c._injected||s.injection.injectMeasure(c.measure),c._allMeasurements.length=0,s.enableMeasure=!0},stop:function(){s.enableMeasure=!1},getLastMeasurements:function(){return c._allMeasurements},printExclusive:function(e){e=e||c._allMeasurements;var t=i.getExclusiveSummary(e);console.table(t.map(function(e){return{"Component class name":e.componentName,"Total inclusive time (ms)":n(e.inclusive),"Exclusive mount time (ms)":n(e.exclusive),"Exclusive render time (ms)":n(e.render),"Mount time per instance (ms)":n(e.exclusive/e.count),"Render time per instance (ms)":n(e.render/e.count),Instances:e.count}}))},printInclusive:function(e){e=e||c._allMeasurements;var t=i.getInclusiveSummary(e);console.table(t.map(function(e){return{"Owner > component":e.componentName,"Inclusive time (ms)":n(e.time),Instances:e.count}})),console.log("Total time:",i.getTotalTime(e).toFixed(2)+" ms")},getMeasurementsSummaryMap:function(e){var t=i.getInclusiveSummary(e,!0);return t.map(function(e){return{"Owner > component":e.componentName,"Wasted time (ms)":e.time,Instances:e.count}})},printWasted:function(e){e=e||c._allMeasurements,console.table(c.getMeasurementsSummaryMap(e)),console.log("Total time:",i.getTotalTime(e).toFixed(2)+" ms")},printDOM:function(e){e=e||c._allMeasurements;var t=i.getDOMSummary(e);console.table(t.map(function(e){var t={};return t[o.ID_ATTRIBUTE_NAME]=e.id,t.type=e.type,t.args=JSON.stringify(e.args),t})),console.log("Total time:",i.getTotalTime(e).toFixed(2)+" ms")},_recordWrite:function(e,t,n,r){var o=c._allMeasurements[c._allMeasurements.length-1].writes;o[e]=o[e]||[],o[e].push({type:t,time:n,args:r})},measure:function(e,t,n){return function(){for(var o=[],i=0,s=arguments.length;s>i;i++)o.push(arguments[i]);var l,p,h;if("_renderNewRootComponent"===t||"flushBatchedUpdates"===t)return c._allMeasurements.push({exclusive:{},inclusive:{},render:{},counts:{},writes:{},displayNames:{},totalTime:0}),h=u(),p=n.apply(this,o),c._allMeasurements[c._allMeasurements.length-1].totalTime=u()-h,p;if("ReactDOMIDOperations"===e||"ReactComponentBrowserEnvironment"===e){if(h=u(),p=n.apply(this,o),l=u()-h,"mountImageIntoNode"===t){var d=a.getID(o[1]);c._recordWrite(d,t,l,o[0])}else"dangerouslyProcessChildrenUpdates"===t?o[0].forEach(function(e){var t={};null!==e.fromIndex&&(t.fromIndex=e.fromIndex),null!==e.toIndex&&(t.toIndex=e.toIndex),null!==e.textContent&&(t.textContent=e.textContent),null!==e.markupIndex&&(t.markup=o[1][e.markupIndex]),c._recordWrite(e.parentID,e.type,l,t)}):c._recordWrite(o[0],t,l,Array.prototype.slice.call(o,1));return p}if("ReactCompositeComponent"!==e||"mountComponent"!==t&&"updateComponent"!==t&&"_renderValidatedComponent"!==t)return n.apply(this,o);var f="mountComponent"===t?o[0]:this._rootNodeID,m="_renderValidatedComponent"===t,v="mountComponent"===t,g=c._mountStack,y=c._allMeasurements[c._allMeasurements.length-1];if(m?r(y.counts,f,1):v&&g.push(0),h=u(),p=n.apply(this,o),l=u()-h,m)r(y.render,f,l);else if(v){var b=g.pop();g[g.length-1]+=l,r(y.exclusive,f,l-b),r(y.inclusive,f,l)}else r(y.inclusive,f,l);return y.displayNames[f]={current:this.constructor.displayName,owner:this._owner?this._owner.constructor.displayName:"<root>"},p}}};t.exports=c},{"./DOMProperty":79,"./ReactDefaultPerfAnalysis":120,"./ReactMount":132,"./ReactPerf":137,"./performanceNow":209}],120:[function(e,t){function n(e){for(var t=0,n=0;n<e.length;n++){var r=e[n];t+=r.totalTime}return t}function r(e){for(var t=[],n=0;n<e.length;n++){var r,o=e[n];for(r in o.writes)o.writes[r].forEach(function(e){t.push({id:r,type:c[e.type]||e.type,args:e.args})})}return t}function o(e){for(var t,n={},r=0;r<e.length;r++){var o=e[r],i=s({},o.exclusive,o.inclusive);for(var a in i)t=o.displayNames[a].current,n[t]=n[t]||{componentName:t,inclusive:0,exclusive:0,render:0,count:0},o.render[a]&&(n[t].render+=o.render[a]),o.exclusive[a]&&(n[t].exclusive+=o.exclusive[a]),o.inclusive[a]&&(n[t].inclusive+=o.inclusive[a]),o.counts[a]&&(n[t].count+=o.counts[a])}var c=[];for(t in n)n[t].exclusive>=u&&c.push(n[t]);return c.sort(function(e,t){return t.exclusive-e.exclusive}),c}function i(e,t){for(var n,r={},o=0;o<e.length;o++){var i,c=e[o],l=s({},c.exclusive,c.inclusive);t&&(i=a(c));for(var p in l)if(!t||i[p]){var h=c.displayNames[p];n=h.owner+" > "+h.current,r[n]=r[n]||{componentName:n,time:0,count:0},c.inclusive[p]&&(r[n].time+=c.inclusive[p]),c.counts[p]&&(r[n].count+=c.counts[p])}}var d=[];for(n in r)r[n].time>=u&&d.push(r[n]);return d.sort(function(e,t){return t.time-e.time}),d}function a(e){var t={},n=Object.keys(e.writes),r=s({},e.exclusive,e.inclusive);for(var o in r){for(var i=!1,a=0;a<n.length;a++)if(0===n[a].indexOf(o)){i=!0;break}!i&&e.counts[o]>0&&(t[o]=!0)}return t}var s=e("./Object.assign"),u=1.2,c={mountImageIntoNode:"set innerHTML",INSERT_MARKUP:"set innerHTML",MOVE_EXISTING:"move",REMOVE_NODE:"remove",TEXT_CONTENT:"set textContent",updatePropertyByID:"update attribute",deletePropertyByID:"delete attribute",updateStylesByID:"update styles",updateInnerHTMLByID:"set innerHTML",dangerouslyReplaceNodeWithMarkupByID:"replace"},l={getExclusiveSummary:o,getInclusiveSummary:i,getDOMSummary:r,getTotalTime:n};t.exports=l},{"./Object.assign":95}],121:[function(e,t){(function(n){"use strict";function r(e,t){Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:function(){return this._store?this._store[t]:null},set:function(e){"production"!==n.env.NODE_ENV?s(!1,"Don't set the "+t+" property of the component. Mutate the existing props object instead."):null,this._store[t]=e}})}function o(e){try{var t={props:!0};for(var n in t)r(e,n);c=!0}catch(o){}}var i=e("./ReactContext"),a=e("./ReactCurrentOwner"),s=e("./warning"),u={key:!0,ref:!0},c=!1,l=function(e,t,r,o,i,a){return this.type=e,this.key=t,this.ref=r,this._owner=o,this._context=i,"production"!==n.env.NODE_ENV&&(this._store={validated:!1,props:a},c)?void Object.freeze(this):void(this.props=a)};l.prototype={_isReactElement:!0},"production"!==n.env.NODE_ENV&&o(l.prototype),l.createElement=function(e,t,r){var o,c={},p=null,h=null;if(null!=t){h=void 0===t.ref?null:t.ref,"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?s(null!==t.key,"createElement(...): Encountered component with a `key` of null. In a future version, this will be treated as equivalent to the string 'null'; instead, provide an explicit key or use undefined."):null),p=null==t.key?null:""+t.key;for(o in t)t.hasOwnProperty(o)&&!u.hasOwnProperty(o)&&(c[o]=t[o])}var d=arguments.length-2;if(1===d)c.children=r;else if(d>1){for(var f=Array(d),m=0;d>m;m++)f[m]=arguments[m+2];c.children=f}if(e&&e.defaultProps){var v=e.defaultProps;for(o in v)"undefined"==typeof c[o]&&(c[o]=v[o])}return new l(e,p,h,a.current,i.current,c)},l.createFactory=function(e){var t=l.createElement.bind(null,e);return t.type=e,t},l.cloneAndReplaceProps=function(e,t){var r=new l(e.type,e.key,e.ref,e._owner,e._context,t);return"production"!==n.env.NODE_ENV&&(r._store.validated=e._store.validated),r},l.isValidElement=function(e){var t=!(!e||!e._isReactElement);return t},t.exports=l}).call(this,e("_process"))},{"./ReactContext":104,"./ReactCurrentOwner":105,"./warning":215,_process:19}],122:[function(e,t){(function(n){"use strict";function r(){var e=h.current;return e&&e.constructor.displayName||void 0}function o(e,t){e._store.validated||null!=e.key||(e._store.validated=!0,a("react_key_warning",'Each child in an array should have a unique "key" prop.',e,t))}function i(e,t,n){y.test(e)&&a("react_numeric_key_warning","Child objects should have non-numeric keys so ordering is preserved.",t,n)}function a(e,t,n,o){var i=r(),a=o.displayName,s=i||a,u=m[e];if(!u.hasOwnProperty(s)){u[s]=!0,t+=i?" Check the render method of "+i+".":" Check the renderComponent call using <"+a+">.";var c=null;n._owner&&n._owner!==h.current&&(c=n._owner.constructor.displayName,t+=" It was passed a child from "+c+"."),t+=" See http://fb.me/react-warning-keys for more information.",d(e,{component:s,componentOwner:c}),console.warn(t)}}function s(){var e=r()||"";v.hasOwnProperty(e)||(v[e]=!0,d("react_object_map_children"))}function u(e,t){if(Array.isArray(e))for(var n=0;n<e.length;n++){var r=e[n];l.isValidElement(r)&&o(r,t)}else if(l.isValidElement(e))e._store.validated=!0;else if(e&&"object"==typeof e){s();for(var a in e)i(a,e[a],t)}}function c(e,t,n,r){for(var o in t)if(t.hasOwnProperty(o)){var i;try{i=t[o](n,o,e,r)}catch(a){i=a}i instanceof Error&&!(i.message in g)&&(g[i.message]=!0,d("react_failed_descriptor_type_check",{message:i.message}))}}var l=e("./ReactElement"),p=e("./ReactPropTypeLocations"),h=e("./ReactCurrentOwner"),d=e("./monitorCodeUse"),f=e("./warning"),m={react_key_warning:{},react_numeric_key_warning:{}},v={},g={},y=/^\d+$/,b={createElement:function(e){"production"!==n.env.NODE_ENV?f(null!=e,"React.createElement: type should not be null or undefined. It should be a string (for DOM elements) or a ReactClass (for composite components)."):null;var t=l.createElement.apply(this,arguments);if(null==t)return t;for(var r=2;r<arguments.length;r++)u(arguments[r],e);if(e){var o=e.displayName;e.propTypes&&c(o,e.propTypes,t.props,p.prop),e.contextTypes&&c(o,e.contextTypes,t._context,p.context)}return t},createFactory:function(e){var t=b.createElement.bind(null,e);return t.type=e,t}};t.exports=b}).call(this,e("_process"))},{"./ReactCurrentOwner":105,"./ReactElement":121,"./ReactPropTypeLocations":140,"./monitorCodeUse":206,"./warning":215,_process:19}],123:[function(e,t){(function(n){"use strict";function r(){return"production"!==n.env.NODE_ENV?c(s,"Trying to return null from a render, but no null placeholder component was injected."):c(s),s()}function o(e){l[e]=!0}function i(e){delete l[e]}function a(e){return l[e]}var s,u=e("./ReactElement"),c=e("./invariant"),l={},p={injectEmptyComponent:function(e){s=u.createFactory(e)}},h={deregisterNullComponentID:i,getEmptyComponent:r,injection:p,isNullComponentID:a,registerNullComponentID:o};t.exports=h}).call(this,e("_process"))},{"./ReactElement":121,"./invariant":196,_process:19}],124:[function(e,t){"use strict";var n={guard:function(e){return e}};t.exports=n},{}],125:[function(e,t){"use strict";function n(e){r.enqueueEvents(e),r.processEventQueue()}var r=e("./EventPluginHub"),o={handleTopLevel:function(e,t,o,i){var a=r.extractEvents(e,t,o,i);n(a)}};t.exports=o},{"./EventPluginHub":86}],126:[function(e,t){"use strict";function n(e){var t=l.getID(e),n=c.getReactRootIDFromNodeID(t),r=l.findReactContainerForID(n),o=l.getFirstReactDOM(r);return o}function r(e,t){this.topLevelType=e,this.nativeEvent=t,this.ancestors=[]}function o(e){for(var t=l.getFirstReactDOM(d(e.nativeEvent))||window,r=t;r;)e.ancestors.push(r),r=n(r);for(var o=0,i=e.ancestors.length;i>o;o++){t=e.ancestors[o];var a=l.getID(t)||"";m._handleTopLevel(e.topLevelType,t,a,e.nativeEvent)}}function i(e){var t=f(window);e(t)}var a=e("./EventListener"),s=e("./ExecutionEnvironment"),u=e("./PooledClass"),c=e("./ReactInstanceHandles"),l=e("./ReactMount"),p=e("./ReactUpdates"),h=e("./Object.assign"),d=e("./getEventTarget"),f=e("./getUnboundedScrollPosition");h(r.prototype,{destructor:function(){this.topLevelType=null,this.nativeEvent=null,this.ancestors.length=0}}),u.addPoolingTo(r,u.twoArgumentPooler);var m={_enabled:!0,_handleTopLevel:null,WINDOW_HANDLE:s.canUseDOM?window:null,setHandleTopLevel:function(e){m._handleTopLevel=e},setEnabled:function(e){m._enabled=!!e},isEnabled:function(){return m._enabled},trapBubbledEvent:function(e,t,n){var r=n;if(r)return a.listen(r,t,m.dispatchEvent.bind(null,e))},trapCapturedEvent:function(e,t,n){var r=n;if(r)return a.capture(r,t,m.dispatchEvent.bind(null,e))},monitorScrollValue:function(e){var t=i.bind(null,e);a.listen(window,"scroll",t),a.listen(window,"resize",t)},dispatchEvent:function(e,t){if(m._enabled){var n=r.getPooled(e,t);try{p.batchedUpdates(o,n)}finally{r.release(n)}}}};t.exports=m},{"./EventListener":85,"./ExecutionEnvironment":90,"./Object.assign":95,"./PooledClass":96,"./ReactInstanceHandles":129,"./ReactMount":132,"./ReactUpdates":148,"./getEventTarget":187,"./getUnboundedScrollPosition":192}],127:[function(e,t){"use strict";var n=e("./DOMProperty"),r=e("./EventPluginHub"),o=e("./ReactComponent"),i=e("./ReactCompositeComponent"),a=e("./ReactEmptyComponent"),s=e("./ReactBrowserEventEmitter"),u=e("./ReactNativeComponent"),c=e("./ReactPerf"),l=e("./ReactRootIndex"),p=e("./ReactUpdates"),h={Component:o.injection,CompositeComponent:i.injection,DOMProperty:n.injection,EmptyComponent:a.injection,EventPluginHub:r.injection,EventEmitter:s.injection,NativeComponent:u.injection,Perf:c.injection,RootIndex:l.injection,Updates:p.injection};t.exports=h},{"./DOMProperty":79,"./EventPluginHub":86,"./ReactBrowserEventEmitter":99,"./ReactComponent":101,"./ReactCompositeComponent":103,"./ReactEmptyComponent":123,"./ReactNativeComponent":135,"./ReactPerf":137,"./ReactRootIndex":144,"./ReactUpdates":148}],128:[function(e,t){"use strict";function n(e){return o(document.documentElement,e)}var r=e("./ReactDOMSelection"),o=e("./containsNode"),i=e("./focusNode"),a=e("./getActiveElement"),s={hasSelectionCapabilities:function(e){return e&&("INPUT"===e.nodeName&&"text"===e.type||"TEXTAREA"===e.nodeName||"true"===e.contentEditable)},getSelectionInformation:function(){var e=a();return{focusedElem:e,selectionRange:s.hasSelectionCapabilities(e)?s.getSelection(e):null}},restoreSelection:function(e){var t=a(),r=e.focusedElem,o=e.selectionRange;t!==r&&n(r)&&(s.hasSelectionCapabilities(r)&&s.setSelection(r,o),i(r))},getSelection:function(e){var t;if("selectionStart"in e)t={start:e.selectionStart,end:e.selectionEnd};else if(document.selection&&"INPUT"===e.nodeName){var n=document.selection.createRange();n.parentElement()===e&&(t={start:-n.moveStart("character",-e.value.length),end:-n.moveEnd("character",-e.value.length)})}else t=r.getOffsets(e);return t||{start:0,end:0}},setSelection:function(e,t){var n=t.start,o=t.end;if("undefined"==typeof o&&(o=n),"selectionStart"in e)e.selectionStart=n,e.selectionEnd=Math.min(o,e.value.length);else if(document.selection&&"INPUT"===e.nodeName){var i=e.createTextRange();i.collapse(!0),i.moveStart("character",n),i.moveEnd("character",o-n),i.select()}else r.setOffsets(e,t)}};t.exports=s},{"./ReactDOMSelection":115,"./containsNode":170,"./focusNode":181,"./getActiveElement":183}],129:[function(e,t){(function(n){"use strict";function r(e){return d+e.toString(36)}function o(e,t){return e.charAt(t)===d||t===e.length}function i(e){return""===e||e.charAt(0)===d&&e.charAt(e.length-1)!==d}function a(e,t){return 0===t.indexOf(e)&&o(t,e.length)}function s(e){return e?e.substr(0,e.lastIndexOf(d)):""}function u(e,t){if("production"!==n.env.NODE_ENV?h(i(e)&&i(t),"getNextDescendantID(%s, %s): Received an invalid React DOM ID.",e,t):h(i(e)&&i(t)),"production"!==n.env.NODE_ENV?h(a(e,t),"getNextDescendantID(...): React has made an invalid assumption about the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.",e,t):h(a(e,t)),e===t)return e;for(var r=e.length+f,s=r;s<t.length&&!o(t,s);s++);return t.substr(0,s)}function c(e,t){var r=Math.min(e.length,t.length);if(0===r)return"";for(var a=0,s=0;r>=s;s++)if(o(e,s)&&o(t,s))a=s;else if(e.charAt(s)!==t.charAt(s))break;var u=e.substr(0,a);return"production"!==n.env.NODE_ENV?h(i(u),"getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s",e,t,u):h(i(u)),u}function l(e,t,r,o,i,c){e=e||"",t=t||"","production"!==n.env.NODE_ENV?h(e!==t,"traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.",e):h(e!==t);var l=a(t,e);"production"!==n.env.NODE_ENV?h(l||a(e,t),"traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do not have a parent path.",e,t):h(l||a(e,t));for(var p=0,d=l?s:u,f=e;;f=d(f,t)){var v;if(i&&f===e||c&&f===t||(v=r(f,l,o)),v===!1||f===t)break;"production"!==n.env.NODE_ENV?h(p++<m,"traverseParentPath(%s, %s, ...): Detected an infinite loop while traversing the React DOM ID tree. This may be due to malformed IDs: %s",e,t):h(p++<m)}}var p=e("./ReactRootIndex"),h=e("./invariant"),d=".",f=d.length,m=100,v={createReactRootID:function(){return r(p.createReactRootIndex())},createReactID:function(e,t){return e+t},getReactRootIDFromNodeID:function(e){if(e&&e.charAt(0)===d&&e.length>1){var t=e.indexOf(d,1);return t>-1?e.substr(0,t):e}return null},traverseEnterLeave:function(e,t,n,r,o){var i=c(e,t);i!==e&&l(e,i,n,r,!1,!0),i!==t&&l(i,t,n,o,!0,!1)},traverseTwoPhase:function(e,t,n){e&&(l("",e,t,n,!0,!1),l(e,"",t,n,!1,!0))},traverseAncestors:function(e,t,n){l("",e,t,n,!0,!1)},_getFirstCommonAncestorID:c,_getNextDescendantID:u,isAncestorIDOf:a,SEPARATOR:d};t.exports=v}).call(this,e("_process"))},{"./ReactRootIndex":144,"./invariant":196,_process:19}],130:[function(e,t){(function(n){"use strict";function r(){if(f._isLegacyCallWarningEnabled){var e=s.current,t=e&&e.constructor?e.constructor.displayName:"";t||(t="Something"),p.hasOwnProperty(t)||(p[t]=!0,"production"!==n.env.NODE_ENV?l(!1,t+" is calling a React component directly. Use a factory or JSX instead. See: http://fb.me/react-legacyfactory"):null,c("react_legacy_factory_call",{version:3,name:t}))}}function o(e){var t=e.prototype&&"function"==typeof e.prototype.mountComponent&&"function"==typeof e.prototype.receiveComponent;if(t)"production"!==n.env.NODE_ENV?l(!1,"Did not expect to get a React class here. Use `Component` instead of `Component.type` or `this.constructor`."):null;else{if(!e._reactWarnedForThisType){try{e._reactWarnedForThisType=!0}catch(r){}c("react_non_component_in_jsx",{version:3,name:e.name})}"production"!==n.env.NODE_ENV?l(!1,"This JSX uses a plain function. Only React components are valid in React's JSX transform."):null}}function i(e){"production"!==n.env.NODE_ENV?l(!1,"Do not pass React.DOM."+e.type+' to JSX or createFactory. Use the string "'+e.type+'" instead.'):null}function a(e,t){if("function"==typeof t)for(var n in t)if(t.hasOwnProperty(n)){var r=t[n];if("function"==typeof r){var o=r.bind(t);for(var i in r)r.hasOwnProperty(i)&&(o[i]=r[i]);e[n]=o}else e[n]=r}}var s=e("./ReactCurrentOwner"),u=e("./invariant"),c=e("./monitorCodeUse"),l=e("./warning"),p={},h={},d={},f={};f.wrapCreateFactory=function(e){var t=function(t){return"function"!=typeof t?e(t):t.isReactNonLegacyFactory?("production"!==n.env.NODE_ENV&&i(t),e(t.type)):t.isReactLegacyFactory?e(t.type):("production"!==n.env.NODE_ENV&&o(t),t)};return t},f.wrapCreateElement=function(e){var t=function(t){if("function"!=typeof t)return e.apply(this,arguments);var r;return t.isReactNonLegacyFactory?("production"!==n.env.NODE_ENV&&i(t),r=Array.prototype.slice.call(arguments,0),r[0]=t.type,e.apply(this,r)):t.isReactLegacyFactory?(t._isMockFunction&&(t.type._mockedReactClassConstructor=t),r=Array.prototype.slice.call(arguments,0),r[0]=t.type,e.apply(this,r)):("production"!==n.env.NODE_ENV&&o(t),t.apply(null,Array.prototype.slice.call(arguments,1)))};return t},f.wrapFactory=function(e){"production"!==n.env.NODE_ENV?u("function"==typeof e,"This is suppose to accept a element factory"):u("function"==typeof e);var t=function(){return"production"!==n.env.NODE_ENV&&r(),e.apply(this,arguments)};return a(t,e.type),t.isReactLegacyFactory=h,t.type=e.type,t},f.markNonLegacyFactory=function(e){return e.isReactNonLegacyFactory=d,e},f.isValidFactory=function(e){return"function"==typeof e&&e.isReactLegacyFactory===h},f.isValidClass=function(e){return"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?l(!1,"isValidClass is deprecated and will be removed in a future release. Use a more specific validator instead."):null),f.isValidFactory(e)},f._isLegacyCallWarningEnabled=!0,t.exports=f}).call(this,e("_process"))},{"./ReactCurrentOwner":105,"./invariant":196,"./monitorCodeUse":206,"./warning":215,_process:19}],131:[function(e,t){"use strict";var n=e("./adler32"),r={CHECKSUM_ATTR_NAME:"data-react-checksum",addChecksumToMarkup:function(e){var t=n(e);return e.replace(">"," "+r.CHECKSUM_ATTR_NAME+'="'+t+'">')},canReuseMarkup:function(e,t){var o=t.getAttribute(r.CHECKSUM_ATTR_NAME);o=o&&parseInt(o,10);var i=n(e);return i===o}};t.exports=r},{"./adler32":167}],132:[function(e,t){(function(n){"use strict";function r(e){var t=w(e);return t&&U.getID(t)}function o(e){var t=i(e);if(t)if(M.hasOwnProperty(t)){var r=M[t];r!==e&&("production"!==n.env.NODE_ENV?N(!u(r,t),"ReactMount: Two valid but unequal nodes with the same `%s`: %s",D,t):N(!u(r,t)),M[t]=e)}else M[t]=e;return t}function i(e){return e&&e.getAttribute&&e.getAttribute(D)||""}function a(e,t){var n=i(e);n!==t&&delete M[n],e.setAttribute(D,t),M[t]=e}function s(e){return M.hasOwnProperty(e)&&u(M[e],e)||(M[e]=U.findReactNodeByID(e)),M[e]}function u(e,t){if(e){"production"!==n.env.NODE_ENV?N(i(e)===t,"ReactMount: Unexpected modification of `%s`",D):N(i(e)===t);var r=U.findReactContainerForID(t);if(r&&b(r,e))return!0}return!1}function c(e){delete M[e]}function l(e){var t=M[e];return t&&u(t,e)?void(L=t):!1}function p(e){L=null,g.traverseAncestors(e,l);var t=L;return L=null,t}var h=e("./DOMProperty"),d=e("./ReactBrowserEventEmitter"),f=e("./ReactCurrentOwner"),m=e("./ReactElement"),v=e("./ReactLegacyElement"),g=e("./ReactInstanceHandles"),y=e("./ReactPerf"),b=e("./containsNode"),E=e("./deprecated"),w=e("./getReactRootElementInContainer"),C=e("./instantiateReactComponent"),N=e("./invariant"),R=e("./shouldUpdateReactComponent"),_=e("./warning"),O=v.wrapCreateElement(m.createElement),x=g.SEPARATOR,D=h.ID_ATTRIBUTE_NAME,M={},P=1,T=9,S={},k={};if("production"!==n.env.NODE_ENV)var I={};var A=[],L=null,U={_instancesByReactRootID:S,scrollMonitor:function(e,t){t()},_updateRootComponent:function(e,t,o,i){var a=t.props;return U.scrollMonitor(o,function(){e.replaceProps(a,i)}),"production"!==n.env.NODE_ENV&&(I[r(o)]=w(o)),e},_registerComponent:function(e,t){"production"!==n.env.NODE_ENV?N(t&&(t.nodeType===P||t.nodeType===T),"_registerComponent(...): Target container is not a DOM element."):N(t&&(t.nodeType===P||t.nodeType===T)),d.ensureScrollValueMonitoring();var r=U.registerContainer(t);return S[r]=e,r},_renderNewRootComponent:y.measure("ReactMount","_renderNewRootComponent",function(e,t,r){"production"!==n.env.NODE_ENV?_(null==f.current,"_renderNewRootComponent(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate."):null;var o=C(e,null),i=U._registerComponent(o,t);return o.mountComponentIntoNode(i,t,r),"production"!==n.env.NODE_ENV&&(I[i]=w(t)),o}),render:function(e,t,o){"production"!==n.env.NODE_ENV?N(m.isValidElement(e),"renderComponent(): Invalid component element.%s","string"==typeof e?" Instead of passing an element string, make sure to instantiate it by passing it to React.createElement.":v.isValidFactory(e)?" Instead of passing a component class, make sure to instantiate it by passing it to React.createElement.":"undefined"!=typeof e.props?" This may be caused by unintentionally loading two independent copies of React.":""):N(m.isValidElement(e));var i=S[r(t)];if(i){var a=i._currentElement;if(R(a,e))return U._updateRootComponent(i,e,t,o);U.unmountComponentAtNode(t)}var s=w(t),u=s&&U.isRenderedByReact(s),c=u&&!i,l=U._renderNewRootComponent(e,t,c);return o&&o.call(l),l},constructAndRenderComponent:function(e,t,n){var r=O(e,t);return U.render(r,n)},constructAndRenderComponentByID:function(e,t,r){var o=document.getElementById(r);return"production"!==n.env.NODE_ENV?N(o,'Tried to get element with id of "%s" but it is not present on the page.',r):N(o),U.constructAndRenderComponent(e,t,o)},registerContainer:function(e){var t=r(e);return t&&(t=g.getReactRootIDFromNodeID(t)),t||(t=g.createReactRootID()),k[t]=e,t},unmountComponentAtNode:function(e){"production"!==n.env.NODE_ENV?_(null==f.current,"unmountComponentAtNode(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate."):null;var t=r(e),o=S[t];return o?(U.unmountComponentFromNode(o,e),delete S[t],delete k[t],"production"!==n.env.NODE_ENV&&delete I[t],!0):!1},unmountComponentFromNode:function(e,t){for(e.unmountComponent(),t.nodeType===T&&(t=t.documentElement);t.lastChild;)t.removeChild(t.lastChild)},findReactContainerForID:function(e){var t=g.getReactRootIDFromNodeID(e),r=k[t];if("production"!==n.env.NODE_ENV){var o=I[t];if(o&&o.parentNode!==r){"production"!==n.env.NODE_ENV?N(i(o)===t,"ReactMount: Root element ID differed from reactRootID."):N(i(o)===t);var a=r.firstChild;a&&t===i(a)?I[t]=a:console.warn("ReactMount: Root element has been removed from its original container. New container:",o.parentNode)}}return r},findReactNodeByID:function(e){var t=U.findReactContainerForID(e);return U.findComponentRoot(t,e)},isRenderedByReact:function(e){if(1!==e.nodeType)return!1;var t=U.getID(e);return t?t.charAt(0)===x:!1},getFirstReactDOM:function(e){for(var t=e;t&&t.parentNode!==t;){if(U.isRenderedByReact(t))return t;t=t.parentNode}return null},findComponentRoot:function(e,t){var r=A,o=0,i=p(t)||e;for(r[0]=i.firstChild,r.length=1;o<r.length;){for(var a,s=r[o++];s;){var u=U.getID(s);u?t===u?a=s:g.isAncestorIDOf(u,t)&&(r.length=o=0,r.push(s.firstChild)):r.push(s.firstChild),s=s.nextSibling}if(a)return r.length=0,a}r.length=0,"production"!==n.env.NODE_ENV?N(!1,"findComponentRoot(..., %s): Unable to find element. This probably means the DOM was unexpectedly mutated (e.g., by the browser), usually due to forgetting a <tbody> when using tables, nesting tags like <form>, <p>, or <a>, or using non-SVG elements in an <svg> parent. Try inspecting the child nodes of the element with React ID `%s`.",t,U.getID(e)):N(!1)},getReactRootID:r,getID:o,setID:a,getNode:s,purgeID:c};U.renderComponent=E("ReactMount","renderComponent","render",this,U.render),t.exports=U}).call(this,e("_process"))},{"./DOMProperty":79,"./ReactBrowserEventEmitter":99,"./ReactCurrentOwner":105,"./ReactElement":121,"./ReactInstanceHandles":129,"./ReactLegacyElement":130,"./ReactPerf":137,"./containsNode":170,"./deprecated":176,"./getReactRootElementInContainer":190,"./instantiateReactComponent":195,"./invariant":196,"./shouldUpdateReactComponent":212,"./warning":215,_process:19}],133:[function(e,t){"use strict";function n(e,t,n){f.push({parentID:e,parentNode:null,type:c.INSERT_MARKUP,markupIndex:m.push(t)-1,textContent:null,fromIndex:null,toIndex:n})}function r(e,t,n){f.push({parentID:e,parentNode:null,type:c.MOVE_EXISTING,markupIndex:null,textContent:null,fromIndex:t,toIndex:n})}function o(e,t){f.push({parentID:e,parentNode:null,type:c.REMOVE_NODE,markupIndex:null,textContent:null,fromIndex:t,toIndex:null})}function i(e,t){f.push({parentID:e,parentNode:null,type:c.TEXT_CONTENT,markupIndex:null,textContent:t,fromIndex:null,toIndex:null})}function a(){f.length&&(u.BackendIDOperations.dangerouslyProcessChildrenUpdates(f,m),s())
}function s(){f.length=0,m.length=0}var u=e("./ReactComponent"),c=e("./ReactMultiChildUpdateTypes"),l=e("./flattenChildren"),p=e("./instantiateReactComponent"),h=e("./shouldUpdateReactComponent"),d=0,f=[],m=[],v={Mixin:{mountChildren:function(e,t){var n=l(e),r=[],o=0;this._renderedChildren=n;for(var i in n){var a=n[i];if(n.hasOwnProperty(i)){var s=p(a,null);n[i]=s;var u=this._rootNodeID+i,c=s.mountComponent(u,t,this._mountDepth+1);s._mountIndex=o,r.push(c),o++}}return r},updateTextContent:function(e){d++;var t=!0;try{var n=this._renderedChildren;for(var r in n)n.hasOwnProperty(r)&&this._unmountChildByName(n[r],r);this.setTextContent(e),t=!1}finally{d--,d||(t?s():a())}},updateChildren:function(e,t){d++;var n=!0;try{this._updateChildren(e,t),n=!1}finally{d--,d||(n?s():a())}},_updateChildren:function(e,t){var n=l(e),r=this._renderedChildren;if(n||r){var o,i=0,a=0;for(o in n)if(n.hasOwnProperty(o)){var s=r&&r[o],u=s&&s._currentElement,c=n[o];if(h(u,c))this.moveChild(s,a,i),i=Math.max(s._mountIndex,i),s.receiveComponent(c,t),s._mountIndex=a;else{s&&(i=Math.max(s._mountIndex,i),this._unmountChildByName(s,o));var d=p(c,null);this._mountChildByNameAtIndex(d,o,a,t)}a++}for(o in r)!r.hasOwnProperty(o)||n&&n[o]||this._unmountChildByName(r[o],o)}},unmountChildren:function(){var e=this._renderedChildren;for(var t in e){var n=e[t];n.unmountComponent&&n.unmountComponent()}this._renderedChildren=null},moveChild:function(e,t,n){e._mountIndex<n&&r(this._rootNodeID,e._mountIndex,t)},createChild:function(e,t){n(this._rootNodeID,t,e._mountIndex)},removeChild:function(e){o(this._rootNodeID,e._mountIndex)},setTextContent:function(e){i(this._rootNodeID,e)},_mountChildByNameAtIndex:function(e,t,n,r){var o=this._rootNodeID+t,i=e.mountComponent(o,r,this._mountDepth+1);e._mountIndex=n,this.createChild(e,i),this._renderedChildren=this._renderedChildren||{},this._renderedChildren[t]=e},_unmountChildByName:function(e,t){this.removeChild(e),e._mountIndex=null,e.unmountComponent(),delete this._renderedChildren[t]}}};t.exports=v},{"./ReactComponent":101,"./ReactMultiChildUpdateTypes":134,"./flattenChildren":180,"./instantiateReactComponent":195,"./shouldUpdateReactComponent":212}],134:[function(e,t){"use strict";var n=e("./keyMirror"),r=n({INSERT_MARKUP:null,MOVE_EXISTING:null,REMOVE_NODE:null,TEXT_CONTENT:null});t.exports=r},{"./keyMirror":202}],135:[function(e,t){(function(n){"use strict";function r(e,t,r){var o=s[e];return null==o?("production"!==n.env.NODE_ENV?i(a,"There is no registered component for the tag %s",e):i(a),new a(e,t)):r===e?("production"!==n.env.NODE_ENV?i(a,"There is no registered component for the tag %s",e):i(a),new a(e,t)):new o.type(t)}var o=e("./Object.assign"),i=e("./invariant"),a=null,s={},u={injectGenericComponentClass:function(e){a=e},injectComponentClasses:function(e){o(s,e)}},c={createInstanceForTag:r,injection:u};t.exports=c}).call(this,e("_process"))},{"./Object.assign":95,"./invariant":196,_process:19}],136:[function(e,t){(function(n){"use strict";var r=e("./emptyObject"),o=e("./invariant"),i={isValidOwner:function(e){return!(!e||"function"!=typeof e.attachRef||"function"!=typeof e.detachRef)},addComponentAsRefTo:function(e,t,r){"production"!==n.env.NODE_ENV?o(i.isValidOwner(r),"addComponentAsRefTo(...): Only a ReactOwner can have refs. This usually means that you're trying to add a ref to a component that doesn't have an owner (that is, was not created inside of another component's `render` method). Try rendering this component inside of a new top-level component which will hold the ref."):o(i.isValidOwner(r)),r.attachRef(t,e)},removeComponentAsRefFrom:function(e,t,r){"production"!==n.env.NODE_ENV?o(i.isValidOwner(r),"removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This usually means that you're trying to remove a ref to a component that doesn't have an owner (that is, was not created inside of another component's `render` method). Try rendering this component inside of a new top-level component which will hold the ref."):o(i.isValidOwner(r)),r.refs[t]===e&&r.detachRef(t)},Mixin:{construct:function(){this.refs=r},attachRef:function(e,t){"production"!==n.env.NODE_ENV?o(t.isOwnedBy(this),"attachRef(%s, ...): Only a component's owner can store a ref to it.",e):o(t.isOwnedBy(this));var i=this.refs===r?this.refs={}:this.refs;i[e]=t},detachRef:function(e){delete this.refs[e]}}};t.exports=i}).call(this,e("_process"))},{"./emptyObject":178,"./invariant":196,_process:19}],137:[function(e,t){(function(e){"use strict";function n(e,t,n){return n}var r={enableMeasure:!1,storedMeasure:n,measure:function(t,n,o){if("production"!==e.env.NODE_ENV){var i=null,a=function(){return r.enableMeasure?(i||(i=r.storedMeasure(t,n,o)),i.apply(this,arguments)):o.apply(this,arguments)};return a.displayName=t+"_"+n,a}return o},injection:{injectMeasure:function(e){r.storedMeasure=e}}};t.exports=r}).call(this,e("_process"))},{_process:19}],138:[function(e,t){(function(n){"use strict";function r(e){return function(t,n,r){t[n]=t.hasOwnProperty(n)?e(t[n],r):r}}function o(e,t){for(var n in t)if(t.hasOwnProperty(n)){var r=h[n];r&&h.hasOwnProperty(n)?r(e,n,t[n]):e.hasOwnProperty(n)||(e[n]=t[n])}return e}var i=e("./Object.assign"),a=e("./emptyFunction"),s=e("./invariant"),u=e("./joinClasses"),c=e("./warning"),l=!1,p=r(function(e,t){return i({},t,e)}),h={children:a,className:r(u),style:p},d={TransferStrategies:h,mergeProps:function(e,t){return o(i({},e),t)},Mixin:{transferPropsTo:function(e){return"production"!==n.env.NODE_ENV?s(e._owner===this,"%s: You can't call transferPropsTo() on a component that you don't own, %s. This usually means you are calling transferPropsTo() on a component passed in as props or children.",this.constructor.displayName,"string"==typeof e.type?e.type:e.type.displayName):s(e._owner===this),"production"!==n.env.NODE_ENV&&(l||(l=!0,"production"!==n.env.NODE_ENV?c(!1,"transferPropsTo is deprecated. See http://fb.me/react-transferpropsto for more information."):null)),o(e.props,this.props),e}}};t.exports=d}).call(this,e("_process"))},{"./Object.assign":95,"./emptyFunction":177,"./invariant":196,"./joinClasses":201,"./warning":215,_process:19}],139:[function(e,t){(function(e){"use strict";var n={};"production"!==e.env.NODE_ENV&&(n={prop:"prop",context:"context",childContext:"child context"}),t.exports=n}).call(this,e("_process"))},{_process:19}],140:[function(e,t){"use strict";var n=e("./keyMirror"),r=n({prop:null,context:null,childContext:null});t.exports=r},{"./keyMirror":202}],141:[function(e,t){"use strict";function n(e){function t(t,n,r,o,i){if(o=o||E,null!=n[r])return e(n,r,o,i);var a=g[i];return t?new Error("Required "+a+" `"+r+"` was not specified in "+("`"+o+"`.")):void 0}var n=t.bind(null,!1);return n.isRequired=t.bind(null,!0),n}function r(e){function t(t,n,r,o){var i=t[n],a=f(i);if(a!==e){var s=g[o],u=m(i);return new Error("Invalid "+s+" `"+n+"` of type `"+u+"` "+("supplied to `"+r+"`, expected `"+e+"`."))}}return n(t)}function o(){return n(b.thatReturns())}function i(e){function t(t,n,r,o){var i=t[n];if(!Array.isArray(i)){var a=g[o],s=f(i);return new Error("Invalid "+a+" `"+n+"` of type "+("`"+s+"` supplied to `"+r+"`, expected an array."))}for(var u=0;u<i.length;u++){var c=e(i,u,r,o);if(c instanceof Error)return c}}return n(t)}function a(){function e(e,t,n,r){if(!v.isValidElement(e[t])){var o=g[r];return new Error("Invalid "+o+" `"+t+"` supplied to "+("`"+n+"`, expected a ReactElement."))}}return n(e)}function s(e){function t(t,n,r,o){if(!(t[n]instanceof e)){var i=g[o],a=e.name||E;return new Error("Invalid "+i+" `"+n+"` supplied to "+("`"+r+"`, expected instance of `"+a+"`."))}}return n(t)}function u(e){function t(t,n,r,o){for(var i=t[n],a=0;a<e.length;a++)if(i===e[a])return;var s=g[o],u=JSON.stringify(e);return new Error("Invalid "+s+" `"+n+"` of value `"+i+"` "+("supplied to `"+r+"`, expected one of "+u+"."))}return n(t)}function c(e){function t(t,n,r,o){var i=t[n],a=f(i);if("object"!==a){var s=g[o];return new Error("Invalid "+s+" `"+n+"` of type "+("`"+a+"` supplied to `"+r+"`, expected an object."))}for(var u in i)if(i.hasOwnProperty(u)){var c=e(i,u,r,o);if(c instanceof Error)return c}}return n(t)}function l(e){function t(t,n,r,o){for(var i=0;i<e.length;i++){var a=e[i];if(null==a(t,n,r,o))return}var s=g[o];return new Error("Invalid "+s+" `"+n+"` supplied to "+("`"+r+"`."))}return n(t)}function p(){function e(e,t,n,r){if(!d(e[t])){var o=g[r];return new Error("Invalid "+o+" `"+t+"` supplied to "+("`"+n+"`, expected a ReactNode."))}}return n(e)}function h(e){function t(t,n,r,o){var i=t[n],a=f(i);if("object"!==a){var s=g[o];return new Error("Invalid "+s+" `"+n+"` of type `"+a+"` "+("supplied to `"+r+"`, expected `object`."))}for(var u in e){var c=e[u];if(c){var l=c(i,u,r,o);if(l)return l}}}return n(t,"expected `object`")}function d(e){switch(typeof e){case"number":case"string":return!0;case"boolean":return!e;case"object":if(Array.isArray(e))return e.every(d);if(v.isValidElement(e))return!0;for(var t in e)if(!d(e[t]))return!1;return!0;default:return!1}}function f(e){var t=typeof e;return Array.isArray(e)?"array":e instanceof RegExp?"object":t}function m(e){var t=f(e);if("object"===t){if(e instanceof Date)return"date";if(e instanceof RegExp)return"regexp"}return t}var v=e("./ReactElement"),g=e("./ReactPropTypeLocationNames"),y=e("./deprecated"),b=e("./emptyFunction"),E="<<anonymous>>",w=a(),C=p(),N={array:r("array"),bool:r("boolean"),func:r("function"),number:r("number"),object:r("object"),string:r("string"),any:o(),arrayOf:i,element:w,instanceOf:s,node:C,objectOf:c,oneOf:u,oneOfType:l,shape:h,component:y("React.PropTypes","component","element",this,w),renderable:y("React.PropTypes","renderable","node",this,C)};t.exports=N},{"./ReactElement":121,"./ReactPropTypeLocationNames":139,"./deprecated":176,"./emptyFunction":177}],142:[function(e,t){"use strict";function n(){this.listenersToPut=[]}var r=e("./PooledClass"),o=e("./ReactBrowserEventEmitter"),i=e("./Object.assign");i(n.prototype,{enqueuePutListener:function(e,t,n){this.listenersToPut.push({rootNodeID:e,propKey:t,propValue:n})},putListeners:function(){for(var e=0;e<this.listenersToPut.length;e++){var t=this.listenersToPut[e];o.putListener(t.rootNodeID,t.propKey,t.propValue)}},reset:function(){this.listenersToPut.length=0},destructor:function(){this.reset()}}),r.addPoolingTo(n),t.exports=n},{"./Object.assign":95,"./PooledClass":96,"./ReactBrowserEventEmitter":99}],143:[function(e,t){"use strict";function n(){this.reinitializeTransaction(),this.renderToStaticMarkup=!1,this.reactMountReady=r.getPooled(null),this.putListenerQueue=s.getPooled()}var r=e("./CallbackQueue"),o=e("./PooledClass"),i=e("./ReactBrowserEventEmitter"),a=e("./ReactInputSelection"),s=e("./ReactPutListenerQueue"),u=e("./Transaction"),c=e("./Object.assign"),l={initialize:a.getSelectionInformation,close:a.restoreSelection},p={initialize:function(){var e=i.isEnabled();return i.setEnabled(!1),e},close:function(e){i.setEnabled(e)}},h={initialize:function(){this.reactMountReady.reset()},close:function(){this.reactMountReady.notifyAll()}},d={initialize:function(){this.putListenerQueue.reset()},close:function(){this.putListenerQueue.putListeners()}},f=[d,l,p,h],m={getTransactionWrappers:function(){return f},getReactMountReady:function(){return this.reactMountReady},getPutListenerQueue:function(){return this.putListenerQueue},destructor:function(){r.release(this.reactMountReady),this.reactMountReady=null,s.release(this.putListenerQueue),this.putListenerQueue=null}};c(n.prototype,u.Mixin,m),o.addPoolingTo(n),t.exports=n},{"./CallbackQueue":74,"./Object.assign":95,"./PooledClass":96,"./ReactBrowserEventEmitter":99,"./ReactInputSelection":128,"./ReactPutListenerQueue":142,"./Transaction":164}],144:[function(e,t){"use strict";var n={injectCreateReactRootIndex:function(e){r.createReactRootIndex=e}},r={createReactRootIndex:null,injection:n};t.exports=r},{}],145:[function(e,t){(function(n){"use strict";function r(e){"production"!==n.env.NODE_ENV?l(i.isValidElement(e),"renderToString(): You must pass a valid ReactElement."):l(i.isValidElement(e));var t;try{var r=a.createReactRootID();return t=u.getPooled(!1),t.perform(function(){var n=c(e,null),o=n.mountComponent(r,t,0);return s.addChecksumToMarkup(o)},null)}finally{u.release(t)}}function o(e){"production"!==n.env.NODE_ENV?l(i.isValidElement(e),"renderToStaticMarkup(): You must pass a valid ReactElement."):l(i.isValidElement(e));var t;try{var r=a.createReactRootID();return t=u.getPooled(!0),t.perform(function(){var n=c(e,null);return n.mountComponent(r,t,0)},null)}finally{u.release(t)}}var i=e("./ReactElement"),a=e("./ReactInstanceHandles"),s=e("./ReactMarkupChecksum"),u=e("./ReactServerRenderingTransaction"),c=e("./instantiateReactComponent"),l=e("./invariant");t.exports={renderToString:r,renderToStaticMarkup:o}}).call(this,e("_process"))},{"./ReactElement":121,"./ReactInstanceHandles":129,"./ReactMarkupChecksum":131,"./ReactServerRenderingTransaction":146,"./instantiateReactComponent":195,"./invariant":196,_process:19}],146:[function(e,t){"use strict";function n(e){this.reinitializeTransaction(),this.renderToStaticMarkup=e,this.reactMountReady=o.getPooled(null),this.putListenerQueue=i.getPooled()}var r=e("./PooledClass"),o=e("./CallbackQueue"),i=e("./ReactPutListenerQueue"),a=e("./Transaction"),s=e("./Object.assign"),u=e("./emptyFunction"),c={initialize:function(){this.reactMountReady.reset()},close:u},l={initialize:function(){this.putListenerQueue.reset()},close:u},p=[l,c],h={getTransactionWrappers:function(){return p},getReactMountReady:function(){return this.reactMountReady},getPutListenerQueue:function(){return this.putListenerQueue},destructor:function(){o.release(this.reactMountReady),this.reactMountReady=null,i.release(this.putListenerQueue),this.putListenerQueue=null}};s(n.prototype,a.Mixin,h),r.addPoolingTo(n),t.exports=n},{"./CallbackQueue":74,"./Object.assign":95,"./PooledClass":96,"./ReactPutListenerQueue":142,"./Transaction":164,"./emptyFunction":177}],147:[function(e,t){"use strict";var n=e("./DOMPropertyOperations"),r=e("./ReactComponent"),o=e("./ReactElement"),i=e("./Object.assign"),a=e("./escapeTextForBrowser"),s=function(){};i(s.prototype,r.Mixin,{mountComponent:function(e,t,o){r.Mixin.mountComponent.call(this,e,t,o);var i=a(this.props);return t.renderToStaticMarkup?i:"<span "+n.createMarkupForID(e)+">"+i+"</span>"},receiveComponent:function(e){var t=e.props;t!==this.props&&(this.props=t,r.BackendIDOperations.updateTextContentByID(this._rootNodeID,t))}});var u=function(e){return new o(s,null,null,null,null,e)};u.type=s,t.exports=u},{"./DOMPropertyOperations":80,"./Object.assign":95,"./ReactComponent":101,"./ReactElement":121,"./escapeTextForBrowser":179}],148:[function(e,t){(function(n){"use strict";function r(){"production"!==n.env.NODE_ENV?v(x.ReactReconcileTransaction&&w,"ReactUpdates: must inject a reconcile transaction class and batching strategy"):v(x.ReactReconcileTransaction&&w)}function o(){this.reinitializeTransaction(),this.dirtyComponentsLength=null,this.callbackQueue=l.getPooled(),this.reconcileTransaction=x.ReactReconcileTransaction.getPooled()}function i(e,t,n){r(),w.batchedUpdates(e,t,n)}function a(e,t){return e._mountDepth-t._mountDepth}function s(e){var t=e.dirtyComponentsLength;"production"!==n.env.NODE_ENV?v(t===y.length,"Expected flush transaction's stored dirty-components length (%s) to match dirty-components array length (%s).",t,y.length):v(t===y.length),y.sort(a);for(var r=0;t>r;r++){var o=y[r];if(o.isMounted()){var i=o._pendingCallbacks;if(o._pendingCallbacks=null,o.performUpdateIfNecessary(e.reconcileTransaction),i)for(var s=0;s<i.length;s++)e.callbackQueue.enqueue(i[s],o)}}}function u(e,t){return"production"!==n.env.NODE_ENV?v(!t||"function"==typeof t,"enqueueUpdate(...): You called `setProps`, `replaceProps`, `setState`, `replaceState`, or `forceUpdate` with a callback that isn't callable."):v(!t||"function"==typeof t),r(),"production"!==n.env.NODE_ENV?g(null==h.current,"enqueueUpdate(): Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate."):null,w.isBatchingUpdates?(y.push(e),void(t&&(e._pendingCallbacks?e._pendingCallbacks.push(t):e._pendingCallbacks=[t]))):void w.batchedUpdates(u,e,t)}function c(e,t){"production"!==n.env.NODE_ENV?v(w.isBatchingUpdates,"ReactUpdates.asap: Can't enqueue an asap callback in a context whereupdates are not being batched."):v(w.isBatchingUpdates),b.enqueue(e,t),E=!0}var l=e("./CallbackQueue"),p=e("./PooledClass"),h=e("./ReactCurrentOwner"),d=e("./ReactPerf"),f=e("./Transaction"),m=e("./Object.assign"),v=e("./invariant"),g=e("./warning"),y=[],b=l.getPooled(),E=!1,w=null,C={initialize:function(){this.dirtyComponentsLength=y.length},close:function(){this.dirtyComponentsLength!==y.length?(y.splice(0,this.dirtyComponentsLength),_()):y.length=0}},N={initialize:function(){this.callbackQueue.reset()},close:function(){this.callbackQueue.notifyAll()}},R=[C,N];m(o.prototype,f.Mixin,{getTransactionWrappers:function(){return R},destructor:function(){this.dirtyComponentsLength=null,l.release(this.callbackQueue),this.callbackQueue=null,x.ReactReconcileTransaction.release(this.reconcileTransaction),this.reconcileTransaction=null},perform:function(e,t,n){return f.Mixin.perform.call(this,this.reconcileTransaction.perform,this.reconcileTransaction,e,t,n)}}),p.addPoolingTo(o);var _=d.measure("ReactUpdates","flushBatchedUpdates",function(){for(;y.length||E;){if(y.length){var e=o.getPooled();e.perform(s,null,e),o.release(e)}if(E){E=!1;var t=b;b=l.getPooled(),t.notifyAll(),l.release(t)}}}),O={injectReconcileTransaction:function(e){"production"!==n.env.NODE_ENV?v(e,"ReactUpdates: must provide a reconcile transaction class"):v(e),x.ReactReconcileTransaction=e},injectBatchingStrategy:function(e){"production"!==n.env.NODE_ENV?v(e,"ReactUpdates: must provide a batching strategy"):v(e),"production"!==n.env.NODE_ENV?v("function"==typeof e.batchedUpdates,"ReactUpdates: must provide a batchedUpdates() function"):v("function"==typeof e.batchedUpdates),"production"!==n.env.NODE_ENV?v("boolean"==typeof e.isBatchingUpdates,"ReactUpdates: must provide an isBatchingUpdates boolean attribute"):v("boolean"==typeof e.isBatchingUpdates),w=e}},x={ReactReconcileTransaction:null,batchedUpdates:i,enqueueUpdate:u,flushBatchedUpdates:_,injection:O,asap:c};t.exports=x}).call(this,e("_process"))},{"./CallbackQueue":74,"./Object.assign":95,"./PooledClass":96,"./ReactCurrentOwner":105,"./ReactPerf":137,"./Transaction":164,"./invariant":196,"./warning":215,_process:19}],149:[function(e,t){"use strict";var n=e("./DOMProperty"),r=n.injection.MUST_USE_ATTRIBUTE,o={Properties:{cx:r,cy:r,d:r,dx:r,dy:r,fill:r,fillOpacity:r,fontFamily:r,fontSize:r,fx:r,fy:r,gradientTransform:r,gradientUnits:r,markerEnd:r,markerMid:r,markerStart:r,offset:r,opacity:r,patternContentUnits:r,patternUnits:r,points:r,preserveAspectRatio:r,r:r,rx:r,ry:r,spreadMethod:r,stopColor:r,stopOpacity:r,stroke:r,strokeDasharray:r,strokeLinecap:r,strokeOpacity:r,strokeWidth:r,textAnchor:r,transform:r,version:r,viewBox:r,x1:r,x2:r,x:r,y1:r,y2:r,y:r},DOMAttributeNames:{fillOpacity:"fill-opacity",fontFamily:"font-family",fontSize:"font-size",gradientTransform:"gradientTransform",gradientUnits:"gradientUnits",markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",patternContentUnits:"patternContentUnits",patternUnits:"patternUnits",preserveAspectRatio:"preserveAspectRatio",spreadMethod:"spreadMethod",stopColor:"stop-color",stopOpacity:"stop-opacity",strokeDasharray:"stroke-dasharray",strokeLinecap:"stroke-linecap",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",textAnchor:"text-anchor",viewBox:"viewBox"}};t.exports=o},{"./DOMProperty":79}],150:[function(e,t){"use strict";function n(e){if("selectionStart"in e&&a.hasSelectionCapabilities(e))return{start:e.selectionStart,end:e.selectionEnd};if(window.getSelection){var t=window.getSelection();return{anchorNode:t.anchorNode,anchorOffset:t.anchorOffset,focusNode:t.focusNode,focusOffset:t.focusOffset}}if(document.selection){var n=document.selection.createRange();return{parentElement:n.parentElement(),text:n.text,top:n.boundingTop,left:n.boundingLeft}}}function r(e){if(!g&&null!=f&&f==u()){var t=n(f);if(!v||!p(v,t)){v=t;var r=s.getPooled(d.select,m,e);return r.type="select",r.target=f,i.accumulateTwoPhaseDispatches(r),r}}}var o=e("./EventConstants"),i=e("./EventPropagators"),a=e("./ReactInputSelection"),s=e("./SyntheticEvent"),u=e("./getActiveElement"),c=e("./isTextInputElement"),l=e("./keyOf"),p=e("./shallowEqual"),h=o.topLevelTypes,d={select:{phasedRegistrationNames:{bubbled:l({onSelect:null}),captured:l({onSelectCapture:null})},dependencies:[h.topBlur,h.topContextMenu,h.topFocus,h.topKeyDown,h.topMouseDown,h.topMouseUp,h.topSelectionChange]}},f=null,m=null,v=null,g=!1,y={eventTypes:d,extractEvents:function(e,t,n,o){switch(e){case h.topFocus:(c(t)||"true"===t.contentEditable)&&(f=t,m=n,v=null);break;case h.topBlur:f=null,m=null,v=null;break;case h.topMouseDown:g=!0;break;case h.topContextMenu:case h.topMouseUp:return g=!1,r(o);case h.topSelectionChange:case h.topKeyDown:case h.topKeyUp:return r(o)}}};t.exports=y},{"./EventConstants":84,"./EventPropagators":89,"./ReactInputSelection":128,"./SyntheticEvent":156,"./getActiveElement":183,"./isTextInputElement":199,"./keyOf":203,"./shallowEqual":211}],151:[function(e,t){"use strict";var n=Math.pow(2,53),r={createReactRootIndex:function(){return Math.ceil(Math.random()*n)}};t.exports=r},{}],152:[function(e,t){(function(n){"use strict";var r=e("./EventConstants"),o=e("./EventPluginUtils"),i=e("./EventPropagators"),a=e("./SyntheticClipboardEvent"),s=e("./SyntheticEvent"),u=e("./SyntheticFocusEvent"),c=e("./SyntheticKeyboardEvent"),l=e("./SyntheticMouseEvent"),p=e("./SyntheticDragEvent"),h=e("./SyntheticTouchEvent"),d=e("./SyntheticUIEvent"),f=e("./SyntheticWheelEvent"),m=e("./getEventCharCode"),v=e("./invariant"),g=e("./keyOf"),y=e("./warning"),b=r.topLevelTypes,E={blur:{phasedRegistrationNames:{bubbled:g({onBlur:!0}),captured:g({onBlurCapture:!0})}},click:{phasedRegistrationNames:{bubbled:g({onClick:!0}),captured:g({onClickCapture:!0})}},contextMenu:{phasedRegistrationNames:{bubbled:g({onContextMenu:!0}),captured:g({onContextMenuCapture:!0})}},copy:{phasedRegistrationNames:{bubbled:g({onCopy:!0}),captured:g({onCopyCapture:!0})}},cut:{phasedRegistrationNames:{bubbled:g({onCut:!0}),captured:g({onCutCapture:!0})}},doubleClick:{phasedRegistrationNames:{bubbled:g({onDoubleClick:!0}),captured:g({onDoubleClickCapture:!0})}},drag:{phasedRegistrationNames:{bubbled:g({onDrag:!0}),captured:g({onDragCapture:!0})}},dragEnd:{phasedRegistrationNames:{bubbled:g({onDragEnd:!0}),captured:g({onDragEndCapture:!0})}},dragEnter:{phasedRegistrationNames:{bubbled:g({onDragEnter:!0}),captured:g({onDragEnterCapture:!0})}},dragExit:{phasedRegistrationNames:{bubbled:g({onDragExit:!0}),captured:g({onDragExitCapture:!0})}},dragLeave:{phasedRegistrationNames:{bubbled:g({onDragLeave:!0}),captured:g({onDragLeaveCapture:!0})}},dragOver:{phasedRegistrationNames:{bubbled:g({onDragOver:!0}),captured:g({onDragOverCapture:!0})}},dragStart:{phasedRegistrationNames:{bubbled:g({onDragStart:!0}),captured:g({onDragStartCapture:!0})}},drop:{phasedRegistrationNames:{bubbled:g({onDrop:!0}),captured:g({onDropCapture:!0})}},focus:{phasedRegistrationNames:{bubbled:g({onFocus:!0}),captured:g({onFocusCapture:!0})}},input:{phasedRegistrationNames:{bubbled:g({onInput:!0}),captured:g({onInputCapture:!0})}},keyDown:{phasedRegistrationNames:{bubbled:g({onKeyDown:!0}),captured:g({onKeyDownCapture:!0})}},keyPress:{phasedRegistrationNames:{bubbled:g({onKeyPress:!0}),captured:g({onKeyPressCapture:!0})}},keyUp:{phasedRegistrationNames:{bubbled:g({onKeyUp:!0}),captured:g({onKeyUpCapture:!0})}},load:{phasedRegistrationNames:{bubbled:g({onLoad:!0}),captured:g({onLoadCapture:!0})}},error:{phasedRegistrationNames:{bubbled:g({onError:!0}),captured:g({onErrorCapture:!0})}},mouseDown:{phasedRegistrationNames:{bubbled:g({onMouseDown:!0}),captured:g({onMouseDownCapture:!0})}},mouseMove:{phasedRegistrationNames:{bubbled:g({onMouseMove:!0}),captured:g({onMouseMoveCapture:!0})}},mouseOut:{phasedRegistrationNames:{bubbled:g({onMouseOut:!0}),captured:g({onMouseOutCapture:!0})}},mouseOver:{phasedRegistrationNames:{bubbled:g({onMouseOver:!0}),captured:g({onMouseOverCapture:!0})}},mouseUp:{phasedRegistrationNames:{bubbled:g({onMouseUp:!0}),captured:g({onMouseUpCapture:!0})}},paste:{phasedRegistrationNames:{bubbled:g({onPaste:!0}),captured:g({onPasteCapture:!0})}},reset:{phasedRegistrationNames:{bubbled:g({onReset:!0}),captured:g({onResetCapture:!0})}},scroll:{phasedRegistrationNames:{bubbled:g({onScroll:!0}),captured:g({onScrollCapture:!0})}},submit:{phasedRegistrationNames:{bubbled:g({onSubmit:!0}),captured:g({onSubmitCapture:!0})}},touchCancel:{phasedRegistrationNames:{bubbled:g({onTouchCancel:!0}),captured:g({onTouchCancelCapture:!0})}},touchEnd:{phasedRegistrationNames:{bubbled:g({onTouchEnd:!0}),captured:g({onTouchEndCapture:!0})}},touchMove:{phasedRegistrationNames:{bubbled:g({onTouchMove:!0}),captured:g({onTouchMoveCapture:!0})}},touchStart:{phasedRegistrationNames:{bubbled:g({onTouchStart:!0}),captured:g({onTouchStartCapture:!0})}},wheel:{phasedRegistrationNames:{bubbled:g({onWheel:!0}),captured:g({onWheelCapture:!0})}}},w={topBlur:E.blur,topClick:E.click,topContextMenu:E.contextMenu,topCopy:E.copy,topCut:E.cut,topDoubleClick:E.doubleClick,topDrag:E.drag,topDragEnd:E.dragEnd,topDragEnter:E.dragEnter,topDragExit:E.dragExit,topDragLeave:E.dragLeave,topDragOver:E.dragOver,topDragStart:E.dragStart,topDrop:E.drop,topError:E.error,topFocus:E.focus,topInput:E.input,topKeyDown:E.keyDown,topKeyPress:E.keyPress,topKeyUp:E.keyUp,topLoad:E.load,topMouseDown:E.mouseDown,topMouseMove:E.mouseMove,topMouseOut:E.mouseOut,topMouseOver:E.mouseOver,topMouseUp:E.mouseUp,topPaste:E.paste,topReset:E.reset,topScroll:E.scroll,topSubmit:E.submit,topTouchCancel:E.touchCancel,topTouchEnd:E.touchEnd,topTouchMove:E.touchMove,topTouchStart:E.touchStart,topWheel:E.wheel};for(var C in w)w[C].dependencies=[C];var N={eventTypes:E,executeDispatch:function(e,t,r){var i=o.executeDispatch(e,t,r);"production"!==n.env.NODE_ENV?y("boolean"!=typeof i,"Returning `false` from an event handler is deprecated and will be ignored in a future release. Instead, manually call e.stopPropagation() or e.preventDefault(), as appropriate."):null,i===!1&&(e.stopPropagation(),e.preventDefault())},extractEvents:function(e,t,r,o){var g=w[e];if(!g)return null;var y;switch(e){case b.topInput:case b.topLoad:case b.topError:case b.topReset:case b.topSubmit:y=s;break;case b.topKeyPress:if(0===m(o))return null;case b.topKeyDown:case b.topKeyUp:y=c;break;case b.topBlur:case b.topFocus:y=u;break;case b.topClick:if(2===o.button)return null;case b.topContextMenu:case b.topDoubleClick:case b.topMouseDown:case b.topMouseMove:case b.topMouseOut:case b.topMouseOver:case b.topMouseUp:y=l;break;case b.topDrag:case b.topDragEnd:case b.topDragEnter:case b.topDragExit:case b.topDragLeave:case b.topDragOver:case b.topDragStart:case b.topDrop:y=p;break;case b.topTouchCancel:case b.topTouchEnd:case b.topTouchMove:case b.topTouchStart:y=h;break;case b.topScroll:y=d;break;case b.topWheel:y=f;break;case b.topCopy:case b.topCut:case b.topPaste:y=a}"production"!==n.env.NODE_ENV?v(y,"SimpleEventPlugin: Unhandled event type, `%s`.",e):v(y);var E=y.getPooled(g,r,o);return i.accumulateTwoPhaseDispatches(E),E}};t.exports=N}).call(this,e("_process"))},{"./EventConstants":84,"./EventPluginUtils":88,"./EventPropagators":89,"./SyntheticClipboardEvent":153,"./SyntheticDragEvent":155,"./SyntheticEvent":156,"./SyntheticFocusEvent":157,"./SyntheticKeyboardEvent":159,"./SyntheticMouseEvent":160,"./SyntheticTouchEvent":161,"./SyntheticUIEvent":162,"./SyntheticWheelEvent":163,"./getEventCharCode":184,"./invariant":196,"./keyOf":203,"./warning":215,_process:19}],153:[function(e,t){"use strict";function n(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticEvent"),o={clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}};r.augmentClass(n,o),t.exports=n},{"./SyntheticEvent":156}],154:[function(e,t){"use strict";function n(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticEvent"),o={data:null};r.augmentClass(n,o),t.exports=n},{"./SyntheticEvent":156}],155:[function(e,t){"use strict";function n(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticMouseEvent"),o={dataTransfer:null};r.augmentClass(n,o),t.exports=n},{"./SyntheticMouseEvent":160}],156:[function(e,t){"use strict";function n(e,t,n){this.dispatchConfig=e,this.dispatchMarker=t,this.nativeEvent=n;var r=this.constructor.Interface;for(var o in r)if(r.hasOwnProperty(o)){var a=r[o];this[o]=a?a(n):n[o]}var s=null!=n.defaultPrevented?n.defaultPrevented:n.returnValue===!1;this.isDefaultPrevented=s?i.thatReturnsTrue:i.thatReturnsFalse,this.isPropagationStopped=i.thatReturnsFalse}var r=e("./PooledClass"),o=e("./Object.assign"),i=e("./emptyFunction"),a=e("./getEventTarget"),s={type:null,target:a,currentTarget:i.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};o(n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e.preventDefault?e.preventDefault():e.returnValue=!1,this.isDefaultPrevented=i.thatReturnsTrue},stopPropagation:function(){var e=this.nativeEvent;e.stopPropagation?e.stopPropagation():e.cancelBubble=!0,this.isPropagationStopped=i.thatReturnsTrue},persist:function(){this.isPersistent=i.thatReturnsTrue},isPersistent:i.thatReturnsFalse,destructor:function(){var e=this.constructor.Interface;for(var t in e)this[t]=null;this.dispatchConfig=null,this.dispatchMarker=null,this.nativeEvent=null}}),n.Interface=s,n.augmentClass=function(e,t){var n=this,i=Object.create(n.prototype);o(i,e.prototype),e.prototype=i,e.prototype.constructor=e,e.Interface=o({},n.Interface,t),e.augmentClass=n.augmentClass,r.addPoolingTo(e,r.threeArgumentPooler)},r.addPoolingTo(n,r.threeArgumentPooler),t.exports=n},{"./Object.assign":95,"./PooledClass":96,"./emptyFunction":177,"./getEventTarget":187}],157:[function(e,t){"use strict";function n(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticUIEvent"),o={relatedTarget:null};r.augmentClass(n,o),t.exports=n},{"./SyntheticUIEvent":162}],158:[function(e,t){"use strict";function n(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticEvent"),o={data:null};r.augmentClass(n,o),t.exports=n},{"./SyntheticEvent":156}],159:[function(e,t){"use strict";function n(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticUIEvent"),o=e("./getEventCharCode"),i=e("./getEventKey"),a=e("./getEventModifierState"),s={key:i,location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:a,charCode:function(e){return"keypress"===e.type?o(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?o(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}};r.augmentClass(n,s),t.exports=n},{"./SyntheticUIEvent":162,"./getEventCharCode":184,"./getEventKey":185,"./getEventModifierState":186}],160:[function(e,t){"use strict";function n(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticUIEvent"),o=e("./ViewportMetrics"),i=e("./getEventModifierState"),a={screenX:null,screenY:null,clientX:null,clientY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:i,button:function(e){var t=e.button;return"which"in e?t:2===t?2:4===t?1:0},buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},pageX:function(e){return"pageX"in e?e.pageX:e.clientX+o.currentScrollLeft},pageY:function(e){return"pageY"in e?e.pageY:e.clientY+o.currentScrollTop}};r.augmentClass(n,a),t.exports=n},{"./SyntheticUIEvent":162,"./ViewportMetrics":165,"./getEventModifierState":186}],161:[function(e,t){"use strict";
function n(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticUIEvent"),o=e("./getEventModifierState"),i={touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:o};r.augmentClass(n,i),t.exports=n},{"./SyntheticUIEvent":162,"./getEventModifierState":186}],162:[function(e,t){"use strict";function n(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticEvent"),o=e("./getEventTarget"),i={view:function(e){if(e.view)return e.view;var t=o(e);if(null!=t&&t.window===t)return t;var n=t.ownerDocument;return n?n.defaultView||n.parentWindow:window},detail:function(e){return e.detail||0}};r.augmentClass(n,i),t.exports=n},{"./SyntheticEvent":156,"./getEventTarget":187}],163:[function(e,t){"use strict";function n(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticMouseEvent"),o={deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null};r.augmentClass(n,o),t.exports=n},{"./SyntheticMouseEvent":160}],164:[function(e,t){(function(n){"use strict";var r=e("./invariant"),o={reinitializeTransaction:function(){this.transactionWrappers=this.getTransactionWrappers(),this.wrapperInitData?this.wrapperInitData.length=0:this.wrapperInitData=[],this._isInTransaction=!1},_isInTransaction:!1,getTransactionWrappers:null,isInTransaction:function(){return!!this._isInTransaction},perform:function(e,t,o,i,a,s,u,c){"production"!==n.env.NODE_ENV?r(!this.isInTransaction(),"Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction."):r(!this.isInTransaction());var l,p;try{this._isInTransaction=!0,l=!0,this.initializeAll(0),p=e.call(t,o,i,a,s,u,c),l=!1}finally{try{if(l)try{this.closeAll(0)}catch(h){}else this.closeAll(0)}finally{this._isInTransaction=!1}}return p},initializeAll:function(e){for(var t=this.transactionWrappers,n=e;n<t.length;n++){var r=t[n];try{this.wrapperInitData[n]=i.OBSERVED_ERROR,this.wrapperInitData[n]=r.initialize?r.initialize.call(this):null}finally{if(this.wrapperInitData[n]===i.OBSERVED_ERROR)try{this.initializeAll(n+1)}catch(o){}}}},closeAll:function(e){"production"!==n.env.NODE_ENV?r(this.isInTransaction(),"Transaction.closeAll(): Cannot close transaction when none are open."):r(this.isInTransaction());for(var t=this.transactionWrappers,o=e;o<t.length;o++){var a,s=t[o],u=this.wrapperInitData[o];try{a=!0,u!==i.OBSERVED_ERROR&&s.close&&s.close.call(this,u),a=!1}finally{if(a)try{this.closeAll(o+1)}catch(c){}}}this.wrapperInitData.length=0}},i={Mixin:o,OBSERVED_ERROR:{}};t.exports=i}).call(this,e("_process"))},{"./invariant":196,_process:19}],165:[function(e,t){"use strict";var n=e("./getUnboundedScrollPosition"),r={currentScrollLeft:0,currentScrollTop:0,refreshScrollValues:function(){var e=n(window);r.currentScrollLeft=e.x,r.currentScrollTop=e.y}};t.exports=r},{"./getUnboundedScrollPosition":192}],166:[function(e,t){(function(n){"use strict";function r(e,t){if("production"!==n.env.NODE_ENV?o(null!=t,"accumulateInto(...): Accumulated items must not be null or undefined."):o(null!=t),null==e)return t;var r=Array.isArray(e),i=Array.isArray(t);return r&&i?(e.push.apply(e,t),e):r?(e.push(t),e):i?[e].concat(t):[e,t]}var o=e("./invariant");t.exports=r}).call(this,e("_process"))},{"./invariant":196,_process:19}],167:[function(e,t){"use strict";function n(e){for(var t=1,n=0,o=0;o<e.length;o++)t=(t+e.charCodeAt(o))%r,n=(n+t)%r;return t|n<<16}var r=65521;t.exports=n},{}],168:[function(e,t){function n(e){return e.replace(r,function(e,t){return t.toUpperCase()})}var r=/-(.)/g;t.exports=n},{}],169:[function(e,t){"use strict";function n(e){return r(e.replace(o,"ms-"))}var r=e("./camelize"),o=/^-ms-/;t.exports=n},{"./camelize":168}],170:[function(e,t){function n(e,t){return e&&t?e===t?!0:r(e)?!1:r(t)?n(e,t.parentNode):e.contains?e.contains(t):e.compareDocumentPosition?!!(16&e.compareDocumentPosition(t)):!1:!1}var r=e("./isTextNode");t.exports=n},{"./isTextNode":200}],171:[function(e,t){function n(e){return!!e&&("object"==typeof e||"function"==typeof e)&&"length"in e&&!("setInterval"in e)&&"number"!=typeof e.nodeType&&(Array.isArray(e)||"callee"in e||"item"in e)}function r(e){return n(e)?Array.isArray(e)?e.slice():o(e):[e]}var o=e("./toArray");t.exports=r},{"./toArray":213}],172:[function(e,t){(function(n){"use strict";function r(e){var t=i.createFactory(e),r=o.createClass({displayName:"ReactFullPageComponent"+e,componentWillUnmount:function(){"production"!==n.env.NODE_ENV?a(!1,"%s tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.",this.constructor.displayName):a(!1)},render:function(){return t(this.props)}});return r}var o=e("./ReactCompositeComponent"),i=e("./ReactElement"),a=e("./invariant");t.exports=r}).call(this,e("_process"))},{"./ReactCompositeComponent":103,"./ReactElement":121,"./invariant":196,_process:19}],173:[function(e,t){(function(n){function r(e){var t=e.match(l);return t&&t[1].toLowerCase()}function o(e,t){var o=c;"production"!==n.env.NODE_ENV?u(!!c,"createNodesFromMarkup dummy not initialized"):u(!!c);var i=r(e),l=i&&s(i);if(l){o.innerHTML=l[1]+e+l[2];for(var p=l[0];p--;)o=o.lastChild}else o.innerHTML=e;var h=o.getElementsByTagName("script");h.length&&("production"!==n.env.NODE_ENV?u(t,"createNodesFromMarkup(...): Unexpected <script> element rendered."):u(t),a(h).forEach(t));for(var d=a(o.childNodes);o.lastChild;)o.removeChild(o.lastChild);return d}var i=e("./ExecutionEnvironment"),a=e("./createArrayFrom"),s=e("./getMarkupWrap"),u=e("./invariant"),c=i.canUseDOM?document.createElement("div"):null,l=/^\s*<(\w+)/;t.exports=o}).call(this,e("_process"))},{"./ExecutionEnvironment":90,"./createArrayFrom":171,"./getMarkupWrap":188,"./invariant":196,_process:19}],174:[function(e,t){function n(e){return"object"==typeof e?Object.keys(e).filter(function(t){return e[t]}).join(" "):Array.prototype.join.call(arguments," ")}t.exports=n},{}],175:[function(e,t){"use strict";function n(e,t){var n=null==t||"boolean"==typeof t||""===t;if(n)return"";var r=isNaN(t);return r||0===t||o.hasOwnProperty(e)&&o[e]?""+t:("string"==typeof t&&(t=t.trim()),t+"px")}var r=e("./CSSProperty"),o=r.isUnitlessNumber;t.exports=n},{"./CSSProperty":72}],176:[function(e,t){(function(n){function r(e,t,r,a,s){var u=!1;if("production"!==n.env.NODE_ENV){var c=function(){return"production"!==n.env.NODE_ENV?i(u,e+"."+t+" will be deprecated in a future version. "+("Use "+e+"."+r+" instead.")):null,u=!0,s.apply(a,arguments)};return c.displayName=e+"_"+t,o(c,s)}return s}var o=e("./Object.assign"),i=e("./warning");t.exports=r}).call(this,e("_process"))},{"./Object.assign":95,"./warning":215,_process:19}],177:[function(e,t){function n(e){return function(){return e}}function r(){}r.thatReturns=n,r.thatReturnsFalse=n(!1),r.thatReturnsTrue=n(!0),r.thatReturnsNull=n(null),r.thatReturnsThis=function(){return this},r.thatReturnsArgument=function(e){return e},t.exports=r},{}],178:[function(e,t){(function(e){"use strict";var n={};"production"!==e.env.NODE_ENV&&Object.freeze(n),t.exports=n}).call(this,e("_process"))},{_process:19}],179:[function(e,t){"use strict";function n(e){return o[e]}function r(e){return(""+e).replace(i,n)}var o={"&":"&amp;",">":"&gt;","<":"&lt;",'"':"&quot;","'":"&#x27;"},i=/[&><"']/g;t.exports=r},{}],180:[function(e,t){(function(n){"use strict";function r(e,t,r){var o=e,a=!o.hasOwnProperty(r);if("production"!==n.env.NODE_ENV?s(a,"flattenChildren(...): Encountered two children with the same key, `%s`. Child keys must be unique; when two children share a key, only the first child will be used.",r):null,a&&null!=t){var u,c=typeof t;u="string"===c?i(t):"number"===c?i(""+t):t,o[r]=u}}function o(e){if(null==e)return e;var t={};return a(e,r,t),t}var i=e("./ReactTextComponent"),a=e("./traverseAllChildren"),s=e("./warning");t.exports=o}).call(this,e("_process"))},{"./ReactTextComponent":147,"./traverseAllChildren":214,"./warning":215,_process:19}],181:[function(e,t){"use strict";function n(e){try{e.focus()}catch(t){}}t.exports=n},{}],182:[function(e,t){"use strict";var n=function(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)};t.exports=n},{}],183:[function(e,t){function n(){try{return document.activeElement||document.body}catch(e){return document.body}}t.exports=n},{}],184:[function(e,t){"use strict";function n(e){var t,n=e.keyCode;return"charCode"in e?(t=e.charCode,0===t&&13===n&&(t=13)):t=n,t>=32||13===t?t:0}t.exports=n},{}],185:[function(e,t){"use strict";function n(e){if(e.key){var t=o[e.key]||e.key;if("Unidentified"!==t)return t}if("keypress"===e.type){var n=r(e);return 13===n?"Enter":String.fromCharCode(n)}return"keydown"===e.type||"keyup"===e.type?i[e.keyCode]||"Unidentified":""}var r=e("./getEventCharCode"),o={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},i={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};t.exports=n},{"./getEventCharCode":184}],186:[function(e,t){"use strict";function n(e){var t=this,n=t.nativeEvent;if(n.getModifierState)return n.getModifierState(e);var r=o[e];return r?!!n[r]:!1}function r(){return n}var o={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};t.exports=r},{}],187:[function(e,t){"use strict";function n(e){var t=e.target||e.srcElement||window;return 3===t.nodeType?t.parentNode:t}t.exports=n},{}],188:[function(e,t){(function(n){function r(e){return"production"!==n.env.NODE_ENV?i(!!a,"Markup wrapping node not initialized"):i(!!a),h.hasOwnProperty(e)||(e="*"),s.hasOwnProperty(e)||(a.innerHTML="*"===e?"<link />":"<"+e+"></"+e+">",s[e]=!a.firstChild),s[e]?h[e]:null}var o=e("./ExecutionEnvironment"),i=e("./invariant"),a=o.canUseDOM?document.createElement("div"):null,s={circle:!0,defs:!0,ellipse:!0,g:!0,line:!0,linearGradient:!0,path:!0,polygon:!0,polyline:!0,radialGradient:!0,rect:!0,stop:!0,text:!0},u=[1,'<select multiple="true">',"</select>"],c=[1,"<table>","</table>"],l=[3,"<table><tbody><tr>","</tr></tbody></table>"],p=[1,"<svg>","</svg>"],h={"*":[1,"?<div>","</div>"],area:[1,"<map>","</map>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],legend:[1,"<fieldset>","</fieldset>"],param:[1,"<object>","</object>"],tr:[2,"<table><tbody>","</tbody></table>"],optgroup:u,option:u,caption:c,colgroup:c,tbody:c,tfoot:c,thead:c,td:l,th:l,circle:p,defs:p,ellipse:p,g:p,line:p,linearGradient:p,path:p,polygon:p,polyline:p,radialGradient:p,rect:p,stop:p,text:p};t.exports=r}).call(this,e("_process"))},{"./ExecutionEnvironment":90,"./invariant":196,_process:19}],189:[function(e,t){"use strict";function n(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function r(e){for(;e;){if(e.nextSibling)return e.nextSibling;e=e.parentNode}}function o(e,t){for(var o=n(e),i=0,a=0;o;){if(3==o.nodeType){if(a=i+o.textContent.length,t>=i&&a>=t)return{node:o,offset:t-i};i=a}o=n(r(o))}}t.exports=o},{}],190:[function(e,t){"use strict";function n(e){return e?e.nodeType===r?e.documentElement:e.firstChild:null}var r=9;t.exports=n},{}],191:[function(e,t){"use strict";function n(){return!o&&r.canUseDOM&&(o="textContent"in document.documentElement?"textContent":"innerText"),o}var r=e("./ExecutionEnvironment"),o=null;t.exports=n},{"./ExecutionEnvironment":90}],192:[function(e,t){"use strict";function n(e){return e===window?{x:window.pageXOffset||document.documentElement.scrollLeft,y:window.pageYOffset||document.documentElement.scrollTop}:{x:e.scrollLeft,y:e.scrollTop}}t.exports=n},{}],193:[function(e,t){function n(e){return e.replace(r,"-$1").toLowerCase()}var r=/([A-Z])/g;t.exports=n},{}],194:[function(e,t){"use strict";function n(e){return r(e).replace(o,"-ms-")}var r=e("./hyphenate"),o=/^ms-/;t.exports=n},{"./hyphenate":193}],195:[function(e,t){(function(n){"use strict";function r(e,t){var r;if("production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?o(e&&("function"==typeof e.type||"string"==typeof e.type),"Only functions or strings can be mounted as React components."):null,e.type._mockedReactClassConstructor)){a._isLegacyCallWarningEnabled=!1;try{r=new e.type._mockedReactClassConstructor(e.props)}finally{a._isLegacyCallWarningEnabled=!0}i.isValidElement(r)&&(r=new r.type(r.props));var c=r.render;if(c)return c._isMockFunction&&!c._getMockImplementation()&&c.mockImplementation(u.getEmptyComponent),r.construct(e),r;e=u.getEmptyComponent()}return r="string"==typeof e.type?s.createInstanceForTag(e.type,e.props,t):new e.type(e.props),"production"!==n.env.NODE_ENV&&("production"!==n.env.NODE_ENV?o("function"==typeof r.construct&&"function"==typeof r.mountComponent&&"function"==typeof r.receiveComponent,"Only React Components can be mounted."):null),r.construct(e),r}var o=e("./warning"),i=e("./ReactElement"),a=e("./ReactLegacyElement"),s=e("./ReactNativeComponent"),u=e("./ReactEmptyComponent");t.exports=r}).call(this,e("_process"))},{"./ReactElement":121,"./ReactEmptyComponent":123,"./ReactLegacyElement":130,"./ReactNativeComponent":135,"./warning":215,_process:19}],196:[function(e,t){(function(e){"use strict";var n=function(t,n,r,o,i,a,s,u){if("production"!==e.env.NODE_ENV&&void 0===n)throw new Error("invariant requires an error message argument");if(!t){var c;if(void 0===n)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[r,o,i,a,s,u],p=0;c=new Error("Invariant Violation: "+n.replace(/%s/g,function(){return l[p++]}))}throw c.framesToPop=1,c}};t.exports=n}).call(this,e("_process"))},{_process:19}],197:[function(e,t){"use strict";function n(e,t){if(!o.canUseDOM||t&&!("addEventListener"in document))return!1;var n="on"+e,i=n in document;if(!i){var a=document.createElement("div");a.setAttribute(n,"return;"),i="function"==typeof a[n]}return!i&&r&&"wheel"===e&&(i=document.implementation.hasFeature("Events.wheel","3.0")),i}var r,o=e("./ExecutionEnvironment");o.canUseDOM&&(r=document.implementation&&document.implementation.hasFeature&&document.implementation.hasFeature("","")!==!0),t.exports=n},{"./ExecutionEnvironment":90}],198:[function(e,t){function n(e){return!(!e||!("function"==typeof Node?e instanceof Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}t.exports=n},{}],199:[function(e,t){"use strict";function n(e){return e&&("INPUT"===e.nodeName&&r[e.type]||"TEXTAREA"===e.nodeName)}var r={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};t.exports=n},{}],200:[function(e,t){function n(e){return r(e)&&3==e.nodeType}var r=e("./isNode");t.exports=n},{"./isNode":198}],201:[function(e,t){"use strict";function n(e){e||(e="");var t,n=arguments.length;if(n>1)for(var r=1;n>r;r++)t=arguments[r],t&&(e=(e?e+" ":"")+t);return e}t.exports=n},{}],202:[function(e,t){(function(n){"use strict";var r=e("./invariant"),o=function(e){var t,o={};"production"!==n.env.NODE_ENV?r(e instanceof Object&&!Array.isArray(e),"keyMirror(...): Argument must be an object."):r(e instanceof Object&&!Array.isArray(e));for(t in e)e.hasOwnProperty(t)&&(o[t]=t);return o};t.exports=o}).call(this,e("_process"))},{"./invariant":196,_process:19}],203:[function(e,t){var n=function(e){var t;for(t in e)if(e.hasOwnProperty(t))return t;return null};t.exports=n},{}],204:[function(e,t){"use strict";function n(e,t,n){if(!e)return null;var o={};for(var i in e)r.call(e,i)&&(o[i]=t.call(n,e[i],i,e));return o}var r=Object.prototype.hasOwnProperty;t.exports=n},{}],205:[function(e,t){"use strict";function n(e){var t={};return function(n){return t.hasOwnProperty(n)?t[n]:t[n]=e.call(this,n)}}t.exports=n},{}],206:[function(e,t){(function(n){"use strict";function r(e){"production"!==n.env.NODE_ENV?o(e&&!/[^a-z0-9_]/.test(e),"You must provide an eventName using only the characters [a-z0-9_]"):o(e&&!/[^a-z0-9_]/.test(e))}var o=e("./invariant");t.exports=r}).call(this,e("_process"))},{"./invariant":196,_process:19}],207:[function(e,t){(function(n){"use strict";function r(e){return"production"!==n.env.NODE_ENV?i(o.isValidElement(e),"onlyChild must be passed a children with exactly one child."):i(o.isValidElement(e)),e}var o=e("./ReactElement"),i=e("./invariant");t.exports=r}).call(this,e("_process"))},{"./ReactElement":121,"./invariant":196,_process:19}],208:[function(e,t){"use strict";var n,r=e("./ExecutionEnvironment");r.canUseDOM&&(n=window.performance||window.msPerformance||window.webkitPerformance),t.exports=n||{}},{"./ExecutionEnvironment":90}],209:[function(e,t){var n=e("./performance");n&&n.now||(n=Date);var r=n.now.bind(n);t.exports=r},{"./performance":208}],210:[function(e,t){"use strict";var n=e("./ExecutionEnvironment"),r=/^[ \r\n\t\f]/,o=/<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/,i=function(e,t){e.innerHTML=t};if(n.canUseDOM){var a=document.createElement("div");a.innerHTML=" ",""===a.innerHTML&&(i=function(e,t){if(e.parentNode&&e.parentNode.replaceChild(e,e),r.test(t)||"<"===t[0]&&o.test(t)){e.innerHTML="﻿"+t;var n=e.firstChild;1===n.data.length?e.removeChild(n):n.deleteData(0,1)}else e.innerHTML=t})}t.exports=i},{"./ExecutionEnvironment":90}],211:[function(e,t){"use strict";function n(e,t){if(e===t)return!0;var n;for(n in e)if(e.hasOwnProperty(n)&&(!t.hasOwnProperty(n)||e[n]!==t[n]))return!1;for(n in t)if(t.hasOwnProperty(n)&&!e.hasOwnProperty(n))return!1;return!0}t.exports=n},{}],212:[function(e,t){"use strict";function n(e,t){return e&&t&&e.type===t.type&&e.key===t.key&&e._owner===t._owner?!0:!1}t.exports=n},{}],213:[function(e,t){(function(n){function r(e){var t=e.length;if("production"!==n.env.NODE_ENV?o(!Array.isArray(e)&&("object"==typeof e||"function"==typeof e),"toArray: Array-like object expected"):o(!Array.isArray(e)&&("object"==typeof e||"function"==typeof e)),"production"!==n.env.NODE_ENV?o("number"==typeof t,"toArray: Object needs a length property"):o("number"==typeof t),"production"!==n.env.NODE_ENV?o(0===t||t-1 in e,"toArray: Object should have keys for indices"):o(0===t||t-1 in e),e.hasOwnProperty)try{return Array.prototype.slice.call(e)}catch(r){}for(var i=Array(t),a=0;t>a;a++)i[a]=e[a];return i}var o=e("./invariant");t.exports=r}).call(this,e("_process"))},{"./invariant":196,_process:19}],214:[function(e,t){(function(n){"use strict";function r(e){return d[e]}function o(e,t){return e&&null!=e.key?a(e.key):t.toString(36)}function i(e){return(""+e).replace(f,r)}function a(e){return"$"+i(e)}function s(e,t,n){return null==e?0:m(e,"",0,t,n)}var u=e("./ReactElement"),c=e("./ReactInstanceHandles"),l=e("./invariant"),p=c.SEPARATOR,h=":",d={"=":"=0",".":"=1",":":"=2"},f=/[=.:]/g,m=function(e,t,r,i,s){var c,d,f=0;if(Array.isArray(e))for(var v=0;v<e.length;v++){var g=e[v];c=t+(t?h:p)+o(g,v),d=r+f,f+=m(g,c,d,i,s)}else{var y=typeof e,b=""===t,E=b?p+o(e,0):t;if(null==e||"boolean"===y)i(s,null,E,r),f=1;else if("string"===y||"number"===y||u.isValidElement(e))i(s,e,E,r),f=1;else if("object"===y){"production"!==n.env.NODE_ENV?l(!e||1!==e.nodeType,"traverseAllChildren(...): Encountered an invalid child; DOM elements are not valid children of React components."):l(!e||1!==e.nodeType);for(var w in e)e.hasOwnProperty(w)&&(c=t+(t?h:p)+a(w)+h+o(e[w],0),d=r+f,f+=m(e[w],c,d,i,s))}}return f};t.exports=s}).call(this,e("_process"))},{"./ReactElement":121,"./ReactInstanceHandles":129,"./invariant":196,_process:19}],215:[function(e,t){(function(n){"use strict";var r=e("./emptyFunction"),o=r;"production"!==n.env.NODE_ENV&&(o=function(e,t){for(var n=[],r=2,o=arguments.length;o>r;r++)n.push(arguments[r]);if(void 0===t)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(!e){var i=0;console.warn("Warning: "+t.replace(/%s/g,function(){return n[i++]}))}}),t.exports=o}).call(this,e("_process"))},{"./emptyFunction":177,_process:19}],216:[function(e,t){t.exports=e("./lib/React")},{"./lib/React":97}],217:[function(e,t,n){!function(e,r){"use strict";"function"==typeof define&&define.amd?define([],function(){return e.ReactFireMixin=r()}):"object"==typeof n?t.exports=r():e.ReactFireMixin=r()}(this,function(){"use strict";var e={componentWillMount:function(){this.firebaseRefs={},this.firebaseListeners={}},componentWillUnmount:function(){for(var e in this.firebaseRefs)this.firebaseRefs.hasOwnProperty(e)&&this.unbind(e)},bindAsArray:function(e,t,n){this._bind(e,t,n,!0)},bindAsObject:function(e,t,n){this._bind(e,t,n,!1)},_bind:function(e,t,n,r){this._validateBindVar(t);var o,i;if("[object Object]"!==Object.prototype.toString.call(e)?(o="firebaseRef must be an instance of Firebase",i="INVALID_FIREBASE_REF"):"boolean"!=typeof r&&(o="bindAsArray must be a boolean. Got: "+r,i="INVALID_BIND_AS_ARRAY"),"undefined"!=typeof o){var a=new Error("ReactFire: "+o);throw a.code=i,a}this.firebaseRefs[t]=e.ref(),this.firebaseListeners[t]=e.on("value",function(e){var n={};n[t]=r?this._toArray(e.val()):e.val(),this.setState(n)}.bind(this),n)},unbind:function(e){if(this._validateBindVar(e),"undefined"==typeof this.firebaseRefs[e]){var t=new Error('ReactFire: unexpected value for bindVar. "'+e+'" was either never bound or has already been unbound');throw t.code="UNBOUND_BIND_VARIABLE",t}this.firebaseRefs[e].off("value",this.firebaseListeners[e]),delete this.firebaseRefs[e],delete this.firebaseListeners[e]},_validateBindVar:function(e){var t;if("string"!=typeof e?t="bindVar must be a string. Got: "+e:0===e.length?t='bindVar must be a non-empty string. Got: ""':e.length>768?t="bindVar is too long to be stored in Firebase. Got: "+e:/[\[\].#$\/\u0000-\u001F\u007F]/.test(e)&&(t="bindVar cannot contain any of the following characters: . # $ ] [ /. Got: "+e),"undefined"!=typeof t){var n=new Error("ReactFire: "+t);throw n.code="INVALID_BIND_VARIABLE",n}},_isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},_toArray:function(e){var t=[];if(e)if(this._isArray(e))t=e;else if("object"==typeof e)for(var n in e)e.hasOwnProperty(n)&&t.push(e[n]);return t}};return e})},{}]},{},[4]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJlIiwidCIsIm4iLCJyIiwicyIsIm8iLCJ1IiwiYSIsInJlcXVpcmUiLCJpIiwiZiIsIkVycm9yIiwiY29kZSIsImwiLCJleHBvcnRzIiwiY2FsbCIsImxlbmd0aCIsMSwibW9kdWxlIiwiUmVhY3QiLCJnZXRKU09OIiwiR2l0SHViUGVyc29uIiwiY3JlYXRlQ2xhc3MiLCJkaXNwbGF5TmFtZSIsImdldEluaXRpYWxTdGF0ZSIsInVzZXJuYW1lIiwibmFtZSIsImh0bWxfdXJsIiwiYXZhdGFyX3VybCIsImNvbXBvbmVudERpZE1vdW50IiwiaGFuZGxlIiwidGhpcyIsInByb3BzIiwidG9Mb3dlckNhc2UiLCJ0aGF0IiwiZGF0YSIsImluZGV4T2YiLCJpc01vdW50ZWQiLCJzZXRTdGF0ZSIsImxvZ2luIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwicmVuZGVyIiwiY3JlYXRlRWxlbWVudCIsImhyZWYiLCJzdGF0ZSIsInRpdGxlIiwiY2xhc3NOYW1lIiwic3JjIiwiLi9nZXRKU09OLmpzeCIsInJlYWN0IiwyLCJTZWxlY3QiLCJtZW1iZXJzIiwidGVhbSIsIm1hcCIsIm1lbWJlciIsInVuZGVmaW5lZCIsImxhYmVsIiwidmFsdWUiLCJvcHRpb25zIiwicmVhY3Qtc2VsZWN0IiwzLCJfcmVxdWlyZSIsIkF1dGhNaXhpbiIsIkdpdEh1YlBlcnNvbkNob29zZXIiLCJBZGQiLCJtaXhpbnMiLCJib2R5Iiwib25DbGljayIsImxvZ2dlZEluIiwiaWQiLCJtZXRob2QiLCJhY3Rpb24iLCJyb3dzIiwidHlwZSIsIi4vR2l0SHViUGVyc29uQ2hvb3Nlci5qc3giLCIuL2F1dGguanN4Iiw0LCJSb3V0ZXIiLCJSb3V0ZSIsIlJvdXRlSGFuZGxlciIsIkxpbmsiLCJEZWZhdWx0Um91dGUiLCJBdXRoQmxvY2siLCJfcmVxdWlyZTIiLCJOb3ciLCJOZXh0IiwiVXBjb21pbmciLCJIb21lcGFnZSIsIkRlc2lnbiIsIkF1ZGllbmNlIiwiQXBwIiwidG8iLCJodG1sRm9yIiwib25Mb2dnZWRJbiIsIm9uTG9nZ2VkT3V0Iiwicm91dGVzIiwicGF0aCIsImhhbmRsZXIiLCJydW4iLCJIaXN0b3J5TG9jYXRpb24iLCJIYW5kbGVyIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsIi4vYWRkLmpzeCIsIi4vYXVkaWVuY2UuanN4IiwiLi9kZXNpZ24uanN4IiwiLi9oZWFydGJlYXRzLmpzeCIsIi4vaG9tZXBhZ2UuanN4IiwiLi91cGNvbWluZy5qc3giLCJyZWFjdC1yb3V0ZXIiLDUsIlBlcnNvbmEiLCJnZXRNb3RpdmF0b3JzIiwicGVyc29uYU1vdGl2YXRvcnMiLCJtb3RpdmF0b3JzIiwic3BsaXQiLCJtb3RpdmF0b3JMaXN0IiwiZm9yRWFjaCIsIm0iLCJwdXNoIiwibG9jYXRpb24iLCJvY2N1cGF0aW9uIiwiY2hpbGRyZW4iLDYsImRvY0Nvb2tpZXMiLCJnZXRJdGVtIiwic0tleSIsImRlY29kZVVSSUNvbXBvbmVudCIsImNvb2tpZSIsInJlcGxhY2UiLCJSZWdFeHAiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXRJdGVtIiwic1ZhbHVlIiwidkVuZCIsInNQYXRoIiwic0RvbWFpbiIsImJTZWN1cmUiLCJ0ZXN0Iiwic0V4cGlyZXMiLCJjb25zdHJ1Y3RvciIsIk51bWJlciIsIkluZmluaXR5IiwiU3RyaW5nIiwiRGF0ZSIsInRvVVRDU3RyaW5nIiwicmVtb3ZlSXRlbSIsImhhc0l0ZW0iLCJrZXlzIiwiYUtleXMiLCJuTGVuIiwibklkeCIsImF1dGgiLCJvbkxvYWQiLCJnaXRodWJDb29raWUiLCJkZXRhaWxzIiwiYmxvYiIsIkpTT04iLCJwYXJzZSIsInNsaWNlIiwibG9jYWxTdG9yYWdlIiwiZ2l0aHViIiwic3RyaW5naWZ5IiwiZ2V0Q3VycmVudFVzZXIiLCJob3N0bmFtZSIsInJlbG9hZCIsIm5ld1VSTCIsInBhdGhuYW1lIiwid2luZG93IiwibG9nb3V0IiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImxvZ2luT3JPdXQiLDcsOCwiRmlsdGVyIiwiZG9GaWx0ZXIiLCJxdWVyeSIsInJlZnMiLCJmaWx0ZXJJbnB1dCIsImdldERPTU5vZGUiLCJyZWYiLCJwbGFjZWhvbGRlciIsIm9uQ2hhbmdlIiw5LCJ1cmwiLCJzdWNjZXNzSGFuZGxlciIsImVycm9ySGFuZGxlciIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwiQWN0aXZlWE9iamVjdCIsIm9wZW4iLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJzdGF0dXMiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VUZXh0IiwicmVkaXJlY3QiLCJzZW5kIiwxMCwiTGFiZWxzIiwiQVBJU2VydmVyIiwiY29udmVydGVyIiwiU2hvd2Rvd24iLCJSb2xlcyIsIl9yb2xlcyIsIkRyaXZlciIsIkxlYWQgRGV2IiwiTGVhZCBEZXNpZ24iLCJRdWFsaXR5IiwiY29tcCIsImlzc3VlSWQiLCJGaXJlYmFzZSIsImNoaWxkIiwib24iLCJzbmFwc2hvdCIsInJvbGVzIiwidmFsIiwicm9sZWxpc3QiLCJpbmRleCIsInJvbGUiLCJhc3NpZ25lZSIsImtleSIsIklzc3VlIiwibGluZXMiLCJ0cmltbWVkQm9keSIsIm1ha2VIdG1sIiwiZG9DbGljayIsIkltZyIsImFsdCIsInVzZXIiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsImxhYmVscyIsIklzc3Vlc0xpc3QiLCJpc3N1ZXMiLCJpc3N1ZSIsIkhlYXJ0YmVhdCIsImZ1bGwiLCJwMSIsInAyIiwiZmlsdGVyZWQiLCJzZWxmIiwiZmlsdGVyVGV4dCIsIm1hdGNoaW5nUDFzIiwibWF0Y2hpbmdQMnMiLCJqb2luIiwicDFzIiwicDJzIiwiZnVsbHNldCIsIi4vZmlsdGVyLmpzeCIsIi4vbGFiZWxzLmpzeCIsMTEsIk1lbnRpb25zIiwicGx1cmFsaXplIiwiR2l0aHViU2VhcmNoIiwiaXRlbXMiLCJ0b3RhbF9jb3VudCIsImZyYWdtZW50IiwibWFrZUZyYWdtZW50IiwiR2l0aHViSXNzdWVzU2VhcmNoIiwicGxhblByZWZpeCIsImZpbHRlciIsIml0ZW0iLCJub3VuIiwiR2l0aHViUFJTZWFyY2giLCJHaXRodWJJbml0aWF0aXZlc1NlYXJjaCIsIkRhc2hib2FyZCIsIlNwbGFzaCIsIi4vbWVudGlvbnMuanN4IiwxMiwic3R5bGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjb2xvciIsInBhcnNlSW50IiwxMywiUmVhY3RGaXJlTWl4aW4iLCJNZW50aW9uIiwiY29tbWVudCIsImlzc3VlX2lkIiwiZGlzbWlzcyIsImZiaWQiLCJ1cGRhdGUiLCJkaXNtaXNzZWQiLCJsaW5lc3BsaXQiLCJ0aGVzdHJpbmciLCJiaXRzIiwibGluZSIsInBhcnNlQm9keSIsIm1lbnRpb25JbmRleCIsImJlZ2lubmluZyIsImVuZGluZyIsIk1hdGgiLCJtaW4iLCJiZWZvcmUiLCJpbmRleE9mTGFzdE5ld2xpbmUiLCJsYXN0SW5kZXhPZiIsImFmdGVyIiwibWlkZGxlIiwiaXNzdWVfdXJsIiwicmVmX3VybCIsInJlcG9fbmFtZSIsInF1ZXN0aW9uIiwidHJhc2hjYW4iLCJsb2dnZWRpblVzZXIiLCJiaW5kIiwicGFyc2VkQm9keSIsImZyb213aG9tIiwicmVmX2h0bWxfdXJsIiwiTWVudGlvbnNMaXN0IiwibWVudGlvbnMiLCJoYXNPd25Qcm9wZXJ0eSIsInRvbWVmcm9tdGhlbSIsInVuaXF1ZV9pZCIsImRlc2MiLCJjb21wb25lbnRXaWxsTW91bnQiLCJmaXJlYmFzZVJlZiIsImJpbmRBc09iamVjdCIsInRhcmdldCIsIi4vR2l0SHViUGVyc29uLmpzeCIsImNsaWVudC1maXJlYmFzZSIsInJlYWN0ZmlyZSIsMTQsIklzc3VlQ2FyZCIsIm1pbGVzdG9uZXMiLCJtaWxlc3RvbmUiLCJpc3N1ZUNhcmRzIiwxNSwiQnVmZmVyIiwic3ViamVjdCIsImVuY29kaW5nIiwibm9aZXJvIiwiYnl0ZUxlbmd0aCIsIlR5cGVFcnJvciIsImlzQXJyYXkiLCJmbG9vciIsImtNYXhMZW5ndGgiLCJSYW5nZUVycm9yIiwidG9TdHJpbmciLCJidWYiLCJUWVBFRF9BUlJBWV9TVVBQT1JUIiwiX2F1Z21lbnQiLCJVaW50OEFycmF5IiwiX2lzQnVmZmVyIiwiX3NldCIsImlzQXJyYXlpc2giLCJpc0J1ZmZlciIsInJlYWRVSW50OCIsIndyaXRlIiwicG9vbFNpemUiLCJwYXJlbnQiLCJyb290UGFyZW50IiwiU2xvd0J1ZmZlciIsImhleFdyaXRlIiwic3RyaW5nIiwib2Zmc2V0IiwicmVtYWluaW5nIiwic3RyTGVuIiwiYnl0ZSIsInN1YnN0ciIsImlzTmFOIiwidXRmOFdyaXRlIiwiY2hhcnNXcml0dGVuIiwiYmxpdEJ1ZmZlciIsInV0ZjhUb0J5dGVzIiwiYXNjaWlXcml0ZSIsImFzY2lpVG9CeXRlcyIsImJpbmFyeVdyaXRlIiwiYmFzZTY0V3JpdGUiLCJiYXNlNjRUb0J5dGVzIiwidXRmMTZsZVdyaXRlIiwidXRmMTZsZVRvQnl0ZXMiLCJiYXNlNjRTbGljZSIsInN0YXJ0IiwiZW5kIiwiYmFzZTY0IiwiZnJvbUJ5dGVBcnJheSIsInV0ZjhTbGljZSIsInJlcyIsInRtcCIsImRlY29kZVV0ZjhDaGFyIiwiZnJvbUNoYXJDb2RlIiwiYXNjaWlTbGljZSIsInJldCIsImJpbmFyeVNsaWNlIiwiaGV4U2xpY2UiLCJsZW4iLCJvdXQiLCJ0b0hleCIsInV0ZjE2bGVTbGljZSIsImJ5dGVzIiwiY2hlY2tPZmZzZXQiLCJleHQiLCJjaGVja0ludCIsIm1heCIsIm9iamVjdFdyaXRlVUludDE2IiwibGl0dGxlRW5kaWFuIiwiaiIsIm9iamVjdFdyaXRlVUludDMyIiwiY2hlY2tJRUVFNzU0Iiwid3JpdGVGbG9hdCIsIm5vQXNzZXJ0IiwiaWVlZTc1NCIsIndyaXRlRG91YmxlIiwiYmFzZTY0Y2xlYW4iLCJzdHIiLCJzdHJpbmd0cmltIiwiSU5WQUxJRF9CQVNFNjRfUkUiLCJ0cmltIiwidW5pdHMiLCJjb2RlUG9pbnQiLCJsZWFkU3Vycm9nYXRlIiwiY2hhckNvZGVBdCIsImJ5dGVBcnJheSIsImMiLCJoaSIsImxvIiwidG9CeXRlQXJyYXkiLCJkc3QiLCJ1bml0U2l6ZSIsImVyciIsIklOU1BFQ1RfTUFYX0JZVEVTIiwiQXJyYXlCdWZmZXIiLCJhcnIiLCJmb28iLCJzdWJhcnJheSIsImIiLCJjb21wYXJlIiwieCIsInkiLCJpc0VuY29kaW5nIiwiY29uY2F0IiwibGlzdCIsInRvdGFsTGVuZ3RoIiwicG9zIiwiY29weSIsInByb3RvdHlwZSIsImxvd2VyZWRDYXNlIiwiZXF1YWxzIiwiaW5zcGVjdCIsIm1hdGNoIiwiZ2V0Iiwic2V0IiwidiIsIndyaXRlVUludDgiLCJpc0Zpbml0ZSIsInN3YXAiLCJ0b0pTT04iLCJBcnJheSIsIl9hcnIiLCJuZXdCdWYiLCJzbGljZUxlbiIsInJlYWRVSW50TEUiLCJtdWwiLCJyZWFkVUludEJFIiwicmVhZFVJbnQxNkxFIiwicmVhZFVJbnQxNkJFIiwicmVhZFVJbnQzMkxFIiwicmVhZFVJbnQzMkJFIiwicmVhZEludExFIiwicG93IiwicmVhZEludEJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRGbG9hdExFIiwicmVhZCIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwid3JpdGVVSW50TEUiLCJ3cml0ZVVJbnRCRSIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUludExFIiwic3ViIiwid3JpdGVJbnRCRSIsIndyaXRlSW50OCIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MzJMRSIsIndyaXRlSW50MzJCRSIsIndyaXRlRmxvYXRMRSIsIndyaXRlRmxvYXRCRSIsIndyaXRlRG91YmxlTEUiLCJ3cml0ZURvdWJsZUJFIiwidGFyZ2V0X3N0YXJ0Iiwic291cmNlIiwiZmlsbCIsInRvQXJyYXlCdWZmZXIiLCJidWZmZXIiLCJCUCIsIl9nZXQiLCJ0b0xvY2FsZVN0cmluZyIsImJhc2U2NC1qcyIsImlzLWFycmF5IiwxNiwibG9va3VwIiwiZGVjb2RlIiwiZWx0IiwiUExVUyIsIlBMVVNfVVJMX1NBRkUiLCJTTEFTSCIsIlNMQVNIX1VSTF9TQUZFIiwiTlVNQkVSIiwiVVBQRVIiLCJMT1dFUiIsImI2NFRvQnl0ZUFycmF5IiwiYjY0IiwiTCIsInBsYWNlSG9sZGVycyIsImNoYXJBdCIsIkFyciIsInVpbnQ4VG9CYXNlNjQiLCJ1aW50OCIsImVuY29kZSIsIm51bSIsInRyaXBsZXRUb0Jhc2U2NCIsInRlbXAiLCJleHRyYUJ5dGVzIiwib3V0cHV0IiwiYmFzZTY0anMiLDE3LCJpc0xFIiwibUxlbiIsIm5CeXRlcyIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJuQml0cyIsImQiLCJOYU4iLCJydCIsImFicyIsIkxOMiIsMTgsIk9iamVjdCIsMTksImRyYWluUXVldWUiLCJkcmFpbmluZyIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwibm9vcCIsInByb2Nlc3MiLCJuZXh0VGljayIsImZ1biIsInNldFRpbWVvdXQiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsMjAsImJhIiwiY2EiLCJyYiIsImxkIiwiZGEiLCJzcGxpY2UiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImVhIiwicSIsImZhIiwiZ2EiLCJoYSIsImFwcGx5IiwiYXJndW1lbnRzIiwiaWEiLCJ1bnNoaWZ0IiwiRnVuY3Rpb24iLCJqYSIsImtlIiwiaWUiLCJrYSIsImV2YWwiLCJsYSIsIm1jIiwibWEiLCJuYSIsInBhIiwib2EiLCJxYSIsInJhIiwidGEiLCJhc3NlcnQiLCJ6IiwidWEiLCJBIiwidmEiLCJ5YSIsIndhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJzdWJzdHJpbmciLCJwb3AiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwieGEiLCJCIiwiQyIsIkQiLCJnIiwiV2EiLCJKYSIsInNwIiwic24iLCJlcCIsImVuIiwidmYiLCJJYSIsImNhbmNlbCIsIlkiLCJzYSIsImplIiwiRiIsIkxhIiwiTWEiLCJOYSIsIk9hIiwieWMiLCJQYSIsIkViIiwiSSIsIkoiLCJRYSIsIlJhIiwiU2EiLCJUYSIsIlVhIiwiVmEiLCJsZWZ0IiwicmlnaHQiLCJYYSIsInVkIiwiWmIiLCJZYSIsIlphIiwiYmIiLCJkYiIsIlEiLCJlYiIsImNiIiwiaGIiLCJmYiIsImdiIiwiaWIiLCJqYiIsIlViIiwiaGMiLCJrYiIsIm5iIiwibGIiLCJvYiIsImhvc3QiLCJkb21haW4iLCJuYyIsIlliIiwiZ2UiLCJtYiIsInBiIiwicWIiLCJ4YyIsIkVkIiwiZWMiLCJyYyIsIiRhIiwicmVzZXQiLCJzYiIsImsiLCJ5YiIsIkNiIiwiemIiLCJKYiIsIkhiIiwiSWIiLCJwIiwiTGIiLCJNYiIsIksiLCJPYiIsIk5iIiwiUGIiLCJRYiIsIlJiIiwiU2IiLCJ3YXJuIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJORUdBVElWRV9JTkZJTklUWSIsIlRiIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwiVmIiLCJXYiIsIlhiIiwiS2EiLCJzb3J0IiwiJGIiLCJhYyIsImJjIiwicm91bmQiLCJyZXZlcnNlIiwiY2MiLCJ0b1VwcGVyQ2FzZSIsImRjIiwiZmMiLCJpYyIsImpjIiwia2MiLCJOIiwibGMiLCJPIiwiTSIsIlAiLCJIIiwicGMiLCJjb3VudCIsIm9jIiwiZWQiLCJHZCIsInFjIiwidyIsImdjIiwiRmQiLCJ3YiIsInNjIiwidGMiLCJoaWRkZW4iLCJtb3pIaWRkZW4iLCJtc0hpZGRlbiIsIndlYmtpdEhpZGRlbiIsImJkIiwidWMiLCJ2YyIsIndjIiwiemMiLCJIZCIsIkFjIiwiWmMiLCJzZCIsInJhbmRvbSIsIkRjIiwiQmMiLCJFYyIsIkNjIiwiZnJhbWVzIiwidWIiLCJhZCIsImFhIiwiSWMiLCJUZCIsIkhjIiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwiVyIsIkpjIiwiUGMiLCJLYyIsIkxjIiwiY2xlYXJUaW1lb3V0IiwiTWMiLCJSIiwiTmMiLCJucyIsIlFjIiwiUmMiLCJHYiIsIktiIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwiY29udGVudFdpbmRvdyIsImNvbnRlbnREb2N1bWVudCIsIloiLCJjbG9zZSIsInN0YWNrIiwiU2MiLCJSZCIsInB3IiwiU2QiLCJzZXIiLCJmZCIsInNoaWZ0IiwiYWUiLCJmZSIsIlZjIiwicmVtb3ZlIiwiYWRkIiwiYXN5bmMiLCJvbmxvYWQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJvbmVycm9yIiwiV2MiLCJYYyIsImlzQXZhaWxhYmxlIiwibmQiLCJZYyIsIiRjIiwiQmIiLCJUIiwiT2MiLCJjZCIsIkFkIiwiVGMiLCJyZXNwb25zZXNSZXF1aXJlZFRvQmVIZWFsdGh5IiwiYWIiLCJoZWFsdGh5VGltZW91dCIsInRzIiwiaCIsImRkIiwiZ2QiLCJoZCIsImpkIiwid2QiLCJrZCIsIm1kIiwiVSIsIkRiIiwiQWIiLCJTIiwiR2MiLCIkZCIsInZiIiwiVmQiLCJVZCIsInBkIiwicWQiLCJyZCIsImNyZWQiLCJJZCIsInRkIiwidmQiLCJ4ZCIsInpkIiwieWQiLCJYZCIsIkNkIiwiZ2V0VGltZSIsIm9kIiwiQmQiLCJEZCIsImNvbnRhaW5zIiwiJCIsIkZiIiwiSmQiLCJLZCIsIkxkIiwiTWQiLCJiZSIsIk5kIiwiT2QiLCJQZCIsIlFkIiwidGIiLCJFIiwiRyIsIldkIiwiViIsIllkIiwiWmQiLCJGYyIsImNlIiwiWCIsImRlIiwiZWUiLCJoZSIsIm5lIiwib2UiLCJwZSIsInFlIiwicmUiLCJzZSIsInRlIiwibWUiLCJzZXRBY3RpdmUiLCJ1ZSIsInZlIiwibGUiLCJ3ZSIsInhlIiwieWUiLCJ6ZSIsIkFlIiwiQmUiLCJDZSIsInRpbWVzdGFtcCIsIkVlIiwiRmUiLCJEZSIsIkdlIiwiSGUiLCJJZSIsIkplIiwiZGVwcmVjYXRlZF9vbl9kaXNjb25uZWN0IiwiS2UiLCJMZSIsIk1lIiwiTmUiLCJPZSIsIlBlIiwieGIiLCJRZSIsImhhc2giLCJSZSIsInB1dCIsIlNlIiwiVGUiLCJVZSIsInByb3RvY29sIiwiXCIiLCJcXCIsIi8iLCJcYiIsIlxmIiwiXG4iLCJcciIsIlx0IiwiXHUwMDBiIiwiVWMiLCJsaW1pdCIsInN0YXJ0QXQiLCJlbmRBdCIsInJlZHVjZSIsImV2ZXJ5IiwibmF2aWdhdG9yIiwidXNlckFnZW50Iiwib3BlcmEiLCJleGVjIiwiZG9jdW1lbnRNb2RlIiwicGFyc2VGbG9hdCIsIi52YWx1ZSIsIi5wcmlvcml0eSIsImV4cG9ydFZhbCIsImhhc0NoaWxkIiwiZ2V0UHJpb3JpdHkiLCJoYXNDaGlsZHJlbiIsIm51bUNoaWxkcmVuIiwiTW96V2ViU29ja2V0IiwiV2ViU29ja2V0Iiwib25vcGVuIiwib25jbG9zZSIsIm9ubWVzc2FnZSIsIm1lc3NhZ2UiLCJkZnJhbWUiLCJjaHJvbWUiLCJleHRlbnNpb24iLCJXaW5kb3dzIiwiaW5uZXJIVE1MIiwiYXRvYiIsIm1zZyIsInNlcnZlclRpbWVPZmZzZXQiLCJkZWZhdWx0VmlldyIsImludGVycnVwdCIsInJlc3VtZSIsImhpamFja0hhc2giLCJxdWVyeUlkZW50aWZpZXIiLCJsaXN0ZW5zIiwicmVmQ29ubmVjdGlvbiIsIkRhdGFDb25uZWN0aW9uIiwic2VuZFJlcXVlc3QiLCJSZWFsVGltZUNvbm5lY3Rpb24iLCJDb25uZWN0aW9uVGFyZ2V0IiwiZm9yY2VMb25nUG9sbGluZyIsImZvcmNlV2ViU29ja2V0cyIsInNldFNlY3VyaXR5RGVidWdDYWxsYmFjayIsInN0YXRzIiwic3RhdHNJbmNyZW1lbnRDb3VudGVyIiwiaW50ZXJjZXB0U2VydmVyRGF0YSIsInNldFdpdGhQcmlvcml0eSIsIlZlIiwiV2UiLCJYZSIsIlllIiwiZXhlY1NjcmlwdCIsIlplIiwicm9vdCIsInRyYW5zYWN0aW9uIiwic2V0UHJpb3JpdHkiLCJvbkRpc2Nvbm5lY3QiLCJyZW1vdmVPbkRpc2Nvbm5lY3QiLCJzZXRPbkRpc2Nvbm5lY3QiLCJ1bmF1dGgiLCJnb09mZmxpbmUiLCJnb09ubGluZSIsImVuYWJsZUxvZ2dpbmciLCJTZXJ2ZXJWYWx1ZSIsIlRJTUVTVEFNUCIsIi5zdiIsIklOVEVSTkFMIiwiQ29udGV4dCIsMjEsImRlZmluZSIsImFtZCIsInRvVGl0bGVDYXNlIiwic2FuaXRpemVSdWxlIiwicnVsZSIsInJlc3RvcmVDYXNlIiwid29yZCIsInRva2VuIiwiaW50ZXJwb2xhdGUiLCJhcmdzIiwic2FuaXRpemVXb3JkIiwiY29sbGVjdGlvbiIsInVuY291bnRhYmxlcyIsInJlc3VsdCIsInJlcGxhY2VXb3JkIiwicmVwbGFjZU1hcCIsImtlZXBNYXAiLCJydWxlcyIsImluY2x1c2l2ZSIsInBsdXJhbGl6ZWQiLCJzaW5ndWxhciIsInBsdXJhbCIsInBsdXJhbFJ1bGVzIiwic2luZ3VsYXJSdWxlcyIsImlycmVndWxhclBsdXJhbHMiLCJpcnJlZ3VsYXJTaW5nbGVzIiwiYWRkUGx1cmFsUnVsZSIsInJlcGxhY2VtZW50IiwiYWRkU2luZ3VsYXJSdWxlIiwiYWRkVW5jb3VudGFibGVSdWxlIiwiYWRkSXJyZWd1bGFyUnVsZSIsInNpbmdsZSIsMjIsIkxvY2F0aW9uQWN0aW9ucyIsIlBVU0giLCJSRVBMQUNFIiwiUE9QIiwyMywiSW1pdGF0ZUJyb3dzZXJCZWhhdmlvciIsInVwZGF0ZVNjcm9sbFBvc2l0aW9uIiwicG9zaXRpb24iLCJhY3Rpb25UeXBlIiwic2Nyb2xsVG8iLCIuLi9hY3Rpb25zL0xvY2F0aW9uQWN0aW9ucyIsMjQsIlNjcm9sbFRvVG9wQmVoYXZpb3IiLDI1LCJGYWtlTm9kZSIsIlByb3BUeXBlcyIsInByb3BUeXBlcyIsImZhbHN5IiwiZnVuYyIsImlzUmVxdWlyZWQiLCIuLi9taXhpbnMvRmFrZU5vZGUiLCIuLi91dGlscy9Qcm9wVHlwZXMiLDI2LCJpc0xlZnRDbGlja0V2ZW50IiwiYnV0dG9uIiwiaXNNb2RpZmllZEV2ZW50IiwibWV0YUtleSIsImFsdEtleSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImNsYXNzU2V0IiwiYXNzaWduIiwiTmF2aWdhdGlvbiIsIlN0YXRlIiwiYWN0aXZlQ2xhc3NOYW1lIiwicGFyYW1zIiwib2JqZWN0IiwiZ2V0RGVmYXVsdFByb3BzIiwiaGFuZGxlQ2xpY2siLCJjbGlja1Jlc3VsdCIsImFsbG93VHJhbnNpdGlvbiIsImRlZmF1bHRQcmV2ZW50ZWQiLCJ0cmFuc2l0aW9uVG8iLCJnZXRIcmVmIiwibWFrZUhyZWYiLCJnZXRDbGFzc05hbWUiLCJjbGFzc05hbWVzIiwiaXNBY3RpdmUiLCJET00iLCIuLi9taXhpbnMvTmF2aWdhdGlvbiIsIi4uL21peGlucy9TdGF0ZSIsInJlYWN0L2xpYi9PYmplY3QuYXNzaWduIiwicmVhY3QvbGliL2N4IiwyNywiTm90Rm91bmRSb3V0ZSIsMjgsIlJlZGlyZWN0IiwiZnJvbSIsMjksImlnbm9yZVNjcm9sbEJlaGF2aW9yIiwiYm9vbCIsMzAsIlJvdXRlSGFuZGxlck1peGluIiwiZ2V0Um91dGVIYW5kbGVyIiwiLi4vbWl4aW5zL1JvdXRlSGFuZGxlciIsMzEsIkhhc2hMb2NhdGlvbiIsIlJlZnJlc2hMb2NhdGlvbiIsImNyZWF0ZSIsIkhpc3RvcnkiLCIuL2JlaGF2aW9ycy9JbWl0YXRlQnJvd3NlckJlaGF2aW9yIiwiLi9iZWhhdmlvcnMvU2Nyb2xsVG9Ub3BCZWhhdmlvciIsIi4vY29tcG9uZW50cy9EZWZhdWx0Um91dGUiLCIuL2NvbXBvbmVudHMvTGluayIsIi4vY29tcG9uZW50cy9Ob3RGb3VuZFJvdXRlIiwiLi9jb21wb25lbnRzL1JlZGlyZWN0IiwiLi9jb21wb25lbnRzL1JvdXRlIiwiLi9jb21wb25lbnRzL1JvdXRlSGFuZGxlciIsIi4vbG9jYXRpb25zL0hhc2hMb2NhdGlvbiIsIi4vbG9jYXRpb25zL0hpc3RvcnlMb2NhdGlvbiIsIi4vbG9jYXRpb25zL1JlZnJlc2hMb2NhdGlvbiIsIi4vbWl4aW5zL05hdmlnYXRpb24iLCIuL21peGlucy9TdGF0ZSIsIi4vdXRpbHMvSGlzdG9yeSIsIi4vdXRpbHMvY3JlYXRlUm91dGVyIiwiLi91dGlscy9ydW5Sb3V0ZXIiLDMyLCJnZXRIYXNoUGF0aCIsIlBhdGgiLCJlbnN1cmVTbGFzaCIsIm5vdGlmeUNoYW5nZSIsImNoYW5nZSIsIl9jaGFuZ2VMaXN0ZW5lcnMiLCJsaXN0ZW5lciIsIm9uSGFzaENoYW5nZSIsIl9hY3Rpb25UeXBlIiwiX2lzTGlzdGVuaW5nIiwiYWRkQ2hhbmdlTGlzdGVuZXIiLCJyZW1vdmVDaGFuZ2VMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudCIsImJhY2siLCJnZXRDdXJyZW50UGF0aCIsIi4uL3V0aWxzL0hpc3RvcnkiLCIuLi91dGlscy9QYXRoIiwzMywiZ2V0V2luZG93UGF0aCIsInNlYXJjaCIsIm9uUG9wU3RhdGUiLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwicmVwbGFjZVN0YXRlIiwzNCwiLi9IaXN0b3J5TG9jYXRpb24iLDM1LCJpbnZhcmlhbnQiLCJyZWFjdC9saWIvaW52YXJpYW50IiwzNiwiY29udGV4dFR5cGVzIiwibWFrZVBhdGgiLCJyZXBsYWNlV2l0aCIsImdvQmFjayIsImNvbnRleHQiLDM3LCJOYXZpZ2F0aW9uQ29udGV4dCIsImNoaWxkQ29udGV4dFR5cGVzIiwiZ2V0Q2hpbGRDb250ZXh0IiwzOCwiZ2V0Um91dGVBdERlcHRoIiwiZ2V0Um91dGVDb21wb25lbnRzIiwicm91dGVIYW5kbGVycyIsImFycmF5IiwiZ2V0Um91dGVEZXB0aCIsIl91cGRhdGVSb3V0ZUNvbXBvbmVudCIsImNvbXBvbmVudERpZFVwZGF0ZSIsImRlcHRoIiwiY29tcG9uZW50cyIsInJvdXRlIiwzOSwic2hvdWxkVXBkYXRlU2Nyb2xsIiwicHJldlN0YXRlIiwicHJldlJvdXRlcyIsInNoYXJlZEFuY2VzdG9yUm91dGVzIiwic29tZSIsImNhblVzZURPTSIsImdldFdpbmRvd1Njcm9sbFBvc2l0aW9uIiwiU2Nyb2xsaW5nIiwic3RhdGljcyIsInJlY29yZFNjcm9sbFBvc2l0aW9uIiwic2Nyb2xsSGlzdG9yeSIsImdldFNjcm9sbFBvc2l0aW9uIiwiZ2V0U2Nyb2xsQmVoYXZpb3IiLCJfdXBkYXRlU2Nyb2xsIiwicHJldlByb3BzIiwic2Nyb2xsQmVoYXZpb3IiLCIuLi91dGlscy9nZXRXaW5kb3dTY3JvbGxQb3NpdGlvbiIsInJlYWN0L2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCIsNDAsImdldEN1cnJlbnRSb3V0ZXMiLCJnZXRDdXJyZW50UGF0aG5hbWUiLCJnZXRDdXJyZW50UGFyYW1zIiwiZ2V0Q3VycmVudFF1ZXJ5IiwiZ2V0UGF0aCIsImdldFJvdXRlcyIsImdldFBhdGhuYW1lIiwiZ2V0UGFyYW1zIiwiZ2V0UXVlcnkiLDQxLCJyb3V0ZUlzQWN0aXZlIiwiYWN0aXZlUm91dGVzIiwicm91dGVOYW1lIiwicGFyYW1zQXJlQWN0aXZlIiwiYWN0aXZlUGFyYW1zIiwicHJvcGVydHkiLCJxdWVyeUlzQWN0aXZlIiwiYWN0aXZlUXVlcnkiLCJTdGF0ZUNvbnRleHQiLCJpc0Fic29sdXRlIiw0MiwiQ2FuY2VsbGF0aW9uIiw0Myw0NCwiY29tcGlsZVBhdHRlcm4iLCJwYXR0ZXJuIiwiX2NvbXBpbGVkUGF0dGVybnMiLCJwYXJhbU5hbWVzIiwicGFyYW1Db21waWxlTWF0Y2hlciIsInBhcmFtTmFtZSIsIm1hdGNoZXIiLCJtZXJnZSIsInFzIiwicGFyYW1JbmplY3RNYXRjaGVyIiwicGFyYW1JbmplY3RUcmFpbGluZ1NsYXNoTWF0Y2hlciIsInF1ZXJ5TWF0Y2hlciIsImRlY29kZVVSSSIsImVuY29kZVVSSSIsImV4dHJhY3RQYXJhbU5hbWVzIiwiZXh0cmFjdFBhcmFtcyIsImluamVjdFBhcmFtcyIsInNwbGF0SW5kZXgiLCJzZWdtZW50IiwiZXh0cmFjdFF1ZXJ5Iiwid2l0aG91dFF1ZXJ5Iiwid2l0aFF1ZXJ5IiwiZXhpc3RpbmdRdWVyeSIsInF1ZXJ5U3RyaW5nIiwibm9ybWFsaXplIiwicXMvbGliL3V0aWxzIiw0NSwiUHJvbWlzZSIsIndoZW4vbGliL1Byb21pc2UiLDQ2LCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLDQ3LDQ4LCJydW5Ib29rcyIsImhvb2tzIiwiY2FsbGJhY2siLCJwcm9taXNlIiwiaG9vayIsInRoZW4iLCJydW5UcmFuc2l0aW9uRnJvbUhvb2tzIiwidHJhbnNpdGlvbiIsInJldmVyc2VkQXJyYXkiLCJpc0Fib3J0ZWQiLCJ3aWxsVHJhbnNpdGlvbkZyb20iLCJfcHJvbWlzZSIsInJ1blRyYW5zaXRpb25Ub0hvb2tzIiwid2lsbFRyYW5zaXRpb25UbyIsIlRyYW5zaXRpb24iLCJyZXRyeSIsImFib3J0UmVhc29uIiwiYWJvcnQiLCJyZWFzb24iLCJ3YWl0IiwicmVzb2x2ZSIsIi4vUHJvbWlzZSIsIi4vUmVkaXJlY3QiLCIuL3JldmVyc2VkQXJyYXkiLDQ5LCJkZWZhdWx0RXJyb3JIYW5kbGVyIiwiZGVmYXVsdEFib3J0SGFuZGxlciIsImZpbmRNYXRjaCIsImRlZmF1bHRSb3V0ZSIsIm5vdEZvdW5kUm91dGUiLCJjaGlsZFJvdXRlcyIsImNyZWF0ZU1hdGNoIiwiaGFzUHJvcGVydGllcyIsInByb3BlcnRpZXMiLCJwcm9wZXJ0eU5hbWUiLCJoYXNNYXRjaCIsInByZXZQYXJhbXMiLCJuZXh0UGFyYW1zIiwicHJldlF1ZXJ5IiwibmV4dFF1ZXJ5IiwiY3JlYXRlUm91dGVyIiwidXBkYXRlU3RhdGUiLCJuZXh0U3RhdGUiLCJuYW1lZFJvdXRlcyIsIkRFRkFVTFRfTE9DQVRJT04iLCJERUZBVUxUX1NDUk9MTF9CRUhBVklPUiIsIm9uRXJyb3IiLCJvbkFib3J0IiwicGVuZGluZ1RyYW5zaXRpb24iLCJ3YXJuaW5nIiwiTk9ERV9FTlYiLCJzdXBwb3J0c0hpc3RvcnkiLCJyb3V0ZXIiLCJhZGRSb3V0ZXMiLCJjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4iLCJkaXNwYXRjaCIsInByZXZQYXRoIiwiZnJvbVJvdXRlcyIsInRvUm91dGVzIiwibmV4dFJvdXRlcyIsImRpc3BhdGNoSGFuZGxlciIsImNoYW5nZUxpc3RlbmVyIiwidGVhcmRvd24iLCJnZXRMb2NhdGlvbiIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIi4uL2JlaGF2aW9ycy9JbWl0YXRlQnJvd3NlckJlaGF2aW9yIiwiLi4vY29tcG9uZW50cy9Sb3V0ZUhhbmRsZXIiLCIuLi9sb2NhdGlvbnMvSGFzaExvY2F0aW9uIiwiLi4vbG9jYXRpb25zL0hpc3RvcnlMb2NhdGlvbiIsIi4uL2xvY2F0aW9ucy9SZWZyZXNoTG9jYXRpb24iLCIuLi9taXhpbnMvTmF2aWdhdGlvbkNvbnRleHQiLCIuLi9taXhpbnMvU2Nyb2xsaW5nIiwiLi4vbWl4aW5zL1N0YXRlQ29udGV4dCIsIi4vQ2FuY2VsbGF0aW9uIiwiLi9IaXN0b3J5IiwiLi9QYXRoIiwiLi9Qcm9wVHlwZXMiLCIuL1RyYW5zaXRpb24iLCIuL2NyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiIsIi4vc3VwcG9ydHNIaXN0b3J5IiwiX3Byb2Nlc3MiLCJyZWFjdC9saWIvd2FybmluZyIsNTAsImNyZWF0ZVJlZGlyZWN0SGFuZGxlciIsIl9wYXJhbXMiLCJfcXVlcnkiLCJjaGVja1Byb3BUeXBlcyIsImNyZWF0ZVJvdXRlIiwiZWxlbWVudCIsInBhcmVudFJvdXRlIiwiQ09ORklHX0VMRU1FTlRfVFlQRVMiLCJwYXJlbnRQYXRoIiwiQ2hpbGRyZW4iLCIuLi9jb21wb25lbnRzL0RlZmF1bHRSb3V0ZSIsIi4uL2NvbXBvbmVudHMvTm90Rm91bmRSb3V0ZSIsIi4uL2NvbXBvbmVudHMvUmVkaXJlY3QiLCIuLi9jb21wb25lbnRzL1JvdXRlIiw1MSwicGFnZVhPZmZzZXQiLCJkb2N1bWVudEVsZW1lbnQiLCJzY3JvbGxMZWZ0IiwicGFnZVlPZmZzZXQiLCJzY3JvbGxUb3AiLDUyLDUzLCJydW5Sb3V0ZXIiLCIuL2NyZWF0ZVJvdXRlciIsNTQsNTUsIi4vbGliIiw1NiwiU3RyaW5naWZ5IiwiUGFyc2UiLCIuL3BhcnNlIiwiLi9zdHJpbmdpZnkiLDU3LCJVdGlscyIsImludGVybmFscyIsImRlbGltaXRlciIsImFycmF5TGltaXQiLCJwYXJhbWV0ZXJMaW1pdCIsInBhcnNlVmFsdWVzIiwib2JqIiwicGFydHMiLCJpbCIsInBhcnQiLCJwYXJzZU9iamVjdCIsImNoYWluIiwiY2xlYW5Sb290IiwicGFyc2VLZXlzIiwiaXNSZWdFeHAiLCJ0ZW1wT2JqIiwibmV3T2JqIiwiY29tcGFjdCIsIi4vdXRpbHMiLDU4LCJwcmVmaXgiLCJ0b0lTT1N0cmluZyIsInZhbHVlcyIsNTksImFycmF5VG9PYmplY3QiLCJrbCIsImNvbXBhY3RlZCIsNjAsIm1ha2VQcm9taXNlIiwiU2NoZWR1bGVyIiwic2NoZWR1bGVyIiwiZmFjdG9yeSIsIi4vU2NoZWR1bGVyIiwiLi9hc3luYyIsIi4vbWFrZVByb21pc2UiLDYxLCJRdWV1ZSIsImNhcGFjaXR5UG93MiIsImhlYWQiLCJ0YWlsIiwiX2Vuc3VyZUNhcGFjaXR5IiwiY2FwYWNpdHkiLCJuZXdCdWZmZXIiLDYyLCJfYXN5bmMiLCJfcXVldWUiLCJfYWZ0ZXJRdWV1ZSIsIl9ydW5uaW5nIiwiZHJhaW4iLCJfZHJhaW4iLCJydW5RdWV1ZSIsImVucXVldWUiLCJ0YXNrIiwiX2FkZCIsImFmdGVyUXVldWUiLCIuL1F1ZXVlIiw2MywiTXV0YXRpb25PYnMiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsInNjaGVkdWxlZCIsImVsIiwib2JzZXJ2ZSIsImF0dHJpYnV0ZXMiLCJzZXRBdHRyaWJ1dGUiLCJjanNSZXF1aXJlIiwidmVydHgiLCJpZ25vcmUiLCJydW5Pbkxvb3AiLCJydW5PbkNvbnRleHQiLCJjYXB0dXJlZFNldFRpbWVvdXQiLDY0LCJlbnZpcm9ubWVudCIsInJlc29sdmVyIiwiX2hhbmRsZXIiLCJpbml0IiwicHJvbWlzZVJlc29sdmUiLCJwcm9taXNlUmVqZWN0IiwicmVqZWN0IiwicHJvbWlzZU5vdGlmeSIsIm5vdGlmeSIsIlBlbmRpbmciLCJpc1Byb21pc2UiLCJBc3luYyIsImdldEhhbmRsZXIiLCJSZWplY3RlZCIsIm5ldmVyIiwiZm9yZXZlclBlbmRpbmdQcm9taXNlIiwiZGVmZXIiLCJhbGwiLCJwcm9taXNlcyIsInNldHRsZUF0IiwicGVuZGluZyIsImJlY29tZSIsIkZ1bGZpbGxlZCIsInJlc3VsdHMiLCJtYXliZVRoZW5hYmxlIiwiZ2V0SGFuZGxlck1heWJlVGhlbmFibGUiLCJmb2xkIiwidW5yZXBvcnRSZW1haW5pbmciLCJyZWplY3RlZEhhbmRsZXIiLCJ2aXNpdCIsIl91bnJlcG9ydCIsInJhY2UiLCJnZXRIYW5kbGVyVW50cnVzdGVkIiwidW50cnVzdGVkVGhlbiIsIlRoZW5hYmxlIiwiRmFpbElmUmVqZWN0ZWQiLCJyZWNlaXZlciIsImluaGVyaXRlZENvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiY29uc3VtZXJzIiwicmVzb2x2ZWQiLCJ0aGVuYWJsZSIsInRhc2tzIiwiQXNzaW1pbGF0ZVRhc2siLCJlcnJvcklkIiwiaGFuZGxlZCIsInJlcG9ydGVkIiwiX3JlcG9ydCIsIlJlcG9ydFRhc2siLCJyZWplY3Rpb24iLCJVbnJlcG9ydFRhc2siLCJjeWNsZSIsIkNvbnRpbnVhdGlvblRhc2siLCJjb250aW51YXRpb24iLCJQcm9ncmVzc1Rhc2siLCJfdGhlbiIsInRyeUFzc2ltaWxhdGUiLCJydW5Db250aW51YXRpb24xIiwibmV4dCIsImVudGVyQ29udGV4dCIsInRyeUNhdGNoUmVqZWN0IiwiZXhpdENvbnRleHQiLCJydW5Db250aW51YXRpb24zIiwidHJ5Q2F0Y2hSZWplY3QzIiwicnVuTm90aWZ5IiwidHJ5Q2F0Y2hSZXR1cm4iLCJ0aGlzQXJnIiwiaW5oZXJpdCIsIlBhcmVudCIsIkNoaWxkIiwib2JqZWN0Q3JlYXRlIiwicHJvdG8iLCJfZGVmZXIiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJfYmVnZXQiLCJ3aGVuIiwiZmFpbCIsIl9zdGF0ZSIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwicHJvZ3Jlc3MiLCJmYWlsSWZSZWplY3RlZCIsImNvbnQiLCJvbkZhdGFsUmVqZWN0aW9uIiwib25Qb3RlbnRpYWxseVVuaGFuZGxlZFJlamVjdGlvbiIsIm9uUG90ZW50aWFsbHlVbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVkIiwiZm9yZXZlclBlbmRpbmdIYW5kbGVyIiwiX3Jlc29sdmUiLCJfcmVqZWN0IiwiX25vdGlmeSIsNjUsIl8iLCJJbnB1dCIsImNsYXNzZXMiLCJWYWx1ZSIsInJlcXVlc3RJZCIsImFueSIsIm11bHRpIiwiYXN5bmNPcHRpb25zIiwiYXV0b2xvYWQiLCJub1Jlc3VsdHNUZXh0IiwiY2xlYXJhYmxlIiwiY2xlYXJWYWx1ZVRleHQiLCJjbGVhckFsbFRleHQiLCJzZWFyY2hQcm9tcHRUZXh0IiwiZmlsdGVyT3B0aW9uIiwiZmlsdGVyT3B0aW9ucyIsIm1hdGNoUG9zIiwibWF0Y2hQcm9wIiwiaXNGb2N1c2VkIiwiaXNPcGVuIiwiaXNMb2FkaW5nIiwiX29wdGlvbnNDYWNoZSIsIl9vcHRpb25zRmlsdGVyU3RyaW5nIiwiZ2V0U3RhdGVGcm9tVmFsdWUiLCJhdXRvbG9hZEFzeW5jT3B0aW9ucyIsIl9ibHVyVGltZW91dCIsIl9mb2N1c1RpbWVvdXQiLCJuZXdQcm9wcyIsImZpbHRlcmVkT3B0aW9ucyIsIl9mb2N1c0FmdGVyVXBkYXRlIiwiaW5wdXQiLCJmb2N1cyIsIl9mb2N1c2VkT3B0aW9uUmV2ZWFsIiwiZm9jdXNlZCIsIm1lbnUiLCJmb2N1c2VkRE9NIiwibWVudURPTSIsImZvY3VzZWRSZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibWVudVJlY3QiLCJib3R0b20iLCJ0b3AiLCJvZmZzZXRUb3AiLCJjbGllbnRIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJpbml0VmFsdWVzQXJyYXkiLCJpbnB1dFZhbHVlIiwiZm9jdXNlZE9wdGlvbiIsImZpbmRXaGVyZSIsInNldFZhbHVlIiwibmV3U3RhdGUiLCJmaXJlQ2hhbmdlRXZlbnQiLCJzZWxlY3RWYWx1ZSIsImFkZFZhbHVlIiwicG9wVmFsdWUiLCJpbml0aWFsIiwicmVtb3ZlVmFsdWUiLCJ3aXRob3V0IiwiY2xlYXJWYWx1ZSIsInJlc2V0VmFsdWUiLCJoYW5kbGVNb3VzZURvd24iLCJzdG9wUHJvcGFnYXRpb24iLCJfb3BlbkFmdGVyRm9jdXMiLCJoYW5kbGVJbnB1dEZvY3VzIiwiaGFuZGxlSW5wdXRCbHVyIiwiaGFuZGxlS2V5RG93biIsImtleUNvZGUiLCJzZWxlY3RGb2N1c2VkT3B0aW9uIiwiZm9jdXNQcmV2aW91c09wdGlvbiIsImZvY3VzTmV4dE9wdGlvbiIsImhhbmRsZUlucHV0Q2hhbmdlIiwibG9hZEFzeW5jT3B0aW9ucyIsImNhY2hlS2V5IiwiY29tcGxldGUiLCJleHRlbmQiLCJ0aGlzUmVxdWVzdElkIiwiX2N1cnJlbnRSZXF1ZXN0SWQiLCJmaWx0ZXJWYWx1ZSIsImV4Y2x1ZGUiLCJvcCIsImZvY3VzT3B0aW9uIiwiZm9jdXNBZGphY2VudE9wdGlvbiIsImRpciIsIm9wcyIsImZvY3VzZWRJbmRleCIsInVuZm9jdXNPcHRpb24iLCJidWlsZE1lbnUiLCJmb2N1c2VkVmFsdWUiLCJvcHRpb25DbGFzcyIsIlNlbGVjdC1vcHRpb24iLCJpcy1mb2N1c2VkIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJtb3VzZURvd24iLCJvbk1vdXNlRW50ZXIiLCJvbk1vdXNlTGVhdmUiLCJvbk1vdXNlRG93biIsInNlbGVjdENsYXNzIiwiaXMtbXVsdGkiLCJpcy1vcGVuIiwiaXMtbG9hZGluZyIsImhhcy12YWx1ZSIsIm9uUmVtb3ZlIiwibG9hZGluZyIsImFyaWEtaGlkZGVuIiwiY2xlYXIiLCJhcmlhLWxhYmVsIiwib25LZXlEb3duIiwib25Ub3VjaEVuZCIsInRhYkluZGV4Iiwib25Gb2N1cyIsIm9uQmx1ciIsIm1pbldpZHRoIiwiLi9WYWx1ZSIsImNsYXNzbmFtZXMiLCJyZWFjdC1pbnB1dC1hdXRvc2l6ZSIsInVuZGVyc2NvcmUiLDY2LCJPcHRpb24iLCJibG9ja0V2ZW50Iiw2NywiYXJnIiw2OCwic2l6ZXJTdHlsZSIsInZpc2liaWxpdHkiLCJoZWlnaHQiLCJ3aWR0aCIsIm92ZXJmbG93Iiwid2hpdGVTcGFjZSIsIkF1dG9zaXplSW5wdXQiLCJkZWZhdWx0VmFsdWUiLCJpbnB1dFN0eWxlIiwiaW5wdXRDbGFzc05hbWUiLCJpbnB1dFdpZHRoIiwiY29weUlucHV0U3R5bGVzIiwidXBkYXRlSW5wdXRXaWR0aCIsImdldENvbXB1dGVkU3R5bGUiLCJ3aWR0aE5vZGUiLCJzaXplciIsImZvbnRTaXplIiwiZm9udEZhbWlseSIsIm5ld0lucHV0V2lkdGgiLCJzY3JvbGxXaWR0aCIsImdldElucHV0Iiwic2VsZWN0IiwibmJzcFZhbHVlIiwid3JhcHBlclN0eWxlIiwiX19zcHJlYWQiLDY5LCJwcmV2aW91c1VuZGVyc2NvcmUiLCJBcnJheVByb3RvIiwiT2JqUHJvdG8iLCJGdW5jUHJvdG8iLCJuYXRpdmVJc0FycmF5IiwibmF0aXZlS2V5cyIsIm5hdGl2ZUJpbmQiLCJfd3JhcHBlZCIsIlZFUlNJT04iLCJjcmVhdGVDYWxsYmFjayIsImFyZ0NvdW50Iiwib3RoZXIiLCJhY2N1bXVsYXRvciIsIml0ZXJhdGVlIiwiaWRlbnRpdHkiLCJpc0Z1bmN0aW9uIiwiaXNPYmplY3QiLCJtYXRjaGVzIiwiZWFjaCIsImNvbGxlY3QiLCJjdXJyZW50S2V5IiwicmVkdWNlRXJyb3IiLCJmb2xkbCIsImluamVjdCIsIm1lbW8iLCJyZWR1Y2VSaWdodCIsImZvbGRyIiwiZmluZCIsImRldGVjdCIsInByZWRpY2F0ZSIsIm5lZ2F0ZSIsImluY2x1ZGUiLCJpbnZva2UiLCJpc0Z1bmMiLCJwbHVjayIsIndoZXJlIiwiYXR0cnMiLCJjb21wdXRlZCIsImxhc3RDb21wdXRlZCIsInNodWZmbGUiLCJyYW5kIiwic2h1ZmZsZWQiLCJzYW1wbGUiLCJndWFyZCIsInNvcnRCeSIsImNyaXRlcmlhIiwiZ3JvdXAiLCJiZWhhdmlvciIsImdyb3VwQnkiLCJoYXMiLCJpbmRleEJ5IiwiY291bnRCeSIsInNvcnRlZEluZGV4IiwibG93IiwiaGlnaCIsIm1pZCIsInRvQXJyYXkiLCJzaXplIiwicGFydGl0aW9uIiwicGFzcyIsImZpcnN0IiwidGFrZSIsImxhc3QiLCJyZXN0IiwiZHJvcCIsImZsYXR0ZW4iLCJzaGFsbG93Iiwic3RyaWN0IiwiaXNBcmd1bWVudHMiLCJkaWZmZXJlbmNlIiwidW5pcSIsInVuaXF1ZSIsImlzU29ydGVkIiwiaXNCb29sZWFuIiwic2VlbiIsInVuaW9uIiwiaW50ZXJzZWN0aW9uIiwiYXJnc0xlbmd0aCIsInppcCIsImlkeCIsInJhbmdlIiwic3RvcCIsInN0ZXAiLCJjZWlsIiwiQ3RvciIsImJvdW5kIiwicGFydGlhbCIsImJvdW5kQXJncyIsImJpbmRBbGwiLCJtZW1vaXplIiwiaGFzaGVyIiwiY2FjaGUiLCJhZGRyZXNzIiwiZGVsYXkiLCJ0aHJvdHRsZSIsInRpbWVvdXQiLCJwcmV2aW91cyIsImxhdGVyIiwibGVhZGluZyIsIm5vdyIsInRyYWlsaW5nIiwiZGVib3VuY2UiLCJpbW1lZGlhdGUiLCJjYWxsTm93Iiwid3JhcCIsIndyYXBwZXIiLCJjb21wb3NlIiwidGltZXMiLCJwYWlycyIsImludmVydCIsImZ1bmN0aW9ucyIsIm1ldGhvZHMiLCJuYW1lcyIsInByb3AiLCJwaWNrIiwib21pdCIsImRlZmF1bHRzIiwiY2xvbmUiLCJ0YXAiLCJpbnRlcmNlcHRvciIsImVxIiwiYVN0YWNrIiwiYlN0YWNrIiwiYUN0b3IiLCJiQ3RvciIsImlzRXF1YWwiLCJpc0VtcHR5IiwiaXNTdHJpbmciLCJpc0VsZW1lbnQiLCJub2RlVHlwZSIsImlzTnVtYmVyIiwiaXNOdWxsIiwiaXNVbmRlZmluZWQiLCJub0NvbmZsaWN0IiwiY29uc3RhbnQiLCJwYWlyIiwiYWNjdW0iLCJlc2NhcGVNYXAiLCImIiwiPCIsIj4iLCInIiwiYCIsInVuZXNjYXBlTWFwIiwiY3JlYXRlRXNjYXBlciIsImVzY2FwZXIiLCJ0ZXN0UmVnZXhwIiwicmVwbGFjZVJlZ2V4cCIsImVzY2FwZSIsInVuZXNjYXBlIiwiaWRDb3VudGVyIiwidW5pcXVlSWQiLCJ0ZW1wbGF0ZVNldHRpbmdzIiwiZXZhbHVhdGUiLCJub01hdGNoIiwiZXNjYXBlcyIsIuKAqCIsIuKAqSIsImVzY2FwZUNoYXIiLCJ0ZW1wbGF0ZSIsInRleHQiLCJzZXR0aW5ncyIsIm9sZFNldHRpbmdzIiwidmFyaWFibGUiLCJhcmd1bWVudCIsImluc3RhbmNlIiwiX2NoYWluIiwibWl4aW4iLDcwLCJmb2N1c05vZGUiLCJBdXRvRm9jdXNNaXhpbiIsImF1dG9Gb2N1cyIsIi4vZm9jdXNOb2RlIiw3MSwiaXNQcmVzdG8iLCJpc0tleXByZXNzQ29tbWFuZCIsIm5hdGl2ZUV2ZW50IiwiRXZlbnRDb25zdGFudHMiLCJFdmVudFByb3BhZ2F0b3JzIiwiRXhlY3V0aW9uRW52aXJvbm1lbnQiLCJTeW50aGV0aWNJbnB1dEV2ZW50Iiwia2V5T2YiLCJjYW5Vc2VUZXh0SW5wdXRFdmVudCIsIlNQQUNFQkFSX0NPREUiLCJTUEFDRUJBUl9DSEFSIiwidG9wTGV2ZWxUeXBlcyIsImV2ZW50VHlwZXMiLCJiZWZvcmVJbnB1dCIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwiYnViYmxlZCIsIm9uQmVmb3JlSW5wdXQiLCJjYXB0dXJlZCIsIm9uQmVmb3JlSW5wdXRDYXB0dXJlIiwiZGVwZW5kZW5jaWVzIiwidG9wQ29tcG9zaXRpb25FbmQiLCJ0b3BLZXlQcmVzcyIsInRvcFRleHRJbnB1dCIsInRvcFBhc3RlIiwiZmFsbGJhY2tDaGFycyIsImhhc1NwYWNlS2V5cHJlc3MiLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwiZXh0cmFjdEV2ZW50cyIsInRvcExldmVsVHlwZSIsInRvcExldmVsVGFyZ2V0IiwidG9wTGV2ZWxUYXJnZXRJRCIsImNoYXJzIiwid2hpY2giLCJnZXRQb29sZWQiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzIiwiLi9FdmVudENvbnN0YW50cyIsIi4vRXZlbnRQcm9wYWdhdG9ycyIsIi4vRXhlY3V0aW9uRW52aXJvbm1lbnQiLCIuL1N5bnRoZXRpY0lucHV0RXZlbnQiLCIuL2tleU9mIiw3MiwicHJlZml4S2V5IiwiaXNVbml0bGVzc051bWJlciIsImNvbHVtbkNvdW50IiwiZmxleCIsImZsZXhHcm93IiwiZmxleFNocmluayIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsInN0cm9rZU9wYWNpdHkiLCJwcmVmaXhlcyIsInNob3J0aGFuZFByb3BlcnR5RXhwYW5zaW9ucyIsImJhY2tncm91bmQiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJiYWNrZ3JvdW5kUG9zaXRpb24iLCJiYWNrZ3JvdW5kUmVwZWF0IiwiYm9yZGVyIiwiYm9yZGVyV2lkdGgiLCJib3JkZXJTdHlsZSIsImJvcmRlckNvbG9yIiwiYm9yZGVyQm90dG9tIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJib3JkZXJCb3R0b21TdHlsZSIsImJvcmRlckJvdHRvbUNvbG9yIiwiYm9yZGVyTGVmdCIsImJvcmRlckxlZnRXaWR0aCIsImJvcmRlckxlZnRTdHlsZSIsImJvcmRlckxlZnRDb2xvciIsImJvcmRlclJpZ2h0IiwiYm9yZGVyUmlnaHRXaWR0aCIsImJvcmRlclJpZ2h0U3R5bGUiLCJib3JkZXJSaWdodENvbG9yIiwiYm9yZGVyVG9wIiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJUb3BTdHlsZSIsImJvcmRlclRvcENvbG9yIiwiZm9udCIsImZvbnRTdHlsZSIsImZvbnRWYXJpYW50IiwiQ1NTUHJvcGVydHkiLDczLCJjYW1lbGl6ZVN0eWxlTmFtZSIsImRhbmdlcm91c1N0eWxlVmFsdWUiLCJoeXBoZW5hdGVTdHlsZU5hbWUiLCJtZW1vaXplU3RyaW5nT25seSIsInByb2Nlc3NTdHlsZU5hbWUiLCJzdHlsZU5hbWUiLCJzdHlsZUZsb2F0QWNjZXNzb3IiLCJjc3NGbG9hdCIsIndhcm5lZFN0eWxlTmFtZXMiLCJ3YXJuSHlwaGVuYXRlZFN0eWxlTmFtZSIsIkNTU1Byb3BlcnR5T3BlcmF0aW9ucyIsImNyZWF0ZU1hcmt1cEZvclN0eWxlcyIsInN0eWxlcyIsInNlcmlhbGl6ZWQiLCJzdHlsZVZhbHVlIiwic2V0VmFsdWVGb3JTdHlsZXMiLCJub2RlIiwiZXhwYW5zaW9uIiwiaW5kaXZpZHVhbFN0eWxlTmFtZSIsIi4vQ1NTUHJvcGVydHkiLCIuL2NhbWVsaXplU3R5bGVOYW1lIiwiLi9kYW5nZXJvdXNTdHlsZVZhbHVlIiwiLi9oeXBoZW5hdGVTdHlsZU5hbWUiLCIuL21lbW9pemVTdHJpbmdPbmx5IiwiLi93YXJuaW5nIiw3NCwiQ2FsbGJhY2tRdWV1ZSIsIl9jYWxsYmFja3MiLCJfY29udGV4dHMiLCJQb29sZWRDbGFzcyIsIm5vdGlmeUFsbCIsImNhbGxiYWNrcyIsImNvbnRleHRzIiwiZGVzdHJ1Y3RvciIsImFkZFBvb2xpbmdUbyIsIi4vT2JqZWN0LmFzc2lnbiIsIi4vUG9vbGVkQ2xhc3MiLCIuL2ludmFyaWFudCIsNzUsInNob3VsZFVzZUNoYW5nZUV2ZW50IiwiZWxlbSIsIm5vZGVOYW1lIiwibWFudWFsRGlzcGF0Y2hDaGFuZ2VFdmVudCIsIlN5bnRoZXRpY0V2ZW50IiwiYWN0aXZlRWxlbWVudElEIiwiUmVhY3RVcGRhdGVzIiwiYmF0Y2hlZFVwZGF0ZXMiLCJydW5FdmVudEluQmF0Y2giLCJFdmVudFBsdWdpbkh1YiIsImVucXVldWVFdmVudHMiLCJwcm9jZXNzRXZlbnRRdWV1ZSIsInN0YXJ0V2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCIsInRhcmdldElEIiwiYWN0aXZlRWxlbWVudCIsInN0b3BXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4IiwiZGV0YWNoRXZlbnQiLCJnZXRUYXJnZXRJREZvckNoYW5nZUV2ZW50IiwidG9wQ2hhbmdlIiwiaGFuZGxlRXZlbnRzRm9yQ2hhbmdlRXZlbnRJRTgiLCJ0b3BGb2N1cyIsInRvcEJsdXIiLCJzdGFydFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UiLCJhY3RpdmVFbGVtZW50VmFsdWUiLCJhY3RpdmVFbGVtZW50VmFsdWVQcm9wIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZGVmaW5lUHJvcGVydHkiLCJuZXdWYWx1ZVByb3AiLCJoYW5kbGVQcm9wZXJ0eUNoYW5nZSIsInN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlIiwic3JjRWxlbWVudCIsImdldFRhcmdldElERm9ySW5wdXRFdmVudCIsInRvcElucHV0IiwiaGFuZGxlRXZlbnRzRm9ySW5wdXRFdmVudElFIiwiZ2V0VGFyZ2V0SURGb3JJbnB1dEV2ZW50SUUiLCJ0b3BTZWxlY3Rpb25DaGFuZ2UiLCJ0b3BLZXlVcCIsInRvcEtleURvd24iLCJzaG91bGRVc2VDbGlja0V2ZW50IiwiZ2V0VGFyZ2V0SURGb3JDbGlja0V2ZW50IiwidG9wQ2xpY2siLCJpc0V2ZW50U3VwcG9ydGVkIiwiaXNUZXh0SW5wdXRFbGVtZW50Iiwib25DaGFuZ2VDYXB0dXJlIiwiZG9lc0NoYW5nZUV2ZW50QnViYmxlIiwiaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJnZXRUYXJnZXRJREZ1bmMiLCJoYW5kbGVFdmVudEZ1bmMiLCIuL0V2ZW50UGx1Z2luSHViIiwiLi9SZWFjdFVwZGF0ZXMiLCIuL1N5bnRoZXRpY0V2ZW50IiwiLi9pc0V2ZW50U3VwcG9ydGVkIiwiLi9pc1RleHRJbnB1dEVsZW1lbnQiLDc2LCJuZXh0UmVhY3RSb290SW5kZXgiLCJDbGllbnRSZWFjdFJvb3RJbmRleCIsImNyZWF0ZVJlYWN0Um9vdEluZGV4Iiw3NywiZ2V0Q29tcG9zaXRpb25FdmVudFR5cGUiLCJ0b3BDb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uRW5kIiwidG9wQ29tcG9zaXRpb25VcGRhdGUiLCJjb21wb3NpdGlvblVwZGF0ZSIsImlzRmFsbGJhY2tTdGFydCIsIlNUQVJUX0tFWUNPREUiLCJpc0ZhbGxiYWNrRW5kIiwiRU5EX0tFWUNPREVTIiwidG9wTW91c2VEb3duIiwiRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlIiwic3RhcnRTZWxlY3Rpb24iLCJSZWFjdElucHV0U2VsZWN0aW9uIiwiZ2V0U2VsZWN0aW9uIiwic3RhcnRWYWx1ZSIsImdldFRleHQiLCJTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50IiwiZ2V0VGV4dENvbnRlbnRBY2Nlc3NvciIsInVzZUNvbXBvc2l0aW9uRXZlbnQiLCJ1c2VGYWxsYmFja0RhdGEiLCJjdXJyZW50Q29tcG9zaXRpb24iLCJvbkNvbXBvc2l0aW9uRW5kIiwib25Db21wb3NpdGlvbkVuZENhcHR1cmUiLCJvbkNvbXBvc2l0aW9uU3RhcnQiLCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlIiwib25Db21wb3NpdGlvblVwZGF0ZSIsIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlIiwiZ2V0RGF0YSIsImVuZFZhbHVlIiwicHJlZml4TGVuZ3RoIiwic3VmZml4TGVuZ3RoIiwiQ29tcG9zaXRpb25FdmVudFBsdWdpbiIsImV2ZW50VHlwZSIsIi4vUmVhY3RJbnB1dFNlbGVjdGlvbiIsIi4vU3ludGhldGljQ29tcG9zaXRpb25FdmVudCIsIi4vZ2V0VGV4dENvbnRlbnRBY2Nlc3NvciIsNzgsImluc2VydENoaWxkQXQiLCJjaGlsZE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJjaGlsZE5vZGVzIiwidXBkYXRlVGV4dENvbnRlbnQiLCJEYW5nZXIiLCJSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcyIsInRleHRDb250ZW50QWNjZXNzb3IiLCJ0ZXh0Q29udGVudCIsImZpcnN0Q2hpbGQiLCJkb2MiLCJvd25lckRvY3VtZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJET01DaGlsZHJlbk9wZXJhdGlvbnMiLCJkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCIsInByb2Nlc3NVcGRhdGVzIiwidXBkYXRlcyIsIm1hcmt1cExpc3QiLCJpbml0aWFsQ2hpbGRyZW4iLCJ1cGRhdGVkQ2hpbGRyZW4iLCJNT1ZFX0VYSVNUSU5HIiwiUkVNT1ZFX05PREUiLCJ1cGRhdGVkSW5kZXgiLCJmcm9tSW5kZXgiLCJ1cGRhdGVkQ2hpbGQiLCJwYXJlbnRJRCIsInJlbmRlcmVkTWFya3VwIiwiZGFuZ2Vyb3VzbHlSZW5kZXJNYXJrdXAiLCJJTlNFUlRfTUFSS1VQIiwibWFya3VwSW5kZXgiLCJ0b0luZGV4IiwiVEVYVF9DT05URU5UIiwiLi9EYW5nZXIiLCIuL1JlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzIiw3OSwiY2hlY2tNYXNrIiwiYml0bWFzayIsIkRPTVByb3BlcnR5SW5qZWN0aW9uIiwiTVVTVF9VU0VfQVRUUklCVVRFIiwiTVVTVF9VU0VfUFJPUEVSVFkiLCJIQVNfU0lERV9FRkZFQ1RTIiwiSEFTX0JPT0xFQU5fVkFMVUUiLCJIQVNfTlVNRVJJQ19WQUxVRSIsIkhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFIiwiSEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRSIsImluamVjdERPTVByb3BlcnR5Q29uZmlnIiwiZG9tUHJvcGVydHlDb25maWciLCJQcm9wZXJ0aWVzIiwiRE9NQXR0cmlidXRlTmFtZXMiLCJET01Qcm9wZXJ0eU5hbWVzIiwiRE9NTXV0YXRpb25NZXRob2RzIiwiaXNDdXN0b21BdHRyaWJ1dGUiLCJET01Qcm9wZXJ0eSIsIl9pc0N1c3RvbUF0dHJpYnV0ZUZ1bmN0aW9ucyIsImlzU3RhbmRhcmROYW1lIiwibG93ZXJDYXNlZCIsImdldFBvc3NpYmxlU3RhbmRhcmROYW1lIiwiYXR0cmlidXRlTmFtZSIsImdldEF0dHJpYnV0ZU5hbWUiLCJnZXRQcm9wZXJ0eU5hbWUiLCJnZXRNdXRhdGlvbk1ldGhvZCIsInByb3BDb25maWciLCJtdXN0VXNlQXR0cmlidXRlIiwibXVzdFVzZVByb3BlcnR5IiwiaGFzU2lkZUVmZmVjdHMiLCJoYXNCb29sZWFuVmFsdWUiLCJoYXNOdW1lcmljVmFsdWUiLCJoYXNQb3NpdGl2ZU51bWVyaWNWYWx1ZSIsImhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWUiLCJkZWZhdWx0VmFsdWVDYWNoZSIsIklEX0FUVFJJQlVURV9OQU1FIiwiaXNDdXN0b21BdHRyaWJ1dGVGbiIsImdldERlZmF1bHRWYWx1ZUZvclByb3BlcnR5IiwidGVzdEVsZW1lbnQiLCJub2RlRGVmYXVsdHMiLCJpbmplY3Rpb24iLDgwLCJzaG91bGRJZ25vcmVWYWx1ZSIsImVzY2FwZVRleHRGb3JCcm93c2VyIiwicHJvY2Vzc0F0dHJpYnV0ZU5hbWVBbmRQcmVmaXgiLCJyZWFjdFByb3BzIiwid2FybmVkUHJvcGVydGllcyIsIndhcm5Vbmtub3duUHJvcGVydHkiLCJsb3dlckNhc2VkTmFtZSIsInN0YW5kYXJkTmFtZSIsIkRPTVByb3BlcnR5T3BlcmF0aW9ucyIsImNyZWF0ZU1hcmt1cEZvcklEIiwiY3JlYXRlTWFya3VwRm9yUHJvcGVydHkiLCJzZXRWYWx1ZUZvclByb3BlcnR5IiwibXV0YXRpb25NZXRob2QiLCJkZWxldGVWYWx1ZUZvclByb3BlcnR5IiwicmVtb3ZlQXR0cmlidXRlIiwiLi9ET01Qcm9wZXJ0eSIsIi4vZXNjYXBlVGV4dEZvckJyb3dzZXIiLDgxLCJnZXROb2RlTmFtZSIsIm1hcmt1cCIsImNyZWF0ZU5vZGVzRnJvbU1hcmt1cCIsImVtcHR5RnVuY3Rpb24iLCJnZXRNYXJrdXBXcmFwIiwiT1BFTl9UQUdfTkFNRV9FWFAiLCJSRVNVTFRfSU5ERVhfQVRUUiIsIm1hcmt1cEJ5Tm9kZU5hbWUiLCJyZXN1bHRMaXN0IiwicmVzdWx0TGlzdEFzc2lnbm1lbnRDb3VudCIsIm1hcmt1cExpc3RCeU5vZGVOYW1lIiwicmVzdWx0SW5kZXgiLCJyZW5kZXJOb2RlcyIsInJlbmRlck5vZGUiLCJoYXNBdHRyaWJ1dGUiLCJnZXRBdHRyaWJ1dGUiLCJvbGRDaGlsZCIsInRhZ05hbWUiLCJuZXdDaGlsZCIsInJlcGxhY2VDaGlsZCIsIi4vY3JlYXRlTm9kZXNGcm9tTWFya3VwIiwiLi9lbXB0eUZ1bmN0aW9uIiwiLi9nZXRNYXJrdXBXcmFwIiw4MiwiRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXIiLCJSZXNwb25kZXJFdmVudFBsdWdpbiIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiVGFwRXZlbnRQbHVnaW4iLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkFuYWx5dGljc0V2ZW50UGx1Z2luIiwiTW9iaWxlU2FmYXJpQ2xpY2tFdmVudFBsdWdpbiIsODMsIlN5bnRoZXRpY01vdXNlRXZlbnQiLCJSZWFjdE1vdW50IiwiZ2V0Rmlyc3RSZWFjdERPTSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJ0b3BNb3VzZU91dCIsInRvcE1vdXNlT3ZlciIsImV4dHJhY3RlZEV2ZW50cyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsIndpbiIsInBhcmVudFdpbmRvdyIsInRvRWxlbWVudCIsImZyb21JRCIsImdldElEIiwidG9JRCIsImxlYXZlIiwiZW50ZXIiLCJhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMiLCIuL1JlYWN0TW91bnQiLCIuL1N5bnRoZXRpY01vdXNlRXZlbnQiLDg0LCJrZXlNaXJyb3IiLCJQcm9wYWdhdGlvblBoYXNlcyIsInRvcENvbnRleHRNZW51IiwidG9wQ29weSIsInRvcEN1dCIsInRvcERvdWJsZUNsaWNrIiwidG9wRHJhZyIsInRvcERyYWdFbmQiLCJ0b3BEcmFnRW50ZXIiLCJ0b3BEcmFnRXhpdCIsInRvcERyYWdMZWF2ZSIsInRvcERyYWdPdmVyIiwidG9wRHJhZ1N0YXJ0IiwidG9wRHJvcCIsInRvcEVycm9yIiwidG9wTG9hZCIsInRvcE1vdXNlTW92ZSIsInRvcE1vdXNlVXAiLCJ0b3BSZXNldCIsInRvcFNjcm9sbCIsInRvcFN1Ym1pdCIsInRvcFRvdWNoQ2FuY2VsIiwidG9wVG91Y2hFbmQiLCJ0b3BUb3VjaE1vdmUiLCJ0b3BUb3VjaFN0YXJ0IiwidG9wV2hlZWwiLCIuL2tleU1pcnJvciIsODUsIkV2ZW50TGlzdGVuZXIiLCJsaXN0ZW4iLCJjYXB0dXJlIiwicmVnaXN0ZXJEZWZhdWx0Iiw4NiwidmFsaWRhdGVJbnN0YW5jZUhhbmRsZSIsImludmFsaWQiLCJJbnN0YW5jZUhhbmRsZSIsInRyYXZlcnNlVHdvUGhhc2UiLCJ0cmF2ZXJzZUVudGVyTGVhdmUiLCJFdmVudFBsdWdpblJlZ2lzdHJ5IiwiRXZlbnRQbHVnaW5VdGlscyIsImFjY3VtdWxhdGVJbnRvIiwiZm9yRWFjaEFjY3VtdWxhdGVkIiwibGlzdGVuZXJCYW5rIiwiZXZlbnRRdWV1ZSIsImV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZSIsImV4ZWN1dGVEaXNwYXRjaCIsIlBsdWdpbk1vZHVsZSIsImdldFBsdWdpbk1vZHVsZUZvckV2ZW50IiwiZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsImluamVjdE1vdW50IiwiaW5qZWN0SW5zdGFuY2VIYW5kbGUiLCJJbmplY3RlZEluc3RhbmNlSGFuZGxlIiwiZ2V0SW5zdGFuY2VIYW5kbGUiLCJpbmplY3RFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lIiwiZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzIiwicmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMiLCJwdXRMaXN0ZW5lciIsImJhbmtGb3JSZWdpc3RyYXRpb25OYW1lIiwiZ2V0TGlzdGVuZXIiLCJkZWxldGVMaXN0ZW5lciIsImRlbGV0ZUFsbExpc3RlbmVycyIsImV2ZW50cyIsInBsdWdpbnMiLCJwb3NzaWJsZVBsdWdpbiIsInByb2Nlc3NpbmdFdmVudFF1ZXVlIiwiX19wdXJnZSIsIl9fZ2V0TGlzdGVuZXJCYW5rIiwiLi9FdmVudFBsdWdpblJlZ2lzdHJ5IiwiLi9FdmVudFBsdWdpblV0aWxzIiwiLi9hY2N1bXVsYXRlSW50byIsIi4vZm9yRWFjaEFjY3VtdWxhdGVkIiw4NywicmVjb21wdXRlUGx1Z2luT3JkZXJpbmciLCJFdmVudFBsdWdpbk9yZGVyIiwicGx1Z2luTmFtZSIsIm5hbWVzVG9QbHVnaW5zIiwicGx1Z2luSW5kZXgiLCJwdWJsaXNoZWRFdmVudHMiLCJldmVudE5hbWUiLCJwdWJsaXNoRXZlbnRGb3JQbHVnaW4iLCJkaXNwYXRjaENvbmZpZyIsInBoYXNlTmFtZSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWUiLCJwdWJsaXNoUmVnaXN0cmF0aW9uTmFtZSIsInJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMiLCJJbmplY3RlZEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RlZE5hbWVzVG9QbHVnaW5zIiwiaXNPcmRlcmluZ0RpcnR5IiwicGhhc2UiLCJfcmVzZXRFdmVudFBsdWdpbnMiLDg4LCJpc0VuZGlzaCIsImlzTW92ZWlzaCIsImlzU3RhcnRpc2giLCJmb3JFYWNoRXZlbnREaXNwYXRjaCIsImRpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiZGlzcGF0Y2hJRHMiLCJfZGlzcGF0Y2hJRHMiLCJ2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiZG9tSUQiLCJjdXJyZW50VGFyZ2V0IiwiTW91bnQiLCJnZXROb2RlIiwicmV0dXJuVmFsdWUiLCJleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlSW1wbCIsImV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWUiLCJleGVjdXRlRGlyZWN0RGlzcGF0Y2giLCJkaXNwYXRjaExpc3RlbmVyIiwiZGlzcGF0Y2hJRCIsImhhc0Rpc3BhdGNoZXMiLCJJbmplY3RlZE1vdW50IiwibGlzdGVuZXJzSXNBcnIiLCJpZHNJc0FyciIsIklEc0xlbiIsImxpc3RlbmVyc0xlbiIsInVzZVRvdWNoRXZlbnRzIiw4OSwibGlzdGVuZXJBdFBoYXNlIiwicHJvcGFnYXRpb25QaGFzZSIsImFjY3VtdWxhdGVEaXJlY3Rpb25hbERpc3BhdGNoZXMiLCJ1cHdhcmRzIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZSIsImRpc3BhdGNoTWFya2VyIiwiYWNjdW11bGF0ZURpc3BhdGNoZXMiLCJpZ25vcmVkRGlyZWN0aW9uIiwiYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXNTaW5nbGUiLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyIsOTAsImNhblVzZVdvcmtlcnMiLCJXb3JrZXIiLCJjYW5Vc2VFdmVudExpc3RlbmVycyIsImNhblVzZVZpZXdwb3J0Iiwic2NyZWVuIiwiaXNJbldvcmtlciIsOTEsImhhc1NWRyIsImltcGxlbWVudGF0aW9uIiwiaGFzRmVhdHVyZSIsIkhUTUxET01Qcm9wZXJ0eUNvbmZpZyIsImFjY2VwdCIsImFjY2VwdENoYXJzZXQiLCJhY2Nlc3NLZXkiLCJhbGxvd0Z1bGxTY3JlZW4iLCJhbGxvd1RyYW5zcGFyZW5jeSIsImF1dG9Db21wbGV0ZSIsImF1dG9QbGF5IiwiY2VsbFBhZGRpbmciLCJjZWxsU3BhY2luZyIsImNoYXJTZXQiLCJjaGVja2VkIiwiY2xhc3NJRCIsImNvbHMiLCJjb2xTcGFuIiwiY29udGVudCIsImNvbnRlbnRFZGl0YWJsZSIsImNvbnRleHRNZW51IiwiY29udHJvbHMiLCJjb29yZHMiLCJjcm9zc09yaWdpbiIsImRhdGVUaW1lIiwiZGlzYWJsZWQiLCJkb3dubG9hZCIsImRyYWdnYWJsZSIsImVuY1R5cGUiLCJmb3JtIiwiZm9ybUFjdGlvbiIsImZvcm1FbmNUeXBlIiwiZm9ybU1ldGhvZCIsImZvcm1Ob1ZhbGlkYXRlIiwiZm9ybVRhcmdldCIsImZyYW1lQm9yZGVyIiwiaHJlZkxhbmciLCJodHRwRXF1aXYiLCJpY29uIiwibGFuZyIsImxvb3AiLCJtYW5pZmVzdCIsIm1hcmdpbkhlaWdodCIsIm1hcmdpbldpZHRoIiwibWF4TGVuZ3RoIiwibWVkaWEiLCJtZWRpYUdyb3VwIiwibXVsdGlwbGUiLCJtdXRlZCIsIm5vVmFsaWRhdGUiLCJwb3N0ZXIiLCJwcmVsb2FkIiwicmFkaW9Hcm91cCIsInJlYWRPbmx5IiwicmVsIiwicmVxdWlyZWQiLCJyb3dTcGFuIiwic2FuZGJveCIsInNjb3BlIiwic2Nyb2xsaW5nIiwic2VhbWxlc3MiLCJzZWxlY3RlZCIsInNoYXBlIiwic2l6ZXMiLCJzcGFuIiwic3BlbGxDaGVjayIsInNyY0RvYyIsInNyY1NldCIsInVzZU1hcCIsIndtb2RlIiwiYXV0b0NhcGl0YWxpemUiLCJhdXRvQ29ycmVjdCIsIml0ZW1Qcm9wIiwiaXRlbVNjb3BlIiwiaXRlbVR5cGUiLDkyLCJfYXNzZXJ0U2luZ2xlTGluayIsImNoZWNrZWRMaW5rIiwidmFsdWVMaW5rIiwiX2Fzc2VydFZhbHVlTGluayIsIl9hc3NlcnRDaGVja2VkTGluayIsIl9oYW5kbGVMaW5rZWRWYWx1ZUNoYW5nZSIsInJlcXVlc3RDaGFuZ2UiLCJfaGFuZGxlTGlua2VkQ2hlY2tDaGFuZ2UiLCJSZWFjdFByb3BUeXBlcyIsImhhc1JlYWRPbmx5VmFsdWUiLCJjaGVja2JveCIsImltYWdlIiwicmFkaW8iLCJzdWJtaXQiLCJMaW5rZWRWYWx1ZVV0aWxzIiwiTWl4aW4iLCJnZXRWYWx1ZSIsImdldENoZWNrZWQiLCJnZXRPbkNoYW5nZSIsIi4vUmVhY3RQcm9wVHlwZXMiLDkzLCJSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIiLCJMb2NhbEV2ZW50VHJhcE1peGluIiwidHJhcEJ1YmJsZWRFdmVudCIsImhhbmRsZXJCYXNlTmFtZSIsIl9sb2NhbEV2ZW50TGlzdGVuZXJzIiwiLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIiLDk0LCJvbmNsaWNrIiw5NSwibmV4dEluZGV4IiwibmV4dFNvdXJjZSIsOTYsIm9uZUFyZ3VtZW50UG9vbGVyIiwiY29weUZpZWxkc0Zyb20iLCJLbGFzcyIsImluc3RhbmNlUG9vbCIsInR3b0FyZ3VtZW50UG9vbGVyIiwiYTEiLCJhMiIsInRocmVlQXJndW1lbnRQb29sZXIiLCJhMyIsImZpdmVBcmd1bWVudFBvb2xlciIsImE0IiwiYTUiLCJzdGFuZGFyZFJlbGVhc2VyIiwiREVGQVVMVF9QT09MX1NJWkUiLCJERUZBVUxUX1BPT0xFUiIsIkNvcHlDb25zdHJ1Y3RvciIsInBvb2xlciIsIk5ld0tsYXNzIiw5NywiUmVhY3RDaGlsZHJlbiIsIlJlYWN0Q29tcG9uZW50IiwiUmVhY3RDb21wb3NpdGVDb21wb25lbnQiLCJSZWFjdENvbnRleHQiLCJSZWFjdEN1cnJlbnRPd25lciIsIlJlYWN0RWxlbWVudCIsIlJlYWN0RWxlbWVudFZhbGlkYXRvciIsIlJlYWN0RE9NIiwiUmVhY3RET01Db21wb25lbnQiLCJSZWFjdERlZmF1bHRJbmplY3Rpb24iLCJSZWFjdEluc3RhbmNlSGFuZGxlcyIsIlJlYWN0TGVnYWN5RWxlbWVudCIsIlJlYWN0TXVsdGlDaGlsZCIsIlJlYWN0UGVyZiIsIlJlYWN0U2VydmVyUmVuZGVyaW5nIiwiUmVhY3RUZXh0Q29tcG9uZW50IiwiZGVwcmVjYXRlZCIsIm9ubHlDaGlsZCIsImNyZWF0ZUZhY3RvcnkiLCJ3cmFwQ3JlYXRlRWxlbWVudCIsIndyYXBDcmVhdGVGYWN0b3J5IiwibWVhc3VyZSIsIm9ubHkiLCJpbml0aWFsaXplVG91Y2hFdmVudHMiLCJzaG91bGRVc2VUb3VjaCIsImNvbnN0cnVjdEFuZFJlbmRlckNvbXBvbmVudCIsImNvbnN0cnVjdEFuZFJlbmRlckNvbXBvbmVudEJ5SUQiLCJyZW5kZXJUb1N0cmluZyIsInJlbmRlclRvU3RhdGljTWFya3VwIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsImlzVmFsaWRDbGFzcyIsImlzVmFsaWRFbGVtZW50Iiwid2l0aENvbnRleHQiLCJyZW5kZXJDb21wb25lbnQiLCJyZW5kZXJDb21wb25lbnRUb1N0cmluZyIsInJlbmRlckNvbXBvbmVudFRvU3RhdGljTWFya3VwIiwiaXNWYWxpZENvbXBvbmVudCIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsIkNvbXBvbmVudCIsIkN1cnJlbnRPd25lciIsIkRPTUNvbXBvbmVudCIsIkluc3RhbmNlSGFuZGxlcyIsIk11bHRpQ2hpbGQiLCJUZXh0Q29tcG9uZW50IiwiZGVidWciLCJleHBlY3RlZEZlYXR1cmVzIiwiZnJlZXplIiwiLi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnMiLCIuL1JlYWN0Q2hpbGRyZW4iLCIuL1JlYWN0Q29tcG9uZW50IiwiLi9SZWFjdENvbXBvc2l0ZUNvbXBvbmVudCIsIi4vUmVhY3RDb250ZXh0IiwiLi9SZWFjdEN1cnJlbnRPd25lciIsIi4vUmVhY3RET00iLCIuL1JlYWN0RE9NQ29tcG9uZW50IiwiLi9SZWFjdERlZmF1bHRJbmplY3Rpb24iLCIuL1JlYWN0RWxlbWVudCIsIi4vUmVhY3RFbGVtZW50VmFsaWRhdG9yIiwiLi9SZWFjdEluc3RhbmNlSGFuZGxlcyIsIi4vUmVhY3RMZWdhY3lFbGVtZW50IiwiLi9SZWFjdE11bHRpQ2hpbGQiLCIuL1JlYWN0UGVyZiIsIi4vUmVhY3RTZXJ2ZXJSZW5kZXJpbmciLCIuL1JlYWN0VGV4dENvbXBvbmVudCIsIi4vZGVwcmVjYXRlZCIsIi4vb25seUNoaWxkIiw5OCwiUmVhY3RFbXB0eUNvbXBvbmVudCIsIlJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluIiwiaXNOdWxsQ29tcG9uZW50SUQiLCJfcm9vdE5vZGVJRCIsIi4vUmVhY3RFbXB0eUNvbXBvbmVudCIsOTksImdldExpc3RlbmluZ0ZvckRvY3VtZW50IiwibW91bnRBdCIsInRvcExpc3RlbmVyc0lES2V5IiwicmVhY3RUb3BMaXN0ZW5lcnNDb3VudGVyIiwiYWxyZWFkeUxpc3RlbmluZ1RvIiwiUmVhY3RFdmVudEVtaXR0ZXJNaXhpbiIsIlZpZXdwb3J0TWV0cmljcyIsImlzTW9uaXRvcmluZ1Njcm9sbFZhbHVlIiwidG9wRXZlbnRNYXBwaW5nIiwiUmVhY3RFdmVudExpc3RlbmVyIiwiaW5qZWN0UmVhY3RFdmVudExpc3RlbmVyIiwic2V0SGFuZGxlVG9wTGV2ZWwiLCJoYW5kbGVUb3BMZXZlbCIsInNldEVuYWJsZWQiLCJlbmFibGVkIiwiaXNFbmFibGVkIiwibGlzdGVuVG8iLCJjb250ZW50RG9jdW1lbnRIYW5kbGUiLCJpc0xpc3RlbmluZyIsImRlcGVuZGVuY3kiLCJ0cmFwQ2FwdHVyZWRFdmVudCIsIldJTkRPV19IQU5ETEUiLCJlbnN1cmVTY3JvbGxWYWx1ZU1vbml0b3JpbmciLCJyZWZyZXNoIiwicmVmcmVzaFNjcm9sbFZhbHVlcyIsIm1vbml0b3JTY3JvbGxWYWx1ZSIsIi4vUmVhY3RFdmVudEVtaXR0ZXJNaXhpbiIsIi4vVmlld3BvcnRNZXRyaWNzIiwxMDAsIkZvckVhY2hCb29rS2VlcGluZyIsImZvckVhY2hGdW5jdGlvbiIsImZvckVhY2hDb250ZXh0IiwiZm9yRWFjaFNpbmdsZUNoaWxkIiwidHJhdmVyc2VDb250ZXh0IiwiZm9yRWFjaEJvb2tLZWVwaW5nIiwiZm9yRWFjaENoaWxkcmVuIiwiZm9yRWFjaEZ1bmMiLCJ0cmF2ZXJzZUFsbENoaWxkcmVuIiwiTWFwQm9va0tlZXBpbmciLCJtYXBSZXN1bHQiLCJtYXBGdW5jdGlvbiIsIm1hcENvbnRleHQiLCJtYXBTaW5nbGVDaGlsZEludG9Db250ZXh0IiwibWFwQm9va0tlZXBpbmciLCJrZXlVbmlxdWUiLCJtYXBwZWRDaGlsZCIsIm1hcENoaWxkcmVuIiwiZm9yRWFjaFNpbmdsZUNoaWxkRHVtbXkiLCJjb3VudENoaWxkcmVuIiwiLi90cmF2ZXJzZUFsbENoaWxkcmVuIiwxMDEsIlJlYWN0T3duZXIiLCJDb21wb25lbnRMaWZlQ3ljbGUiLCJNT1VOVEVEIiwiVU5NT1VOVEVEIiwiaW5qZWN0ZWQiLCJ1bm1vdW50SURGcm9tRW52aXJvbm1lbnQiLCJtb3VudEltYWdlSW50b05vZGUiLCJpbmplY3RFbnZpcm9ubWVudCIsIlJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQiLCJCYWNrZW5kSURPcGVyYXRpb25zIiwiTGlmZUN5Y2xlIiwiX2xpZmVDeWNsZVN0YXRlIiwic2V0UHJvcHMiLCJwYXJ0aWFsUHJvcHMiLCJfcGVuZGluZ0VsZW1lbnQiLCJfY3VycmVudEVsZW1lbnQiLCJyZXBsYWNlUHJvcHMiLCJfbW91bnREZXB0aCIsImNsb25lQW5kUmVwbGFjZVByb3BzIiwiZW5xdWV1ZVVwZGF0ZSIsIl9zZXRQcm9wc0ludGVybmFsIiwiY29uc3RydWN0IiwiX293bmVyIiwiX3BlbmRpbmdDYWxsYmFja3MiLCJtb3VudENvbXBvbmVudCIsInJvb3RJRCIsIm1vdW50RGVwdGgiLCJvd25lciIsImFkZENvbXBvbmVudEFzUmVmVG8iLCJ1bm1vdW50Q29tcG9uZW50IiwicmVtb3ZlQ29tcG9uZW50QXNSZWZGcm9tIiwicmVjZWl2ZUNvbXBvbmVudCIsIm5leHRFbGVtZW50IiwicGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5IiwicHJldkVsZW1lbnQiLCJ1cGRhdGVDb21wb25lbnQiLCJtb3VudENvbXBvbmVudEludG9Ob2RlIiwiY29udGFpbmVyIiwic2hvdWxkUmV1c2VNYXJrdXAiLCJSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uIiwicGVyZm9ybSIsIl9tb3VudENvbXBvbmVudEludG9Ob2RlIiwiaXNPd25lZEJ5IiwiZ2V0U2libGluZ0J5UmVmIiwiLi9SZWFjdE93bmVyIiwxMDIsIlJlYWN0RE9NSURPcGVyYXRpb25zIiwiUmVhY3RNYXJrdXBDaGVja3N1bSIsImdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lciIsInNldElubmVySFRNTCIsIkVMRU1FTlRfTk9ERV9UWVBFIiwiRE9DX05PREVfVFlQRSIsIlJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50Iiwicm9vdE5vZGVJRCIsInB1cmdlSUQiLCJjYW5SZXVzZU1hcmt1cCIsIi4vUmVhY3RET01JRE9wZXJhdGlvbnMiLCIuL1JlYWN0TWFya3VwQ2hlY2tzdW0iLCIuL1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24iLCIuL2dldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lciIsIi4vc2V0SW5uZXJIVE1MIiwxMDMsImdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSIsImNvbXBvbmVudCIsInZhbGlkYXRlVHlwZURlZiIsIkNvbnN0cnVjdG9yIiwidHlwZURlZiIsIlJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzIiwidmFsaWRhdGVNZXRob2RPdmVycmlkZSIsInNwZWNQb2xpY3kiLCJSZWFjdENvbXBvc2l0ZUNvbXBvbmVudEludGVyZmFjZSIsIlJlYWN0Q29tcG9zaXRlQ29tcG9uZW50TWl4aW4iLCJTcGVjUG9saWN5IiwiT1ZFUlJJREVfQkFTRSIsIkRFRklORV9NQU5ZIiwiREVGSU5FX01BTllfTUVSR0VEIiwidmFsaWRhdGVMaWZlQ3ljbGVPblJlcGxhY2VTdGF0ZSIsImNvbXBvc2l0ZUxpZmVDeWNsZVN0YXRlIiwiX2NvbXBvc2l0ZUxpZmVDeWNsZVN0YXRlIiwiQ29tcG9zaXRlTGlmZUN5Y2xlIiwiTU9VTlRJTkciLCJjdXJyZW50IiwiVU5NT1VOVElORyIsIm1peFNwZWNJbnRvQ29tcG9uZW50Iiwic3BlYyIsImlzVmFsaWRGYWN0b3J5IiwiTUlYSU5TX0tFWSIsIlJFU0VSVkVEX1NQRUNfS0VZUyIsImlzQ29tcG9zaXRlQ29tcG9uZW50TWV0aG9kIiwiaXNBbHJlYWR5RGVmaW5lZCIsIm1hcmtlZERvbnRCaW5kIiwiX19yZWFjdERvbnRCaW5kIiwic2hvdWxkQXV0b0JpbmQiLCJfX3JlYWN0QXV0b0JpbmRNYXAiLCJjcmVhdGVNZXJnZWRSZXN1bHRGdW5jdGlvbiIsImNyZWF0ZUNoYWluZWRGdW5jdGlvbiIsIm1peFN0YXRpY1NwZWNJbnRvQ29tcG9uZW50IiwiaXNSZXNlcnZlZCIsImlzSW5oZXJpdGVkIiwibWVyZ2VPYmplY3RzV2l0aE5vRHVwbGljYXRlS2V5cyIsIm9uZSIsInR3byIsIm1hcE9iamVjdCIsIlJlYWN0RXJyb3JVdGlscyIsIlJlYWN0UHJvcFRyYW5zZmVyZXIiLCJSZWFjdFByb3BUeXBlTG9jYXRpb25zIiwiaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCIsIm1vbml0b3JDb2RlVXNlIiwic2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQiLCJERUZJTkVfT05DRSIsImluamVjdGVkTWl4aW5zIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNoaWxkQ29udGV4dCIsIlJFQ0VJVklOR19QUk9QUyIsIl9wZW5kaW5nU3RhdGUiLCJfYmluZEF1dG9CaW5kTWV0aG9kcyIsIl9wcm9jZXNzQ29udGV4dCIsIl9jb250ZXh0IiwiX3Byb2Nlc3NQcm9wcyIsIl9wZW5kaW5nRm9yY2VVcGRhdGUiLCJfcmVuZGVyZWRDb21wb25lbnQiLCJfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50IiwiZ2V0UmVhY3RNb3VudFJlYWR5IiwicGFydGlhbFN0YXRlIiwiY29tcGxldGVTdGF0ZSIsIm1hc2tlZENvbnRleHQiLCJjb250ZXh0TmFtZSIsIl9jaGVja1Byb3BUeXBlcyIsIl9wcm9jZXNzQ2hpbGRDb250ZXh0IiwiY3VycmVudENvbnRleHQiLCJhZGRlbmR1bSIsIm5leHRDb250ZXh0IiwibmV4dFByb3BzIiwic2hvdWxkVXBkYXRlIiwiX3BlcmZvcm1Db21wb25lbnRVcGRhdGUiLCJwcmV2Q29udGV4dCIsInByZXZQYXJlbnRFbGVtZW50IiwicHJldkNvbXBvbmVudEluc3RhbmNlIiwidGhpc0lEIiwicHJldkNvbXBvbmVudElEIiwibmV4dE1hcmt1cCIsImRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwQnlJRCIsImZvcmNlVXBkYXRlIiwicmVuZGVyZWRDb21wb25lbnQiLCJwcmV2aW91c0NvbnRleHQiLCJnZXRFbXB0eUNvbXBvbmVudCIsInJlZ2lzdGVyTnVsbENvbXBvbmVudElEIiwiZGVyZWdpc3Rlck51bGxDb21wb25lbnRJRCIsImF1dG9CaW5kS2V5IiwiX2JpbmRBdXRvQmluZE1ldGhvZCIsImJvdW5kTWV0aG9kIiwiX19yZWFjdEJvdW5kQ29udGV4dCIsIl9fcmVhY3RCb3VuZE1ldGhvZCIsIl9fcmVhY3RCb3VuZEFyZ3VtZW50cyIsIl9iaW5kIiwibmV3VGhpcyIsIiRfXzAiLCIkX18xIiwicmVib3VuZE1ldGhvZCIsIlJlYWN0Q29tcG9zaXRlQ29tcG9uZW50QmFzZSIsIkJhc2UiLCJkZWZhdWx0UHJvcHMiLCJjb21wb25lbnRTaG91bGRVcGRhdGUiLCJtZXRob2ROYW1lIiwid3JhcEZhY3RvcnkiLCJpbmplY3RNaXhpbiIsIi4vUmVhY3RFcnJvclV0aWxzIiwiLi9SZWFjdFByb3BUcmFuc2ZlcmVyIiwiLi9SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyIsIi4vUmVhY3RQcm9wVHlwZUxvY2F0aW9ucyIsIi4vaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCIsIi4vbWFwT2JqZWN0IiwiLi9tb25pdG9yQ29kZVVzZSIsIi4vc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQiLDEwNCwibmV3Q29udGV4dCIsInNjb3BlZENhbGxiYWNrIiwxMDUsMTA2LCJjcmVhdGVET01GYWN0b3J5IiwidGFnIiwibWFya05vbkxlZ2FjeUZhY3RvcnkiLCJhYmJyIiwiYXJlYSIsImFydGljbGUiLCJhc2lkZSIsImF1ZGlvIiwiYmFzZSIsImJkaSIsImJkbyIsImJpZyIsImJsb2NrcXVvdGUiLCJiciIsImNhbnZhcyIsImNhcHRpb24iLCJjaXRlIiwiY29sIiwiY29sZ3JvdXAiLCJkYXRhbGlzdCIsImRlbCIsImRmbiIsImRpYWxvZyIsImRpdiIsImRsIiwiZHQiLCJlbSIsImVtYmVkIiwiZmllbGRzZXQiLCJmaWdjYXB0aW9uIiwiZmlndXJlIiwiZm9vdGVyIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImg2IiwiaGVhZGVyIiwiaHIiLCJodG1sIiwiaWZyYW1lIiwiaW1nIiwiaW5zIiwia2JkIiwia2V5Z2VuIiwibGVnZW5kIiwibGkiLCJsaW5rIiwibWFpbiIsIm1hcmsiLCJtZW51aXRlbSIsIm1ldGEiLCJtZXRlciIsIm5hdiIsIm5vc2NyaXB0Iiwib2wiLCJvcHRncm91cCIsIm9wdGlvbiIsInBhcmFtIiwicGljdHVyZSIsInByZSIsInJwIiwicnVieSIsInNhbXAiLCJzY3JpcHQiLCJzZWN0aW9uIiwic21hbGwiLCJzdHJvbmciLCJzdW1tYXJ5Iiwic3VwIiwidGFibGUiLCJ0Ym9keSIsInRleHRhcmVhIiwidGZvb3QiLCJ0aCIsInRoZWFkIiwidGltZSIsInRyIiwidHJhY2siLCJ1bCIsInZhciIsInZpZGVvIiwid2JyIiwiY2lyY2xlIiwiZGVmcyIsImVsbGlwc2UiLCJsaW5lYXJHcmFkaWVudCIsIm1hc2siLCJwb2x5Z29uIiwicG9seWxpbmUiLCJyYWRpYWxHcmFkaWVudCIsInJlY3QiLCJzdmciLCJ0c3BhbiIsMTA3LCJtb3VzZUxpc3RlbmVyTmFtZXMiLCJvbkRvdWJsZUNsaWNrIiwib25Nb3VzZU1vdmUiLCJvbk1vdXNlVXAiLCJvbkNsaWNrQ2FwdHVyZSIsIm9uRG91YmxlQ2xpY2tDYXB0dXJlIiwib25Nb3VzZURvd25DYXB0dXJlIiwib25Nb3VzZU1vdmVDYXB0dXJlIiwib25Nb3VzZVVwQ2FwdHVyZSIsIlJlYWN0RE9NQnV0dG9uIiwiLi9BdXRvRm9jdXNNaXhpbiIsIi4vUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4iLDEwOCwiYXNzZXJ0VmFsaWRQcm9wcyIsImZpbmRSZWFjdENvbnRhaW5lckZvcklEIiwiZ2V0UHV0TGlzdGVuZXJRdWV1ZSIsImVucXVldWVQdXRMaXN0ZW5lciIsInZhbGlkYXRlRGFuZ2Vyb3VzVGFnIiwidmFsaWRhdGVkVGFnQ2FjaGUiLCJWQUxJRF9UQUdfUkVHRVgiLCJfdGFnIiwiQ09OVEVOVF9UWVBFUyIsIm51bWJlciIsIlNUWUxFIiwib21pdHRlZENsb3NlVGFncyIsImNsb3NlVGFnIiwiX2NyZWF0ZU9wZW5UYWdNYXJrdXBBbmRQdXRMaXN0ZW5lcnMiLCJfY3JlYXRlQ29udGVudE1hcmt1cCIsInByb3BLZXkiLCJwcm9wVmFsdWUiLCJtYXJrdXBGb3JJRCIsImNvbnRlbnRUb1VzZSIsImNoaWxkcmVuVG9Vc2UiLCJtb3VudEltYWdlcyIsIm1vdW50Q2hpbGRyZW4iLCJfdXBkYXRlRE9NUHJvcGVydGllcyIsIl91cGRhdGVET01DaGlsZHJlbiIsImxhc3RQcm9wcyIsInN0eWxlVXBkYXRlcyIsImxhc3RTdHlsZSIsImRlbGV0ZVByb3BlcnR5QnlJRCIsIm5leHRQcm9wIiwibGFzdFByb3AiLCJ1cGRhdGVQcm9wZXJ0eUJ5SUQiLCJ1cGRhdGVTdHlsZXNCeUlEIiwibGFzdENvbnRlbnQiLCJuZXh0Q29udGVudCIsImxhc3RIdG1sIiwibmV4dEh0bWwiLCJsYXN0Q2hpbGRyZW4iLCJuZXh0Q2hpbGRyZW4iLCJsYXN0SGFzQ29udGVudE9ySHRtbCIsIm5leHRIYXNDb250ZW50T3JIdG1sIiwidXBkYXRlQ2hpbGRyZW4iLCJ1cGRhdGVJbm5lckhUTUxCeUlEIiwidW5tb3VudENoaWxkcmVuIiwiLi9DU1NQcm9wZXJ0eU9wZXJhdGlvbnMiLDEwOSwiUmVhY3RET01Gb3JtIiwiLi9Mb2NhbEV2ZW50VHJhcE1peGluIiwxMTAsIklOVkFMSURfUFJPUEVSVFlfRVJST1JTIiwidXBkYXRlVGV4dENvbnRlbnRCeUlEIiwiZGFuZ2Vyb3VzbHlQcm9jZXNzQ2hpbGRyZW5VcGRhdGVzIiwiLi9ET01DaGlsZHJlbk9wZXJhdGlvbnMiLDExMSwiUmVhY3RET01JbWciLDExMiwiZm9yY2VVcGRhdGVJZk1vdW50ZWQiLCJpbnN0YW5jZXNCeVJlYWN0SUQiLCJSZWFjdERPTUlucHV0IiwiaW5pdGlhbENoZWNrZWQiLCJkZWZhdWx0Q2hlY2tlZCIsImluaXRpYWxWYWx1ZSIsIl9oYW5kbGVDaGFuZ2UiLCJyb290Tm9kZSIsImFzYXAiLCJxdWVyeVJvb3QiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZ3JvdXBMZW4iLCJvdGhlck5vZGUiLCJvdGhlcklEIiwib3RoZXJJbnN0YW5jZSIsIi4vTGlua2VkVmFsdWVVdGlscyIsMTEzLCJSZWFjdERPTU9wdGlvbiIsMTE0LCJ1cGRhdGVXaXRoUGVuZGluZ1ZhbHVlSWZNb3VudGVkIiwiX3BlbmRpbmdWYWx1ZSIsInNlbGVjdFZhbHVlVHlwZSIsInVwZGF0ZU9wdGlvbnMiLCJzZWxlY3RlZFZhbHVlIiwiUmVhY3RET01TZWxlY3QiLCJwcmV2TXVsdGlwbGUiLDExNSwiaXNDb2xsYXBzZWQiLCJhbmNob3JOb2RlIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNPZmZzZXQiLCJnZXRJRU9mZnNldHMiLCJzZWxlY3Rpb24iLCJzZWxlY3RlZFJhbmdlIiwiY3JlYXRlUmFuZ2UiLCJzZWxlY3RlZExlbmd0aCIsImZyb21TdGFydCIsImR1cGxpY2F0ZSIsIm1vdmVUb0VsZW1lbnRUZXh0Iiwic2V0RW5kUG9pbnQiLCJzdGFydE9mZnNldCIsImVuZE9mZnNldCIsImdldE1vZGVybk9mZnNldHMiLCJyYW5nZUNvdW50IiwiY3VycmVudFJhbmdlIiwiZ2V0UmFuZ2VBdCIsImlzU2VsZWN0aW9uQ29sbGFwc2VkIiwicmFuZ2VMZW5ndGgiLCJ0ZW1wUmFuZ2UiLCJjbG9uZVJhbmdlIiwic2VsZWN0Tm9kZUNvbnRlbnRzIiwic2V0RW5kIiwic3RhcnRDb250YWluZXIiLCJpc1RlbXBSYW5nZUNvbGxhcHNlZCIsImVuZENvbnRhaW5lciIsImRldGVjdGlvblJhbmdlIiwic2V0U3RhcnQiLCJpc0JhY2t3YXJkIiwiY29sbGFwc2VkIiwic2V0SUVPZmZzZXRzIiwib2Zmc2V0cyIsIm1vdmVTdGFydCIsIm1vdmVFbmQiLCJzZXRNb2Rlcm5PZmZzZXRzIiwic3RhcnRNYXJrZXIiLCJnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0IiwiZW5kTWFya2VyIiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJ1c2VJRU9mZnNldHMiLCJSZWFjdERPTVNlbGVjdGlvbiIsImdldE9mZnNldHMiLCJzZXRPZmZzZXRzIiwiLi9nZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0IiwxMTYsIlJlYWN0RE9NVGV4dGFyZWEiLDExNywiUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVRyYW5zYWN0aW9uIiwicmVpbml0aWFsaXplVHJhbnNhY3Rpb24iLCJUcmFuc2FjdGlvbiIsIlJFU0VUX0JBVENIRURfVVBEQVRFUyIsImluaXRpYWxpemUiLCJSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5IiwiaXNCYXRjaGluZ1VwZGF0ZXMiLCJGTFVTSF9CQVRDSEVEX1VQREFURVMiLCJmbHVzaEJhdGNoZWRVcGRhdGVzIiwiVFJBTlNBQ1RJT05fV1JBUFBFUlMiLCJnZXRUcmFuc2FjdGlvbldyYXBwZXJzIiwiYWxyZWFkeUJhdGNoaW5nVXBkYXRlcyIsIi4vVHJhbnNhY3Rpb24iLDExOCwiUmVhY3RJbmplY3Rpb24iLCJFdmVudEVtaXR0ZXIiLCJOYXRpdmVDb21wb25lbnQiLCJpbmplY3RHZW5lcmljQ29tcG9uZW50Q2xhc3MiLCJpbmplY3RDb21wb25lbnRDbGFzc2VzIiwiY3JlYXRlRnVsbFBhZ2VDb21wb25lbnQiLCJDb21wb3NpdGVDb21wb25lbnQiLCJTVkdET01Qcm9wZXJ0eUNvbmZpZyIsIkVtcHR5Q29tcG9uZW50IiwiaW5qZWN0RW1wdHlDb21wb25lbnQiLCJVcGRhdGVzIiwiaW5qZWN0UmVjb25jaWxlVHJhbnNhY3Rpb24iLCJpbmplY3RCYXRjaGluZ1N0cmF0ZWd5IiwiUm9vdEluZGV4IiwiaW5qZWN0Q3JlYXRlUmVhY3RSb290SW5kZXgiLCJTZXJ2ZXJSZWFjdFJvb3RJbmRleCIsIlJlYWN0RGVmYXVsdFBlcmYiLCIuL0JlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCIuL0NoYW5nZUV2ZW50UGx1Z2luIiwiLi9DbGllbnRSZWFjdFJvb3RJbmRleCIsIi4vQ29tcG9zaXRpb25FdmVudFBsdWdpbiIsIi4vRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXIiLCIuL0VudGVyTGVhdmVFdmVudFBsdWdpbiIsIi4vSFRNTERPTVByb3BlcnR5Q29uZmlnIiwiLi9Nb2JpbGVTYWZhcmlDbGlja0V2ZW50UGx1Z2luIiwiLi9SZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudCIsIi4vUmVhY3RET01CdXR0b24iLCIuL1JlYWN0RE9NRm9ybSIsIi4vUmVhY3RET01JbWciLCIuL1JlYWN0RE9NSW5wdXQiLCIuL1JlYWN0RE9NT3B0aW9uIiwiLi9SZWFjdERPTVNlbGVjdCIsIi4vUmVhY3RET01UZXh0YXJlYSIsIi4vUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneSIsIi4vUmVhY3REZWZhdWx0UGVyZiIsIi4vUmVhY3RFdmVudExpc3RlbmVyIiwiLi9SZWFjdEluamVjdGlvbiIsIi4vU1ZHRE9NUHJvcGVydHlDb25maWciLCIuL1NlbGVjdEV2ZW50UGx1Z2luIiwiLi9TZXJ2ZXJSZWFjdFJvb3RJbmRleCIsIi4vU2ltcGxlRXZlbnRQbHVnaW4iLCIuL2NyZWF0ZUZ1bGxQYWdlQ29tcG9uZW50IiwxMTksInJvdW5kRmxvYXQiLCJSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMiLCJwZXJmb3JtYW5jZU5vdyIsIl9hbGxNZWFzdXJlbWVudHMiLCJfbW91bnRTdGFjayIsIl9pbmplY3RlZCIsImluamVjdE1lYXN1cmUiLCJlbmFibGVNZWFzdXJlIiwiZ2V0TGFzdE1lYXN1cmVtZW50cyIsInByaW50RXhjbHVzaXZlIiwibWVhc3VyZW1lbnRzIiwiZ2V0RXhjbHVzaXZlU3VtbWFyeSIsIkNvbXBvbmVudCBjbGFzcyBuYW1lIiwiVG90YWwgaW5jbHVzaXZlIHRpbWUgKG1zKSIsIkV4Y2x1c2l2ZSBtb3VudCB0aW1lIChtcykiLCJleGNsdXNpdmUiLCJFeGNsdXNpdmUgcmVuZGVyIHRpbWUgKG1zKSIsIk1vdW50IHRpbWUgcGVyIGluc3RhbmNlIChtcykiLCJSZW5kZXIgdGltZSBwZXIgaW5zdGFuY2UgKG1zKSIsIkluc3RhbmNlcyIsInByaW50SW5jbHVzaXZlIiwiZ2V0SW5jbHVzaXZlU3VtbWFyeSIsIk93bmVyID4gY29tcG9uZW50IiwiSW5jbHVzaXZlIHRpbWUgKG1zKSIsImdldFRvdGFsVGltZSIsInRvRml4ZWQiLCJnZXRNZWFzdXJlbWVudHNTdW1tYXJ5TWFwIiwiV2FzdGVkIHRpbWUgKG1zKSIsInByaW50V2FzdGVkIiwicHJpbnRET00iLCJnZXRET01TdW1tYXJ5IiwiX3JlY29yZFdyaXRlIiwiZm5OYW1lIiwidG90YWxUaW1lIiwid3JpdGVzIiwibW9kdWxlTmFtZSIsInJ2IiwiY291bnRzIiwiZGlzcGxheU5hbWVzIiwibW91bnRJRCIsIndyaXRlQXJncyIsImlzUmVuZGVyIiwiaXNNb3VudCIsIm1vdW50U3RhY2siLCJlbnRyeSIsInN1Yk1vdW50VGltZSIsIi4vUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzIiwiLi9wZXJmb3JtYW5jZU5vdyIsMTIwLCJtZWFzdXJlbWVudCIsIkRPTV9PUEVSQVRJT05fVFlQRVMiLCJjYW5kaWRhdGVzIiwiYWxsSURzIiwiRE9OVF9DQVJFX1RIUkVTSE9MRCIsIm9ubHlDbGVhbiIsImluY2x1c2l2ZUtleSIsImNsZWFuQ29tcG9uZW50cyIsImdldFVuY2hhbmdlZENvbXBvbmVudHMiLCJkaXJ0eUxlYWZJRHMiLCJpc0RpcnR5IiwxMjEsImRlZmluZVdhcm5pbmdQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJfc3RvcmUiLCJkZWZpbmVNdXRhdGlvbk1lbWJyYW5lIiwicHNldWRvRnJvemVuUHJvcGVydGllcyIsInVzZU11dGF0aW9uTWVtYnJhbmUiLCJSRVNFUlZFRF9QUk9QUyIsInZhbGlkYXRlZCIsIl9pc1JlYWN0RWxlbWVudCIsImNvbmZpZyIsImNoaWxkcmVuTGVuZ3RoIiwiY2hpbGRBcnJheSIsIm9sZEVsZW1lbnQiLCJuZXdFbGVtZW50IiwxMjIsImdldEN1cnJlbnRPd25lckRpc3BsYXlOYW1lIiwidmFsaWRhdGVFeHBsaWNpdEtleSIsInBhcmVudFR5cGUiLCJ3YXJuQW5kTW9uaXRvckZvcktleVVzZSIsInZhbGlkYXRlUHJvcGVydHlLZXkiLCJOVU1FUklDX1BST1BFUlRZX1JFR0VYIiwid2FybmluZ0lEIiwib3duZXJOYW1lIiwicGFyZW50TmFtZSIsInVzZU5hbWUiLCJtZW1vaXplciIsIm93bmVySGFzS2V5VXNlV2FybmluZyIsImNoaWxkT3duZXJOYW1lIiwiY29tcG9uZW50T3duZXIiLCJtb25pdG9yVXNlT2ZPYmplY3RNYXAiLCJjdXJyZW50TmFtZSIsIm93bmVySGFzTW9uaXRvcmVkT2JqZWN0TWFwIiwidmFsaWRhdGVDaGlsZEtleXMiLCJleCIsImxvZ2dlZFR5cGVGYWlsdXJlcyIsInJlYWN0X2tleV93YXJuaW5nIiwicmVhY3RfbnVtZXJpY19rZXlfd2FybmluZyIsInZhbGlkYXRlZEZhY3RvcnkiLDEyMywibnVsbENvbXBvbmVudElkc1JlZ2lzdHJ5IiwiUmVhY3RFbXB0eUNvbXBvbmVudEluamVjdGlvbiIsImVtcHR5Q29tcG9uZW50IiwxMjQsMTI1LCJydW5FdmVudFF1ZXVlSW5CYXRjaCIsMTI2LCJmaW5kUGFyZW50Iiwibm9kZUlEIiwiZ2V0UmVhY3RSb290SURGcm9tTm9kZUlEIiwiVG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nIiwiYW5jZXN0b3JzIiwiaGFuZGxlVG9wTGV2ZWxJbXBsIiwiYm9va0tlZXBpbmciLCJnZXRFdmVudFRhcmdldCIsImFuY2VzdG9yIiwiX2hhbmRsZVRvcExldmVsIiwic2Nyb2xsVmFsdWVNb25pdG9yIiwic2Nyb2xsUG9zaXRpb24iLCJnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbiIsIl9lbmFibGVkIiwiZGlzcGF0Y2hFdmVudCIsIi4vRXZlbnRMaXN0ZW5lciIsIi4vZ2V0RXZlbnRUYXJnZXQiLCIuL2dldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uIiwxMjcsIlJlYWN0TmF0aXZlQ29tcG9uZW50IiwiUmVhY3RSb290SW5kZXgiLCJQZXJmIiwiLi9SZWFjdE5hdGl2ZUNvbXBvbmVudCIsIi4vUmVhY3RSb290SW5kZXgiLDEyOCwiaXNJbkRvY3VtZW50IiwiY29udGFpbnNOb2RlIiwiZ2V0QWN0aXZlRWxlbWVudCIsImhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyIsImdldFNlbGVjdGlvbkluZm9ybWF0aW9uIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsInJlc3RvcmVTZWxlY3Rpb24iLCJwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uIiwiY3VyRm9jdXNlZEVsZW0iLCJwcmlvckZvY3VzZWRFbGVtIiwicHJpb3JTZWxlY3Rpb25SYW5nZSIsInNldFNlbGVjdGlvbiIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwicGFyZW50RWxlbWVudCIsImNyZWF0ZVRleHRSYW5nZSIsImNvbGxhcHNlIiwiLi9SZWFjdERPTVNlbGVjdGlvbiIsIi4vY29udGFpbnNOb2RlIiwiLi9nZXRBY3RpdmVFbGVtZW50IiwxMjksImdldFJlYWN0Um9vdElEU3RyaW5nIiwiU0VQQVJBVE9SIiwiaXNCb3VuZGFyeSIsImlzVmFsaWRJRCIsImlzQW5jZXN0b3JJRE9mIiwiYW5jZXN0b3JJRCIsImRlc2NlbmRhbnRJRCIsImdldFBhcmVudElEIiwiZ2V0TmV4dERlc2NlbmRhbnRJRCIsImRlc3RpbmF0aW9uSUQiLCJTRVBBUkFUT1JfTEVOR1RIIiwiZ2V0Rmlyc3RDb21tb25BbmNlc3RvcklEIiwib25lSUQiLCJ0d29JRCIsIm1pbkxlbmd0aCIsImxhc3RDb21tb25NYXJrZXJJbmRleCIsImxvbmdlc3RDb21tb25JRCIsInRyYXZlcnNlUGFyZW50UGF0aCIsInNraXBGaXJzdCIsInNraXBMYXN0IiwidHJhdmVyc2VVcCIsInRyYXZlcnNlIiwiTUFYX1RSRUVfREVQVEgiLCJjcmVhdGVSZWFjdFJvb3RJRCIsImNyZWF0ZVJlYWN0SUQiLCJsZWF2ZUlEIiwiZW50ZXJJRCIsInVwQXJnIiwiZG93bkFyZyIsInRyYXZlcnNlQW5jZXN0b3JzIiwiX2dldEZpcnN0Q29tbW9uQW5jZXN0b3JJRCIsIl9nZXROZXh0RGVzY2VuZGFudElEIiwxMzAsIndhcm5Gb3JMZWdhY3lGYWN0b3J5Q2FsbCIsIlJlYWN0TGVnYWN5RWxlbWVudEZhY3RvcnkiLCJfaXNMZWdhY3lDYWxsV2FybmluZ0VuYWJsZWQiLCJsZWdhY3lGYWN0b3J5TG9ncyIsIndhcm5Gb3JQbGFpbkZ1bmN0aW9uVHlwZSIsImlzUmVhY3RDbGFzcyIsIl9yZWFjdFdhcm5lZEZvclRoaXNUeXBlIiwid2FybkZvck5vbkxlZ2FjeUZhY3RvcnkiLCJwcm94eVN0YXRpY01ldGhvZHMiLCJMRUdBQ1lfTUFSS0VSIiwiTk9OX0xFR0FDWV9NQVJLRVIiLCJsZWdhY3lDcmVhdGVGYWN0b3J5IiwiaXNSZWFjdE5vbkxlZ2FjeUZhY3RvcnkiLCJpc1JlYWN0TGVnYWN5RmFjdG9yeSIsImxlZ2FjeUNyZWF0ZUVsZW1lbnQiLCJfaXNNb2NrRnVuY3Rpb24iLCJfbW9ja2VkUmVhY3RDbGFzc0NvbnN0cnVjdG9yIiwibGVnYWN5RWxlbWVudEZhY3RvcnkiLDEzMSwiYWRsZXIzMiIsIkNIRUNLU1VNX0FUVFJfTkFNRSIsImFkZENoZWNrc3VtVG9NYXJrdXAiLCJjaGVja3N1bSIsImV4aXN0aW5nQ2hlY2tzdW0iLCJtYXJrdXBDaGVja3N1bSIsIi4vYWRsZXIzMiIsMTMyLCJnZXRSZWFjdFJvb3RJRCIsInJvb3RFbGVtZW50IiwiaW50ZXJuYWxHZXRJRCIsIm5vZGVDYWNoZSIsImNhY2hlZCIsImlzVmFsaWQiLCJBVFRSX05BTUUiLCJzZXRJRCIsIm9sZElEIiwiZmluZFJlYWN0Tm9kZUJ5SUQiLCJmaW5kRGVlcGVzdENhY2hlZEFuY2VzdG9ySW1wbCIsImRlZXBlc3ROb2RlU29GYXIiLCJmaW5kRGVlcGVzdENhY2hlZEFuY2VzdG9yIiwiZm91bmROb2RlIiwiaW5zdGFuY2VzQnlSZWFjdFJvb3RJRCIsImNvbnRhaW5lcnNCeVJlYWN0Um9vdElEIiwicm9vdEVsZW1lbnRzQnlSZWFjdFJvb3RJRCIsImZpbmRDb21wb25lbnRSb290UmV1c2FibGVBcnJheSIsIl9pbnN0YW5jZXNCeVJlYWN0Um9vdElEIiwic2Nyb2xsTW9uaXRvciIsInJlbmRlckNhbGxiYWNrIiwiX3VwZGF0ZVJvb3RDb21wb25lbnQiLCJwcmV2Q29tcG9uZW50IiwibmV4dENvbXBvbmVudCIsIl9yZWdpc3RlckNvbXBvbmVudCIsInJlYWN0Um9vdElEIiwicmVnaXN0ZXJDb250YWluZXIiLCJfcmVuZGVyTmV3Um9vdENvbXBvbmVudCIsImNvbXBvbmVudEluc3RhbmNlIiwicmVhY3RSb290RWxlbWVudCIsImNvbnRhaW5lckhhc1JlYWN0TWFya3VwIiwiaXNSZW5kZXJlZEJ5UmVhY3QiLCJkb21Ob2RlIiwidW5tb3VudENvbXBvbmVudEZyb21Ob2RlIiwibGFzdENoaWxkIiwiY29udGFpbmVyQ2hpbGQiLCJyZWFjdFJvb3QiLCJmaW5kQ29tcG9uZW50Um9vdCIsImFuY2VzdG9yTm9kZSIsImZpcnN0Q2hpbGRyZW4iLCJjaGlsZEluZGV4IiwiZGVlcGVzdEFuY2VzdG9yIiwidGFyZ2V0Q2hpbGQiLCJjaGlsZElEIiwibmV4dFNpYmxpbmciLDEzMywiZW5xdWV1ZU1hcmt1cCIsInVwZGF0ZVF1ZXVlIiwibWFya3VwUXVldWUiLCJlbnF1ZXVlTW92ZSIsImVucXVldWVSZW1vdmUiLCJlbnF1ZXVlVGV4dENvbnRlbnQiLCJwcm9jZXNzUXVldWUiLCJjbGVhclF1ZXVlIiwiZmxhdHRlbkNoaWxkcmVuIiwidXBkYXRlRGVwdGgiLCJuZXN0ZWRDaGlsZHJlbiIsIl9yZW5kZXJlZENoaWxkcmVuIiwiY2hpbGRJbnN0YW5jZSIsIm1vdW50SW1hZ2UiLCJfbW91bnRJbmRleCIsImVycm9yVGhyb3duIiwicHJldkNoaWxkcmVuIiwiX3VubW91bnRDaGlsZEJ5TmFtZSIsInNldFRleHRDb250ZW50IiwibmV4dE5lc3RlZENoaWxkcmVuIiwiX3VwZGF0ZUNoaWxkcmVuIiwibGFzdEluZGV4IiwicHJldkNoaWxkIiwibW92ZUNoaWxkIiwibmV4dENoaWxkSW5zdGFuY2UiLCJfbW91bnRDaGlsZEJ5TmFtZUF0SW5kZXgiLCJyZW5kZXJlZENoaWxkcmVuIiwicmVuZGVyZWRDaGlsZCIsImNyZWF0ZUNoaWxkIiwiLi9mbGF0dGVuQ2hpbGRyZW4iLDEzNCwxMzUsImNyZWF0ZUluc3RhbmNlRm9yVGFnIiwiY29tcG9uZW50Q2xhc3MiLCJ0YWdUb0NvbXBvbmVudENsYXNzIiwiZ2VuZXJpY0NvbXBvbmVudENsYXNzIiwiUmVhY3ROYXRpdmVDb21wb25lbnRJbmplY3Rpb24iLCJjb21wb25lbnRDbGFzc2VzIiwxMzYsImVtcHR5T2JqZWN0IiwiaXNWYWxpZE93bmVyIiwiYXR0YWNoUmVmIiwiZGV0YWNoUmVmIiwiLi9lbXB0eU9iamVjdCIsMTM3LCJfbm9NZWFzdXJlIiwib2JqTmFtZSIsInN0b3JlZE1lYXN1cmUiLCJtZWFzdXJlZEZ1bmMiLDEzOCwiY3JlYXRlVHJhbnNmZXJTdHJhdGVneSIsIm1lcmdlU3RyYXRlZ3kiLCJ0cmFuc2ZlckludG8iLCJ0aGlzS2V5IiwidHJhbnNmZXJTdHJhdGVneSIsIlRyYW5zZmVyU3RyYXRlZ2llcyIsImpvaW5DbGFzc2VzIiwiZGlkV2FybiIsInRyYW5zZmVyU3RyYXRlZ3lNZXJnZSIsIm1lcmdlUHJvcHMiLCJvbGRQcm9wcyIsInRyYW5zZmVyUHJvcHNUbyIsIi4vam9pbkNsYXNzZXMiLDEzOSwxNDAsMTQxLCJjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlciIsInZhbGlkYXRlIiwiY2hlY2tUeXBlIiwiQU5PTllNT1VTIiwibG9jYXRpb25OYW1lIiwiY2hhaW5lZENoZWNrVHlwZSIsImNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyIiwiZXhwZWN0ZWRUeXBlIiwicHJvcFR5cGUiLCJnZXRQcm9wVHlwZSIsInByZWNpc2VUeXBlIiwiZ2V0UHJlY2lzZVR5cGUiLCJjcmVhdGVBbnlUeXBlQ2hlY2tlciIsInRoYXRSZXR1cm5zIiwiY3JlYXRlQXJyYXlPZlR5cGVDaGVja2VyIiwidHlwZUNoZWNrZXIiLCJjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIiLCJjcmVhdGVJbnN0YW5jZVR5cGVDaGVja2VyIiwiZXhwZWN0ZWRDbGFzcyIsImV4cGVjdGVkQ2xhc3NOYW1lIiwiY3JlYXRlRW51bVR5cGVDaGVja2VyIiwiZXhwZWN0ZWRWYWx1ZXMiLCJ2YWx1ZXNTdHJpbmciLCJjcmVhdGVPYmplY3RPZlR5cGVDaGVja2VyIiwiY3JlYXRlVW5pb25UeXBlQ2hlY2tlciIsImFycmF5T2ZUeXBlQ2hlY2tlcnMiLCJjaGVja2VyIiwiY3JlYXRlTm9kZUNoZWNrZXIiLCJpc05vZGUiLCJjcmVhdGVTaGFwZVR5cGVDaGVja2VyIiwic2hhcGVUeXBlcyIsImVsZW1lbnRUeXBlQ2hlY2tlciIsIm5vZGVUeXBlQ2hlY2tlciIsImFycmF5T2YiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJvbmVPZiIsIm9uZU9mVHlwZSIsInJlbmRlcmFibGUiLDE0MiwiUmVhY3RQdXRMaXN0ZW5lclF1ZXVlIiwibGlzdGVuZXJzVG9QdXQiLCJwdXRMaXN0ZW5lcnMiLCJsaXN0ZW5lclRvUHV0IiwxNDMsInJlYWN0TW91bnRSZWFkeSIsInB1dExpc3RlbmVyUXVldWUiLCJTRUxFQ1RJT05fUkVTVE9SQVRJT04iLCJFVkVOVF9TVVBQUkVTU0lPTiIsImN1cnJlbnRseUVuYWJsZWQiLCJwcmV2aW91c2x5RW5hYmxlZCIsIk9OX0RPTV9SRUFEWV9RVUVVRUlORyIsIlBVVF9MSVNURU5FUl9RVUVVRUlORyIsIi4vQ2FsbGJhY2tRdWV1ZSIsIi4vUmVhY3RQdXRMaXN0ZW5lclF1ZXVlIiwxNDQsIlJlYWN0Um9vdEluZGV4SW5qZWN0aW9uIiwiX2NyZWF0ZVJlYWN0Um9vdEluZGV4IiwxNDUsIlJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24iLCIuL1JlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24iLDE0NiwxNDcsImVzY2FwZWRUZXh0IiwiUmVhY3RUZXh0Q29tcG9uZW50RmFjdG9yeSIsMTQ4LCJlbnN1cmVJbmplY3RlZCIsImJhdGNoaW5nU3RyYXRlZ3kiLCJSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uIiwiZGlydHlDb21wb25lbnRzTGVuZ3RoIiwiY2FsbGJhY2tRdWV1ZSIsInJlY29uY2lsZVRyYW5zYWN0aW9uIiwibW91bnREZXB0aENvbXBhcmF0b3IiLCJjMSIsImMyIiwicnVuQmF0Y2hlZFVwZGF0ZXMiLCJkaXJ0eUNvbXBvbmVudHMiLCJhc2FwQ2FsbGJhY2tRdWV1ZSIsImFzYXBFbnF1ZXVlZCIsIk5FU1RFRF9VUERBVEVTIiwiVVBEQVRFX1FVRVVFSU5HIiwiUmVhY3RVcGRhdGVzSW5qZWN0aW9uIiwiUmVjb25jaWxlVHJhbnNhY3Rpb24iLCJfYmF0Y2hpbmdTdHJhdGVneSIsMTQ5LCJjeCIsImN5IiwiZHgiLCJkeSIsImZ4IiwiZnkiLCJncmFkaWVudFRyYW5zZm9ybSIsImdyYWRpZW50VW5pdHMiLCJtYXJrZXJFbmQiLCJtYXJrZXJNaWQiLCJtYXJrZXJTdGFydCIsInBhdHRlcm5Db250ZW50VW5pdHMiLCJwYXR0ZXJuVW5pdHMiLCJwb2ludHMiLCJwcmVzZXJ2ZUFzcGVjdFJhdGlvIiwicngiLCJyeSIsInNwcmVhZE1ldGhvZCIsInN0b3BDb2xvciIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlIiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlTGluZWNhcCIsInN0cm9rZVdpZHRoIiwidGV4dEFuY2hvciIsInRyYW5zZm9ybSIsInZpZXdCb3giLCJ4MSIsIngyIiwieTEiLCJ5MiIsMTUwLCJib3VuZGluZ1RvcCIsImJvdW5kaW5nTGVmdCIsImNvbnN0cnVjdFNlbGVjdEV2ZW50IiwiY3VycmVudFNlbGVjdGlvbiIsImxhc3RTZWxlY3Rpb24iLCJzaGFsbG93RXF1YWwiLCJzeW50aGV0aWNFdmVudCIsIm9uU2VsZWN0Iiwib25TZWxlY3RDYXB0dXJlIiwiLi9zaGFsbG93RXF1YWwiLDE1MSwiR0xPQkFMX01PVU5UX1BPSU5UX01BWCIsMTUyLCJTeW50aGV0aWNDbGlwYm9hcmRFdmVudCIsIlN5bnRoZXRpY0ZvY3VzRXZlbnQiLCJTeW50aGV0aWNLZXlib2FyZEV2ZW50IiwiU3ludGhldGljRHJhZ0V2ZW50IiwiU3ludGhldGljVG91Y2hFdmVudCIsIlN5bnRoZXRpY1VJRXZlbnQiLCJTeW50aGV0aWNXaGVlbEV2ZW50IiwiZ2V0RXZlbnRDaGFyQ29kZSIsImJsdXIiLCJvbkJsdXJDYXB0dXJlIiwiY2xpY2siLCJvbkNvbnRleHRNZW51Iiwib25Db250ZXh0TWVudUNhcHR1cmUiLCJvbkNvcHkiLCJvbkNvcHlDYXB0dXJlIiwiY3V0Iiwib25DdXQiLCJvbkN1dENhcHR1cmUiLCJkb3VibGVDbGljayIsImRyYWciLCJvbkRyYWciLCJvbkRyYWdDYXB0dXJlIiwiZHJhZ0VuZCIsIm9uRHJhZ0VuZCIsIm9uRHJhZ0VuZENhcHR1cmUiLCJkcmFnRW50ZXIiLCJvbkRyYWdFbnRlciIsIm9uRHJhZ0VudGVyQ2FwdHVyZSIsImRyYWdFeGl0Iiwib25EcmFnRXhpdCIsIm9uRHJhZ0V4aXRDYXB0dXJlIiwiZHJhZ0xlYXZlIiwib25EcmFnTGVhdmUiLCJvbkRyYWdMZWF2ZUNhcHR1cmUiLCJkcmFnT3ZlciIsIm9uRHJhZ092ZXIiLCJvbkRyYWdPdmVyQ2FwdHVyZSIsImRyYWdTdGFydCIsIm9uRHJhZ1N0YXJ0Iiwib25EcmFnU3RhcnRDYXB0dXJlIiwib25Ecm9wIiwib25Ecm9wQ2FwdHVyZSIsIm9uRm9jdXNDYXB0dXJlIiwib25JbnB1dCIsIm9uSW5wdXRDYXB0dXJlIiwia2V5RG93biIsIm9uS2V5RG93bkNhcHR1cmUiLCJrZXlQcmVzcyIsIm9uS2V5UHJlc3MiLCJvbktleVByZXNzQ2FwdHVyZSIsImtleVVwIiwib25LZXlVcCIsIm9uS2V5VXBDYXB0dXJlIiwibG9hZCIsIm9uTG9hZENhcHR1cmUiLCJvbkVycm9yQ2FwdHVyZSIsIm1vdXNlTW92ZSIsIm1vdXNlT3V0Iiwib25Nb3VzZU91dCIsIm9uTW91c2VPdXRDYXB0dXJlIiwibW91c2VPdmVyIiwib25Nb3VzZU92ZXIiLCJvbk1vdXNlT3ZlckNhcHR1cmUiLCJtb3VzZVVwIiwicGFzdGUiLCJvblBhc3RlIiwib25QYXN0ZUNhcHR1cmUiLCJvblJlc2V0Iiwib25SZXNldENhcHR1cmUiLCJzY3JvbGwiLCJvblNjcm9sbCIsIm9uU2Nyb2xsQ2FwdHVyZSIsIm9uU3VibWl0Iiwib25TdWJtaXRDYXB0dXJlIiwidG91Y2hDYW5jZWwiLCJvblRvdWNoQ2FuY2VsIiwib25Ub3VjaENhbmNlbENhcHR1cmUiLCJ0b3VjaEVuZCIsIm9uVG91Y2hFbmRDYXB0dXJlIiwidG91Y2hNb3ZlIiwib25Ub3VjaE1vdmUiLCJvblRvdWNoTW92ZUNhcHR1cmUiLCJ0b3VjaFN0YXJ0Iiwib25Ub3VjaFN0YXJ0Iiwib25Ub3VjaFN0YXJ0Q2FwdHVyZSIsIndoZWVsIiwib25XaGVlbCIsIm9uV2hlZWxDYXB0dXJlIiwidG9wTGV2ZWxFdmVudHNUb0Rpc3BhdGNoQ29uZmlnIiwiRXZlbnRDb25zdHJ1Y3RvciIsIi4vU3ludGhldGljQ2xpcGJvYXJkRXZlbnQiLCIuL1N5bnRoZXRpY0RyYWdFdmVudCIsIi4vU3ludGhldGljRm9jdXNFdmVudCIsIi4vU3ludGhldGljS2V5Ym9hcmRFdmVudCIsIi4vU3ludGhldGljVG91Y2hFdmVudCIsIi4vU3ludGhldGljVUlFdmVudCIsIi4vU3ludGhldGljV2hlZWxFdmVudCIsIi4vZ2V0RXZlbnRDaGFyQ29kZSIsMTUzLCJDbGlwYm9hcmRFdmVudEludGVyZmFjZSIsImNsaXBib2FyZERhdGEiLCJhdWdtZW50Q2xhc3MiLDE1NCwiQ29tcG9zaXRpb25FdmVudEludGVyZmFjZSIsMTU1LCJEcmFnRXZlbnRJbnRlcmZhY2UiLCJkYXRhVHJhbnNmZXIiLDE1NiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwidGhhdFJldHVybnNUcnVlIiwidGhhdFJldHVybnNGYWxzZSIsIkV2ZW50SW50ZXJmYWNlIiwidGhhdFJldHVybnNOdWxsIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiaXNUcnVzdGVkIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsIkNsYXNzIiwiU3VwZXIiLDE1NywiRm9jdXNFdmVudEludGVyZmFjZSIsMTU4LCJJbnB1dEV2ZW50SW50ZXJmYWNlIiwxNTksImdldEV2ZW50S2V5IiwiZ2V0RXZlbnRNb2RpZmllclN0YXRlIiwiS2V5Ym9hcmRFdmVudEludGVyZmFjZSIsInJlcGVhdCIsImxvY2FsZSIsImdldE1vZGlmaWVyU3RhdGUiLCJjaGFyQ29kZSIsIi4vZ2V0RXZlbnRLZXkiLCIuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZSIsMTYwLCJNb3VzZUV2ZW50SW50ZXJmYWNlIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsImJ1dHRvbnMiLCJwYWdlWCIsImN1cnJlbnRTY3JvbGxMZWZ0IiwicGFnZVkiLCJjdXJyZW50U2Nyb2xsVG9wIiwxNjEsIlRvdWNoRXZlbnRJbnRlcmZhY2UiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwxNjIsIlVJRXZlbnRJbnRlcmZhY2UiLCJ2aWV3IiwiZGV0YWlsIiwxNjMsIldoZWVsRXZlbnRJbnRlcmZhY2UiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsMTY0LCJ0cmFuc2FjdGlvbldyYXBwZXJzIiwid3JhcHBlckluaXREYXRhIiwiX2lzSW5UcmFuc2FjdGlvbiIsImlzSW5UcmFuc2FjdGlvbiIsImluaXRpYWxpemVBbGwiLCJjbG9zZUFsbCIsInN0YXJ0SW5kZXgiLCJPQlNFUlZFRF9FUlJPUiIsImluaXREYXRhIiwxNjUsMTY2LCJjdXJyZW50SXNBcnJheSIsIm5leHRJc0FycmF5IiwxNjcsIk1PRCIsMTY4LCJjYW1lbGl6ZSIsIl9oeXBoZW5QYXR0ZXJuIiwiY2hhcmFjdGVyIiwxNjksIm1zUGF0dGVybiIsIi4vY2FtZWxpemUiLDE3MCwib3V0ZXJOb2RlIiwiaW5uZXJOb2RlIiwiaXNUZXh0Tm9kZSIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiLi9pc1RleHROb2RlIiwxNzEsImhhc0FycmF5TmF0dXJlIiwiY3JlYXRlQXJyYXlGcm9tIiwiLi90b0FycmF5IiwxNzIsImVsZW1lbnRGYWN0b3J5IiwiRnVsbFBhZ2VDb21wb25lbnQiLDE3Mywibm9kZU5hbWVNYXRjaCIsIm5vZGVOYW1lUGF0dGVybiIsImhhbmRsZVNjcmlwdCIsImR1bW15Tm9kZSIsIndyYXBEZXB0aCIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsIm5vZGVzIiwiLi9jcmVhdGVBcnJheUZyb20iLDE3NCwxNzUsImlzTm9uTnVtZXJpYyIsMTc2LCJuYW1lc3BhY2UiLCJvbGROYW1lIiwibmV3TmFtZSIsImN0eCIsImZuIiwid2FybmVkIiwibmV3Rm4iLDE3NywibWFrZUVtcHR5RnVuY3Rpb24iLCJ0aGF0UmV0dXJuc1RoaXMiLCJ0aGF0UmV0dXJuc0FyZ3VtZW50IiwxNzgsMTc5LCJFU0NBUEVfTE9PS1VQIiwiRVNDQVBFX1JFR0VYIiwxODAsImZsYXR0ZW5TaW5nbGVDaGlsZEludG9Db250ZXh0Iiwibm9ybWFsaXplZFZhbHVlIiwxODEsMTgyLDE4MywxODQsMTg1LCJub3JtYWxpemVLZXkiLCJ0cmFuc2xhdGVUb0tleSIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLDIyNCwxODYsIm1vZGlmaWVyU3RhdGVHZXR0ZXIiLCJrZXlBcmciLCJrZXlQcm9wIiwibW9kaWZpZXJLZXlUb1Byb3AiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwxODcsMTg4LCJtYXJrdXBXcmFwIiwic2hvdWxkV3JhcCIsInNlbGVjdFdyYXAiLCJ0YWJsZVdyYXAiLCJ0cldyYXAiLCJzdmdXcmFwIiwiKiIsMTg5LCJnZXRMZWFmTm9kZSIsImdldFNpYmxpbmdOb2RlIiwibm9kZVN0YXJ0Iiwibm9kZUVuZCIsMTkwLDE5MSwiY29udGVudEtleSIsMTkyLCJzY3JvbGxhYmxlIiwxOTMsImh5cGhlbmF0ZSIsIl91cHBlcmNhc2VQYXR0ZXJuIiwxOTQsIi4vaHlwaGVuYXRlIiwxOTUsInBhcmVudENvbXBvc2l0ZVR5cGUiLCJfZ2V0TW9ja0ltcGxlbWVudGF0aW9uIiwibW9ja0ltcGxlbWVudGF0aW9uIiwxOTYsImNvbmRpdGlvbiIsImZvcm1hdCIsImFyZ0luZGV4IiwiZnJhbWVzVG9Qb3AiLDE5NywiZXZlbnROYW1lU3VmZml4IiwiaXNTdXBwb3J0ZWQiLCJ1c2VIYXNGZWF0dXJlIiwxOTgsIk5vZGUiLDE5OSwic3VwcG9ydGVkSW5wdXRUeXBlcyIsImRhdGUiLCJkYXRldGltZSIsImRhdGV0aW1lLWxvY2FsIiwiZW1haWwiLCJtb250aCIsInBhc3N3b3JkIiwidGVsIiwid2VlayIsMjAwLCIuL2lzTm9kZSIsMjAxLCJuZXh0Q2xhc3MiLCJhcmdMZW5ndGgiLCJpaSIsMjAyLDIwMywib25lS2V5T2JqIiwyMDQsMjA1LDIwNiwyMDcsMjA4LCJwZXJmb3JtYW5jZSIsIm1zUGVyZm9ybWFuY2UiLCJ3ZWJraXRQZXJmb3JtYW5jZSIsMjA5LCIuL3BlcmZvcm1hbmNlIiwyMTAsIldISVRFU1BBQ0VfVEVTVCIsIk5PTlZJU0lCTEVfVEVTVCIsInRleHROb2RlIiwiZGVsZXRlRGF0YSIsMjExLCJvYmpBIiwib2JqQiIsMjEyLDIxMywyMTQsInVzZXJQcm92aWRlZEtleUVzY2FwZXIiLCJ1c2VyUHJvdmlkZWRLZXlFc2NhcGVyTG9va3VwIiwiZ2V0Q29tcG9uZW50S2V5Iiwid3JhcFVzZXJQcm92aWRlZEtleSIsImVzY2FwZVVzZXJQcm92aWRlZEtleSIsInVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4IiwidHJhdmVyc2VBbGxDaGlsZHJlbkltcGwiLCJTVUJTRVBBUkFUT1IiLCI9IiwiLiIsIjoiLCJuYW1lU29GYXIiLCJpbmRleFNvRmFyIiwibmV4dE5hbWUiLCJzdWJ0cmVlQ291bnQiLCJpc09ubHlDaGlsZCIsInN0b3JhZ2VOYW1lIiwyMTUsMjE2LCIuL2xpYi9SZWFjdCIsMjE3LCJmaXJlYmFzZVJlZnMiLCJmaXJlYmFzZUxpc3RlbmVycyIsInVuYmluZCIsImJpbmRBc0FycmF5IiwiYmluZFZhciIsImNhbmNlbENhbGxiYWNrIiwiX3ZhbGlkYXRlQmluZFZhciIsImVycm9yTWVzc2FnZSIsImVycm9yQ29kZSIsImRhdGFTbmFwc2hvdCIsIl90b0FycmF5IiwiX2lzQXJyYXkiXSwibWFwcGluZ3MiOiJDQUFBLFFBQVVBLEdBQUVDLEVBQUVDLEVBQUVDLEdBQUcsUUFBU0MsR0FBRUMsRUFBRUMsR0FBRyxJQUFJSixFQUFFRyxHQUFHLENBQUMsSUFBSUosRUFBRUksR0FBRyxDQUFDLEdBQUlFLEdBQWtCLGtCQUFUQyxVQUFxQkEsT0FBUSxLQUFJRixHQUFHQyxFQUFFLE1BQU9BLEdBQUVGLEdBQUUsRUFBSSxJQUFHSSxFQUFFLE1BQU9BLEdBQUVKLEdBQUUsRUFBSSxJQUFJSyxHQUFFLEdBQUlDLE9BQU0sdUJBQXVCTixFQUFFLElBQUssTUFBTUssR0FBRUUsS0FBSyxtQkFBbUJGLEVBQUUsR0FBSUcsR0FBRVgsRUFBRUcsSUFBSVMsV0FBWWIsR0FBRUksR0FBRyxHQUFHVSxLQUFLRixFQUFFQyxRQUFRLFNBQVNkLEdBQUcsR0FBSUUsR0FBRUQsRUFBRUksR0FBRyxHQUFHTCxFQUFHLE9BQU9JLEdBQUVGLEVBQUVBLEVBQUVGLElBQUlhLEVBQUVBLEVBQUVDLFFBQVFkLEVBQUVDLEVBQUVDLEVBQUVDLEdBQUcsTUFBT0QsR0FB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TVYwekgsU0FBVSxTQUFTNS9FLEdBQ2pCLE1BQWdELG1CQUF4Q3gwQixPQUFPeEcsVUFBVWxHLFNBQVNyVSxLQUFLdTFDLElBSXpDMi9FLFNBQVUsU0FBUzMvRSxHQUNqQixHQUFJaitCLEtBQ0osSUFBSWkrQixFQUNGLEdBQUl2MEMsS0FBS20wSCxTQUFTNS9FLEdBQ2hCaitCLEVBQU1pK0IsTUFFSCxJQUFvQixnQkFBVixHQUNiLElBQUssR0FBSXRvQyxLQUFPc29DLEdBQ1ZBLEVBQUk3aUMsZUFBZXpGLElBQ3JCcUssRUFBSTNRLEtBQUs0dUMsRUFBSXRvQyxHQUtyQixPQUFPcUssSUFJVCxPQUFPL0csZUFFRSIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSh7MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xudmFyIGdldEpTT04gPSByZXF1aXJlKFwiLi9nZXRKU09OLmpzeFwiKTtcblxudmFyIEdpdEh1YlBlcnNvbiA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6IFwiR2l0SHViUGVyc29uXCIsXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIC8qIFdlIGFyZSBnaXZlbiBhIGdpdGh1YiBuYW1lICovXG4gICAgcmV0dXJuIHtcbiAgICAgIHVzZXJuYW1lOiBcIlwiLFxuICAgICAgbmFtZTogXCJcIixcbiAgICAgIGh0bWxfdXJsOiBcIlwiLFxuICAgICAgYXZhdGFyX3VybDogXCJcIlxuICAgIH07XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlID0gdGhpcy5wcm9wcy5oYW5kbGUudG9Mb3dlckNhc2UoKTtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgLy8gWFhYIEVuc3VyZSB0aGlzIGlzIGNhY2hlZFxuICAgIGdldEpTT04oXCIvYXBpL3VzZXIvXCIgKyBoYW5kbGUsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICBpZiAoZGF0YS5hdmF0YXJfdXJsLmluZGV4T2YoXCI/XCIpICE9PSAtMSkge1xuICAgICAgICBkYXRhLmF2YXRhcl91cmwgPSBkYXRhLmF2YXRhcl91cmwgKyBcIiZzPTY0XCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhLmF2YXRhcl91cmwgPSBkYXRhLmF2YXRhcl91cmwgKyBcIj9zPTY0XCI7XG4gICAgICB9XG4gICAgICBpZiAodGhhdC5pc01vdW50ZWQoKSkge1xuICAgICAgICB0aGF0LnNldFN0YXRlKHtcbiAgICAgICAgICB1c2VybmFtZTogZGF0YS5sb2dpbixcbiAgICAgICAgICBodG1sX3VybDogZGF0YS5odG1sX3VybCxcbiAgICAgICAgICBhdmF0YXJfdXJsOiBkYXRhLmF2YXRhcl91cmwsXG4gICAgICAgICAgbmFtZTogZGF0YS5uYW1lXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uIChlcnJvciwgZGF0YSkge1xuICAgICAgY29uc29sZS5sb2coXCJHT1QgRVJST1JcIiwgZXJyb3IsIGRhdGEpO1xuICAgIH0pO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgXCJhXCIsXG4gICAgICB7IGhyZWY6IHRoaXMuc3RhdGUuaHRtbF91cmwsIHRpdGxlOiB0aGlzLnN0YXRlLm5hbWUgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHsgY2xhc3NOYW1lOiBcInByb2ZpbGUtcGljXCIgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImltZ1wiLCB7IGNsYXNzTmFtZTogXCJwcm9maWxlLXBpYy1idG5cIiwgc3JjOiB0aGlzLnN0YXRlLmF2YXRhcl91cmwgfSlcbiAgICAgIClcbiAgICApO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBHaXRIdWJQZXJzb247XG5cbn0se1wiLi9nZXRKU09OLmpzeFwiOjksXCJyZWFjdFwiOjIxNn1dLDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbnZhciBnZXRKU09OID0gcmVxdWlyZShcIi4vZ2V0SlNPTi5qc3hcIik7XG52YXIgU2VsZWN0ID0gcmVxdWlyZShcInJlYWN0LXNlbGVjdFwiKTtcblxudmFyIEdpdEh1YlBlcnNvbiA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6IFwiR2l0SHViUGVyc29uXCIsXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIC8qIFdlIGFyZSBnaXZlbiBhIGdpdGh1YiBuYW1lICovXG4gICAgcmV0dXJuIHtcbiAgICAgIG1lbWJlcnM6IFtdIH07XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVhbSA9IHRoaXMucHJvcHMudGVhbS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAvLyBYWFggRW5zdXJlIHRoaXMgaXMgY2FjaGVkXG4gICAgZ2V0SlNPTihcIi9hcGkvdGVhbS9cIiArIHRlYW0sIGZ1bmN0aW9uIChtZW1iZXJzKSB7XG4gICAgICBpZiAodGhhdC5pc01vdW50ZWQoKSkge1xuICAgICAgICB2YXIgZGF0YSA9IG1lbWJlcnMubWFwKGZ1bmN0aW9uIChtZW1iZXIpIHtcbiAgICAgICAgICB2YXIgbmFtZSA9IG1lbWJlci5uYW1lO1xuICAgICAgICAgIGlmICghbmFtZSB8fCBuYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5hbWUgPSBcIm5vIG5hbWUgaW4gZ2l0aHViIHByb2ZpbGVcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHsgbGFiZWw6IFwiQFwiICsgbWVtYmVyLmxvZ2luICsgXCIgKFwiICsgbmFtZSArIFwiKVwiLFxuICAgICAgICAgICAgdmFsdWU6IFwiQFwiICsgbWVtYmVyLmxvZ2luIH07XG4gICAgICAgIH0pO1xuICAgICAgICB0aGF0LnNldFN0YXRlKHtcbiAgICAgICAgICBtZW1iZXJzOiBkYXRhXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uIChlcnJvciwgZGF0YSkge1xuICAgICAgY29uc29sZS5sb2coXCJHT1QgRVJST1JcIiwgZXJyb3IsIGRhdGEpO1xuICAgIH0pO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFNlbGVjdCwgeyBuYW1lOiB0aGlzLnByb3BzLm5hbWUsIG9wdGlvbnM6IHRoaXMuc3RhdGUubWVtYmVycyB9KTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gR2l0SHViUGVyc29uO1xuXG59LHtcIi4vZ2V0SlNPTi5qc3hcIjo5LFwicmVhY3RcIjoyMTYsXCJyZWFjdC1zZWxlY3RcIjo2NX1dLDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoXCIuL2F1dGguanN4XCIpO1xuXG52YXIgQXV0aE1peGluID0gX3JlcXVpcmUuQXV0aE1peGluO1xudmFyIEdpdEh1YlBlcnNvbkNob29zZXIgPSByZXF1aXJlKFwiLi9HaXRIdWJQZXJzb25DaG9vc2VyLmpzeFwiKTtcblxudmFyIEFkZCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6IFwiQWRkXCIsXG4gIG1peGluczogW0F1dGhNaXhpbl0sXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBib2R5ID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFwiZGl2XCIsXG4gICAgICBudWxsLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJhXCIsXG4gICAgICAgIHsgY2xhc3NOYW1lOiBcImJ1dHRvblwiLCBvbkNsaWNrOiB0aGlzLmxvZ2luIH0sXG4gICAgICAgIFwiTG9naW4gd2l0aCBHaXRodWJcIlxuICAgICAgKSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwicFwiLFxuICAgICAgICBudWxsLFxuICAgICAgICBcIlRvIGNyZWF0ZSBuZXcgcHJvamVjdHMgeW91IG5lZWQgdG8gYmUgbG9nZ2VkLWluIHRvIHlvdXIgR2l0aHViIGFjY291bnQuXCJcbiAgICAgICksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInBhZ2VmaWxsXCIgfSlcbiAgICApO1xuICAgIGlmICh0aGlzLnN0YXRlLmxvZ2dlZEluKSB7XG4gICAgICBib2R5ID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAgeyBpZDogXCJhZGRcIiB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwiZm9ybVwiLFxuICAgICAgICAgIHsgbWV0aG9kOiBcIlBPU1RcIiwgYWN0aW9uOiBcIi9hcGkvYWRkXCIgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBcInF1ZXN0aW9uXCIgfSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgIFwiaDJcIixcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgXCJHaXZlIHlvdXIgcHJvamVjdCBhIHRpdGxlLlwiXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgXCJwXCIsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIFwiSW4gYXMgZmV3IHdvcmRzIGFzIHBvc3NpYmxlLCBkZXNjcmliZSB3aGF0IHRoaXMgcHJvamVjdCBpcyBhYm91dC5cIlxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiLCB7IG5hbWU6IFwidGl0bGVcIiwgcm93czogXCIyXCIgfSlcbiAgICAgICAgICApLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6IFwicXVlc3Rpb25cIiB9LFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgXCJoMlwiLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBcIldoYXQgaXMgdGhlIHByb2JsZW0geW91IGFyZSB0cnlpbmcgdG8gc29sdmU/XCJcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICBcInBcIixcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgXCJEZXNjcmliZSB3aGF04oCZcyBicm9rZW4gb3IgbWlzc2luZyBmcm9tIHRoZSBjdXJyZW50IGV4cGVyaWVuY2UuXCJcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIiwgeyBuYW1lOiBcInByb2JsZW1cIiwgcm93czogXCI4XCIgfSlcbiAgICAgICAgICApLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6IFwicXVlc3Rpb25cIiB9LFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgXCJoMlwiLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBcIldobyBhcmUgdGhlIHVzZXJzIHlvdSBhcmUgdHJ5aW5nIHRvIGltcGFjdD9cIlxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgIFwicFwiLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBcIkRlc2NyaWJlIHdobyBpcyBiZWluZyBhZmZlY3RlZCBieSB0aGUgcHJvYmxlbSB5b3UgaGF2ZSBkZXNjcmliZWQgKHZpc2l0b3JzLCB0ZWFjaGVycywgc3RhZmYsIGNvbW11bml0eSkuXCJcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIiwgeyBuYW1lOiBcImF1ZGllbmNlXCIsIHJvd3M6IFwiOFwiIH0pXG4gICAgICAgICAgKSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBcInF1ZXN0aW9uXCIgfSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgIFwiaDJcIixcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgXCJXaGF0IGRvZXMgc3VjY2VzcyBsb29rIGxpa2U/XCJcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICBcInBcIixcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgXCJEZXNjcmliZSB0aGUgXFxcInN0YXRlIGNoYW5nZVxcXCIgdGhhdCB5b3Ugd2lzaCB0byBhY2NvbXBsaXNoLiBEbyB5b3UgaGF2ZSBtZXRyaWNzIHRoYXQgd2UgY2FuIHJlZmVyZW5jZT9cIlxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiLCB7IG5hbWU6IFwic3VjY2Vzc1wiLCByb3dzOiBcIjhcIiB9KVxuICAgICAgICAgICksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogXCJxdWVzdGlvblwiIH0sXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICBcImgyXCIsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIFwiV2hhdCBpcyB5b3VyIHZpc2lvbiBmb3IgYSBzb2x1dGlvbj9cIlxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgIFwicFwiLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBcIkRlc2NyaWJlIGEgaGlnaCBsZXZlbCBzb2x1dGlvbiB0byBzb2x2ZSB0aGUgcHJvYmxlbS4gVGhpbmsgYWJvdXQgdGhlIG1vc3QgaW1wb3J0YW50LCBpbXBhY3RmdWwgcGFydCBvZiB0aGUgc29sdXRpb24uXCJcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIiwgeyBuYW1lOiBcInZpc2lvblwiLCByb3dzOiBcIjhcIiB9KVxuICAgICAgICAgICksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogXCJxdWVzdGlvblwiIH0sXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICBcImgyXCIsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIFwiSG93IHdpbGwgeW91IG1lYXN1cmUgc3VjY2Vzcz9cIlxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgIFwicFwiLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBcIkRlc2NyaWJlIHRoZSBkYXRhIHlvdSB3aWxsIHVzZS4gSXMgdGhlcmUgZXhpc3RpbmcgdHJhY2tpbmcgaW4gcGxhY2U/IERvIHlvdSBuZWVkIHRvIHNldHVwIG5ldyByZXBvcnRzIG9yIGRhc2hib2FyZHM/XCJcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIiwgeyBuYW1lOiBcIm1lYXN1cmVtZW50XCIsIHJvd3M6IFwiOFwiIH0pXG4gICAgICAgICAgKSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBcInF1ZXN0aW9uXCIgfSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgIFwiaDJcIixcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgXCJEZWNpc2lvbiBNYWtlclwiXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgXCJwXCIsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIFwiV2hvIGlzIHRoZSBzaW5nbGUgcGVyc29uIHdobyBjYW4gYmUgcmVsaWVkIHVwb24gdG8gbWFrZSB0aGUgZGVjaXNpb25zIHRoYXQgd2lsbCBjb21lIHVwIGR1cmluZyB0aGlzIGluaXRpYXRpdmU/XCJcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEdpdEh1YlBlcnNvbkNob29zZXIsIHsgbmFtZTogXCJkZWNpc2lvblwiLCB0ZWFtOiBcIk1vRm9zXCIgfSlcbiAgICAgICAgICApLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6IFwicXVlc3Rpb25cIiB9LFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgXCJoMlwiLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBcIkRyaXZlciAob3B0aW9uYWwpXCJcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICBcInBcIixcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgXCJJZiBrbm93biwgd2hvIGlzIHRoZSBzaW5nbGUgcGVyc29uIHdobyB3aWxsIGRyaXZlIHRoaXMgaW5pdGlhdGl2ZSBmb3IgdGhlIGhlYXJ0YmVhdD9cIlxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR2l0SHViUGVyc29uQ2hvb3NlciwgeyBuYW1lOiBcImRyaXZlclwiLCB0ZWFtOiBcInRyYWluZWQgZHJpdmVyc1wiIH0pXG4gICAgICAgICAgKSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBcImJ1dHRvblwiLCB0eXBlOiBcInN1Ym1pdFwiIH0sXG4gICAgICAgICAgICBcIlN1Ym1pdCBQcm9qZWN0XCJcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFwiZGl2XCIsXG4gICAgICBudWxsLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAgeyBjbGFzc05hbWU6IFwiaGVhZGVyXCIgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcImgyXCIsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBcIk5ldyBJbml0aWF0aXZlXCJcbiAgICAgICAgKVxuICAgICAgKSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHsgY2xhc3NOYW1lOiBcIm1haW5cIiB9LFxuICAgICAgICBib2R5XG4gICAgICApXG4gICAgKTtcbiAgfVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IEFkZDtcblxufSx7XCIuL0dpdEh1YlBlcnNvbkNob29zZXIuanN4XCI6MixcIi4vYXV0aC5qc3hcIjo2LFwicmVhY3RcIjoyMTZ9XSw0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG52YXIgUm91dGVyID0gcmVxdWlyZShcInJlYWN0LXJvdXRlclwiKTtcbnZhciBSb3V0ZSA9IFJvdXRlci5Sb3V0ZTtcbnZhciBSb3V0ZUhhbmRsZXIgPSBSb3V0ZXIuUm91dGVIYW5kbGVyO1xudmFyIExpbmsgPSBSb3V0ZXIuTGluaztcbnZhciBEZWZhdWx0Um91dGUgPSBSb3V0ZXIuRGVmYXVsdFJvdXRlO1xudmFyIF9yZXF1aXJlID0gcmVxdWlyZShcIi4vYXV0aC5qc3hcIik7XG5cbnZhciBBdXRoQmxvY2sgPSBfcmVxdWlyZS5BdXRoQmxvY2s7XG52YXIgQWRkID0gcmVxdWlyZShcIi4vYWRkLmpzeFwiKTtcbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKFwiLi9oZWFydGJlYXRzLmpzeFwiKTtcblxudmFyIE5vdyA9IF9yZXF1aXJlMi5Ob3c7XG52YXIgTmV4dCA9IF9yZXF1aXJlMi5OZXh0O1xudmFyIFVwY29taW5nID0gcmVxdWlyZShcIi4vdXBjb21pbmcuanN4XCIpO1xudmFyIEhvbWVwYWdlID0gcmVxdWlyZShcIi4vaG9tZXBhZ2UuanN4XCIpO1xudmFyIERlc2lnbiA9IHJlcXVpcmUoXCIuL2Rlc2lnbi5qc3hcIik7XG52YXIgQXVkaWVuY2UgPSByZXF1aXJlKFwiLi9hdWRpZW5jZS5qc3hcIik7XG5cbnZhciBBcHAgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiBcIkFwcFwiLFxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbG9nZ2VkSW46IGZhbHNlXG4gICAgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFwiZGl2XCIsXG4gICAgICBudWxsLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJ1bFwiLFxuICAgICAgICB7IGNsYXNzTmFtZTogXCJuYXZpZ2F0aW9uXCIgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcImxpXCIsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IFwiaWNvbi1ob21lXCIgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgTGluayxcbiAgICAgICAgICAgIHsgdG86IFwiL1wiIH0sXG4gICAgICAgICAgICBcIkhvbWVcIlxuICAgICAgICAgIClcbiAgICAgICAgKSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChBdXRoQmxvY2ssIG51bGwpLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwibGlcIixcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIFwiwqBcIlxuICAgICAgICApLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwibGlcIixcbiAgICAgICAgICB7IGNsYXNzTmFtZTogXCJpY29uLWFkZFwiIH0sXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIExpbmssXG4gICAgICAgICAgICB7IHRvOiBcImFkZFwiIH0sXG4gICAgICAgICAgICBcIkFkZCBQcm9qZWN0XCJcbiAgICAgICAgICApXG4gICAgICAgICksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJsaVwiLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiBcImljb24tbm93XCIgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgTGluayxcbiAgICAgICAgICAgIHsgdG86IFwibm93XCIgfSxcbiAgICAgICAgICAgIFwiVGhpcyBIZWFydGJlYXRcIlxuICAgICAgICAgIClcbiAgICAgICAgKSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcImxpXCIsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IFwiaWNvbi1uZXh0XCIgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgTGluayxcbiAgICAgICAgICAgIHsgdG86IFwibmV4dFwiIH0sXG4gICAgICAgICAgICBcIk5leHQgSGVhcnRiZWF0XCJcbiAgICAgICAgICApXG4gICAgICAgICksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJsaVwiLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiBcImljb24tdXBjb21pbmdcIiB9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBMaW5rLFxuICAgICAgICAgICAgeyB0bzogXCJ1cGNvbWluZ1wiIH0sXG4gICAgICAgICAgICBcIlVwY29taW5nXCJcbiAgICAgICAgICApXG4gICAgICAgICksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJsaVwiLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgXCLCoFwiXG4gICAgICAgICksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJsaVwiLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiBcImljb24tYXVkaWVuY2VcIiB9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBMaW5rLFxuICAgICAgICAgICAgeyB0bzogXCJhdWRpZW5jZVwiIH0sXG4gICAgICAgICAgICBcIk91ciBBdWRpZW5jZVwiXG4gICAgICAgICAgKVxuICAgICAgICApLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwibGlcIixcbiAgICAgICAgICB7IGNsYXNzTmFtZTogXCJpY29uLXN0cmF0ZWd5XCIgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgXCJhXCIsXG4gICAgICAgICAgICB7IGhyZWY6IFwiaHR0cHM6Ly93aWtpLm1vemlsbGEub3JnL1dlYm1ha2VyLzIwMTVcIiB9LFxuICAgICAgICAgICAgXCJTdHJhdGVneVwiXG4gICAgICAgICAgKVxuICAgICAgICApLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwibGlcIixcbiAgICAgICAgICB7IGNsYXNzTmFtZTogXCJpY29uLWRhc2hib2FyZFwiIH0sXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgICAgeyBocmVmOiBcImh0dHBzOi8vbW96aWxsYWZvdW5kYXRpb24uZ2Vja29ib2FyZC5jb20vZGFzaGJvYXJkcy9GNjIwODgxNzJEODIyRTJBXCIgfSxcbiAgICAgICAgICAgIFwiRGFzaGJvYXJkXCJcbiAgICAgICAgICApXG4gICAgICAgICksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJsaVwiLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgXCLCoFwiXG4gICAgICAgICksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJsaVwiLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiBcImljb24taG93XCIgfSxcbiAgICAgICAgICBcIkhvdyBXZSBXb3JrXCJcbiAgICAgICAgKSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcInVsXCIsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgXCJsaVwiLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgICAgICB7IGhyZWY6IFwiaHR0cDovL2Jvb2sud2VibWFrZXIub3JnXCIgfSxcbiAgICAgICAgICAgICAgXCJQcm9jZXNzXCJcbiAgICAgICAgICAgIClcbiAgICAgICAgICApLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBcImxpXCIsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgTGluayxcbiAgICAgICAgICAgICAgeyB0bzogXCJkZXNpZ25cIiB9LFxuICAgICAgICAgICAgICBcIkRlc2lnblwiXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwibGlcIixcbiAgICAgICAgICB7IGNsYXNzTmFtZTogXCJpY29uLWludm9sdmVkXCIgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgXCJhXCIsXG4gICAgICAgICAgICB7IGhyZWY6IFwiaHR0cHM6Ly93ZWJtYWtlci5vcmcvZW4tVVMvZ2V0aW52b2x2ZWRcIiB9LFxuICAgICAgICAgICAgXCJHZXQgSW52b2x2ZWRcIlxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7IHR5cGU6IFwiY2hlY2tib3hcIiwgaWQ6IFwibmF2LXRyaWdnZXJcIiwgY2xhc3NOYW1lOiBcIm5hdi10cmlnZ2VyXCIgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIiwgeyBodG1sRm9yOiBcIm5hdi10cmlnZ2VyXCIgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBcImRpdlwiLFxuICAgICAgICB7IGNsYXNzTmFtZTogXCJjb250YWluZXJcIiB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlSGFuZGxlciwgbnVsbClcbiAgICAgIClcbiAgICApO1xuICB9LFxuXG4gIG9uTG9nZ2VkSW46IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBsb2dnZWRJbjogdHJ1ZVxuICAgIH0pO1xuICB9LFxuXG4gIG9uTG9nZ2VkT3V0OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBsb2dnZWRJbjogZmFsc2VcbiAgICB9KTtcbiAgfVxufSk7XG5cblxuXG52YXIgcm91dGVzID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgUm91dGUsXG4gIHsgcGF0aDogXCIvXCIsIGhhbmRsZXI6IEFwcCB9LFxuICBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7IG5hbWU6IFwiYWRkXCIsIGhhbmRsZXI6IEFkZCB9KSxcbiAgUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZSwgeyBuYW1lOiBcIm5vd1wiLCBoYW5kbGVyOiBOb3cgfSksXG4gIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGUsIHsgbmFtZTogXCJuZXh0XCIsIGhhbmRsZXI6IE5leHQsIHBhdGg6IFwibmV4dFwiLCB0aXRsZTogXCJOZXh0IEhlYXJ0YmVhdFwiIH0pLFxuICBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7IG5hbWU6IFwidXBjb21pbmdcIiwgaGFuZGxlcjogVXBjb21pbmcgfSksXG4gIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGUsIHsgbmFtZTogXCJkZXNpZ25cIiwgaGFuZGxlcjogRGVzaWduIH0pLFxuICBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7IG5hbWU6IFwiYXVkaWVuY2VcIiwgaGFuZGxlcjogQXVkaWVuY2UgfSksXG4gIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdFJvdXRlLCB7IGhhbmRsZXI6IEhvbWVwYWdlIH0pXG4pO1xuXG5Sb3V0ZXIucnVuKHJvdXRlcywgUm91dGVyLkhpc3RvcnlMb2NhdGlvbiwgZnVuY3Rpb24gKEhhbmRsZXIpIHtcbiAgUmVhY3QucmVuZGVyKFJlYWN0LmNyZWF0ZUVsZW1lbnQoSGFuZGxlciwgbnVsbCksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYXBwXCIpKTtcbn0pO1xuXG59LHtcIi4vYWRkLmpzeFwiOjMsXCIuL2F1ZGllbmNlLmpzeFwiOjUsXCIuL2F1dGguanN4XCI6NixcIi4vZGVzaWduLmpzeFwiOjcsXCIuL2hlYXJ0YmVhdHMuanN4XCI6MTAsXCIuL2hvbWVwYWdlLmpzeFwiOjExLFwiLi91cGNvbWluZy5qc3hcIjoxNCxcInJlYWN0XCI6MjE2LFwicmVhY3Qtcm91dGVyXCI6MzF9XSw1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cbnZhciBQZXJzb25hID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogXCJQZXJzb25hXCIsXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSxcbiAgZ2V0TW90aXZhdG9yczogZnVuY3Rpb24gKCkge1xuICAgIHZhciBwZXJzb25hTW90aXZhdG9ycyA9IHRoaXMucHJvcHMubW90aXZhdG9ycy5zcGxpdChcIixcIik7XG4gICAgdmFyIG1vdGl2YXRvckxpc3QgPSBbXTtcbiAgICBbXCJBdHRlbnRpb25cIiwgXCJDb21tdW5pdHlcIiwgXCJBbWJpdGlvblwiLCBcIlNlbGYgRXhwcmVzc2lvblwiXS5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7XG4gICAgICBtb3RpdmF0b3JMaXN0LnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJsaVwiLFxuICAgICAgICB7IGNsYXNzTmFtZTogcGVyc29uYU1vdGl2YXRvcnMuaW5kZXhPZihtKSA+IC0xID8gXCJvblwiIDogXCJcIiB9LFxuICAgICAgICBtXG4gICAgICApKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbW90aXZhdG9yTGlzdDtcbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBcImRpdlwiLFxuICAgICAgbnVsbCxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHsgY2xhc3NOYW1lOiBcImluZm8tYm94XCIgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcImgzXCIsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICB0aGlzLnByb3BzLm5hbWVcbiAgICAgICAgKSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcInVsXCIsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IFwidHJhaXRzXCIgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgXCJsaVwiLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHRoaXMucHJvcHMubG9jYXRpb25cbiAgICAgICAgICApLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBcImxpXCIsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgdGhpcy5wcm9wcy5vY2N1cGF0aW9uXG4gICAgICAgICAgKVxuICAgICAgICApLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwidWxcIixcbiAgICAgICAgICB7IGNsYXNzTmFtZTogXCJtb3RpdmF0b3JzXCIgfSxcbiAgICAgICAgICB0aGlzLmdldE1vdGl2YXRvcnMoKVxuICAgICAgICApXG4gICAgICApLFxuICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgICk7XG4gIH1cbn0pO1xuXG52YXIgQXVkaWVuY2UgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiBcIkF1ZGllbmNlXCIsXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgXCJkaXZcIixcbiAgICAgIG51bGwsXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBcImRpdlwiLFxuICAgICAgICB7IGNsYXNzTmFtZTogXCJoZWFkZXJcIiB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwiaDJcIixcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIFwiT3VyIEF1ZGllbmNlXCJcbiAgICAgICAgKVxuICAgICAgKSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHsgY2xhc3NOYW1lOiBcIm1haW5cIiB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBpZDogXCJhdWRpZW5jZVwiIH0sXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIFwiaDJcIixcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBcImNsZWFyZml4XCIgfSxcbiAgICAgICAgICAgIFwiTW90aXZhdG9yc1wiXG4gICAgICAgICAgKSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgXCJzZWN0aW9uXCIsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogXCJtb3RpdmF0b3JzXCIgfSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBcInN1YnNlY3Rpb25cIiB9LFxuICAgICAgICAgICAgICBcIlRoZXJlIGFyZSBwcmluY2lwYWwgbW90aXZhdG9ycyBiZWhpbmQgYW55IHByb2R1Y3QgdGhhdCBwZW9wbGUga25vdyBhbmQgbG92ZSwgdGhyb3VnaCB3aGljaCBpbnRlcmVzdCBhbmQgaW5nZW51aXR5IGFyZSByZXRhaW5lZC4gV2VibWFrZXIgaG9wZXMgdG8gaW5nbml0ZSB0aGVzZSBtb3RpdmF0aW9ucyB0byBwcm9tb3RlIG1ha2luZyBhbmQgbGVhcm5pbmcgb24gdGhlIG9wZW4sIGFuZCBpbmNyZWFzaW5nbHkgbW9iaWxlIHdlYi5cIlxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBcInN1YnNlY3Rpb24gZ3JpZFwiIH0sXG4gICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogXCJyb3ctMlwiIH0sXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogXCJjb2wgYXR0ZW50aW9uXCIgfSxcbiAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgIFwiaDNcIixcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgXCJBdHRlbnRpb25cIlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgIFwicFwiLFxuICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICBcIlBhc3Npb24gZm9yIGludGVyYWN0aW5nIHdpdGggYW4gYXVkaWVuY2UuXCJcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6IFwiY29sIGNvbW11bml0eVwiIH0sXG4gICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICBcImgzXCIsXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIFwiQ29tbXVuaXR5XCJcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICBcInBcIixcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgXCJGZWVsaW5nIG9mIGNvbm5lY3Rpb24gYW5kIG9yZ2FuaXphdGlvbiB3aXRoIHBlZXJzLCBmcmllbmRzLCBhbmQgYWNxdWFpbnRhbmNlcy4gXCJcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogXCJyb3ctMlwiIH0sXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogXCJjb2wgc2VsZi1leHByZXNzaW9uXCIgfSxcbiAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgIFwiaDNcIixcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgXCJTZWxmIEV4cHJlc3Npb25cIlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgIFwicFwiLFxuICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICBcIkFiaWxpdHkgdG8gc2hhcmUgYW5kIGNvbW11bmljYXRlIGtub3dsZWRnZSwgcXVlc3Rpb25zLCBhbmQgY3JlYXRpdml0eSB3aXRoIG90aGVyIHBlb3BsZS5cIlxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogXCJjb2wgYXNwaXJhdGlvblwiIH0sXG4gICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICBcImgzXCIsXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIFwiQW1iaXRpb25cIlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgIFwicFwiLFxuICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICBcIkRlc2lyZSB0byBhY2hpZXZlIHBlcnNvbmFsIGdyb3d0aC5cIlxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIFwiaDJcIixcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBcImNsZWFyZml4XCIgfSxcbiAgICAgICAgICAgIFwiUGVyc29uYXNcIlxuICAgICAgICAgICksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIFwic2VjdGlvblwiLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6IFwicGVyc29uYXNcIiB9LFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgeyBjbGFzc05hbWU6IFwic3Vic2VjdGlvblwiIH0sXG4gICAgICAgICAgICAgIFwiVG8gYmV0dGVyIHVuZGVyc3RhbmQgV2VibWFrZXLigJlzIGF1ZGllbmNlLCB3ZSBjb25kdWN0ZWQgaW50ZXJ2aWV3cywgcmVzZWFyY2ggYW5kIGFuYWx5c2lzIG9mIHJlYWwgdXNlcnPigJkgbW90aXZhdGlvbnMgYW5kIHN0cnVnZ2xlcy4gUmVhbC1saWZlIHVzZXJzIGFyZSBjb21wbGV4IGFuZCBhbHdheXMgY2hhbmdpbmcsIGJ1dCB0aGVzZSBwZXJzb25hcyB3aWxsIG1vcmUgZWFzaWx5IGxldCB1cyBlbnRlciB0aGUgaGVhZHNwYWNlIG9mIG91ciB1c2VycyB3aG8gYXJlIHBvdGVudGlhbGx5IHZlcnkgZGlmZmVyZW50IGZyb20gdXMuIEFuZCBhcyB3ZSBjb250ZW1wbGF0ZSBwYXRod2F5cyB0aHJvdWdoIFdlYm1ha2VyIHRoYXQgbWVldCB2YXJpb3VzIG5lZWRzLCB3ZSBjYW4gcmVmZXIgdG8gb3VyIHVzZXJzIGJ5IG5hbWUuXCJcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogXCJzdWJzZWN0aW9uIGJhcmUgZ3JpZFwiIH0sXG4gICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogXCJyb3ctMlwiIH0sXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogXCJjb2wgamFuZVwiIH0sXG4gICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICBQZXJzb25hLFxuICAgICAgICAgICAgICAgICAgICB7IG5hbWU6IFwiSmFuZVwiLCBsb2NhdGlvbjogXCJLZW55YVwiLCBvY2N1cGF0aW9uOiBcIkVudHJlcHJlbmV1clwiLCBtb3RpdmF0b3JzOiBcIkFtYml0aW9uLEF0dGVudGlvblwiIH0sXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgXCJwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICBcIlNpdHVhdGVkIG9uIHRoZSBvdXRza2lydHMgb2YgS2lzdW11LCBLZW55YSwgSmFuZSBpcyBhbiBlbnRyZXByZW5ldXIgd2hvc2UgbmV3IHJhYmJpdCBmYXJtIHdpbGwgZ2l2ZSBoZXIgYSBtb3JlIHN0YWJsZSBsaWZlc3R5bGUgdGhhbiBoZXIgb2xkIHBvdGF0byBkaXN0cmlidXRpb24gYnVzaW5lc3MuXCJcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICBcInBcIixcbiAgICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogXCJxdW90ZVwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgXCJJIGxlYXJuZWQgYWJvdXQgdGVjaG5vbG9neSBhbmQgZmFybWluZyBmcm9tIHRoZSBJbnRlcm5ldC5cIlxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgIFwicFwiLFxuICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgXCJKYW5lIGlzIGFuIGF2aWQgRmFjZWJvb2sgdXNlciwgd2hpY2ggbGV0IGhlciBsZWFybiB0aGUgc2tpbGxzIHNoZSBuZWVkZWQgdG8gc3RhcnQgaGVyIGZhcm0sIGFuZCB3aWxsIGFsbG93IGhlciB0byBwcm9tb3RlIGFuZCBjb25kdWN0IGJ1c2luZXNzIGluIHRoZSBmdXR1cmUuXCJcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICBcInBcIixcbiAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgIFwiQXMgYSBtZW1iZXIgb2YgdGhlIEVxdWl0eSBHcm91cCBGb3VuZGF0aW9u4oCZcyDigJxJbXByb3ZlIFlvdXIgQnVzaW5lc3PigJ0gcHJvZ3JhbSwgaGVyIGRyZWFtIGlzIHRvIGdyb3cgaGVyIG5ldyBidXNpbmVzcyBhbmQgc2VlIGl0IGZsb3VyaXNoLlwiXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgXCJwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICBcIkV2ZW50dWFsbHksIEphbmUgaG9wZXMgdG8gYnV5IGEgc21hcnQtcGhvbmUgdG8gcmVwbGFjZSBoZXIgY3VycmVudCBmZWF0dXJlLXBob25lLiBTaGUgd2FudHMgdG8gdXNlIFdlYm1ha2VyIG5vdCBvbmx5IHRvIGxlYXJuIGFib3V0IGNyZWF0aW5nIGFuIG9ubGluZSBwcmVzZW5jZSwgYnV0IHRvIHJlYWNoIGhlciBjbGllbnRzLCBtYW55IG9mIHdob20gY29ubmVjdCB3aXRoIGVhY2ggb3RoZXIgcHJpbWFyaWx5IHRocm91Z2ggbW9iaWxlIGRldmljZXMuXCJcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogXCJjb2wgbGV3aXNcIiB9LFxuICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgUGVyc29uYSxcbiAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiBcIlNhZGlhXCIsIGxvY2F0aW9uOiBcIktlbnlhXCIsIG9jY3VwYXRpb246IFwiVGVhY2hlciwgQXJ0aXN0XCIsIG1vdGl2YXRvcnM6IFwiQ29tbXVuaXR5LEFtYml0aW9uLEF0dGVudGlvbixTZWxmIEV4cHJlc3Npb25cIiB9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgIFwicFwiLFxuICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgXCJMZXdpcyBpcyBhbiBhcnRpc3QgbGl2aW5nIG9uIHRoZSBvdXRza2lydHMgb2YgS2lzdW11LCBLZW55YS4gSGUgc3R1ZGllcyBoZWFsdGggYW5kIGNvbW11bml0eSBhdCB0aGUgdW5pdmVyc2l0eSBuZWFyYnksIGFuZCB3b3JrcyBhcyBhIHNwb2tlbiB3b3JkIGFydGlzdCBieSBzcGVha2luZyBhdCB3ZWRkaW5ncyBhbmQgZnVuZXJhbHMuIEN1cnJlbnRseSwgaGUgaXMgYXV0aG9yaW5nIGhpcyBmaXJzdCBib29rLCBidXQgcmVndWxhcmx5IHByYWN0aWNlcyBoaXMgd3JpdGluZyBieSBwb3N0aW5nIHF1b3RlcyBvbiBoaXMgcG9wdWxhciBGYWNlYm9vayBhY2NvdW50LlwiXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgXCJwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6IFwicXVvdGVcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgIFwiRXZlcnkgbW9ybmluZywgSSB3YWtlIHVwIHdvbmRlcmluZyB3aGF0IEkgY2FuIGNoYW5nZS5cIlxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgIFwicFwiLFxuICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgXCJXaXRoIHRoZSBmZWF0dXJlIHBob25lIGhlIGNhbGxzIGhpcyDigJxXYWxraWUgVGFsa2ll4oCdLCBMZXdpcyByZWFjaGVzIHBlb3BsZSB0aHJvdWdoIGhpcyBGYWNlYm9vayBwYWdlLCB3aGljaCBpcyBhbHNvIGhpcyBwcm9tb3Rpb24gcGxhdGZvcm0gYW5kIGEgbWV0aG9kIGZvciBmaW5kaW5nIHdvcmsuXCJcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICBcInBcIixcbiAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgIFwiTGV3aXMgd2FudHMgdG8gY2hhbmdlIHRoZSB3b3JsZCwgYW5kIGhlbHAgdGhlIGNoaWxkcmVuIGluIGhpcyBjb21tdW5pdHkuIEhlIHNlZXMgV2VibWFrZXIgYXMgYW4gb3Bwb3J0dW5pdHkgZm9yIHJlYWNoaW5nIHBlb3BsZSBhbmQgZWFybmluZyBtb25leSwgc2luY2UgaXQgYWxsb3dzIHBlb3BsZSB0byBjcmVhdGUgY29udGVudCBmb3IgdGhlbXNlbHZlcy5cIlxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6IFwicm93LTJcIiB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6IFwiY29sIHNhZGlhXCIgfSxcbiAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgIFBlcnNvbmEsXG4gICAgICAgICAgICAgICAgICAgIHsgbmFtZTogXCJTYWRpYVwiLCBsb2NhdGlvbjogXCJCYW5nbGFkZXNoXCIsIG9jY3VwYXRpb246IFwiU3R1ZGVudFwiLCBtb3RpdmF0b3JzOiBcIkF0dGVudGlvbixTZWxmIEV4cHJlc3Npb25cIiB9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgIFwicFwiLFxuICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgXCJMaWtlIG1hbnkgQmFuZ2xhZGVzaGkgZ2lybHMgaGVyIGFnZSwgU2FkaWEgaXMgZGV0ZXJtaW5lZCB0byBzdWNjZWVkIGluIHNjaG9vbC4gSGVyIGdvYWxzIGFyZSBzZXQgaGlnaCwgd2l0aCBoZXJvZXMgcmFua2luZyBhbW9uZyBpbmZsdWVudGlhbCBCYW5nbGFkZXNoaSBiYW5rZXJzLCBlbnRyZXByZW5ldXJzLCBhbmQgYWN0cmVzc2VzLlwiXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgXCJwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6IFwicXVvdGVcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgIFwiSSBsb3ZlIHRvIGdvc3NpcCB3aXRoIG15IGZyaWVuZHMgYWJvdXQgbXkgZmF2b3VyaXRlIFRWIHNob3dzLlwiXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgXCJwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICBcIkhlciBJbnRlcm5ldCB1c2FnZSBpcyByZXN0cmljdGVkIGJ5IGhlciBwYXJlbnRzLCB3aG8gd2FudCBoZXIgdG8gZm9jdXMgb24gaGVyIHN0dWRpZXMuIEhvd2V2ZXIsIGhlciBwYXJlbnRz4oCZIHVuZmFtaWxpYXJpdHkgd2l0aCBGYWNlYm9vayBhZmZvcmRzIGhlciBzb21lIHByaXZhY3ksIHdoZXJlIHNoZSBjaGF0cyB3aXRoIGhlciBmcmllbmRzIGFib3V0IHRoZSBoZXIgZmF2b3VyaXRlIG1vdmllcyBhbmQgVFYgc2hvd3MgLS0gd2hlbiBzaGUgaXMgZG9uZSBoZXIgaG9tZXdvcmssIG9mIGNvdXJzZSFcIlxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgIFwicFwiLFxuICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgXCJIb3BpbmcgdG8gb3duIG9uZSBkYXkgYSBzbWFydC1waG9uZSB3aXRoIGEgcG93ZXJmdWwgY2FtZXJhLCBTYWRpYSB3b3VsZCBjb250aW51ZSB0byBzaGFyZSBwaWN0dXJlcywgZ2FybmVyaW5nIGxpa2VzIGFuZCBjb21tZW50cyBmcm9tIGhlciBmcmllbmRzLiBFbnRodXNpYXN0aWMgYWJvdXQgV2VibWFrZXIsIHNoZSB3YW50cyB0byBjb250aW51ZSB0byBleHByZXNzIGhlcnNlbGYgdGhyb3VnaCBpdCB3aGlsZSBsZWFybmluZyBhYm91dCBvcHBvcnR1bml0aWVzIG9uIHRoZSBJbnRlcm5ldCBvdXRzaWRlIG9mIEZhY2Vib29rLlwiXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6IFwiY29sIGtldmluXCIgfSxcbiAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgIFBlcnNvbmEsXG4gICAgICAgICAgICAgICAgICAgIHsgbmFtZTogXCJLZXZpblwiLCBsb2NhdGlvbjogXCJVU0FcIiwgb2NjdXBhdGlvbjogXCJTdHVkZW50XCIsIG1vdGl2YXRvcnM6IFwiQ29tbXVuaXR5LEFtYml0aW9uXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICBcInBcIixcbiAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgIFwiQ3VycmVudGx5IGEgdW5pdmVyc2l0eSBzb3Bob21vcmUsIEtldmluIGdyZXcgdXAgaW4gXFxcIkVhc3QgU2lkZVxcXCIgQ2hpY2FnbywgYS5rLmEuIEFscGhhYmV0bGFuZCwgd2hlcmUgaGUgYXR0ZW5kZWQgaGlnaCBzY2hvb2wuIFRoZXJlLCBoZSBsZWFybmVkIHRvIGphaWxicmVhayBhbmQgY3VzdG9taXplIGhpcyBvd24gcGhvbmVzLlwiXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgXCJwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICBcIkFmdGVyIGhlYXJpbmcgYWJvdXQgaGlzIGhpZ2ggc2Nob29sIHJvYm90aWNzIHRlYW0sIGhlIHF1aWNrbHkgam9pbmVkLCBiZWNhbWUgY2FwdGFpbiwgYW5kIGxlZCB0aGUgdGVhbSB0byB0aGUgTUFURSBVbmRlcndhdGVyIFJvYm90aWNzIGNvbXBldGl0aW9uLlwiXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgXCJwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICBcIktldmluIGNvbnRpbnVlZCB0byBlbmpveSB0aW5rZXJpbmcgd2l0aCB0ZWNobm9sb2d5IHRocm91Z2ggYW4gaW50ZXJuc2hpcCBhdCB0aGUgQWRsZXIgUGxhbmV0YXJpdW0gd2hlcmUgaGUgc3BlbnQgdGltZSB3cml0aW5nIGFuZCBtb2RpZnlpbmcgQXJkdWlubyBzY3JpcHRzIHRvIGNvbnRyb2wgcm9ib3QgbW90b3JzLlwiXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgXCJwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICBcIkFsdGhvdWdoIGhlIGlzIGEgYnVzeSB1bml2ZXJzaXR5IHN0dWRlbnQsIEtldmluIHN0aWxsIHNwZW5kcyB0aW1lIG1lbnRvcmluZyBhbmQgdm9sdW50ZWVyaW5nIGF0IHRoZSBwbGFuZXRlcml1bS5cIlxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6IFwicm93LTJcIiB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6IFwiY29sIGxhanVuZVwiIH0sXG4gICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICBQZXJzb25hLFxuICAgICAgICAgICAgICAgICAgICB7IG5hbWU6IFwiTGFKdW5lXCIsIGxvY2F0aW9uOiBcIlVTQVwiLCBvY2N1cGF0aW9uOiBcIlN0dWRlbnRcIiwgbW90aXZhdG9yczogXCJBbWJpdGlvbixTZWxmIEV4cHJlc3Npb25cIiB9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgIFwicFwiLFxuICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgXCJMYUp1bmUgbWl4ZXMgaGVyIGxvdmUgZm9yIGZhc2hpb24sIGFydCBhbmQgdGVjaG5vbG9neSBhcyBhIHN0dWRlbnQgb2YgTllVIFBvbHl0ZWNobmljIFNjaG9vbCBvZiBFbmdpbmVlcmluZ+KAmXMgSW50ZWdyYXRlZCBEaWdpdGFsIE1lZGlhIFByb2dyYW0uXCJcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICBcInBcIixcbiAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgIFwiU2hlIGxvdmVzIGV4cGxvcmluZyBhbmQgZXhwZXJpbWVudGluZyB3aXRoIGRpZmZlcmVudCBtZWRpdW1zIG9mIGFydC4gU2hlIGlzIGEgY3JhZnQgY29ubm9pc3NldXIsIGFsd2F5cyBleGNpdGVkIGFib3V0IGEgbmV3IERJWSBwcm9qZWN0IHNoZSBjYW4gcmVjcmVhdGUuIExhSnVuZSBpcyBhY3RpdmUgb24gc29jaWFsIG1lZGlhLCBhbmQgc2hhcmVzIGhlciBjcmVhdGlvbnMgYXMgYSB3YXkgdG8gY29tbXVuaWNhdGUgd2l0aCBvdGhlcnMuXCJcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICBcInBcIixcbiAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgIFwiSG9waW5nIHRvIHJlZmxlY3QgaGVyIGtub3dsZWRnZSBhbmQgcGFzc2lvbiBvbiBvdGhlcnMsIHNoZSBwYXJ0aWNpcGF0ZXMgYXMgYSB2b2x1bnRlZXIgYW5kIG1lbnRvciBpbiBtYW55IEhpdmUgYW5kIE1ha2VyIFBhcnR5IGV2ZW50cy5cIlxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBcImNvbCBrYXRocnluXCIgfSxcbiAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgIFBlcnNvbmEsXG4gICAgICAgICAgICAgICAgICAgIHsgbmFtZTogXCJLYXRocnluXCIsIGxvY2F0aW9uOiBcIkNhbmFkYVwiLCBvY2N1cGF0aW9uOiBcIlRlYWNoZXIsIENvZGVyXCIsIG1vdGl2YXRvcnM6IFwiQXR0ZW50aW9uLENvbW11bml0eSxBbWJpdGlvbixTZWxmIEV4cHJlc3Npb25cIiB9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgIFwicFwiLFxuICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgXCJOb3cgaGVhZGluZy11cCBUb3JvbnRv4oCZcyBMYWRpZXMgTGVhcm5pbmcgQ29kZSBjaGFwdGVyLCBLYXRocnluIGhvc3RzIHdvcmtzaG9wcyBmb3Iga2lkcyB1c2luZyBXZWJtYWtlciB0b29scywgbGlrZSBUaGltYmxlIGFuZCBYLVJheSBHb2dnbGVzLCBhbmQgaXMgcm91dGluZWx5IGludm9sdmVkIGluIE1vemlsbGEgY29tbXVuaXR5IGV2ZW50cy5cIlxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgIFwicFwiLFxuICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgXCJMZWFybmluZyB0byBjb2RlIGF0IGEgeW91bmcgYWdlLCBzaGUgaGFzIHNpbmNlIGZvY3VzZWQgaGVyIHBhc3Npb25zIGZvciBlZHVjYXRpb24gYW5kIHRlY2hub2xvZ3kgdG93YXJkIHlvdW5nZXIga2lkcyBieSBzaG93aW5nIHRoZW0gbm90IG9ubHkgaG93IHRvIGNvZGUsIGJ1dCB0byBidWlsZCBpbnRlcmVzdGluZywgc2hhcmVhYmxlLCBvcGVuIGNvbnRlbnQgb24gdGhlIHdlYi5cIlxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgICAgKSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgXCJoMlwiLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6IFwiY2xlYXJmaXhcIiB9LFxuICAgICAgICAgICAgXCJKb3VybmV5XCJcbiAgICAgICAgICApLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBcInNlY3Rpb25cIixcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBcImpvdXJuZXlcIiB9LFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgeyBjbGFzc05hbWU6IFwic3Vic2VjdGlvblwiIH0sXG4gICAgICAgICAgICAgIFwiVG8gaWRlbnRpZnkgYW5kIHVuZGVyc3RhbmQgb3VyIGF1ZGllbmNlLCB3ZSBoYXZlIGJlZW4gZGV2ZWxvcGluZyBhIGhpZXJhcmNoeSBiYXNlZCBvbiB1c2FnZSBhbmQgZW5nYWdlbWVudCB3aXRoIHRlY2hub2xvZ3ksIHRoZSBJbnRlcm5ldCwgYW5kIHRoZSB3ZWIuIEFzIGl0IGV2b2x2ZXMsIGFuZCBhcyB3ZSBsZWFybiBtb3JlIGFib3V0IG91ciBhdWRpZW5jZSwgd2Ugd2lsbCBiZSBhYmxlIHRvIGNyYWZ0IGJldHRlciBhY3Rpdml0aWVzIGFuZCBtb2RlbGluZyB0ZWNobmlxdWVzIHRvIGNvbm5lY3Qgd2l0aCBwZW9wbGUgYXMgdGhleSBiZWNvbWUgYmV0dGVyIGxlYXJuZXJzLCBtYWtlcnMsIGFuZCB1c2VycyBvZiB0aGUgd2ViLlwiXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgeyBjbGFzc05hbWU6IFwic3Vic2VjdGlvblwiIH0sXG4gICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgXCJhXCIsXG4gICAgICAgICAgICAgICAgeyBocmVmOiBcIi9pbWcvcGVyc29uYXMvdXNlci1qb3VybmV5LmpwZ1wiIH0sXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImltZ1wiLCB7IHNyYzogXCIvaW1nL3BlcnNvbmFzL3VzZXItam91cm5leS5qcGdcIiB9KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApXG4gICAgKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXVkaWVuY2U7XG5cbn0se1wicmVhY3RcIjoyMTZ9XSw2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cblxuLy8gRnJvbSBNRE46IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViXG4vLyAvQVBJL2RvY3VtZW50LmNvb2tpZSNBX2xpdHRsZV9mcmFtZXdvcmsuM0FfYV9jb21wbGV0ZV9jb29raWVzX3JlYWRlci4yRndyaXRlcl93aXRoX2Z1bGxfdW5pY29kZV9zdXBwb3J0XG52YXIgZG9jQ29va2llcyA9IHtcbiAgZ2V0SXRlbTogZnVuY3Rpb24gKHNLZXkpIHtcbiAgICBpZiAoIXNLZXkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGRvY3VtZW50LmNvb2tpZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCIoPzooPzpefC4qOylcXFxccypcIiArIGVuY29kZVVSSUNvbXBvbmVudChzS2V5KS5yZXBsYWNlKC9bXFwtXFwuXFwrXFwqXS9nLCBcIlxcXFwkJlwiKSArIFwiXFxcXHMqXFxcXD1cXFxccyooW147XSopLiokKXxeLiokXCIpLCBcIiQxXCIpKSB8fCBudWxsO1xuICB9LFxuICBzZXRJdGVtOiBmdW5jdGlvbiAoc0tleSwgc1ZhbHVlLCB2RW5kLCBzUGF0aCwgc0RvbWFpbiwgYlNlY3VyZSkge1xuICAgIGlmICghc0tleSB8fCAvXig/OmV4cGlyZXN8bWF4XFwtYWdlfHBhdGh8ZG9tYWlufHNlY3VyZSkkL2kudGVzdChzS2V5KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgc0V4cGlyZXMgPSBcIlwiO1xuICAgIGlmICh2RW5kKSB7XG4gICAgICBzd2l0Y2ggKHZFbmQuY29uc3RydWN0b3IpIHtcbiAgICAgICAgY2FzZSBOdW1iZXI6XG4gICAgICAgICAge1xuICAgICAgICAgICAgc0V4cGlyZXMgPSB2RW5kID09PSBJbmZpbml0eSA/IFwiOyBleHBpcmVzPUZyaSwgMzEgRGVjIDk5OTkgMjM6NTk6NTkgR01UXCIgOiBcIjsgbWF4LWFnZT1cIiArIHZFbmQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgU3RyaW5nOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNFeHBpcmVzID0gXCI7IGV4cGlyZXM9XCIgKyB2RW5kO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIERhdGU6XG4gICAgICAgICAge1xuICAgICAgICAgICAgc0V4cGlyZXMgPSBcIjsgZXhwaXJlcz1cIiArIHZFbmQudG9VVENTdHJpbmcoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZG9jdW1lbnQuY29va2llID0gZW5jb2RlVVJJQ29tcG9uZW50KHNLZXkpICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoc1ZhbHVlKSArIHNFeHBpcmVzICsgKHNEb21haW4gPyBcIjsgZG9tYWluPVwiICsgc0RvbWFpbiA6IFwiXCIpICsgKHNQYXRoID8gXCI7IHBhdGg9XCIgKyBzUGF0aCA6IFwiXCIpICsgKGJTZWN1cmUgPyBcIjsgc2VjdXJlXCIgOiBcIlwiKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgcmVtb3ZlSXRlbTogZnVuY3Rpb24gKHNLZXksIHNQYXRoLCBzRG9tYWluKSB7XG4gICAgaWYgKCF0aGlzLmhhc0l0ZW0oc0tleSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZG9jdW1lbnQuY29va2llID0gZW5jb2RlVVJJQ29tcG9uZW50KHNLZXkpICsgXCI9OyBleHBpcmVzPVRodSwgMDEgSmFuIDE5NzAgMDA6MDA6MDAgR01UXCIgKyAoc0RvbWFpbiA/IFwiOyBkb21haW49XCIgKyBzRG9tYWluIDogXCJcIikgKyAoc1BhdGggPyBcIjsgcGF0aD1cIiArIHNQYXRoIDogXCJcIik7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGhhc0l0ZW06IGZ1bmN0aW9uIChzS2V5KSB7XG4gICAgaWYgKCFzS2V5KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUmVnRXhwKFwiKD86Xnw7XFxcXHMqKVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHNLZXkpLnJlcGxhY2UoL1tcXC1cXC5cXCtcXCpdL2csIFwiXFxcXCQmXCIpICsgXCJcXFxccypcXFxcPVwiKS50ZXN0KGRvY3VtZW50LmNvb2tpZSk7XG4gIH0sXG4gIGtleXM6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYUtleXMgPSBkb2N1bWVudC5jb29raWUucmVwbGFjZSgvKCg/Ol58XFxzKjspW15cXD1dKykoPz07fCQpfF5cXHMqfFxccyooPzpcXD1bXjtdKik/KD86XFwxfCQpL2csIFwiXCIpLnNwbGl0KC9cXHMqKD86XFw9W147XSopPztcXHMqLyk7XG4gICAgZm9yICh2YXIgbkxlbiA9IGFLZXlzLmxlbmd0aCwgbklkeCA9IDA7IG5JZHggPCBuTGVuOyBuSWR4KyspIHtcbiAgICAgIGFLZXlzW25JZHhdID0gZGVjb2RlVVJJQ29tcG9uZW50KGFLZXlzW25JZHhdKTtcbiAgICB9XG4gICAgcmV0dXJuIGFLZXlzO1xuICB9XG59O1xuXG5cbnZhciBhdXRoID0ge1xuICBvbkxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAvKiBUaGlzIGZ1bmN0aW9uIGlzIGludm9rZWQgdG8gZmluZCBvdXQgd2hldGhlciB3ZSdyZSBsb2dnZWQgaW4gb3Igbm90XG4gICAgICAgaXQgbG9va3MgYXQgdGhlIGdpdGh1YiBjb29raWUgYW5kIHNldHMgYSBKU09OLWVuY29kZWQgYmxvYiBpblxuICAgICAgIGxvY2FsU3RvcmFnZSBmb3IgZWFzZSBvZiBhY2Nlc3MgKi9cblxuICAgIHZhciBnaXRodWJDb29raWUgPSBkb2NDb29raWVzLmdldEl0ZW0oXCJnaXRodWJcIik7XG4gICAgaWYgKCFnaXRodWJDb29raWUpIHtcbiAgICAgIHJldHVybiB7IGxvZ2dlZEluOiBmYWxzZSwgZGV0YWlsczogbnVsbCB9O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgLyogSlNPTiBwYXJzaW5nIGNhbiByYWlzZSBleGNlcHRpb25zICovXG4gICAgICB2YXIgYmxvYiA9IEpTT04ucGFyc2UoZ2l0aHViQ29va2llLnNsaWNlKDIpKTtcbiAgICAgIGlmIChibG9iKSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5naXRodWIgPSBKU09OLnN0cmluZ2lmeShibG9iKTtcbiAgICAgICAgcmV0dXJuIHsgbG9nZ2VkSW46IHRydWUsIGRldGFpbHM6IGJsb2IgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IGxvZ2dlZEluOiBmYWxzZSwgZGV0YWlsczogbnVsbCB9O1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiB7IGxvZ2dlZEluOiBmYWxzZSwgZGV0YWlsczogbnVsbCB9O1xuICAgIH1cbiAgfSxcbiAgZ2V0Q3VycmVudFVzZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLm9uTG9hZCgpO1xuICAgIGlmIChzdGF0ZS5kZXRhaWxzICYmIHN0YXRlLmRldGFpbHMubG9naW4pIHtcbiAgICAgIHJldHVybiBzdGF0ZS5kZXRhaWxzLmxvZ2luO1xuICAgIH1cbiAgICByZXR1cm4gXCJcIjtcbiAgfSxcbiAgbG9naW46IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAobG9jYXRpb24uaG9zdG5hbWUgPT09IFwibG9jYWxob3N0XCIpIHtcbiAgICAgIC8qIG1ha2UgZGVidWdnaW5nIGVhc2llciAqL1xuICAgICAgbG9jYWxTdG9yYWdlLmdpdGh1YiA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgbmFtZTogXCJwcmV0ZW5kIGRhdmlkYXNjaGVyXCIsXG4gICAgICAgIGhhbmRsZTogXCJkYXZpZGFzY2hlclwiXG4gICAgICB9KTtcbiAgICAgIGRvY0Nvb2tpZXMuc2V0SXRlbShcImdpdGh1YlwiLCBcImo9XCIgKyBsb2NhbFN0b3JhZ2UuZ2l0aHViKTtcbiAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbmV3VVJMID0gXCIvYXV0aC9naXRodWJcIiArIGRvY3VtZW50LmxvY2F0aW9uLnBhdGhuYW1lO1xuICAgICAgd2luZG93LmxvY2F0aW9uID0gbmV3VVJMO1xuICAgIH1cbiAgfSxcbiAgbG9nb3V0OiBmdW5jdGlvbiAoKSB7XG4gICAgZG9jQ29va2llcy5yZW1vdmVJdGVtKFwiZ2l0aHViXCIpO1xuICAgIGRlbGV0ZSBsb2NhbFN0b3JhZ2UuZ2l0aHViO1xuICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuICB9XG59O1xuXG52YXIgQXV0aE1peGluID0ge1xuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RhdGUgPSBhdXRoLm9uTG9hZCgpO1xuICAgIHJldHVybiBzdGF0ZTtcbiAgfSxcblxuICBsb2dpbjogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuIGF1dGgubG9naW4oKTtcbiAgfSxcblxuICBsb2dvdXQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgYXV0aC5sb2dvdXQoKTtcbiAgICB0aGlzLnNldFN0YXRlKHsgbG9nZ2VkSW46IGZhbHNlLCBkZXRhaWxzOiBudWxsIH0pO1xuICB9XG59O1xuXG52YXIgQXV0aEJsb2NrID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogXCJBdXRoQmxvY2tcIixcbiAgbWl4aW5zOiBbQXV0aE1peGluXSxcbiAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxvZ2luT3JPdXQgPSB0aGlzLnN0YXRlLmxvZ2dlZEluID8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFwibGlcIixcbiAgICAgIHsgY2xhc3NOYW1lOiBcImljb24tZ2l0aHViIGF1dGhcIiB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJhXCIsXG4gICAgICAgIHsgb25DbGljazogdGhpcy5sb2dvdXQgfSxcbiAgICAgICAgXCJTaWduIG91dFwiXG4gICAgICApXG4gICAgKSA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBcImxpXCIsXG4gICAgICB7IGNsYXNzTmFtZTogXCJpY29uLWdpdGh1YiBhdXRoXCIgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwiYVwiLFxuICAgICAgICB7IG9uQ2xpY2s6IHRoaXMubG9naW4gfSxcbiAgICAgICAgXCJTaWduIGluXCJcbiAgICAgIClcbiAgICApO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgXCJzcGFuXCIsXG4gICAgICBudWxsLFxuICAgICAgbG9naW5Pck91dFxuICAgICk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cy5BdXRoQmxvY2sgPSBBdXRoQmxvY2s7XG5tb2R1bGUuZXhwb3J0cy5BdXRoTWl4aW4gPSBBdXRoTWl4aW47XG5tb2R1bGUuZXhwb3J0cy5hdXRoID0gYXV0aDtcblxufSx7XCJyZWFjdFwiOjIxNn1dLDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxudmFyIERlc2lnbiA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6IFwiRGVzaWduXCIsXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgXCJkaXZcIixcbiAgICAgIG51bGwsXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBcImRpdlwiLFxuICAgICAgICB7IGNsYXNzTmFtZTogXCJoZWFkZXJcIiB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwiaDJcIixcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIFwiRGVzaWduXCJcbiAgICAgICAgKVxuICAgICAgKSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHsgY2xhc3NOYW1lOiBcIm1haW5cIiB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBpZDogXCJhc3NldHNcIiB9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBcImgyXCIsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogXCJjbGVhcmZpeFwiIH0sXG4gICAgICAgICAgICBcIkRlc2lnblwiXG4gICAgICAgICAgKSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgXCJwXCIsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgXCJUaGVzZSBsaXZlIG9uIFwiLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgXCJhXCIsXG4gICAgICAgICAgICAgIHsgaHJlZjogXCJodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZHJpdmUvdS8wLyNmb2xkZXJzLzBCX3JiREFlbjlwcmtTME40TVhScWFHbzRiRUVcIiB9LFxuICAgICAgICAgICAgICBcIkdvb2dsZSBEcml2ZVwiXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgXCIgZm9yIG5vdy4gIEVhY2ggbGluayBiZWxvdyB3aWxsIHRha2UgeW91IHRvIHRoZSByZWxldmFudCBzdWJkaXJlY3RvcnkuXCJcbiAgICAgICAgICApLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBcInVsXCIsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogXCJhc3NldHNcIiB9LFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgXCJsaVwiLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgICAgICAgIHsgaHJlZjogXCJodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZHJpdmUvdS8wLyNmb2xkZXJzLzBCX3JiREFlbjlwcmtTME40TVhScWFHbzRiRUUvMEJ5R3U2SXdCZnQ1bU5IRkhWV05HU21Ob05rVVwiIH0sXG4gICAgICAgICAgICAgICAgXCJCb290c3RyYXBcIlxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBcIiBob3VzZXMgSWxsdXN0cmF0b3IgZmlsZXMgdG8gZGVzaWduIHVzaW5nIEJvb3RzdHJhcCAzIGdyaWRzXCJcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICBcImxpXCIsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgXCJhXCIsXG4gICAgICAgICAgICAgICAgeyBocmVmOiBcImh0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS91LzAvI2ZvbGRlcnMvMEJfcmJEQWVuOXBya1MwTjRNWFJxYUdvNGJFRS8wQl9yYkRBZW45cHJrYmpKRGVWWXhNbWhVVlRRXCIgfSxcbiAgICAgICAgICAgICAgICBcIlRlbXBsYXRlc1wiXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIFwiIGlzIHdoZXJlIHdlIGtlZXAgc3RhcnRlciBTa2V0Y2ggZmlsZXMgZm9yIFdlYm1ha2VyIHBhZ2VzXCJcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICBcImxpXCIsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgXCJhXCIsXG4gICAgICAgICAgICAgICAgeyBocmVmOiBcImh0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS91LzAvI2ZvbGRlcnMvMEJfcmJEQWVuOXBya1MwTjRNWFJxYUdvNGJFRS8wQl9yYkRBZW45cHJrZWtaVmRUSjBWamN4VXpnXCIgfSxcbiAgICAgICAgICAgICAgICBcIlByb2Nlc3NcIlxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBcIiBoYXMgYXNzZXRzIHdlIHVzZSBpbiByZWRwZW4gdG8gaW5kaWNhdGUgcHJvY2VzcyBzdGF0ZVwiXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgXCJsaVwiLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgICAgICAgIHsgaHJlZjogXCJodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZHJpdmUvdS8wLyNmb2xkZXJzLzBCX3JiREFlbjlwcmtTME40TVhScWFHbzRiRUUvMEJfcmJEQWVuOXBya05YcE9UemRwWjNOa1VVMFwiIH0sXG4gICAgICAgICAgICAgICAgXCJQYXR0ZXJuc1wiXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIFwiIHRpbGVhYmxlIHBhdHRlcm5zXCJcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICBcImxpXCIsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgXCJhXCIsXG4gICAgICAgICAgICAgICAgeyBocmVmOiBcImh0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS91LzAvI2ZvbGRlcnMvMEJfcmJEQWVuOXBya1MwTjRNWFJxYUdvNGJFRS8wQl9yYkRBZW45cHJrWmpSc01ESk1hM2gwV1VFXCIgfSxcbiAgICAgICAgICAgICAgICBcIkxvZ29zXCJcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgIFwibGlcIixcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICBcImFcIixcbiAgICAgICAgICAgICAgICB7IGhyZWY6IFwiaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL3UvMC8jZm9sZGVycy8wQl9yYkRBZW45cHJrUzBONE1YUnFhR280YkVFLzBCX3JiREFlbjlwcmtWbU5SV25OSVQwSmZjSGNcIiB9LFxuICAgICAgICAgICAgICAgIFwiSWNvbnNcIlxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgXCJsaVwiLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgICAgICAgIHsgaHJlZjogXCJodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZHJpdmUvdS8wLyNmb2xkZXJzLzBCX3JiREFlbjlwcmtTME40TVhScWFHbzRiRUUvMEJfcmJEQWVuOXBya1VtZDFOMWxGTTNFMGRGa1wiIH0sXG4gICAgICAgICAgICAgICAgXCJDb2xvcnNcIlxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApXG4gICAgKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGVzaWduO1xuXG59LHtcInJlYWN0XCI6MjE2fV0sODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG52YXIgRmlsdGVyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogXCJGaWx0ZXJcIixcbiAgZG9GaWx0ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcXVlcnkgPSB0aGlzLnJlZnMuZmlsdGVySW5wdXQuZ2V0RE9NTm9kZSgpLnZhbHVlOyAvLyB0aGlzIGlzIHRoZSBzZWFyY2ggdGV4dFxuICAgIHRoaXMucHJvcHMuZG9GaWx0ZXIocXVlcnkudG9Mb3dlckNhc2UoKSk7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgXCJkaXZcIixcbiAgICAgIHsgY2xhc3NOYW1lOiBcImZpbHRlcmRpdlwiIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwgeyBjbGFzc05hbWU6IFwiZmlsdGVyXCIsIHR5cGU6IFwidGV4dFwiLCByZWY6IFwiZmlsdGVySW5wdXRcIiwgcGxhY2Vob2xkZXI6IFwiRmlsdGVyXCIsXG4gICAgICAgIHZhbHVlOiB0aGlzLnByb3BzLnF1ZXJ5LCBvbkNoYW5nZTogdGhpcy5kb0ZpbHRlciB9KSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpXCIsIHsgY2xhc3NOYW1lOiBcInNlYXJjaEljb24gZmEgZmEtc2VhcmNoXCIgfSlcbiAgICApO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBGaWx0ZXI7XG5cbn0se1wicmVhY3RcIjoyMTZ9XSw5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgZ2V0SlNPTiA9IGZ1bmN0aW9uICh1cmwsIHN1Y2Nlc3NIYW5kbGVyLCBlcnJvckhhbmRsZXIpIHtcbiAgdmFyIHhociA9IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gXCJ1bmRlZmluZWRcIiA/IG5ldyBYTUxIdHRwUmVxdWVzdCgpIDogbmV3IEFjdGl2ZVhPYmplY3QoXCJNaWNyb3NvZnQuWE1MSFRUUFwiKTtcbiAgeGhyLm9wZW4oXCJnZXRcIiwgdXJsLCB0cnVlKTtcbiAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RhdHVzO1xuICAgIHZhciBkYXRhO1xuICAgIC8qIFNlZSBodHRwOi8veGhyLnNwZWMud2hhdHdnLm9yZy8jZG9tLXhtbGh0dHByZXF1ZXN0LXJlYWR5c3RhdGUgKi9cbiAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgIC8qIGBET05FYCAqL1xuICAgICAgc3RhdHVzID0geGhyLnN0YXR1cztcbiAgICAgIGlmIChzdGF0dXMgPT09IDIwMCkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgaWYgKHN1Y2Nlc3NIYW5kbGVyKSB7XG4gICAgICAgICAgc3VjY2Vzc0hhbmRsZXIoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSAzMDIpIHtcbiAgICAgICAgLy8gWCBkYXRhLnJlZGlyZWN0IGNvbnRhaW5zIHRoZSBzdHJpbmcgVVJMIHRvIHJlZGlyZWN0IHRvXG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGRhdGEucmVkaXJlY3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZXJyb3JIYW5kbGVyKSB7XG4gICAgICAgICAgZXJyb3JIYW5kbGVyKHN0YXR1cyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHhoci5zZW5kKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEpTT047XG5cbn0se31dLDEwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG52YXIgZ2V0SlNPTiA9IHJlcXVpcmUoXCIuL2dldEpTT04uanN4XCIpO1xudmFyIExhYmVscyA9IHJlcXVpcmUoXCIuL2xhYmVscy5qc3hcIik7XG52YXIgQVBJU2VydmVyID0gXCIvYXBpXCI7XG52YXIgRmlsdGVyID0gcmVxdWlyZShcIi4vZmlsdGVyLmpzeFwiKTtcbnZhciBjb252ZXJ0ZXIgPSBuZXcgU2hvd2Rvd24uY29udmVydGVyKCk7XG5cbnZhciBSb2xlcyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6IFwiUm9sZXNcIixcbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIF9yb2xlczoge1xuICAgICAgICBEcml2ZXI6IFwiXCIsXG4gICAgICAgIFwiTGVhZCBEZXZcIjogXCJcIixcbiAgICAgICAgXCJMZWFkIERlc2lnblwiOiBcIlwiLFxuICAgICAgICBRdWFsaXR5OiBcIlwiXG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY29tcCA9IHRoaXM7XG4gICAgdmFyIGlkID0gdGhpcy5wcm9wcy5pc3N1ZUlkO1xuICAgIHZhciBpc3N1ZXNSZWYgPSBuZXcgRmlyZWJhc2UoXCJodHRwczovL3dlYm1ha2VyYnVpbGQuZmlyZWJhc2Vpby5jb20vaXNzdWVzXCIpLmNoaWxkKGlkKS5jaGlsZChcIl9yb2xlc1wiKS5vbihcInZhbHVlXCIsIGZ1bmN0aW9uIChzbmFwc2hvdCkge1xuICAgICAgdmFyIHJvbGVzID0gc25hcHNob3QudmFsKCk7XG4gICAgICBpZiAocm9sZXMpIHtcbiAgICAgICAgY29tcC5zZXRTdGF0ZSh7IF9yb2xlczogcm9sZXMgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciByb2xlbGlzdCA9IFtdO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgZm9yICh2YXIgcm9sZSBpbiB0aGlzLnN0YXRlLl9yb2xlcykge1xuICAgICAgdmFyIGFzc2lnbmVlID0gZGVjb2RlVVJJQ29tcG9uZW50KHRoaXMuc3RhdGUuX3JvbGVzW3JvbGVdKTtcbiAgICAgIHZhciByb2xlID0gZGVjb2RlVVJJQ29tcG9uZW50KHJvbGUpO1xuICAgICAgaW5kZXgrKztcblxuICAgICAgcm9sZWxpc3QucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBcImxpXCIsXG4gICAgICAgIHsga2V5OiBpbmRleCwgY2xhc3NOYW1lOiBcInJvbGVcIiB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwic3BhblwiLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiBcInJvbGVcIiB9LFxuICAgICAgICAgIHJvbGUsXG4gICAgICAgICAgXCI6XCJcbiAgICAgICAgKSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcInNwYW5cIixcbiAgICAgICAgICB7IGNsYXNzTmFtZTogXCJ3aG9cIiB9LFxuICAgICAgICAgIGFzc2lnbmVlXG4gICAgICAgIClcbiAgICAgICkpO1xuICAgIH1cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFwidWxcIixcbiAgICAgIHsgY2xhc3NOYW1lOiBcInJvbGVzXCIgfSxcbiAgICAgIHJvbGVsaXN0XG4gICAgKTtcbiAgfVxufSk7XG5cbnZhciBJc3N1ZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6IFwiSXNzdWVcIixcbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZGF0YSA9IHRoaXMucHJvcHMuZGF0YTtcbiAgICBpZiAoIWRhdGEpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwpO1xuICAgIH1cbiAgICB2YXIgbGluZXMgPSBkYXRhLmJvZHkuc3BsaXQoXCJcXG5cIik7XG4gICAgdmFyIHRyaW1tZWRCb2R5ID0gY29udmVydGVyLm1ha2VIdG1sKGxpbmVzWzBdKTtcbiAgICB2YXIgZG9DbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxvY2F0aW9uLmhyZWYgPSBkYXRhLmh0bWxfdXJsO1xuICAgIH07XG4gICAgdmFyIEltZyA9IGRhdGEuYXNzaWduZWUgPyBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaW1nXCIsIHsgc3JjOiBkYXRhLmFzc2lnbmVlLmF2YXRhcl91cmwsXG4gICAgICB0aXRsZTogXCJBc3NpZ25lZCB0b1wiLFxuICAgICAgYWx0OiBkYXRhLmFzc2lnbmVlLmxvZ2luIH0pIDogUmVhY3QuY3JlYXRlRWxlbWVudChcImltZ1wiLCB7IHNyYzogZGF0YS51c2VyLmF2YXRhcl91cmwsXG4gICAgICB0aXRsZTogXCJDcmVhdGVkIGJ5XCIsXG4gICAgICBhbHQ6IGRhdGEudXNlci5sb2dpbiB9KTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFwibGlcIixcbiAgICAgIHsgY2xhc3NOYW1lOiBcImlzc3VlIGNsZWFyZml4XCIsIG9uQ2xpY2s6IGRvQ2xpY2sgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHsgY2xhc3NOYW1lOiBcImxlZnRcIiB9LFxuICAgICAgICBJbWcsXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJoM1wiLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgZGF0YS50aXRsZVxuICAgICAgICApLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwicFwiLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBkYW5nZXJvdXNseVNldElubmVySFRNTDogeyBfX2h0bWw6IHRyaW1tZWRCb2R5IH0gfSlcbiAgICAgICAgKSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChMYWJlbHMsIHsgbGFiZWxzOiBkYXRhLmxhYmVscyB9KVxuICAgICAgKSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHsgY2xhc3NOYW1lOiBcInJpZ2h0XCIgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChSb2xlcywgeyBpc3N1ZUlkOiB0aGlzLnByb3BzLmRhdGEuaWQgfSlcbiAgICAgICksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImNsZWFyZml4XCIgfSlcbiAgICApO1xuICB9XG59KTtcblxudmFyIElzc3Vlc0xpc3QgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiBcIklzc3Vlc0xpc3RcIixcbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHsgaXNzdWVzOiBbXSB9O1xuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaXNzdWVzID0gdGhpcy5wcm9wcy5pc3N1ZXMubWFwKGZ1bmN0aW9uIChpc3N1ZSkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSXNzdWUsIHsga2V5OiBpc3N1ZS5pZCwgZGF0YTogaXNzdWUgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBcInVsXCIsXG4gICAgICB7IGNsYXNzTmFtZTogXCJpc3N1ZXNcIiB9LFxuICAgICAgaXNzdWVzXG4gICAgKTtcbiAgfVxufSk7XG5cbnZhciBIZWFydGJlYXQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiBcIkhlYXJ0YmVhdFwiLFxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZnVsbDoge1xuICAgICAgICBwMTogW10sXG4gICAgICAgIHAyOiBbXVxuICAgICAgfSxcbiAgICAgIGZpbHRlcmVkOiB7XG4gICAgICAgIHAxOiBbXSxcbiAgICAgICAgcDI6IFtdXG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgZ2V0SlNPTihBUElTZXJ2ZXIgKyBcIi9cIiArIHNlbGYucHJvcHMucGF0aCwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIGlmIChzZWxmLmlzTW91bnRlZCgpKSB7XG4gICAgICAgIHNlbGYuc2V0U3RhdGUoeyBmdWxsOiB7IHAxOiBkYXRhLmlzc3Vlcy5wMSwgcDI6IGRhdGEuaXNzdWVzLnAyIH0sXG4gICAgICAgICAgZmlsdGVyZWQ6IHsgcDE6IGRhdGEuaXNzdWVzLnAxLCBwMjogZGF0YS5pc3N1ZXMucDIgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCBmdW5jdGlvbiAoZXJyKSB7fSk7XG4gIH0sXG4gIGRvRmlsdGVyOiBmdW5jdGlvbiAoZmlsdGVyVGV4dCkge1xuICAgIHZhciBtYXRjaGluZ1AxcyA9IFtdO1xuICAgIHZhciBtYXRjaGluZ1AycyA9IFtdO1xuICAgIGlmIChmaWx0ZXJUZXh0ID09IFwiXCIpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmaWx0ZXJlZDoge1xuICAgICAgICAgIHAxOiB0aGlzLnN0YXRlLmZ1bGwucDEsXG4gICAgICAgICAgcDI6IHRoaXMuc3RhdGUuZnVsbC5wMlxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5zdGF0ZS5mdWxsLnAxLmZvckVhY2goZnVuY3Rpb24gKGlzc3VlKSB7XG4gICAgICAvLyBGaWx0ZXJpbmcgb24gdGl0bGUsIGxhYmVscywgYW5kIGJvZHlcbiAgICAgIHZhciBsYWJlbHMgPSBpc3N1ZS5sYWJlbHMubWFwKGZ1bmN0aW9uIChsYWJlbCkge1xuICAgICAgICByZXR1cm4gbGFiZWwubmFtZTtcbiAgICAgIH0pLmpvaW4oXCIsXCIpO1xuICAgICAgaWYgKGlzc3VlLnRpdGxlLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXJUZXh0KSAhPSAtMSB8fCBpc3N1ZS5ib2R5LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXJUZXh0KSAhPSAtMSB8fCBsYWJlbHMudG9Mb3dlckNhc2UoKS5pbmRleE9mKGZpbHRlclRleHQpICE9IC0xKSB7XG4gICAgICAgIG1hdGNoaW5nUDFzLnB1c2goaXNzdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuc3RhdGUuZnVsbC5wMi5mb3JFYWNoKGZ1bmN0aW9uIChpc3N1ZSkge1xuICAgICAgLy8gRmlsdGVyaW5nIG9uIHRpdGxlLCBsYWJlbHMsIGFuZCBib2R5XG4gICAgICB2YXIgbGFiZWxzID0gaXNzdWUubGFiZWxzLm1hcChmdW5jdGlvbiAobGFiZWwpIHtcbiAgICAgICAgcmV0dXJuIGxhYmVsLm5hbWU7XG4gICAgICB9KS5qb2luKFwiLFwiKTtcbiAgICAgIGlmIChpc3N1ZS50aXRsZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoZmlsdGVyVGV4dCkgIT0gLTEgfHwgaXNzdWUuYm9keS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoZmlsdGVyVGV4dCkgIT0gLTEgfHwgbGFiZWxzLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXJUZXh0KSAhPSAtMSkge1xuICAgICAgICBtYXRjaGluZ1Aycy5wdXNoKGlzc3VlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZmlsdGVyZWQ6IHtcbiAgICAgICAgcDE6IG1hdGNoaW5nUDFzLFxuICAgICAgICBwMjogbWF0Y2hpbmdQMnNcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcDFzLCBwMnM7XG4gICAgaWYgKHRoaXMuc3RhdGUuZmlsdGVyZWQucDEubGVuZ3RoKSB7XG4gICAgICBwMXMgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBcImRpdlwiLFxuICAgICAgICBudWxsLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwiaDJcIixcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIFwiVG9wIFByaW9yaXRpZXNcIlxuICAgICAgICApLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KElzc3Vlc0xpc3QsIHsgaXNzdWVzOiB0aGlzLnN0YXRlLmZpbHRlcmVkLnAxIH0pXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBwMXMgPSBudWxsO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdGF0ZS5maWx0ZXJlZC5wMi5sZW5ndGgpIHtcbiAgICAgIHAycyA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIG51bGwsXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJoMlwiLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgXCJPdGhlciBQcmlvcml0aWVzXCJcbiAgICAgICAgKSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJc3N1ZXNMaXN0LCB7IGlzc3VlczogdGhpcy5zdGF0ZS5maWx0ZXJlZC5wMiB9KVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcDJzID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBcImRpdlwiLFxuICAgICAgbnVsbCxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHsgY2xhc3NOYW1lOiBcImhlYWRlclwiIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJoMlwiLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgdGhpcy5wcm9wcy50aXRsZVxuICAgICAgICApXG4gICAgICApLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAgeyBjbGFzc05hbWU6IFwiZmlsdGVyZGl2XCIgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChGaWx0ZXIsIHsgY2xhc3NOYW1lOiBcImZpbHRlclwiLCBmdWxsc2V0OiB0aGlzLnN0YXRlLnF1ZXJ5LCBkb0ZpbHRlcjogdGhpcy5kb0ZpbHRlciB9KVxuICAgICAgKSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHsgY2xhc3NOYW1lOiBcIm1haW5cIiB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBpZDogXCJzcHJpbnRcIiB9LFxuICAgICAgICAgIHAxcyxcbiAgICAgICAgICBwMnNcbiAgICAgICAgKVxuICAgICAgKVxuICAgICk7XG4gIH1cbn0pO1xuXG52YXIgTm93ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogXCJOb3dcIixcbiAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSGVhcnRiZWF0LCB7IHBhdGg6IFwibm93XCIsIHRpdGxlOiBcIkN1cnJlbnQgSGVhcnRiZWF0XCIgfSk7XG4gIH1cbn0pO1xudmFyIE5leHQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiBcIk5leHRcIixcbiAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSGVhcnRiZWF0LCB7IHBhdGg6IFwibmV4dFwiLCB0aXRsZTogXCJOZXh0IEhlYXJ0YmVhdFwiIH0pO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMuTm93ID0gTm93O1xubW9kdWxlLmV4cG9ydHMuTmV4dCA9IE5leHQ7XG5cbn0se1wiLi9maWx0ZXIuanN4XCI6OCxcIi4vZ2V0SlNPTi5qc3hcIjo5LFwiLi9sYWJlbHMuanN4XCI6MTIsXCJyZWFjdFwiOjIxNn1dLDExOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG52YXIgZ2V0SlNPTiA9IHJlcXVpcmUoXCIuL2dldEpTT04uanN4XCIpO1xudmFyIE1lbnRpb25zID0gcmVxdWlyZShcIi4vbWVudGlvbnMuanN4XCIpO1xudmFyIF9yZXF1aXJlID0gcmVxdWlyZShcIi4vYXV0aC5qc3hcIik7XG5cbnZhciBhdXRoID0gX3JlcXVpcmUuYXV0aDtcbnZhciBBdXRoTWl4aW4gPSBfcmVxdWlyZS5BdXRoTWl4aW47XG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZShcInJlYWN0LXJvdXRlclwiKTtcblxudmFyIExpbmsgPSBfcmVxdWlyZTIuTGluaztcbnZhciBwbHVyYWxpemUgPSByZXF1aXJlKFwicGx1cmFsaXplXCIpO1xuXG52YXIgR2l0aHViU2VhcmNoID0ge1xuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4geyBpdGVtczogW10sIHRvdGFsX2NvdW50OiAwIH07XG4gIH0sXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGZyYWdtZW50ID0gdGhpcy5tYWtlRnJhZ21lbnQoKTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgZ2V0SlNPTihcIi9hcGkvZ2l0aHViL3NlYXJjaC9pc3N1ZXNcIiArIGZyYWdtZW50LCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgaWYgKHNlbGYuaXNNb3VudGVkKCkpIHtcbiAgICAgICAgc2VsZi5zZXRTdGF0ZShkYXRhKTtcbiAgICAgIH1cbiAgICB9LCBmdW5jdGlvbiAoZXJyKSB7fSk7XG4gIH0gfTtcblxudmFyIEdpdGh1Yklzc3Vlc1NlYXJjaCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6IFwiR2l0aHViSXNzdWVzU2VhcmNoXCIsXG4gIG1peGluczogW0dpdGh1YlNlYXJjaF0sXG4gIG1ha2VGcmFnbWVudDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBcIj9xPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KFwiYXNzaWduZWU6XCIgKyB0aGlzLnByb3BzLmhhbmRsZSArIFwiIHN0YXRlOm9wZW5cIik7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBwbGFuUHJlZml4ID0gXCJodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zL01vemlsbGFGb3VuZGF0aW9uL3BsYW4vaXNzdWVzXCI7XG4gICAgdmFyIGlzc3VlcyA9IHRoaXMuc3RhdGUuaXRlbXMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAvLyBmaWx0ZXIgb3V0IHRoZSBwbGFuIGlzc3VlcywgY2FsbGVkICdpbml0aWF0aXZlcydcbiAgICAgIHJldHVybiBpdGVtLnVybC5pbmRleE9mKHBsYW5QcmVmaXgpICE9PSAwO1xuICAgIH0pO1xuICAgIGlzc3VlcyA9IGlzc3Vlcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBcImxpXCIsXG4gICAgICAgIHsga2V5OiBpdGVtLmh0bWxfdXJsIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJhXCIsXG4gICAgICAgICAgeyBocmVmOiBpdGVtLmh0bWxfdXJsIH0sXG4gICAgICAgICAgaXRlbS50aXRsZVxuICAgICAgICApXG4gICAgICApO1xuICAgIH0pO1xuICAgIGlmIChpc3N1ZXMubGVuZ3RoKSB7XG4gICAgICB2YXIgbm91biA9IHBsdXJhbGl6ZShcImlzc3VlXCIsIGlzc3Vlcy5sZW5ndGgpO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHsgaWQ6IFwib3Blbmlzc3Vlc1wiIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJoMlwiLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgaXNzdWVzLmxlbmd0aCxcbiAgICAgICAgICBcIiBvcGVuIFwiLFxuICAgICAgICAgIG5vdW4sXG4gICAgICAgICAgXCIgYXNzaWduZWRcIlxuICAgICAgICApLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwidWxcIixcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIGlzc3Vlc1xuICAgICAgICApXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAgeyBpZDogXCJvcGVuaXNzdWVzXCIgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcImgyXCIsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBcIk5vIG9wZW4gaXNzdWVzIGFzc2lnbmVkLCBuaWNlIVwiXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XG59KTtcblxuXG52YXIgR2l0aHViUFJTZWFyY2ggPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiBcIkdpdGh1YlBSU2VhcmNoXCIsXG4gIG1peGluczogW0dpdGh1YlNlYXJjaF0sXG4gIG1ha2VGcmFnbWVudDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBcIj9xPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KFwiYXNzaWduZWU6XCIgKyB0aGlzLnByb3BzLmhhbmRsZSkgKyBcIitzdGF0ZTpvcGVuK3R5cGU6cHJcIjtcbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGlzc3VlcyA9IHRoaXMuc3RhdGUuaXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJsaVwiLFxuICAgICAgICB7IGtleTogaXRlbS5odG1sX3VybCB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgIHsgaHJlZjogaXRlbS5odG1sX3VybCB9LFxuICAgICAgICAgIGl0ZW0udGl0bGVcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9KTtcbiAgICBpZiAoaXNzdWVzLmxlbmd0aCkge1xuICAgICAgdmFyIG5vdW4gPSBwbHVyYWxpemUoXCJyZXF1ZXN0XCIsIGlzc3Vlcy5sZW5ndGgpO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHsgaWQ6IFwib3BlbnByc1wiIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJoMlwiLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgaXNzdWVzLmxlbmd0aCxcbiAgICAgICAgICBcIiBvcGVuIHB1bGwgXCIsXG4gICAgICAgICAgbm91blxuICAgICAgICApLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwidWxcIixcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIGlzc3Vlc1xuICAgICAgICApXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAgeyBpZDogXCJvcGVucHJzXCIgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcImgyXCIsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBcIk5vIG9wZW4gcHVsbCByZXF1ZXN0cywgbmljZSFcIlxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfVxufSk7XG52YXIgR2l0aHViSW5pdGlhdGl2ZXNTZWFyY2ggPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiBcIkdpdGh1YkluaXRpYXRpdmVzU2VhcmNoXCIsXG4gIG1peGluczogW0dpdGh1YlNlYXJjaF0sXG4gIG1ha2VGcmFnbWVudDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBcIj9xPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KFwiYXNzaWduZWU6XCIgKyB0aGlzLnByb3BzLmhhbmRsZSkgKyBcIitzdGF0ZTpvcGVuK29yZzpNb3ppbGxhRm91bmRhdGlvbityZXBvOnBsYW5cIjtcbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGlzc3VlcyA9IHRoaXMuc3RhdGUuaXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJsaVwiLFxuICAgICAgICB7IGtleTogaXRlbS5odG1sX3VybCB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgIHsgaHJlZjogaXRlbS5odG1sX3VybCB9LFxuICAgICAgICAgIGl0ZW0udGl0bGVcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9KTtcbiAgICBpZiAoaXNzdWVzLmxlbmd0aCkge1xuICAgICAgdmFyIG5vdW4gPSBwbHVyYWxpemUoXCJpbml0aWF0aXZlXCIsIGlzc3Vlcy5sZW5ndGgpO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHsgaWQ6IFwib3BlbmluaXRpYXRpdmVzXCIgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcImgyXCIsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBpc3N1ZXMubGVuZ3RoLFxuICAgICAgICAgIFwiIG9wZW4gXCIsXG4gICAgICAgICAgbm91bixcbiAgICAgICAgICBcIiBhc3NpZ25lZFwiXG4gICAgICAgICksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJ1bFwiLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgaXNzdWVzXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBcImRpdlwiLFxuICAgICAgICB7IGlkOiBcIm9wZW5pbml0aWF0aXZlc1wiIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJoMlwiLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgXCJObyBvcGVuIGluaXRpYXRpdmVzIGFzc2lnbmVkLlwiXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XG59KTtcblxuXG5cbnZhciBEYXNoYm9hcmQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiBcIkRhc2hib2FyZFwiLFxuICBtaXhpbnM6IFtBdXRoTWl4aW5dLFxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlID0gYXV0aC5nZXRDdXJyZW50VXNlcigpO1xuICAgIGlmICghaGFuZGxlKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBoYW5kbGU6IGhhbmRsZVxuICAgIH07XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYW5kbGUgPSB0aGlzLnN0YXRlLmhhbmRsZTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IGlkOiBcImRhc2hib2FyZFwiIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBcImRpdlwiLFxuICAgICAgICB7IGNsYXNzTmFtZTogXCJoZWFkZXJcIiB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwiaDJcIixcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIFwiRGFzaGJvYXJkIGZvciBcIixcbiAgICAgICAgICB0aGlzLnN0YXRlLmRldGFpbHMubmFtZVxuICAgICAgICApXG4gICAgICApLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAgeyBjbGFzc05hbWU6IFwibWFpblwiIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR2l0aHViSW5pdGlhdGl2ZXNTZWFyY2gsIHsgaGFuZGxlOiBoYW5kbGUgfSksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR2l0aHViUFJTZWFyY2gsIHsgaGFuZGxlOiBoYW5kbGUgfSksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR2l0aHViSXNzdWVzU2VhcmNoLCB7IGhhbmRsZTogaGFuZGxlIH0pLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KE1lbnRpb25zLCB7IGhhbmRsZTogaGFuZGxlIH0pXG4gICAgICApXG4gICAgKTtcbiAgfVxufSk7XG5cbnZhciBTcGxhc2ggPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiBcIlNwbGFzaFwiLFxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IGlkOiBcInNwbGFzaFwiIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBcImRpdlwiLFxuICAgICAgICB7IGNsYXNzTmFtZTogXCJtYXN0aGVhZFwiIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7IGNsYXNzTmFtZTogXCJ3cmFwXCIgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgXCJoMVwiLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIFwiTGV0J3MgQnVpbGQgV2VibWFrZXIgVG9nZXRoZXJcIlxuICAgICAgICAgICksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogXCJjZW50ZXJcIiB9LFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgTGluayxcbiAgICAgICAgICAgICAgeyBjbGFzc05hbWU6IFwiYnV0dG9uIGJ0bi13aGl0ZVwiLFxuICAgICAgICAgICAgICAgIHRvOiBcImFkZFwiIH0sXG4gICAgICAgICAgICAgIFwiQWRkIFByb2plY3RcIlxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgIExpbmssXG4gICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBcImJ1dHRvbiBidG4td2hpdGVcIixcbiAgICAgICAgICAgICAgICB0bzogXCJub3dcIiB9LFxuICAgICAgICAgICAgICBcIlRoaXMgSGVhcnRiZWF0XCJcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBcImRpdlwiLFxuICAgICAgICB7IGNsYXNzTmFtZTogXCJjb3B5XCIgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiBcIndyYXBcIiB9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6IFwiY2VudGVyXCIgfSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgIFwiaDRcIixcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgXCJPdXIgTWlzc2lvblwiXG4gICAgICAgICAgICApXG4gICAgICAgICAgKSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBcImNvbHVtbnNcIiB9LFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgXCJwXCIsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIFwiVGhlIE1vemlsbGEgRm91bmRhdGlvbiBpcyBhIG5vbi1wcm9maXQgb3JnYW5pemF0aW9uXCIsXG4gICAgICAgICAgICAgIFwidGhhdCBwcm9tb3RlcyBvcGVubmVzcywgaW5ub3ZhdGlvbiBhbmQgcGFydGljaXBhdGlvbiBvblwiLFxuICAgICAgICAgICAgICBcInRoZSBJbnRlcm5ldC4gV2UgcHJvbW90ZSB0aGUgdmFsdWVzIG9mIGFuIG9wZW4gSW50ZXJuZXRcIixcbiAgICAgICAgICAgICAgXCJ0byB0aGUgYnJvYWRlciB3b3JsZC5cIlxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgIFwicFwiLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBcIk1vemlsbGEgaXMgYmVzdCBrbm93biBmb3IgdGhlIEZpcmVmb3ggYnJvd3NlciwgYnV0IHdlXCIsXG4gICAgICAgICAgICAgIFwiYWR2YW5jZSBvdXIgbWlzc2lvbiB0aHJvdWdoIG90aGVyIHNvZnR3YXJlIHByb2plY3RzLCBncmFudHNcIixcbiAgICAgICAgICAgICAgXCJhbmQgZW5nYWdlbWVudCBhbmQgZWR1Y2F0aW9uIGVmZm9ydHMgc3VjaCBhcyBNb3ppbGxhIFdlYm1ha2VyLlwiXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgXCJwXCIsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIFwiV2VibWFrZXIgaXMgYWxsIGFib3V0IGJ1aWxkaW5nIGEgbmV3IGdlbmVyYXRpb24gb2ZcIixcbiAgICAgICAgICAgICAgXCJkaWdpdGFsIGNyZWF0b3JzIGFuZCB3ZWJtYWtlcnMsIGdpdmluZyBwZW9wbGUgdGhlIHRvb2xzXCIsXG4gICAgICAgICAgICAgIFwiYW5kIHNraWxscyB0aGV5IG5lZWQgdG8gbW92ZSBmcm9tIHVzaW5nIHRoZSB3ZWIgdG8gYWN0aXZlbHlcIixcbiAgICAgICAgICAgICAgXCJtYWtpbmcgdGhlIHdlYi5cIlxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgIFwicFwiLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBcIklmIHlvdSdyZSBpbnRlcmVzdGVkIGluIHN1cHBvcnRpbmcgb3VyIGVmZm9ydHMsIHBsZWFzZVwiLFxuICAgICAgICAgICAgICBcImNvbnNpZGVyIGdldHRpbmcgaW52b2x2ZWQgd2l0aCBNb3ppbGxhIFdlYm1ha2VyLCBtYWtpbmdcIixcbiAgICAgICAgICAgICAgXCJhIGRvbmF0aW9uIG9yIGdldHRpbmcgaW52b2x2ZWQgd2l0aCB0aGVcIixcbiAgICAgICAgICAgICAgXCJNb3ppbGxhIGNvbW11bml0eS5cIlxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKVxuICAgICk7XG4gIH1cbn0pO1xuXG5cbnZhciBIb21lcGFnZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6IFwiSG9tZXBhZ2VcIixcbiAgbWl4aW5zOiBbQXV0aE1peGluXSxcbiAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUubG9nZ2VkSW4pIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KERhc2hib2FyZCwgbnVsbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFNwbGFzaCwgbnVsbCk7XG4gICAgfVxuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBIb21lcGFnZTtcblxufSx7XCIuL2F1dGguanN4XCI6NixcIi4vZ2V0SlNPTi5qc3hcIjo5LFwiLi9tZW50aW9ucy5qc3hcIjoxMyxcInBsdXJhbGl6ZVwiOjIxLFwicmVhY3RcIjoyMTYsXCJyZWFjdC1yb3V0ZXJcIjozMX1dLDEyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cbnZhciBMYWJlbHMgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiBcIkxhYmVsc1wiLFxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbGFiZWxzID0gdGhpcy5wcm9wcy5sYWJlbHMubWFwKGZ1bmN0aW9uIChsYWJlbCkge1xuICAgICAgdmFyIHN0eWxlID0geyBiYWNrZ3JvdW5kQ29sb3I6IFN0cmluZyhsYWJlbC5jb2xvciksXG4gICAgICAgIGNvbG9yOiBwYXJzZUludChsYWJlbC5jb2xvciwgMTYpID4gMTY3NzcyMTUgLyAyID8gXCIwYTM5MzFcIiA6IFwid2hpdGVcIlxuICAgICAgfTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBcImxpXCIsXG4gICAgICAgIHsga2V5OiBsYWJlbC5uYW1lLCBzdHlsZTogc3R5bGUgfSxcbiAgICAgICAgbGFiZWwubmFtZVxuICAgICAgKTtcbiAgICB9KTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFwidWxcIixcbiAgICAgIHsgY2xhc3NOYW1lOiBcImxhYmVsc1wiIH0sXG4gICAgICBsYWJlbHNcbiAgICApO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBMYWJlbHM7XG5cbn0se1wicmVhY3RcIjoyMTZ9XSwxMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuLyoqIEBqc3ggUmVhY3QuRE9NICovXG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbnZhciBSZWFjdEZpcmVNaXhpbiA9IHJlcXVpcmUoXCJyZWFjdGZpcmVcIik7XG52YXIgRmlyZWJhc2UgPSByZXF1aXJlKFwiY2xpZW50LWZpcmViYXNlXCIpO1xudmFyIEdpdEh1YlBlcnNvbiA9IHJlcXVpcmUoXCIuL0dpdEh1YlBlcnNvbi5qc3hcIik7XG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKFwiLi9hdXRoLmpzeFwiKTtcblxudmFyIGF1dGggPSBfcmVxdWlyZS5hdXRoO1xuXG5cbnZhciBNZW50aW9uID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogXCJNZW50aW9uXCIsXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7IGlzc3VlOiB7IHN0YXRlOiBcIm9wZW5cIiwgdGl0bGU6IFwiXCIsIHVybDogXCJcIiB9IH07XG4gIH0sXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNvbXAgPSB0aGlzO1xuICAgIHZhciBpc3N1ZXNSZWYgPSBuZXcgRmlyZWJhc2UoXCJodHRwczovL2RlYnQuZmlyZWJhc2Vpby5jb20vaXNzdWVzXCIpLmNoaWxkKHRoaXMucHJvcHMuY29tbWVudC5pc3N1ZV9pZCkub24oXCJ2YWx1ZVwiLCBmdW5jdGlvbiAoc25hcHNob3QpIHtcbiAgICAgIHZhciBpc3N1ZSA9IHNuYXBzaG90LnZhbCgpO1xuICAgICAgaWYgKGlzc3VlKSB7XG4gICAgICAgIGNvbXAuc2V0U3RhdGUoeyBpc3N1ZTogaXNzdWUgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8gZ2V0IGluZm8gZnJvbSB0aGUgaXNzdWVzIGZpcmViYXNlIGFuZCBzZXQgc29tZSBwcm9wZXJ0aWVzIGJhc2VkIG9uIHRoYXRcbiAgfSxcbiAgZGlzbWlzczogZnVuY3Rpb24gKGZiaWQpIHtcbiAgICB2YXIgZmlyZWJhc2VSZWYgPSBuZXcgRmlyZWJhc2UoXCJodHRwczovL2RlYnQuZmlyZWJhc2Vpby5jb20vYXNrc1wiKS5jaGlsZChmYmlkKS51cGRhdGUoeyBkaXNtaXNzZWQ6IFwidHJ1ZVwiIH0pO1xuICB9LFxuICBsaW5lc3BsaXQ6IGZ1bmN0aW9uICh0aGVzdHJpbmcpIHtcbiAgICB2YXIgbGluZXMgPSB0aGVzdHJpbmcuc3BsaXQoXCJcXG5cIik7XG4gICAgdmFyIGJpdHMgPSBsaW5lcy5tYXAoZnVuY3Rpb24gKGxpbmUpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBcInNwYW5cIixcbiAgICAgICAgeyBjbGFzc05hbWU6IFwibGluZVwiIH0sXG4gICAgICAgIGxpbmVcbiAgICAgICk7XG4gICAgfSk7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBcImRpdlwiLFxuICAgICAgbnVsbCxcbiAgICAgIGJpdHNcbiAgICApO1xuICB9LFxuICBwYXJzZUJvZHk6IGZ1bmN0aW9uIChib2R5KSB7XG4gICAgaWYgKCFib2R5KSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgbnVsbCk7XG4gICAgfVxuICAgIHZhciBtZW50aW9uSW5kZXggPSBib2R5LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcIkBcIiArIHRoaXMucHJvcHMuaGFuZGxlLnRvTG93ZXJDYXNlKCkpO1xuICAgIHZhciBiZWdpbm5pbmcgPSBib2R5O1xuICAgIHZhciBlbmRpbmcgPSBNYXRoLm1pbihtZW50aW9uSW5kZXggKyAoXCJAXCIgKyB0aGlzLnByb3BzLmhhbmRsZSkubGVuZ3RoICsgNTAsIGJvZHkubGVuZ3RoKTtcbiAgICB2YXIgYmVmb3JlID0gYm9keS5zbGljZShiZWdpbm5pbmcsIG1lbnRpb25JbmRleCk7XG4gICAgdmFyIGluZGV4T2ZMYXN0TmV3bGluZSA9IGJlZm9yZS5sYXN0SW5kZXhPZihcIlxcblwiKTtcbiAgICBpZiAoaW5kZXhPZkxhc3ROZXdsaW5lID09PSAtMSkge1xuICAgICAgaW5kZXhPZkxhc3ROZXdsaW5lID0gMDtcbiAgICB9XG4gICAgYmVmb3JlID0gYmVmb3JlLnNsaWNlKGluZGV4T2ZMYXN0TmV3bGluZSwgLTEpO1xuICAgIC8vIGdvIGJhY2sgYW5vdGhlciBsaW5lXG4gICAgaW5kZXhPZkxhc3ROZXdsaW5lID0gYmVmb3JlLmxhc3RJbmRleE9mKFwiXFxuXCIpO1xuICAgIGlmIChpbmRleE9mTGFzdE5ld2xpbmUgPT09IC0xKSB7XG4gICAgICBpbmRleE9mTGFzdE5ld2xpbmUgPSAwO1xuICAgIH1cbiAgICBiZWZvcmUgPSBiZWZvcmUuc2xpY2UoaW5kZXhPZkxhc3ROZXdsaW5lKTtcbiAgICBpZiAoaW5kZXhPZkxhc3ROZXdsaW5lICE9PSAwKSB7XG4gICAgICBiZWZvcmUgPSBcIuKAplwiICsgYmVmb3JlO1xuICAgIH1cbiAgICB2YXIgYWZ0ZXIgPSBib2R5LnNsaWNlKG1lbnRpb25JbmRleCArIChcIkBcIiArIHRoaXMucHJvcHMuaGFuZGxlKS5sZW5ndGgsIGVuZGluZyk7XG4gICAgaWYgKGVuZGluZyAhPT0gYm9keS5sZW5ndGgpIHtcbiAgICAgIGFmdGVyID0gYWZ0ZXIgKyBcIuKAplwiO1xuICAgIH1cbiAgICB2YXIgbWlkZGxlID0gYm9keS5zbGljZShtZW50aW9uSW5kZXgsIG1lbnRpb25JbmRleCArIChcIkBcIiArIHRoaXMucHJvcHMuaGFuZGxlKS5sZW5ndGgpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBcInNwYW5cIixcbiAgICAgIG51bGwsXG4gICAgICBiZWZvcmUsXG4gICAgICBcIiBcIixcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwiYlwiLFxuICAgICAgICBudWxsLFxuICAgICAgICBtaWRkbGVcbiAgICAgICksXG4gICAgICBcIiBcIixcbiAgICAgIGFmdGVyXG4gICAgKTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY29tbWVudCA9IHRoaXMucHJvcHMuY29tbWVudDtcbiAgICB2YXIgY2xhc3NOYW1lID0gdGhpcy5zdGF0ZS5pc3N1ZS5zdGF0ZSA9PT0gXCJjbG9zZWRcIiA/IFwibWVudGlvbiBoaWRkZW5cIiA6IFwibWVudGlvblwiO1xuICAgIHZhciBpc3N1ZV91cmwgPSBjb21tZW50LnJlZl91cmw7XG4gICAgdmFyIHJlcG9fbmFtZSA9IFwiXCI7XG4gICAgaWYgKGlzc3VlX3VybCkge1xuICAgICAgcmVwb19uYW1lID0gaXNzdWVfdXJsLnNsaWNlKGlzc3VlX3VybC5pbmRleE9mKFwiL3JlcG9zL1wiKSArIFwiL3JlcG9zL1wiLmxlbmd0aCk7XG4gICAgICByZXBvX25hbWUgPSByZXBvX25hbWUuc2xpY2UoMCwgcmVwb19uYW1lLmluZGV4T2YoXCIvaXNzdWVzL1wiKSk7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BzLnF1ZXN0aW9uID09PSBcIm1lbnRpb25cIikge1xuICAgICAgdmFyIGxvZ2dlZGluVXNlciA9IGF1dGguZ2V0Q3VycmVudFVzZXIoKTtcbiAgICAgIHZhciBkaXNtaXNzID0gdGhpcy5kaXNtaXNzLmJpbmQodGhpcywgdGhpcy5wcm9wcy5pc3N1ZV9pZCk7XG4gICAgICB2YXIgdHJhc2hjYW47XG4gICAgICBpZiAobG9nZ2VkaW5Vc2VyID09PSB0aGlzLnByb3BzLmhhbmRsZSkge1xuICAgICAgICB0cmFzaGNhbiA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJhXCIsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IFwiZGlzbWlzc1wiLCBocmVmOiBcIiNcIixcbiAgICAgICAgICAgIG9uQ2xpY2s6IGRpc21pc3MgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaVwiLCB7IGNsYXNzTmFtZTogXCJmYSBmYS10cmFzaFwiIH0pXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFzaGNhbiA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIG51bGwpO1xuICAgICAgfVxuICAgICAgaWYgKCFjb21tZW50LmJvZHkpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJXVEZcIiwgY29tbWVudCk7XG4gICAgICB9XG4gICAgICB2YXIgcGFyc2VkQm9keSA9IHRoaXMucGFyc2VCb2R5KGNvbW1lbnQuYm9keSk7XG4gICAgICBpZiAoIWNvbW1lbnQuZGlzbWlzc2VkKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwibGlcIixcbiAgICAgICAgICB7IGNsYXNzTmFtZTogY2xhc3NOYW1lIH0sXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogXCJwcm9maWxlLXBpYy13cmFwXCIgfSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR2l0SHViUGVyc29uLCB7IGhhbmRsZTogY29tbWVudC5mcm9td2hvbSB9KVxuICAgICAgICAgICksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogXCJtZW50aW9uYmxvY2tcIiB9LFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgcmVwb19uYW1lLFxuICAgICAgICAgICAgICBcIi9cIixcbiAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICBcImFcIixcbiAgICAgICAgICAgICAgICB7IGhyZWY6IGNvbW1lbnQucmVmX2h0bWxfdXJsIH0sXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5pc3N1ZS50aXRsZVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBcIiA6IFwiLFxuICAgICAgICAgICAgICB0cmFzaGNhblxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBcImNvbW1lbnRcIiB9LFxuICAgICAgICAgICAgICBwYXJzZWRCb2R5XG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIG51bGwpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJsaVwiLFxuICAgICAgICB7IGNsYXNzTmFtZTogY2xhc3NOYW1lIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7IGNsYXNzTmFtZTogXCJwcm9maWxlLXBpYy13cmFwXCIgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEdpdEh1YlBlcnNvbiwgeyBoYW5kbGU6IGNvbW1lbnQuZnJvbXdob20gfSlcbiAgICAgICAgKSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiBcIm1lbnRpb25ibG9ja1wiIH0sXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIFwiYlwiLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIGNvbW1lbnQuZnJvbXdob21cbiAgICAgICAgICApLFxuICAgICAgICAgIFwiIGFza2VkIGZvciBcIixcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgXCJiXCIsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgY29tbWVudC5xdWVzdGlvblxuICAgICAgICAgICksXG4gICAgICAgICAgXCIgaW4gXCIsXG4gICAgICAgICAgcmVwb19uYW1lLFxuICAgICAgICAgIFwiL1wiLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBcImFcIixcbiAgICAgICAgICAgIHsgaHJlZjogY29tbWVudC5yZWZfaHRtbF91cmwgfSxcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuaXNzdWUudGl0bGVcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XG59KTtcblxudmFyIE1lbnRpb25zTGlzdCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6IFwiTWVudGlvbnNMaXN0XCIsXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBiaXRzID0gW107XG4gICAgdmFyIG1lbnRpb25zID0gdGhpcy5wcm9wcy5tZW50aW9ucztcbiAgICBmb3IgKHZhciBmcm9td2hvbSBpbiBtZW50aW9ucykge1xuICAgICAgLy8gbG9va2luZyBhdCB0aGUgYXNrcyBmcm9tIFwiZnJvbXdob21cIlxuICAgICAgaWYgKCFtZW50aW9ucy5oYXNPd25Qcm9wZXJ0eShmcm9td2hvbSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgdG9tZWZyb210aGVtID0gbWVudGlvbnNbZnJvbXdob21dO1xuICAgICAgLy8gdG9tZWZyb210aGVtIHdpbGwgYmUgdGhlIHNhbWVcbiAgICAgIGZvciAodmFyIHF1ZXN0aW9uIGluIHRvbWVmcm9tdGhlbSkge1xuICAgICAgICBpZiAoIXRvbWVmcm9tdGhlbS5oYXNPd25Qcm9wZXJ0eShxdWVzdGlvbikpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpc3N1ZV9pZCBpbiB0b21lZnJvbXRoZW1bcXVlc3Rpb25dKSB7XG4gICAgICAgICAgaWYgKCF0b21lZnJvbXRoZW1bcXVlc3Rpb25dLmhhc093blByb3BlcnR5KGlzc3VlX2lkKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBjb21tZW50ID0gdG9tZWZyb210aGVtW3F1ZXN0aW9uXVtpc3N1ZV9pZF07XG4gICAgICAgICAgaWYgKGNvbW1lbnQudHlwZSAhPT0gdGhpcy5wcm9wcy50eXBlKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHVuaXF1ZV9pZCA9IHRoaXMucHJvcHMuaGFuZGxlICsgXCIvXCIgKyBmcm9td2hvbSArIFwiL1wiICsgcXVlc3Rpb24gKyBcIi9cIiArIGNvbW1lbnQuaXNzdWVfaWQ7XG4gICAgICAgICAgYml0cy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWVudGlvbiwgeyBrZXk6IHVuaXF1ZV9pZCxcbiAgICAgICAgICAgIGlzc3VlX2lkOiB1bmlxdWVfaWQsXG4gICAgICAgICAgICBoYW5kbGU6IHRoaXMucHJvcHMuaGFuZGxlLFxuICAgICAgICAgICAgcXVlc3Rpb246IHF1ZXN0aW9uLFxuICAgICAgICAgICAgY29tbWVudDogY29tbWVudCB9KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGJpdHMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIG51bGwsXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJoMlwiLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiBcIm1lbnRpb25zaGVhZGluZ1wiIH0sXG4gICAgICAgICAgdGhpcy5wcm9wcy50aXRsZVxuICAgICAgICApLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwicFwiLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiBcInN1YmhlYWRpbmdcIiB9LFxuICAgICAgICAgIHRoaXMucHJvcHMuZGVzY1xuICAgICAgICApLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwidWxcIixcbiAgICAgICAgICB7IGNsYXNzTmFtZTogXCJtZW50aW9uc3VsXCIgfSxcbiAgICAgICAgICBcIiBcIixcbiAgICAgICAgICBiaXRzLFxuICAgICAgICAgIFwiIFwiXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwpO1xuICAgIH1cbiAgfVxufSk7XG5cbnZhciBNZW50aW9ucyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6IFwiTWVudGlvbnNcIixcbiAgbWl4aW5zOiBbUmVhY3RGaXJlTWl4aW5dLFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7IGhhbmRsZTogdGhpcy5wcm9wcy5oYW5kbGUgfTtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsTW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZmlyZWJhc2VSZWYgPSBuZXcgRmlyZWJhc2UoXCJodHRwczovL2RlYnQuZmlyZWJhc2Vpby5jb20vYXNrc1wiKS5jaGlsZCh0aGlzLnN0YXRlLmhhbmRsZS50b0xvd2VyQ2FzZSgpKTtcbiAgICB0aGlzLmJpbmRBc09iamVjdChmaXJlYmFzZVJlZiwgXCJtZW50aW9uc1wiKTtcbiAgfSxcblxuICBvbkNoYW5nZTogZnVuY3Rpb24gKGUpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgaGFuZGxlOiBlLnRhcmdldC52YWx1ZSB9KTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFwiZGl2XCIsXG4gICAgICBudWxsLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChNZW50aW9uc0xpc3QsIHsgdGl0bGU6IFwiUGVuZGluZyBmbGFnc1wiLCB0eXBlOiBcImZsYWdcIiwgaGFuZGxlOiB0aGlzLnN0YXRlLmhhbmRsZSwgbWVudGlvbnM6IHRoaXMuc3RhdGUubWVudGlvbnMgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KE1lbnRpb25zTGlzdCwgeyB0aXRsZTogXCJQb3NzaWJseSBub3RhYmxlIG1lbnRpb25zXCIsIGRlc2M6IFwiKG1lbnRpb25zIHNpbmNlIHlvdSBjb21tZW50ZWQgb24gYW4gaXNzdWUgb3IgZGlzbWlzc2VkIHRoZW0gdXNpbmcgdGhlIHRyYXNoIGljb24pXCIsIHR5cGU6IFwibWVudGlvblwiLCBoYW5kbGU6IHRoaXMuc3RhdGUuaGFuZGxlLCBtZW50aW9uczogdGhpcy5zdGF0ZS5tZW50aW9ucyB9KVxuICAgICk7XG4gIH1cbn0pO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gTWVudGlvbnM7XG5cbn0se1wiLi9HaXRIdWJQZXJzb24uanN4XCI6MSxcIi4vYXV0aC5qc3hcIjo2LFwiY2xpZW50LWZpcmViYXNlXCI6MjAsXCJyZWFjdFwiOjIxNixcInJlYWN0ZmlyZVwiOjIxN31dLDE0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG52YXIgZ2V0SlNPTiA9IHJlcXVpcmUoXCIuL2dldEpTT04uanN4XCIpO1xudmFyIEFQSVNlcnZlciA9IFwiL2FwaVwiO1xudmFyIExhYmVscyA9IHJlcXVpcmUoXCIuL2xhYmVscy5qc3hcIik7XG5cbnZhciBJc3N1ZUNhcmQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiBcIklzc3VlQ2FyZFwiLFxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge307XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRhdGEgPSB0aGlzLnByb3BzLmRhdGE7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBcImxpXCIsXG4gICAgICBudWxsLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJhXCIsXG4gICAgICAgIHsgaHJlZjogXCJ7ZGF0YS5odG1sX3VybH1cIiwgdGFyZ2V0OiBcIl9ibGFua1wiIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJoNFwiLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgZGF0YS50aXRsZVxuICAgICAgICApLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KExhYmVscywgeyBsYWJlbHM6IGRhdGEubGFiZWxzIH0pXG4gICAgICApXG4gICAgKTtcbiAgfVxufSk7XG5cbnZhciBVcGNvbWluZyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6IFwiVXBjb21pbmdcIixcbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1pbGVzdG9uZXM6IFtdXG4gICAgfTtcbiAgfSxcbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgZ2V0SlNPTihBUElTZXJ2ZXIgKyBcIi91cGNvbWluZ1wiLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgaWYgKHNlbGYuaXNNb3VudGVkKCkpIHtcbiAgICAgICAgc2VsZi5zZXRTdGF0ZSh7IG1pbGVzdG9uZXM6IGRhdGEubWlsZXN0b25lcyB9KTtcbiAgICAgIH1cbiAgICB9LCBmdW5jdGlvbiAoZXJyKSB7fSk7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBtaWxlc3RvbmVzID0gdGhpcy5zdGF0ZS5taWxlc3RvbmVzLm1hcChmdW5jdGlvbiAobWlsZXN0b25lKSB7XG4gICAgICB2YXIgaXNzdWVDYXJkcyA9IG1pbGVzdG9uZS5pc3N1ZXMubWFwKGZ1bmN0aW9uIChpc3N1ZSkge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChJc3N1ZUNhcmQsIHsga2V5OiBpc3N1ZS5pZCwgZGF0YTogaXNzdWUgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBcImRpdlwiLFxuICAgICAgICB7IGtleTogbWlsZXN0b25lLmlkIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJoMlwiLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiBcImNsZWFyZml4XCIgfSxcbiAgICAgICAgICBtaWxlc3RvbmUudGl0bGVcbiAgICAgICAgKSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcInVsXCIsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IFwiaXNzdWVzXCIgfSxcbiAgICAgICAgICBpc3N1ZUNhcmRzXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFwiZGl2XCIsXG4gICAgICBudWxsLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAgeyBjbGFzc05hbWU6IFwiaGVhZGVyXCIgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcImgyXCIsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBcIlVwY29taW5nXCJcbiAgICAgICAgKVxuICAgICAgKSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHsgY2xhc3NOYW1lOiBcIm1haW5cIiB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBpZDogXCJjYWxlbmRhclwiIH0sXG4gICAgICAgICAgbWlsZXN0b25lc1xuICAgICAgICApXG4gICAgICApXG4gICAgKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gVXBjb21pbmc7XG5cbn0se1wiLi9nZXRKU09OLmpzeFwiOjksXCIuL2xhYmVscy5qc3hcIjoxMixcInJlYWN0XCI6MjE2fV0sMTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzLWFycmF5JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbnZhciBrTWF4TGVuZ3RoID0gMHgzZmZmZmZmZlxudmFyIHJvb3RQYXJlbnQgPSB7fVxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqIC0gSW1wbGVtZW50YXRpb24gbXVzdCBzdXBwb3J0IGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLlxuICogICBGaXJlZm94IDQtMjkgbGFja2VkIHN1cHBvcnQsIGZpeGVkIGluIEZpcmVmb3ggMzArLlxuICogICBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOC5cbiAqXG4gKiAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2ZcbiAqICAgIGluY29ycmVjdCBsZW5ndGggaW4gc29tZSBzaXR1YXRpb25zLlxuICpcbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5IHdpbGxcbiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IHdpbGwgd29yayBjb3JyZWN0bHkuXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gKGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYnVmID0gbmV3IEFycmF5QnVmZmVyKDApXG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KGJ1ZilcbiAgICBhcnIuZm9vID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfVxuICAgIHJldHVybiA0MiA9PT0gYXJyLmZvbygpICYmIC8vIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkXG4gICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgJiYgLy8gY2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXG4gICAgICAgIG5ldyBVaW50OEFycmF5KDEpLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59KSgpXG5cbi8qKlxuICogQ2xhc3M6IEJ1ZmZlclxuICogPT09PT09PT09PT09PVxuICpcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgYXJlIGF1Z21lbnRlZFxuICogd2l0aCBmdW5jdGlvbiBwcm9wZXJ0aWVzIGZvciBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgQVBJIGZ1bmN0aW9ucy4gV2UgdXNlXG4gKiBgVWludDhBcnJheWAgc28gdGhhdCBzcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdCByZXR1cm5zXG4gKiBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBCeSBhdWdtZW50aW5nIHRoZSBpbnN0YW5jZXMsIHdlIGNhbiBhdm9pZCBtb2RpZnlpbmcgdGhlIGBVaW50OEFycmF5YFxuICogcHJvdG90eXBlLlxuICovXG5mdW5jdGlvbiBCdWZmZXIgKHN1YmplY3QsIGVuY29kaW5nLCBub1plcm8pIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpXG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoc3ViamVjdCwgZW5jb2RpbmcsIG5vWmVybylcblxuICB2YXIgdHlwZSA9IHR5cGVvZiBzdWJqZWN0XG5cbiAgLy8gRmluZCB0aGUgbGVuZ3RoXG4gIHZhciBsZW5ndGhcbiAgaWYgKHR5cGUgPT09ICdudW1iZXInKVxuICAgIGxlbmd0aCA9IHN1YmplY3QgPiAwID8gc3ViamVjdCA+Pj4gMCA6IDBcbiAgZWxzZSBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICBsZW5ndGggPSBCdWZmZXIuYnl0ZUxlbmd0aChzdWJqZWN0LCBlbmNvZGluZylcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0JyAmJiBzdWJqZWN0ICE9PSBudWxsKSB7IC8vIGFzc3VtZSBvYmplY3QgaXMgYXJyYXktbGlrZVxuICAgIGlmIChzdWJqZWN0LnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkoc3ViamVjdC5kYXRhKSlcbiAgICAgIHN1YmplY3QgPSBzdWJqZWN0LmRhdGFcbiAgICBsZW5ndGggPSArc3ViamVjdC5sZW5ndGggPiAwID8gTWF0aC5mbG9vcigrc3ViamVjdC5sZW5ndGgpIDogMFxuICB9IGVsc2VcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtdXN0IHN0YXJ0IHdpdGggbnVtYmVyLCBidWZmZXIsIGFycmF5IG9yIHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IGtNYXhMZW5ndGgpXG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aC50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcblxuICB2YXIgYnVmXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFByZWZlcnJlZDogUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICBidWYgPSBCdWZmZXIuX2F1Z21lbnQobmV3IFVpbnQ4QXJyYXkobGVuZ3RoKSlcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIFRISVMgaW5zdGFuY2Ugb2YgQnVmZmVyIChjcmVhdGVkIGJ5IGBuZXdgKVxuICAgIGJ1ZiA9IHRoaXNcbiAgICBidWYubGVuZ3RoID0gbGVuZ3RoXG4gICAgYnVmLl9pc0J1ZmZlciA9IHRydWVcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiB0eXBlb2Ygc3ViamVjdC5ieXRlTGVuZ3RoID09PSAnbnVtYmVyJykge1xuICAgIC8vIFNwZWVkIG9wdGltaXphdGlvbiAtLSB1c2Ugc2V0IGlmIHdlJ3JlIGNvcHlpbmcgZnJvbSBhIHR5cGVkIGFycmF5XG4gICAgYnVmLl9zZXQoc3ViamVjdClcbiAgfSBlbHNlIGlmIChpc0FycmF5aXNoKHN1YmplY3QpKSB7XG4gICAgLy8gVHJlYXQgYXJyYXktaXNoIG9iamVjdHMgYXMgYSBieXRlIGFycmF5XG4gICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdWJqZWN0KSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxuICAgICAgICBidWZbaV0gPSBzdWJqZWN0LnJlYWRVSW50OChpKVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXG4gICAgICAgIGJ1ZltpXSA9ICgoc3ViamVjdFtpXSAlIDI1NikgKyAyNTYpICUgMjU2XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgYnVmLndyaXRlKHN1YmplY3QsIDAsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmICFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhbm9aZXJvKSB7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBidWZbaV0gPSAwXG4gICAgfVxuICB9XG5cbiAgaWYgKGxlbmd0aCA+IDAgJiYgbGVuZ3RoIDw9IEJ1ZmZlci5wb29sU2l6ZSlcbiAgICBidWYucGFyZW50ID0gcm9vdFBhcmVudFxuXG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlcihzdWJqZWN0LCBlbmNvZGluZywgbm9aZXJvKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTbG93QnVmZmVyKSlcbiAgICByZXR1cm4gbmV3IFNsb3dCdWZmZXIoc3ViamVjdCwgZW5jb2RpbmcsIG5vWmVybylcblxuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcihzdWJqZWN0LCBlbmNvZGluZywgbm9aZXJvKVxuICBkZWxldGUgYnVmLnBhcmVudFxuICByZXR1cm4gYnVmXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSlcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzJylcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuICYmIGFbaV0gPT09IGJbaV07IGkrKykge31cbiAgaWYgKGkgIT09IGxlbikge1xuICAgIHggPSBhW2ldXG4gICAgeSA9IGJbaV1cbiAgfVxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICdyYXcnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gKGxpc3QsIHRvdGFsTGVuZ3RoKSB7XG4gIGlmICghaXNBcnJheShsaXN0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVXNhZ2U6IEJ1ZmZlci5jb25jYXQobGlzdFssIGxlbmd0aF0pJylcblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcigwKVxuICB9IGVsc2UgaWYgKGxpc3QubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGxpc3RbMF1cbiAgfVxuXG4gIHZhciBpXG4gIGlmICh0b3RhbExlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdG90YWxMZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRvdGFsTGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIodG90YWxMZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldXG4gICAgaXRlbS5jb3B5KGJ1ZiwgcG9zKVxuICAgIHBvcyArPSBpdGVtLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZcbn1cblxuQnVmZmVyLmJ5dGVMZW5ndGggPSBmdW5jdGlvbiAoc3RyLCBlbmNvZGluZykge1xuICB2YXIgcmV0XG4gIHN0ciA9IHN0ciArICcnXG4gIHN3aXRjaCAoZW5jb2RpbmcgfHwgJ3V0ZjgnKSB7XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAncmF3JzpcbiAgICAgIHJldCA9IHN0ci5sZW5ndGhcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldCA9IHN0ci5sZW5ndGggKiAyXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2hleCc6XG4gICAgICByZXQgPSBzdHIubGVuZ3RoID4+PiAxXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIHJldCA9IHV0ZjhUb0J5dGVzKHN0cikubGVuZ3RoXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICByZXQgPSBiYXNlNjRUb0J5dGVzKHN0cikubGVuZ3RoXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXQgPSBzdHIubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG4vLyBwcmUtc2V0IGZvciB2YWx1ZXMgdGhhdCBtYXkgZXhpc3QgaW4gdGhlIGZ1dHVyZVxuQnVmZmVyLnByb3RvdHlwZS5sZW5ndGggPSB1bmRlZmluZWRcbkJ1ZmZlci5wcm90b3R5cGUucGFyZW50ID0gdW5kZWZpbmVkXG5cbi8vIHRvU3RyaW5nKGVuY29kaW5nLCBzdGFydD0wLCBlbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA9PT0gSW5maW5pdHkgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG4gIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmIChlbmQgPD0gc3RhcnQpIHJldHVybiAnJ1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGJpbmFyeVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSlcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KVxuICAgICAgc3RyICs9ICcgLi4uICdcbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKVxufVxuXG4vLyBgZ2V0YCB3aWxsIGJlIHJlbW92ZWQgaW4gTm9kZSAwLjEzK1xuQnVmZmVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAob2Zmc2V0KSB7XG4gIGNvbnNvbGUubG9nKCcuZ2V0KCkgaXMgZGVwcmVjYXRlZC4gQWNjZXNzIHVzaW5nIGFycmF5IGluZGV4ZXMgaW5zdGVhZC4nKVxuICByZXR1cm4gdGhpcy5yZWFkVUludDgob2Zmc2V0KVxufVxuXG4vLyBgc2V0YCB3aWxsIGJlIHJlbW92ZWQgaW4gTm9kZSAwLjEzK1xuQnVmZmVyLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAodiwgb2Zmc2V0KSB7XG4gIGNvbnNvbGUubG9nKCcuc2V0KCkgaXMgZGVwcmVjYXRlZC4gQWNjZXNzIHVzaW5nIGFycmF5IGluZGV4ZXMgaW5zdGVhZC4nKVxuICByZXR1cm4gdGhpcy53cml0ZVVJbnQ4KHYsIG9mZnNldClcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgYnl0ZSA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAoaXNOYU4oYnl0ZSkpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBieXRlXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgdmFyIGNoYXJzV3JpdHRlbiA9IGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbiAgcmV0dXJuIGNoYXJzV3JpdHRlblxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgdmFyIGNoYXJzV3JpdHRlbiA9IGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG4gIHJldHVybiBjaGFyc1dyaXR0ZW5cbn1cblxuZnVuY3Rpb24gYmluYXJ5V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgdmFyIGNoYXJzV3JpdHRlbiA9IGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxuICByZXR1cm4gY2hhcnNXcml0dGVuXG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHZhciBjaGFyc1dyaXR0ZW4gPSBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgsIDIpXG4gIHJldHVybiBjaGFyc1dyaXR0ZW5cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBTdXBwb3J0IGJvdGggKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKVxuICAvLyBhbmQgdGhlIGxlZ2FjeSAoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpXG4gIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgaWYgKCFpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICB9IGVsc2UgeyAgLy8gbGVnYWN5XG4gICAgdmFyIHN3YXAgPSBlbmNvZGluZ1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgb2Zmc2V0ID0gbGVuZ3RoXG4gICAgbGVuZ3RoID0gc3dhcFxuICB9XG5cbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuXG4gIGlmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpXG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJyk7XG5cbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cbiAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcgfHwgJ3V0ZjgnKS50b0xvd2VyQ2FzZSgpXG5cbiAgdmFyIHJldFxuICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICAgIHJldCA9IGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIHJldCA9IHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgICByZXQgPSBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICByZXQgPSBiaW5hcnlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgcmV0ID0gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldCA9IHV0ZjE2bGVXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXMgPSAnJ1xuICB2YXIgdG1wID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgaWYgKGJ1ZltpXSA8PSAweDdGKSB7XG4gICAgICByZXMgKz0gZGVjb2RlVXRmOENoYXIodG1wKSArIFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICAgICAgdG1wID0gJydcbiAgICB9IGVsc2Uge1xuICAgICAgdG1wICs9ICclJyArIGJ1ZltpXS50b1N0cmluZygxNilcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzICsgZGVjb2RlVXRmOENoYXIodG1wKVxufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBiaW5hcnlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgdmFyIG91dCA9ICcnXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgb3V0ICs9IHRvSGV4KGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICB2YXIgcmVzID0gJydcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSArIDFdICogMjU2KVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW47XG4gICAgaWYgKHN0YXJ0IDwgMClcbiAgICAgIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKVxuICAgICAgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KVxuICAgIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSBCdWZmZXIuX2F1Z21lbnQodGhpcy5zdWJhcnJheShzdGFydCwgZW5kKSlcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZCwgdHJ1ZSlcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyBpKyspIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIGlmIChuZXdCdWYubGVuZ3RoKVxuICAgIG5ld0J1Zi5wYXJlbnQgPSB0aGlzLnBhcmVudCB8fCB0aGlzXG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMClcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aClcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpXG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICB2YXIgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpXG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bDtcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSlcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKVxuICAgIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGhcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpXG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKVxuICAgIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKVxuICAgIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignYnVmZmVyIG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCd2YWx1ZSBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdpbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSwgMClcblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpID4+PiAwICYgMHhGRlxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpLCAwKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpXG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgPj4+IDAgJiAweEZGXG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWVcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgMik7IGkgPCBqOyBpKyspIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gdmFsdWVcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Ugb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSB2YWx1ZVxuICB9IGVsc2Ugb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCA0KTsgaSA8IGo7IGkrKykge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4KSAmIDB4ZmZcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldF0gPSB2YWx1ZVxuICB9IGVsc2Ugb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gdmFsdWVcbiAgfSBlbHNlIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0ludCh0aGlzLFxuICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgIG9mZnNldCxcbiAgICAgICAgICAgICBieXRlTGVuZ3RoLFxuICAgICAgICAgICAgIE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSkgLSAxLFxuICAgICAgICAgICAgIC1NYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpKVxuICB9XG5cbiAgdmFyIGkgPSAwXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSB2YWx1ZSA8IDAgPyAxIDogMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpXG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSW50KHRoaXMsXG4gICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgb2Zmc2V0LFxuICAgICAgICAgICAgIGJ5dGVMZW5ndGgsXG4gICAgICAgICAgICAgTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKSAtIDEsXG4gICAgICAgICAgICAgLU1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSkpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSB2YWx1ZSA8IDAgPyAxIDogMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSlcbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gdmFsdWVcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Ugb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9IHZhbHVlXG4gIH0gZWxzZSBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9IHZhbHVlXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgfSBlbHNlIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSB2YWx1ZVxuICB9IGVsc2Ugb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3ZhbHVlIGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignaW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAodGFyZ2V0LCB0YXJnZXRfc3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHNvdXJjZSA9IHRoaXNcblxuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0X3N0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldF9zdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRfc3RhcnQpIHRhcmdldF9zdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCBzb3VyY2UubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldF9zdGFydCA8IDApXG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHNvdXJjZS5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKVxuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0X3N0YXJ0IDwgZW5kIC0gc3RhcnQpXG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldF9zdGFydCArIHN0YXJ0XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG5cbiAgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRfc3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRhcmdldC5fc2V0KHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSwgdGFyZ2V0X3N0YXJ0KVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBmaWxsKHZhbHVlLCBzdGFydD0wLCBlbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uICh2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXZhbHVlKSB2YWx1ZSA9IDBcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kKSBlbmQgPSB0aGlzLmxlbmd0aFxuXG4gIGlmIChlbmQgPCBzdGFydCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2VuZCA8IHN0YXJ0JylcblxuICAvLyBGaWxsIDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVyblxuICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVyblxuXG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDAgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdlbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICB0aGlzW2ldID0gdmFsdWVcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gdXRmOFRvQnl0ZXModmFsdWUudG9TdHJpbmcoKSlcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgdGhpc1tpXSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGBBcnJheUJ1ZmZlcmAgd2l0aCB0aGUgKmNvcGllZCogbWVtb3J5IG9mIHRoZSBidWZmZXIgaW5zdGFuY2UuXG4gKiBBZGRlZCBpbiBOb2RlIDAuMTIuIE9ubHkgYXZhaWxhYmxlIGluIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBBcnJheUJ1ZmZlci5cbiAqL1xuQnVmZmVyLnByb3RvdHlwZS50b0FycmF5QnVmZmVyID0gZnVuY3Rpb24gKCkge1xuICBpZiAodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgICByZXR1cm4gKG5ldyBCdWZmZXIodGhpcykpLmJ1ZmZlclxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYnVmID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5sZW5ndGgpXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYnVmLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGJ1ZltpXSA9IHRoaXNbaV1cbiAgICAgIH1cbiAgICAgIHJldHVybiBidWYuYnVmZmVyXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0J1ZmZlci50b0FycmF5QnVmZmVyIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyJylcbiAgfVxufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBCUCA9IEJ1ZmZlci5wcm90b3R5cGVcblxuLyoqXG4gKiBBdWdtZW50IGEgVWludDhBcnJheSAqaW5zdGFuY2UqIChub3QgdGhlIFVpbnQ4QXJyYXkgY2xhc3MhKSB3aXRoIEJ1ZmZlciBtZXRob2RzXG4gKi9cbkJ1ZmZlci5fYXVnbWVudCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgYXJyLmNvbnN0cnVjdG9yID0gQnVmZmVyXG4gIGFyci5faXNCdWZmZXIgPSB0cnVlXG5cbiAgLy8gc2F2ZSByZWZlcmVuY2UgdG8gb3JpZ2luYWwgVWludDhBcnJheSBnZXQvc2V0IG1ldGhvZHMgYmVmb3JlIG92ZXJ3cml0aW5nXG4gIGFyci5fZ2V0ID0gYXJyLmdldFxuICBhcnIuX3NldCA9IGFyci5zZXRcblxuICAvLyBkZXByZWNhdGVkLCB3aWxsIGJlIHJlbW92ZWQgaW4gbm9kZSAwLjEzK1xuICBhcnIuZ2V0ID0gQlAuZ2V0XG4gIGFyci5zZXQgPSBCUC5zZXRcblxuICBhcnIud3JpdGUgPSBCUC53cml0ZVxuICBhcnIudG9TdHJpbmcgPSBCUC50b1N0cmluZ1xuICBhcnIudG9Mb2NhbGVTdHJpbmcgPSBCUC50b1N0cmluZ1xuICBhcnIudG9KU09OID0gQlAudG9KU09OXG4gIGFyci5lcXVhbHMgPSBCUC5lcXVhbHNcbiAgYXJyLmNvbXBhcmUgPSBCUC5jb21wYXJlXG4gIGFyci5jb3B5ID0gQlAuY29weVxuICBhcnIuc2xpY2UgPSBCUC5zbGljZVxuICBhcnIucmVhZFVJbnRMRSA9IEJQLnJlYWRVSW50TEVcbiAgYXJyLnJlYWRVSW50QkUgPSBCUC5yZWFkVUludEJFXG4gIGFyci5yZWFkVUludDggPSBCUC5yZWFkVUludDhcbiAgYXJyLnJlYWRVSW50MTZMRSA9IEJQLnJlYWRVSW50MTZMRVxuICBhcnIucmVhZFVJbnQxNkJFID0gQlAucmVhZFVJbnQxNkJFXG4gIGFyci5yZWFkVUludDMyTEUgPSBCUC5yZWFkVUludDMyTEVcbiAgYXJyLnJlYWRVSW50MzJCRSA9IEJQLnJlYWRVSW50MzJCRVxuICBhcnIucmVhZEludExFID0gQlAucmVhZEludExFXG4gIGFyci5yZWFkSW50QkUgPSBCUC5yZWFkSW50QkVcbiAgYXJyLnJlYWRJbnQ4ID0gQlAucmVhZEludDhcbiAgYXJyLnJlYWRJbnQxNkxFID0gQlAucmVhZEludDE2TEVcbiAgYXJyLnJlYWRJbnQxNkJFID0gQlAucmVhZEludDE2QkVcbiAgYXJyLnJlYWRJbnQzMkxFID0gQlAucmVhZEludDMyTEVcbiAgYXJyLnJlYWRJbnQzMkJFID0gQlAucmVhZEludDMyQkVcbiAgYXJyLnJlYWRGbG9hdExFID0gQlAucmVhZEZsb2F0TEVcbiAgYXJyLnJlYWRGbG9hdEJFID0gQlAucmVhZEZsb2F0QkVcbiAgYXJyLnJlYWREb3VibGVMRSA9IEJQLnJlYWREb3VibGVMRVxuICBhcnIucmVhZERvdWJsZUJFID0gQlAucmVhZERvdWJsZUJFXG4gIGFyci53cml0ZVVJbnQ4ID0gQlAud3JpdGVVSW50OFxuICBhcnIud3JpdGVVSW50TEUgPSBCUC53cml0ZVVJbnRMRVxuICBhcnIud3JpdGVVSW50QkUgPSBCUC53cml0ZVVJbnRCRVxuICBhcnIud3JpdGVVSW50MTZMRSA9IEJQLndyaXRlVUludDE2TEVcbiAgYXJyLndyaXRlVUludDE2QkUgPSBCUC53cml0ZVVJbnQxNkJFXG4gIGFyci53cml0ZVVJbnQzMkxFID0gQlAud3JpdGVVSW50MzJMRVxuICBhcnIud3JpdGVVSW50MzJCRSA9IEJQLndyaXRlVUludDMyQkVcbiAgYXJyLndyaXRlSW50TEUgPSBCUC53cml0ZUludExFXG4gIGFyci53cml0ZUludEJFID0gQlAud3JpdGVJbnRCRVxuICBhcnIud3JpdGVJbnQ4ID0gQlAud3JpdGVJbnQ4XG4gIGFyci53cml0ZUludDE2TEUgPSBCUC53cml0ZUludDE2TEVcbiAgYXJyLndyaXRlSW50MTZCRSA9IEJQLndyaXRlSW50MTZCRVxuICBhcnIud3JpdGVJbnQzMkxFID0gQlAud3JpdGVJbnQzMkxFXG4gIGFyci53cml0ZUludDMyQkUgPSBCUC53cml0ZUludDMyQkVcbiAgYXJyLndyaXRlRmxvYXRMRSA9IEJQLndyaXRlRmxvYXRMRVxuICBhcnIud3JpdGVGbG9hdEJFID0gQlAud3JpdGVGbG9hdEJFXG4gIGFyci53cml0ZURvdWJsZUxFID0gQlAud3JpdGVEb3VibGVMRVxuICBhcnIud3JpdGVEb3VibGVCRSA9IEJQLndyaXRlRG91YmxlQkVcbiAgYXJyLmZpbGwgPSBCUC5maWxsXG4gIGFyci5pbnNwZWN0ID0gQlAuaW5zcGVjdFxuICBhcnIudG9BcnJheUJ1ZmZlciA9IEJQLnRvQXJyYXlCdWZmZXJcblxuICByZXR1cm4gYXJyXG59XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLXpcXC1dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHN0cmluZ3RyaW0gKHN0cikge1xuICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpXG59XG5cbmZ1bmN0aW9uIGlzQXJyYXlpc2ggKHN1YmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXkoc3ViamVjdCkgfHwgQnVmZmVyLmlzQnVmZmVyKHN1YmplY3QpIHx8XG4gICAgICBzdWJqZWN0ICYmIHR5cGVvZiBzdWJqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgdHlwZW9mIHN1YmplY3QubGVuZ3RoID09PSAnbnVtYmVyJ1xufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzKHN0cmluZywgdW5pdHMpIHtcbiAgdmFyIGNvZGVQb2ludCwgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgYnl0ZXMgPSBbXVxuICB2YXIgaSA9IDBcblxuICBmb3IgKDsgaTxsZW5ndGg7IGkrKykge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcblxuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmIChsZWFkU3Vycm9nYXRlKSB7XG5cbiAgICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBjb2RlUG9pbnQgPSBsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwIHwgMHgxMDAwMFxuICAgICAgICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgIGVsc2Uge1xuXG4gICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgIGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gICAgfVxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9XG4gICAgZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDIwMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG5cbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCwgdW5pdFNpemUpIHtcbiAgaWYgKHVuaXRTaXplKSBsZW5ndGggLT0gbGVuZ3RoICUgdW5pdFNpemU7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpXG4gICAgICBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIGRlY29kZVV0ZjhDaGFyIChzdHIpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHN0cilcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoMHhGRkZEKSAvLyBVVEYgOCBpbnZhbGlkIGNoYXJcbiAgfVxufVxuXG59LHtcImJhc2U2NC1qc1wiOjE2LFwiaWVlZTc1NFwiOjE3LFwiaXMtYXJyYXlcIjoxOH1dLDE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBsb29rdXAgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyc7XG5cbjsoZnVuY3Rpb24gKGV4cG9ydHMpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG4gIHZhciBBcnIgPSAodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnKVxuICAgID8gVWludDhBcnJheVxuICAgIDogQXJyYXlcblxuXHR2YXIgUExVUyAgID0gJysnLmNoYXJDb2RlQXQoMClcblx0dmFyIFNMQVNIICA9ICcvJy5jaGFyQ29kZUF0KDApXG5cdHZhciBOVU1CRVIgPSAnMCcuY2hhckNvZGVBdCgwKVxuXHR2YXIgTE9XRVIgID0gJ2EnLmNoYXJDb2RlQXQoMClcblx0dmFyIFVQUEVSICA9ICdBJy5jaGFyQ29kZUF0KDApXG5cdHZhciBQTFVTX1VSTF9TQUZFID0gJy0nLmNoYXJDb2RlQXQoMClcblx0dmFyIFNMQVNIX1VSTF9TQUZFID0gJ18nLmNoYXJDb2RlQXQoMClcblxuXHRmdW5jdGlvbiBkZWNvZGUgKGVsdCkge1xuXHRcdHZhciBjb2RlID0gZWx0LmNoYXJDb2RlQXQoMClcblx0XHRpZiAoY29kZSA9PT0gUExVUyB8fFxuXHRcdCAgICBjb2RlID09PSBQTFVTX1VSTF9TQUZFKVxuXHRcdFx0cmV0dXJuIDYyIC8vICcrJ1xuXHRcdGlmIChjb2RlID09PSBTTEFTSCB8fFxuXHRcdCAgICBjb2RlID09PSBTTEFTSF9VUkxfU0FGRSlcblx0XHRcdHJldHVybiA2MyAvLyAnLydcblx0XHRpZiAoY29kZSA8IE5VTUJFUilcblx0XHRcdHJldHVybiAtMSAvL25vIG1hdGNoXG5cdFx0aWYgKGNvZGUgPCBOVU1CRVIgKyAxMClcblx0XHRcdHJldHVybiBjb2RlIC0gTlVNQkVSICsgMjYgKyAyNlxuXHRcdGlmIChjb2RlIDwgVVBQRVIgKyAyNilcblx0XHRcdHJldHVybiBjb2RlIC0gVVBQRVJcblx0XHRpZiAoY29kZSA8IExPV0VSICsgMjYpXG5cdFx0XHRyZXR1cm4gY29kZSAtIExPV0VSICsgMjZcblx0fVxuXG5cdGZ1bmN0aW9uIGI2NFRvQnl0ZUFycmF5IChiNjQpIHtcblx0XHR2YXIgaSwgaiwgbCwgdG1wLCBwbGFjZUhvbGRlcnMsIGFyclxuXG5cdFx0aWYgKGI2NC5sZW5ndGggJSA0ID4gMCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0Jylcblx0XHR9XG5cblx0XHQvLyB0aGUgbnVtYmVyIG9mIGVxdWFsIHNpZ25zIChwbGFjZSBob2xkZXJzKVxuXHRcdC8vIGlmIHRoZXJlIGFyZSB0d28gcGxhY2Vob2xkZXJzLCB0aGFuIHRoZSB0d28gY2hhcmFjdGVycyBiZWZvcmUgaXRcblx0XHQvLyByZXByZXNlbnQgb25lIGJ5dGVcblx0XHQvLyBpZiB0aGVyZSBpcyBvbmx5IG9uZSwgdGhlbiB0aGUgdGhyZWUgY2hhcmFjdGVycyBiZWZvcmUgaXQgcmVwcmVzZW50IDIgYnl0ZXNcblx0XHQvLyB0aGlzIGlzIGp1c3QgYSBjaGVhcCBoYWNrIHRvIG5vdCBkbyBpbmRleE9mIHR3aWNlXG5cdFx0dmFyIGxlbiA9IGI2NC5sZW5ndGhcblx0XHRwbGFjZUhvbGRlcnMgPSAnPScgPT09IGI2NC5jaGFyQXQobGVuIC0gMikgPyAyIDogJz0nID09PSBiNjQuY2hhckF0KGxlbiAtIDEpID8gMSA6IDBcblxuXHRcdC8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuXHRcdGFyciA9IG5ldyBBcnIoYjY0Lmxlbmd0aCAqIDMgLyA0IC0gcGxhY2VIb2xkZXJzKVxuXG5cdFx0Ly8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuXHRcdGwgPSBwbGFjZUhvbGRlcnMgPiAwID8gYjY0Lmxlbmd0aCAtIDQgOiBiNjQubGVuZ3RoXG5cblx0XHR2YXIgTCA9IDBcblxuXHRcdGZ1bmN0aW9uIHB1c2ggKHYpIHtcblx0XHRcdGFycltMKytdID0gdlxuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGogPSAwOyBpIDwgbDsgaSArPSA0LCBqICs9IDMpIHtcblx0XHRcdHRtcCA9IChkZWNvZGUoYjY0LmNoYXJBdChpKSkgPDwgMTgpIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAxKSkgPDwgMTIpIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAyKSkgPDwgNikgfCBkZWNvZGUoYjY0LmNoYXJBdChpICsgMykpXG5cdFx0XHRwdXNoKCh0bXAgJiAweEZGMDAwMCkgPj4gMTYpXG5cdFx0XHRwdXNoKCh0bXAgJiAweEZGMDApID4+IDgpXG5cdFx0XHRwdXNoKHRtcCAmIDB4RkYpXG5cdFx0fVxuXG5cdFx0aWYgKHBsYWNlSG9sZGVycyA9PT0gMikge1xuXHRcdFx0dG1wID0gKGRlY29kZShiNjQuY2hhckF0KGkpKSA8PCAyKSB8IChkZWNvZGUoYjY0LmNoYXJBdChpICsgMSkpID4+IDQpXG5cdFx0XHRwdXNoKHRtcCAmIDB4RkYpXG5cdFx0fSBlbHNlIGlmIChwbGFjZUhvbGRlcnMgPT09IDEpIHtcblx0XHRcdHRtcCA9IChkZWNvZGUoYjY0LmNoYXJBdChpKSkgPDwgMTApIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAxKSkgPDwgNCkgfCAoZGVjb2RlKGI2NC5jaGFyQXQoaSArIDIpKSA+PiAyKVxuXHRcdFx0cHVzaCgodG1wID4+IDgpICYgMHhGRilcblx0XHRcdHB1c2godG1wICYgMHhGRilcblx0XHR9XG5cblx0XHRyZXR1cm4gYXJyXG5cdH1cblxuXHRmdW5jdGlvbiB1aW50OFRvQmFzZTY0ICh1aW50OCkge1xuXHRcdHZhciBpLFxuXHRcdFx0ZXh0cmFCeXRlcyA9IHVpbnQ4Lmxlbmd0aCAlIDMsIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG5cdFx0XHRvdXRwdXQgPSBcIlwiLFxuXHRcdFx0dGVtcCwgbGVuZ3RoXG5cblx0XHRmdW5jdGlvbiBlbmNvZGUgKG51bSkge1xuXHRcdFx0cmV0dXJuIGxvb2t1cC5jaGFyQXQobnVtKVxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG5cdFx0XHRyZXR1cm4gZW5jb2RlKG51bSA+PiAxOCAmIDB4M0YpICsgZW5jb2RlKG51bSA+PiAxMiAmIDB4M0YpICsgZW5jb2RlKG51bSA+PiA2ICYgMHgzRikgKyBlbmNvZGUobnVtICYgMHgzRilcblx0XHR9XG5cblx0XHQvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG5cdFx0Zm9yIChpID0gMCwgbGVuZ3RoID0gdWludDgubGVuZ3RoIC0gZXh0cmFCeXRlczsgaSA8IGxlbmd0aDsgaSArPSAzKSB7XG5cdFx0XHR0ZW1wID0gKHVpbnQ4W2ldIDw8IDE2KSArICh1aW50OFtpICsgMV0gPDwgOCkgKyAodWludDhbaSArIDJdKVxuXHRcdFx0b3V0cHV0ICs9IHRyaXBsZXRUb0Jhc2U2NCh0ZW1wKVxuXHRcdH1cblxuXHRcdC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcblx0XHRzd2l0Y2ggKGV4dHJhQnl0ZXMpIHtcblx0XHRcdGNhc2UgMTpcblx0XHRcdFx0dGVtcCA9IHVpbnQ4W3VpbnQ4Lmxlbmd0aCAtIDFdXG5cdFx0XHRcdG91dHB1dCArPSBlbmNvZGUodGVtcCA+PiAyKVxuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKCh0ZW1wIDw8IDQpICYgMHgzRilcblx0XHRcdFx0b3V0cHV0ICs9ICc9PSdcblx0XHRcdFx0YnJlYWtcblx0XHRcdGNhc2UgMjpcblx0XHRcdFx0dGVtcCA9ICh1aW50OFt1aW50OC5sZW5ndGggLSAyXSA8PCA4KSArICh1aW50OFt1aW50OC5sZW5ndGggLSAxXSlcblx0XHRcdFx0b3V0cHV0ICs9IGVuY29kZSh0ZW1wID4+IDEwKVxuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKCh0ZW1wID4+IDQpICYgMHgzRilcblx0XHRcdFx0b3V0cHV0ICs9IGVuY29kZSgodGVtcCA8PCAyKSAmIDB4M0YpXG5cdFx0XHRcdG91dHB1dCArPSAnPSdcblx0XHRcdFx0YnJlYWtcblx0XHR9XG5cblx0XHRyZXR1cm4gb3V0cHV0XG5cdH1cblxuXHRleHBvcnRzLnRvQnl0ZUFycmF5ID0gYjY0VG9CeXRlQXJyYXlcblx0ZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gdWludDhUb0Jhc2U2NFxufSh0eXBlb2YgZXhwb3J0cyA9PT0gJ3VuZGVmaW5lZCcgPyAodGhpcy5iYXNlNjRqcyA9IHt9KSA6IGV4cG9ydHMpKVxuXG59LHt9XSwxNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5leHBvcnRzLnJlYWQgPSBmdW5jdGlvbihidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLFxuICAgICAgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMSxcbiAgICAgIGVNYXggPSAoMSA8PCBlTGVuKSAtIDEsXG4gICAgICBlQmlhcyA9IGVNYXggPj4gMSxcbiAgICAgIG5CaXRzID0gLTcsXG4gICAgICBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDAsXG4gICAgICBkID0gaXNMRSA/IC0xIDogMSxcbiAgICAgIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV07XG5cbiAgaSArPSBkO1xuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpO1xuICBzID4+PSAoLW5CaXRzKTtcbiAgbkJpdHMgKz0gZUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCk7XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSk7XG4gIGUgPj49ICgtbkJpdHMpO1xuICBuQml0cyArPSBtTGVuO1xuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KTtcblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KTtcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pO1xuICAgIGUgPSBlIC0gZUJpYXM7XG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbik7XG59O1xuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24oYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGMsXG4gICAgICBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxLFxuICAgICAgZU1heCA9ICgxIDw8IGVMZW4pIC0gMSxcbiAgICAgIGVCaWFzID0gZU1heCA+PiAxLFxuICAgICAgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApLFxuICAgICAgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpLFxuICAgICAgZCA9IGlzTEUgPyAxIDogLTEsXG4gICAgICBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwO1xuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpO1xuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwO1xuICAgIGUgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKTtcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS07XG4gICAgICBjICo9IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcyk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrO1xuICAgICAgYyAvPSAyO1xuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogTWF0aC5wb3coMiwgbUxlbik7XG4gICAgICBlID0gZSArIGVCaWFzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbik7XG4gICAgICBlID0gMDtcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KTtcblxuICBlID0gKGUgPDwgbUxlbikgfCBtO1xuICBlTGVuICs9IG1MZW47XG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCk7XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4O1xufTtcblxufSx7fV0sMTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXG4vKipcbiAqIGlzQXJyYXlcbiAqL1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbi8qKlxuICogdG9TdHJpbmdcbiAqL1xuXG52YXIgc3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBXaGV0aGVyIG9yIG5vdCB0aGUgZ2l2ZW4gYHZhbGBcbiAqIGlzIGFuIGFycmF5LlxuICpcbiAqIGV4YW1wbGU6XG4gKlxuICogICAgICAgIGlzQXJyYXkoW10pO1xuICogICAgICAgIC8vID4gdHJ1ZVxuICogICAgICAgIGlzQXJyYXkoYXJndW1lbnRzKTtcbiAqICAgICAgICAvLyA+IGZhbHNlXG4gKiAgICAgICAgaXNBcnJheSgnJyk7XG4gKiAgICAgICAgLy8gPiBmYWxzZVxuICpcbiAqIEBwYXJhbSB7bWl4ZWR9IHZhbFxuICogQHJldHVybiB7Ym9vbH1cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXkgfHwgZnVuY3Rpb24gKHZhbCkge1xuICByZXR1cm4gISEgdmFsICYmICdbb2JqZWN0IEFycmF5XScgPT0gc3RyLmNhbGwodmFsKTtcbn07XG5cbn0se31dLDE5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxuXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gdHJ1ZTtcbiAgICB2YXIgY3VycmVudFF1ZXVlO1xuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB2YXIgaSA9IC0xO1xuICAgICAgICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgICAgICAgICBjdXJyZW50UXVldWVbaV0oKTtcbiAgICAgICAgfVxuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG59XG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHF1ZXVlLnB1c2goZnVuKTtcbiAgICBpZiAoIWRyYWluaW5nKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZHJhaW5RdWV1ZSwgMCk7XG4gICAgfVxufTtcblxucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbi8vIFRPRE8oc2h0eWxtYW4pXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG5cbn0se31dLDIwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbigpIHt2YXIgaCxhYT10aGlzO2Z1bmN0aW9uIG4oYSl7cmV0dXJuIHZvaWQgMCE9PWF9ZnVuY3Rpb24gYmEoKXt9ZnVuY3Rpb24gY2EoYSl7YS5yYj1mdW5jdGlvbigpe3JldHVybiBhLmxkP2EubGQ6YS5sZD1uZXcgYX19XHJcbmZ1bmN0aW9uIGRhKGEpe3ZhciBiPXR5cGVvZiBhO2lmKFwib2JqZWN0XCI9PWIpaWYoYSl7aWYoYSBpbnN0YW5jZW9mIEFycmF5KXJldHVyblwiYXJyYXlcIjtpZihhIGluc3RhbmNlb2YgT2JqZWN0KXJldHVybiBiO3ZhciBjPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhKTtpZihcIltvYmplY3QgV2luZG93XVwiPT1jKXJldHVyblwib2JqZWN0XCI7aWYoXCJbb2JqZWN0IEFycmF5XVwiPT1jfHxcIm51bWJlclwiPT10eXBlb2YgYS5sZW5ndGgmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLnNwbGljZSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEucHJvcGVydHlJc0VudW1lcmFibGUmJiFhLnByb3BlcnR5SXNFbnVtZXJhYmxlKFwic3BsaWNlXCIpKXJldHVyblwiYXJyYXlcIjtpZihcIltvYmplY3QgRnVuY3Rpb25dXCI9PWN8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLmNhbGwmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLnByb3BlcnR5SXNFbnVtZXJhYmxlJiYhYS5wcm9wZXJ0eUlzRW51bWVyYWJsZShcImNhbGxcIikpcmV0dXJuXCJmdW5jdGlvblwifWVsc2UgcmV0dXJuXCJudWxsXCI7XHJcbmVsc2UgaWYoXCJmdW5jdGlvblwiPT1iJiZcInVuZGVmaW5lZFwiPT10eXBlb2YgYS5jYWxsKXJldHVyblwib2JqZWN0XCI7cmV0dXJuIGJ9ZnVuY3Rpb24gZWEoYSl7dmFyIGI9ZGEoYSk7cmV0dXJuXCJhcnJheVwiPT1ifHxcIm9iamVjdFwiPT1iJiZcIm51bWJlclwiPT10eXBlb2YgYS5sZW5ndGh9ZnVuY3Rpb24gcShhKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgYX1mdW5jdGlvbiBmYShhKXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgYX1mdW5jdGlvbiBnYShhKXt2YXIgYj10eXBlb2YgYTtyZXR1cm5cIm9iamVjdFwiPT1iJiZudWxsIT1hfHxcImZ1bmN0aW9uXCI9PWJ9ZnVuY3Rpb24gaGEoYSxiLGMpe3JldHVybiBhLmNhbGwuYXBwbHkoYS5iaW5kLGFyZ3VtZW50cyl9XHJcbmZ1bmN0aW9uIGlhKGEsYixjKXtpZighYSl0aHJvdyBFcnJvcigpO2lmKDI8YXJndW1lbnRzLmxlbmd0aCl7dmFyIGQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDIpO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7QXJyYXkucHJvdG90eXBlLnVuc2hpZnQuYXBwbHkoYyxkKTtyZXR1cm4gYS5hcHBseShiLGMpfX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gYS5hcHBseShiLGFyZ3VtZW50cyl9fWZ1bmN0aW9uIHIoYSxiLGMpe3I9RnVuY3Rpb24ucHJvdG90eXBlLmJpbmQmJi0xIT1GdW5jdGlvbi5wcm90b3R5cGUuYmluZC50b1N0cmluZygpLmluZGV4T2YoXCJuYXRpdmUgY29kZVwiKT9oYTppYTtyZXR1cm4gci5hcHBseShudWxsLGFyZ3VtZW50cyl9XHJcbmZ1bmN0aW9uIGphKGEsYil7ZnVuY3Rpb24gYygpe31jLnByb3RvdHlwZT1iLnByb3RvdHlwZTthLmtlPWIucHJvdG90eXBlO2EucHJvdG90eXBlPW5ldyBjO2EuaWU9ZnVuY3Rpb24oYSxjLGYpe3JldHVybiBiLnByb3RvdHlwZVtjXS5hcHBseShhLEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywyKSl9fTtmdW5jdGlvbiBrYShhKXthPVN0cmluZyhhKTtpZigvXlxccyokLy50ZXN0KGEpPzA6L15bXFxdLDp7fVxcc1xcdTIwMjhcXHUyMDI5XSokLy50ZXN0KGEucmVwbGFjZSgvXFxcXFtcIlxcXFxcXC9iZm5ydHVdL2csXCJAXCIpLnJlcGxhY2UoL1wiW15cIlxcXFxcXG5cXHJcXHUyMDI4XFx1MjAyOVxceDAwLVxceDA4XFx4MGEtXFx4MWZdKlwifHRydWV8ZmFsc2V8bnVsbHwtP1xcZCsoPzpcXC5cXGQqKT8oPzpbZUVdWytcXC1dP1xcZCspPy9nLFwiXVwiKS5yZXBsYWNlKC8oPzpefDp8LCkoPzpbXFxzXFx1MjAyOFxcdTIwMjldKlxcWykrL2csXCJcIikpKXRyeXtyZXR1cm4gZXZhbChcIihcIithK1wiKVwiKX1jYXRjaChiKXt9dGhyb3cgRXJyb3IoXCJJbnZhbGlkIEpTT04gc3RyaW5nOiBcIithKTt9ZnVuY3Rpb24gbGEoKXt0aGlzLm1jPXZvaWQgMH1cclxuZnVuY3Rpb24gbWEoYSxiLGMpe3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcInN0cmluZ1wiOm5hKGIsYyk7YnJlYWs7Y2FzZSBcIm51bWJlclwiOmMucHVzaChpc0Zpbml0ZShiKSYmIWlzTmFOKGIpP2I6XCJudWxsXCIpO2JyZWFrO2Nhc2UgXCJib29sZWFuXCI6Yy5wdXNoKGIpO2JyZWFrO2Nhc2UgXCJ1bmRlZmluZWRcIjpjLnB1c2goXCJudWxsXCIpO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjppZihudWxsPT1iKXtjLnB1c2goXCJudWxsXCIpO2JyZWFrfWlmKFwiYXJyYXlcIj09ZGEoYikpe3ZhciBkPWIubGVuZ3RoO2MucHVzaChcIltcIik7Zm9yKHZhciBlPVwiXCIsZj0wO2Y8ZDtmKyspYy5wdXNoKGUpLGU9YltmXSxtYShhLGEubWM/YS5tYy5jYWxsKGIsU3RyaW5nKGYpLGUpOmUsYyksZT1cIixcIjtjLnB1c2goXCJdXCIpO2JyZWFrfWMucHVzaChcIntcIik7ZD1cIlwiO2ZvcihmIGluIGIpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsZikmJihlPWJbZl0sXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmKGMucHVzaChkKSxcclxubmEoZixjKSxjLnB1c2goXCI6XCIpLG1hKGEsYS5tYz9hLm1jLmNhbGwoYixmLGUpOmUsYyksZD1cIixcIikpO2MucHVzaChcIn1cIik7YnJlYWs7Y2FzZSBcImZ1bmN0aW9uXCI6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihcIlVua25vd24gdHlwZTogXCIrdHlwZW9mIGIpO319dmFyIG9hPXsnXCInOidcXFxcXCInLFwiXFxcXFwiOlwiXFxcXFxcXFxcIixcIi9cIjpcIlxcXFwvXCIsXCJcXGJcIjpcIlxcXFxiXCIsXCJcXGZcIjpcIlxcXFxmXCIsXCJcXG5cIjpcIlxcXFxuXCIsXCJcXHJcIjpcIlxcXFxyXCIsXCJcXHRcIjpcIlxcXFx0XCIsXCJcXHgwQlwiOlwiXFxcXHUwMDBiXCJ9LHBhPS9cXHVmZmZmLy50ZXN0KFwiXFx1ZmZmZlwiKT8vW1xcXFxcXFwiXFx4MDAtXFx4MWZcXHg3Zi1cXHVmZmZmXS9nOi9bXFxcXFxcXCJcXHgwMC1cXHgxZlxceDdmLVxceGZmXS9nO1xyXG5mdW5jdGlvbiBuYShhLGIpe2IucHVzaCgnXCInLGEucmVwbGFjZShwYSxmdW5jdGlvbihhKXtpZihhIGluIG9hKXJldHVybiBvYVthXTt2YXIgYj1hLmNoYXJDb2RlQXQoMCksZT1cIlxcXFx1XCI7MTY+Yj9lKz1cIjAwMFwiOjI1Nj5iP2UrPVwiMDBcIjo0MDk2PmImJihlKz1cIjBcIik7cmV0dXJuIG9hW2FdPWUrYi50b1N0cmluZygxNil9KSwnXCInKX07ZnVuY3Rpb24gcWEoYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBKU09OJiZuKEpTT04ucGFyc2UpP0pTT04ucGFyc2UoYSk6a2EoYSl9ZnVuY3Rpb24gdShhKXtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIEpTT04mJm4oSlNPTi5zdHJpbmdpZnkpKWE9SlNPTi5zdHJpbmdpZnkoYSk7ZWxzZXt2YXIgYj1bXTttYShuZXcgbGEsYSxiKTthPWIuam9pbihcIlwiKX1yZXR1cm4gYX07ZnVuY3Rpb24gcmEoYSl7Zm9yKHZhciBiPVtdLGM9MCxkPTA7ZDxhLmxlbmd0aDtkKyspe3ZhciBlPWEuY2hhckNvZGVBdChkKTs1NTI5Njw9ZSYmNTYzMTk+PWUmJihlLT01NTI5NixkKyssdihkPGEubGVuZ3RoLFwiU3Vycm9nYXRlIHBhaXIgbWlzc2luZyB0cmFpbCBzdXJyb2dhdGUuXCIpLGU9NjU1MzYrKGU8PDEwKSsoYS5jaGFyQ29kZUF0KGQpLTU2MzIwKSk7MTI4PmU/YltjKytdPWU6KDIwNDg+ZT9iW2MrK109ZT4+NnwxOTI6KDY1NTM2PmU/YltjKytdPWU+PjEyfDIyNDooYltjKytdPWU+PjE4fDI0MCxiW2MrK109ZT4+MTImNjN8MTI4KSxiW2MrK109ZT4+NiY2M3wxMjgpLGJbYysrXT1lJjYzfDEyOCl9cmV0dXJuIGJ9O3ZhciBzYT17fTtmdW5jdGlvbiB4KGEsYixjLGQpe3ZhciBlO2Q8Yj9lPVwiYXQgbGVhc3QgXCIrYjpkPmMmJihlPTA9PT1jP1wibm9uZVwiOlwibm8gbW9yZSB0aGFuIFwiK2MpO2lmKGUpdGhyb3cgRXJyb3IoYStcIiBmYWlsZWQ6IFdhcyBjYWxsZWQgd2l0aCBcIitkKygxPT09ZD9cIiBhcmd1bWVudC5cIjpcIiBhcmd1bWVudHMuXCIpK1wiIEV4cGVjdHMgXCIrZStcIi5cIik7fVxyXG5mdW5jdGlvbiB5KGEsYixjKXt2YXIgZD1cIlwiO3N3aXRjaChiKXtjYXNlIDE6ZD1jP1wiZmlyc3RcIjpcIkZpcnN0XCI7YnJlYWs7Y2FzZSAyOmQ9Yz9cInNlY29uZFwiOlwiU2Vjb25kXCI7YnJlYWs7Y2FzZSAzOmQ9Yz9cInRoaXJkXCI6XCJUaGlyZFwiO2JyZWFrO2Nhc2UgNDpkPWM/XCJmb3VydGhcIjpcIkZvdXJ0aFwiO2JyZWFrO2RlZmF1bHQ6dGEuYXNzZXJ0KCExLFwiZXJyb3JQcmVmaXhfIGNhbGxlZCB3aXRoIGFyZ3VtZW50TnVtYmVyID4gNC4gIE5lZWQgdG8gdXBkYXRlIGl0P1wiKX1yZXR1cm4gYT1hK1wiIGZhaWxlZDogXCIrKGQrXCIgYXJndW1lbnQgXCIpfWZ1bmN0aW9uIHooYSxiLGMsZCl7aWYoKCFkfHxuKGMpKSYmXCJmdW5jdGlvblwiIT1kYShjKSl0aHJvdyBFcnJvcih5KGEsYixkKStcIm11c3QgYmUgYSB2YWxpZCBmdW5jdGlvbi5cIik7fVxyXG5mdW5jdGlvbiB1YShhLGIsYyl7aWYobihjKSYmKCFnYShjKXx8bnVsbD09PWMpKXRocm93IEVycm9yKHkoYSxiLCEwKStcIm11c3QgYmUgYSB2YWxpZCBjb250ZXh0IG9iamVjdC5cIik7fTtmdW5jdGlvbiBBKGEsYil7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLGIpfWZ1bmN0aW9uIHZhKGEsYil7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsYikpcmV0dXJuIGFbYl19O3ZhciB0YT17fSx3YT0vW1xcW1xcXS4jJFxcL10vLHhhPS9bXFxbXFxdLiMkXS87ZnVuY3Rpb24geWEoYSl7cmV0dXJuIHEoYSkmJjAhPT1hLmxlbmd0aCYmIXdhLnRlc3QoYSl9ZnVuY3Rpb24gemEoYSxiLGMpe2MmJiFuKGIpfHxBYSh5KGEsMSxjKSxiKX1cclxuZnVuY3Rpb24gQWEoYSxiLGMsZCl7Y3x8KGM9MCk7ZD1kfHxbXTtpZighbihiKSl0aHJvdyBFcnJvcihhK1wiY29udGFpbnMgdW5kZWZpbmVkXCIrQmEoZCkpO2lmKFwiZnVuY3Rpb25cIj09ZGEoYikpdGhyb3cgRXJyb3IoYStcImNvbnRhaW5zIGEgZnVuY3Rpb25cIitCYShkKStcIiB3aXRoIGNvbnRlbnRzOiBcIitiLnRvU3RyaW5nKCkpO2lmKENhKGIpKXRocm93IEVycm9yKGErXCJjb250YWlucyBcIitiLnRvU3RyaW5nKCkrQmEoZCkpO2lmKDFFMzxjKXRocm93IG5ldyBUeXBlRXJyb3IoYStcImNvbnRhaW5zIGEgY3ljbGljIG9iamVjdCB2YWx1ZSAoXCIrZC5zbGljZSgwLDEwMCkuam9pbihcIi5cIikrXCIuLi4pXCIpO2lmKHEoYikmJmIubGVuZ3RoPjEwNDg1NzYwLzMmJjEwNDg1NzYwPHJhKGIpLmxlbmd0aCl0aHJvdyBFcnJvcihhK1wiY29udGFpbnMgYSBzdHJpbmcgZ3JlYXRlciB0aGFuIDEwNDg1NzYwIHV0ZjggYnl0ZXNcIitCYShkKStcIiAoJ1wiK2Iuc3Vic3RyaW5nKDAsNTApK1wiLi4uJylcIik7aWYoZ2EoYikpZm9yKHZhciBlIGluIGIpaWYoQShiLFxyXG5lKSl7dmFyIGY9YltlXTtpZihcIi5wcmlvcml0eVwiIT09ZSYmXCIudmFsdWVcIiE9PWUmJlwiLnN2XCIhPT1lJiYheWEoZSkpdGhyb3cgRXJyb3IoYStcIiBjb250YWlucyBhbiBpbnZhbGlkIGtleSAoXCIrZStcIilcIitCYShkKSsnLiAgS2V5cyBtdXN0IGJlIG5vbi1lbXB0eSBzdHJpbmdzIGFuZCBjYW5cXCd0IGNvbnRhaW4gXCIuXCIsIFwiI1wiLCBcIiRcIiwgXCIvXCIsIFwiW1wiLCBvciBcIl1cIicpO2QucHVzaChlKTtBYShhLGYsYysxLGQpO2QucG9wKCl9fWZ1bmN0aW9uIEJhKGEpe3JldHVybiAwPT1hLmxlbmd0aD9cIlwiOlwiIGluIHByb3BlcnR5ICdcIithLmpvaW4oXCIuXCIpK1wiJ1wifWZ1bmN0aW9uIERhKGEsYil7aWYoIWdhKGIpKXRocm93IEVycm9yKHkoYSwxLCExKStcIiBtdXN0IGJlIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBjaGlsZHJlbiB0byByZXBsYWNlLlwiKTt6YShhLGIsITEpfVxyXG5mdW5jdGlvbiBFYShhLGIsYyxkKXtpZighKGQmJiFuKGMpfHxudWxsPT09Y3x8ZmEoYyl8fHEoYyl8fGdhKGMpJiZBKGMsXCIuc3ZcIikpKXRocm93IEVycm9yKHkoYSxiLGQpK1wibXVzdCBiZSBhIHZhbGlkIGZpcmViYXNlIHByaW9yaXR5IChhIHN0cmluZywgbnVtYmVyLCBvciBudWxsKS5cIik7fWZ1bmN0aW9uIEZhKGEsYixjKXtpZighY3x8bihiKSlzd2l0Y2goYil7Y2FzZSBcInZhbHVlXCI6Y2FzZSBcImNoaWxkX2FkZGVkXCI6Y2FzZSBcImNoaWxkX3JlbW92ZWRcIjpjYXNlIFwiY2hpbGRfY2hhbmdlZFwiOmNhc2UgXCJjaGlsZF9tb3ZlZFwiOmJyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeShhLDEsYykrJ211c3QgYmUgYSB2YWxpZCBldmVudCB0eXBlOiBcInZhbHVlXCIsIFwiY2hpbGRfYWRkZWRcIiwgXCJjaGlsZF9yZW1vdmVkXCIsIFwiY2hpbGRfY2hhbmdlZFwiLCBvciBcImNoaWxkX21vdmVkXCIuJyk7fX1cclxuZnVuY3Rpb24gR2EoYSxiKXtpZihuKGIpJiYheWEoYikpdGhyb3cgRXJyb3IoeShhLDIsITApKyd3YXMgYW4gaW52YWxpZCBrZXk6IFwiJytiKydcIi4gIEZpcmViYXNlIGtleXMgbXVzdCBiZSBub24tZW1wdHkgc3RyaW5ncyBhbmQgY2FuXFwndCBjb250YWluIFwiLlwiLCBcIiNcIiwgXCIkXCIsIFwiL1wiLCBcIltcIiwgb3IgXCJdXCIpLicpO31mdW5jdGlvbiBIYShhLGIpe2lmKCFxKGIpfHwwPT09Yi5sZW5ndGh8fHhhLnRlc3QoYikpdGhyb3cgRXJyb3IoeShhLDEsITEpKyd3YXMgYW4gaW52YWxpZCBwYXRoOiBcIicrYisnXCIuIFBhdGhzIG11c3QgYmUgbm9uLWVtcHR5IHN0cmluZ3MgYW5kIGNhblxcJ3QgY29udGFpbiBcIi5cIiwgXCIjXCIsIFwiJFwiLCBcIltcIiwgb3IgXCJdXCInKTt9ZnVuY3Rpb24gQihhLGIpe2lmKFwiLmluZm9cIj09PUMoYikpdGhyb3cgRXJyb3IoYStcIiBmYWlsZWQ6IENhbid0IG1vZGlmeSBkYXRhIHVuZGVyIC8uaW5mby9cIik7fTtmdW5jdGlvbiBEKGEsYixjLGQsZSxmLGcpe3RoaXMubT1hO3RoaXMucGF0aD1iO3RoaXMuRWE9Yzt0aGlzLmZhPWQ7dGhpcy55YT1lO3RoaXMuQ2E9Zjt0aGlzLldhPWc7aWYobih0aGlzLmZhKSYmbih0aGlzLkNhKSYmbih0aGlzLkVhKSl0aHJvd1wiUXVlcnk6IENhbid0IGNvbWJpbmUgc3RhcnRBdCgpLCBlbmRBdCgpLCBhbmQgbGltaXQoKS5cIjt9RC5wcm90b3R5cGUuVWM9ZnVuY3Rpb24oKXt4KFwiUXVlcnkucmVmXCIsMCwwLGFyZ3VtZW50cy5sZW5ndGgpO3JldHVybiBuZXcgRSh0aGlzLm0sdGhpcy5wYXRoKX07RC5wcm90b3R5cGUucmVmPUQucHJvdG90eXBlLlVjO1xyXG5ELnByb3RvdHlwZS5mYj1mdW5jdGlvbihhLGIpe3goXCJRdWVyeS5vblwiLDIsNCxhcmd1bWVudHMubGVuZ3RoKTtGYShcIlF1ZXJ5Lm9uXCIsYSwhMSk7eihcIlF1ZXJ5Lm9uXCIsMixiLCExKTt2YXIgYz1JYShcIlF1ZXJ5Lm9uXCIsYXJndW1lbnRzWzJdLGFyZ3VtZW50c1szXSk7dGhpcy5tLlJiKHRoaXMsYSxiLGMuY2FuY2VsLGMuWSk7cmV0dXJuIGJ9O0QucHJvdG90eXBlLm9uPUQucHJvdG90eXBlLmZiO0QucHJvdG90eXBlLnliPWZ1bmN0aW9uKGEsYixjKXt4KFwiUXVlcnkub2ZmXCIsMCwzLGFyZ3VtZW50cy5sZW5ndGgpO0ZhKFwiUXVlcnkub2ZmXCIsYSwhMCk7eihcIlF1ZXJ5Lm9mZlwiLDIsYiwhMCk7dWEoXCJRdWVyeS5vZmZcIiwzLGMpO3RoaXMubS5sYyh0aGlzLGEsYixjKX07RC5wcm90b3R5cGUub2ZmPUQucHJvdG90eXBlLnliO1xyXG5ELnByb3RvdHlwZS5XZD1mdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoZyl7ZiYmKGY9ITEsZS55YihhLGMpLGIuY2FsbChkLlksZykpfXgoXCJRdWVyeS5vbmNlXCIsMiw0LGFyZ3VtZW50cy5sZW5ndGgpO0ZhKFwiUXVlcnkub25jZVwiLGEsITEpO3ooXCJRdWVyeS5vbmNlXCIsMixiLCExKTt2YXIgZD1JYShcIlF1ZXJ5Lm9uY2VcIixhcmd1bWVudHNbMl0sYXJndW1lbnRzWzNdKSxlPXRoaXMsZj0hMDt0aGlzLmZiKGEsYyxmdW5jdGlvbihiKXtlLnliKGEsYyk7ZC5jYW5jZWwmJmQuY2FuY2VsLmNhbGwoZC5ZLGIpfSl9O0QucHJvdG90eXBlLm9uY2U9RC5wcm90b3R5cGUuV2Q7XHJcbkQucHJvdG90eXBlLlBkPWZ1bmN0aW9uKGEpe3goXCJRdWVyeS5saW1pdFwiLDEsMSxhcmd1bWVudHMubGVuZ3RoKTtpZighZmEoYSl8fE1hdGguZmxvb3IoYSkhPT1hfHwwPj1hKXRocm93XCJRdWVyeS5saW1pdDogRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXIuXCI7cmV0dXJuIG5ldyBEKHRoaXMubSx0aGlzLnBhdGgsYSx0aGlzLmZhLHRoaXMueWEsdGhpcy5DYSx0aGlzLldhKX07RC5wcm90b3R5cGUubGltaXQ9RC5wcm90b3R5cGUuUGQ7RC5wcm90b3R5cGUuZWU9ZnVuY3Rpb24oYSxiKXt4KFwiUXVlcnkuc3RhcnRBdFwiLDAsMixhcmd1bWVudHMubGVuZ3RoKTtFYShcIlF1ZXJ5LnN0YXJ0QXRcIiwxLGEsITApO0dhKFwiUXVlcnkuc3RhcnRBdFwiLGIpO24oYSl8fChiPWE9bnVsbCk7cmV0dXJuIG5ldyBEKHRoaXMubSx0aGlzLnBhdGgsdGhpcy5FYSxhLGIsdGhpcy5DYSx0aGlzLldhKX07RC5wcm90b3R5cGUuc3RhcnRBdD1ELnByb3RvdHlwZS5lZTtcclxuRC5wcm90b3R5cGUuSmQ9ZnVuY3Rpb24oYSxiKXt4KFwiUXVlcnkuZW5kQXRcIiwwLDIsYXJndW1lbnRzLmxlbmd0aCk7RWEoXCJRdWVyeS5lbmRBdFwiLDEsYSwhMCk7R2EoXCJRdWVyeS5lbmRBdFwiLGIpO3JldHVybiBuZXcgRCh0aGlzLm0sdGhpcy5wYXRoLHRoaXMuRWEsdGhpcy5mYSx0aGlzLnlhLGEsYil9O0QucHJvdG90eXBlLmVuZEF0PUQucHJvdG90eXBlLkpkO2Z1bmN0aW9uIEphKGEpe3ZhciBiPXt9O24oYS5mYSkmJihiLnNwPWEuZmEpO24oYS55YSkmJihiLnNuPWEueWEpO24oYS5DYSkmJihiLmVwPWEuQ2EpO24oYS5XYSkmJihiLmVuPWEuV2EpO24oYS5FYSkmJihiLmw9YS5FYSk7bihhLmZhKSYmbihhLnlhKSYmbnVsbD09PWEuZmEmJm51bGw9PT1hLnlhJiYoYi52Zj1cImxcIik7cmV0dXJuIGJ9RC5wcm90b3R5cGUuUGE9ZnVuY3Rpb24oKXt2YXIgYT1LYShKYSh0aGlzKSk7cmV0dXJuXCJ7fVwiPT09YT9cImRlZmF1bHRcIjphfTtcclxuZnVuY3Rpb24gSWEoYSxiLGMpe3ZhciBkPXt9O2lmKGImJmMpZC5jYW5jZWw9Yix6KGEsMyxkLmNhbmNlbCwhMCksZC5ZPWMsdWEoYSw0LGQuWSk7ZWxzZSBpZihiKWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpZC5ZPWI7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilkLmNhbmNlbD1iO2Vsc2UgdGhyb3cgRXJyb3Ioc2EuamUoYSwzLCEwKStcIm11c3QgZWl0aGVyIGJlIGEgY2FuY2VsIGNhbGxiYWNrIG9yIGEgY29udGV4dCBvYmplY3QuXCIpO3JldHVybiBkfTtmdW5jdGlvbiBGKGEsYil7aWYoMT09YXJndW1lbnRzLmxlbmd0aCl7dGhpcy5uPWEuc3BsaXQoXCIvXCIpO2Zvcih2YXIgYz0wLGQ9MDtkPHRoaXMubi5sZW5ndGg7ZCsrKTA8dGhpcy5uW2RdLmxlbmd0aCYmKHRoaXMubltjXT10aGlzLm5bZF0sYysrKTt0aGlzLm4ubGVuZ3RoPWM7dGhpcy5kYT0wfWVsc2UgdGhpcy5uPWEsdGhpcy5kYT1ifWZ1bmN0aW9uIEMoYSl7cmV0dXJuIGEuZGE+PWEubi5sZW5ndGg/bnVsbDphLm5bYS5kYV19ZnVuY3Rpb24gTGEoYSl7dmFyIGI9YS5kYTtiPGEubi5sZW5ndGgmJmIrKztyZXR1cm4gbmV3IEYoYS5uLGIpfWZ1bmN0aW9uIE1hKGEpe3JldHVybiBhLmRhPGEubi5sZW5ndGg/YS5uW2Eubi5sZW5ndGgtMV06bnVsbH1oPUYucHJvdG90eXBlO2gudG9TdHJpbmc9ZnVuY3Rpb24oKXtmb3IodmFyIGE9XCJcIixiPXRoaXMuZGE7Yjx0aGlzLm4ubGVuZ3RoO2IrKylcIlwiIT09dGhpcy5uW2JdJiYoYSs9XCIvXCIrdGhpcy5uW2JdKTtyZXR1cm4gYXx8XCIvXCJ9O1xyXG5oLnBhcmVudD1mdW5jdGlvbigpe2lmKHRoaXMuZGE+PXRoaXMubi5sZW5ndGgpcmV0dXJuIG51bGw7Zm9yKHZhciBhPVtdLGI9dGhpcy5kYTtiPHRoaXMubi5sZW5ndGgtMTtiKyspYS5wdXNoKHRoaXMubltiXSk7cmV0dXJuIG5ldyBGKGEsMCl9O2guRz1mdW5jdGlvbihhKXtmb3IodmFyIGI9W10sYz10aGlzLmRhO2M8dGhpcy5uLmxlbmd0aDtjKyspYi5wdXNoKHRoaXMubltjXSk7aWYoYSBpbnN0YW5jZW9mIEYpZm9yKGM9YS5kYTtjPGEubi5sZW5ndGg7YysrKWIucHVzaChhLm5bY10pO2Vsc2UgZm9yKGE9YS5zcGxpdChcIi9cIiksYz0wO2M8YS5sZW5ndGg7YysrKTA8YVtjXS5sZW5ndGgmJmIucHVzaChhW2NdKTtyZXR1cm4gbmV3IEYoYiwwKX07aC5mPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGE+PXRoaXMubi5sZW5ndGh9O1xyXG5mdW5jdGlvbiBOYShhLGIpe3ZhciBjPUMoYSk7aWYobnVsbD09PWMpcmV0dXJuIGI7aWYoYz09PUMoYikpcmV0dXJuIE5hKExhKGEpLExhKGIpKTt0aHJvd1wiSU5URVJOQUwgRVJST1I6IGlubmVyUGF0aCAoXCIrYitcIikgaXMgbm90IHdpdGhpbiBvdXRlclBhdGggKFwiK2ErXCIpXCI7fWguY29udGFpbnM9ZnVuY3Rpb24oYSl7dmFyIGI9MDtpZih0aGlzLm4ubGVuZ3RoPmEubi5sZW5ndGgpcmV0dXJuITE7Zm9yKDtiPHRoaXMubi5sZW5ndGg7KXtpZih0aGlzLm5bYl0hPT1hLm5bYl0pcmV0dXJuITE7KytifXJldHVybiEwfTtmdW5jdGlvbiBPYSgpe3RoaXMuY2hpbGRyZW49e307dGhpcy55Yz0wO3RoaXMudmFsdWU9bnVsbH1mdW5jdGlvbiBQYShhLGIsYyl7dGhpcy5GYT1hP2E6XCJcIjt0aGlzLkViPWI/YjpudWxsO3RoaXMuQj1jP2M6bmV3IE9hfWZ1bmN0aW9uIEkoYSxiKXtmb3IodmFyIGM9YiBpbnN0YW5jZW9mIEY/YjpuZXcgRihiKSxkPWEsZTtudWxsIT09KGU9QyhjKSk7KWQ9bmV3IFBhKGUsZCx2YShkLkIuY2hpbGRyZW4sZSl8fG5ldyBPYSksYz1MYShjKTtyZXR1cm4gZH1oPVBhLnByb3RvdHlwZTtoLmo9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5CLnZhbHVlfTtmdW5jdGlvbiBKKGEsYil7dihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGIsXCJDYW5ub3Qgc2V0IHZhbHVlIHRvIHVuZGVmaW5lZFwiKTthLkIudmFsdWU9YjtRYShhKX1oLnNiPWZ1bmN0aW9uKCl7cmV0dXJuIDA8dGhpcy5CLnljfTtoLmY9ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbD09PXRoaXMuaigpJiYhdGhpcy5zYigpfTtcclxuaC5BPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYiBpbiB0aGlzLkIuY2hpbGRyZW4pYShuZXcgUGEoYix0aGlzLHRoaXMuQi5jaGlsZHJlbltiXSkpfTtmdW5jdGlvbiBSYShhLGIsYyxkKXtjJiYhZCYmYihhKTthLkEoZnVuY3Rpb24oYSl7UmEoYSxiLCEwLGQpfSk7YyYmZCYmYihhKX1mdW5jdGlvbiBTYShhLGIsYyl7Zm9yKGE9Yz9hOmEucGFyZW50KCk7bnVsbCE9PWE7KXtpZihiKGEpKXJldHVybiEwO2E9YS5wYXJlbnQoKX1yZXR1cm4hMX1oLnBhdGg9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IEYobnVsbD09PXRoaXMuRWI/dGhpcy5GYTp0aGlzLkViLnBhdGgoKStcIi9cIit0aGlzLkZhKX07aC5uYW1lPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuRmF9O2gucGFyZW50PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuRWJ9O1xyXG5mdW5jdGlvbiBRYShhKXtpZihudWxsIT09YS5FYil7dmFyIGI9YS5FYixjPWEuRmEsZD1hLmYoKSxlPUEoYi5CLmNoaWxkcmVuLGMpO2QmJmU/KGRlbGV0ZSBiLkIuY2hpbGRyZW5bY10sYi5CLnljLS0sUWEoYikpOmR8fGV8fChiLkIuY2hpbGRyZW5bY109YS5CLGIuQi55YysrLFFhKGIpKX19O2Z1bmN0aW9uIFRhKGEsYil7dGhpcy5UYT1hP2E6VWE7dGhpcy5lYT1iP2I6VmF9ZnVuY3Rpb24gVWEoYSxiKXtyZXR1cm4gYTxiPy0xOmE+Yj8xOjB9aD1UYS5wcm90b3R5cGU7aC5zYT1mdW5jdGlvbihhLGIpe3JldHVybiBuZXcgVGEodGhpcy5UYSx0aGlzLmVhLnNhKGEsYix0aGlzLlRhKS5KKG51bGwsbnVsbCwhMSxudWxsLG51bGwpKX07aC5yZW1vdmU9ZnVuY3Rpb24oYSl7cmV0dXJuIG5ldyBUYSh0aGlzLlRhLHRoaXMuZWEucmVtb3ZlKGEsdGhpcy5UYSkuSihudWxsLG51bGwsITEsbnVsbCxudWxsKSl9O2guZ2V0PWZ1bmN0aW9uKGEpe2Zvcih2YXIgYixjPXRoaXMuZWE7IWMuZigpOyl7Yj10aGlzLlRhKGEsYy5rZXkpO2lmKDA9PT1iKXJldHVybiBjLnZhbHVlOzA+Yj9jPWMubGVmdDowPGImJihjPWMucmlnaHQpfXJldHVybiBudWxsfTtcclxuZnVuY3Rpb24gV2EoYSxiKXtmb3IodmFyIGMsZD1hLmVhLGU9bnVsbDshZC5mKCk7KXtjPWEuVGEoYixkLmtleSk7aWYoMD09PWMpe2lmKGQubGVmdC5mKCkpcmV0dXJuIGU/ZS5rZXk6bnVsbDtmb3IoZD1kLmxlZnQ7IWQucmlnaHQuZigpOylkPWQucmlnaHQ7cmV0dXJuIGQua2V5fTA+Yz9kPWQubGVmdDowPGMmJihlPWQsZD1kLnJpZ2h0KX10aHJvdyBFcnJvcihcIkF0dGVtcHRlZCB0byBmaW5kIHByZWRlY2Vzc29yIGtleSBmb3IgYSBub25leGlzdGVudCBrZXkuICBXaGF0IGdpdmVzP1wiKTt9aC5mPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWEuZigpfTtoLmNvdW50PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWEuY291bnQoKX07aC54Yj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVhLnhiKCl9O2guYmI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lYS5iYigpfTtoLkRhPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmVhLkRhKGEpfTtoLlFhPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmVhLlFhKGEpfTtcclxuaC5aYT1mdW5jdGlvbihhKXtyZXR1cm4gbmV3IFhhKHRoaXMuZWEsYSl9O2Z1bmN0aW9uIFhhKGEsYil7dGhpcy51ZD1iO2Zvcih0aGlzLlpiPVtdOyFhLmYoKTspdGhpcy5aYi5wdXNoKGEpLGE9YS5sZWZ0fWZ1bmN0aW9uIFlhKGEpe2lmKDA9PT1hLlpiLmxlbmd0aClyZXR1cm4gbnVsbDt2YXIgYj1hLlpiLnBvcCgpLGM7Yz1hLnVkP2EudWQoYi5rZXksYi52YWx1ZSk6e2tleTpiLmtleSx2YWx1ZTpiLnZhbHVlfTtmb3IoYj1iLnJpZ2h0OyFiLmYoKTspYS5aYi5wdXNoKGIpLGI9Yi5sZWZ0O3JldHVybiBjfWZ1bmN0aW9uIFphKGEsYixjLGQsZSl7dGhpcy5rZXk9YTt0aGlzLnZhbHVlPWI7dGhpcy5jb2xvcj1udWxsIT1jP2M6ITA7dGhpcy5sZWZ0PW51bGwhPWQ/ZDpWYTt0aGlzLnJpZ2h0PW51bGwhPWU/ZTpWYX1oPVphLnByb3RvdHlwZTtcclxuaC5KPWZ1bmN0aW9uKGEsYixjLGQsZSl7cmV0dXJuIG5ldyBaYShudWxsIT1hP2E6dGhpcy5rZXksbnVsbCE9Yj9iOnRoaXMudmFsdWUsbnVsbCE9Yz9jOnRoaXMuY29sb3IsbnVsbCE9ZD9kOnRoaXMubGVmdCxudWxsIT1lP2U6dGhpcy5yaWdodCl9O2guY291bnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sZWZ0LmNvdW50KCkrMSt0aGlzLnJpZ2h0LmNvdW50KCl9O2guZj1mdW5jdGlvbigpe3JldHVybiExfTtoLkRhPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmxlZnQuRGEoYSl8fGEodGhpcy5rZXksdGhpcy52YWx1ZSl8fHRoaXMucmlnaHQuRGEoYSl9O2guUWE9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMucmlnaHQuUWEoYSl8fGEodGhpcy5rZXksdGhpcy52YWx1ZSl8fHRoaXMubGVmdC5RYShhKX07ZnVuY3Rpb24gYmIoYSl7cmV0dXJuIGEubGVmdC5mKCk/YTpiYihhLmxlZnQpfWgueGI9ZnVuY3Rpb24oKXtyZXR1cm4gYmIodGhpcykua2V5fTtcclxuaC5iYj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJpZ2h0LmYoKT90aGlzLmtleTp0aGlzLnJpZ2h0LmJiKCl9O2guc2E9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGU7ZT10aGlzO2Q9YyhhLGUua2V5KTtlPTA+ZD9lLkoobnVsbCxudWxsLG51bGwsZS5sZWZ0LnNhKGEsYixjKSxudWxsKTowPT09ZD9lLkoobnVsbCxiLG51bGwsbnVsbCxudWxsKTplLkoobnVsbCxudWxsLG51bGwsbnVsbCxlLnJpZ2h0LnNhKGEsYixjKSk7cmV0dXJuIGNiKGUpfTtmdW5jdGlvbiBkYihhKXtpZihhLmxlZnQuZigpKXJldHVybiBWYTthLmxlZnQuUSgpfHxhLmxlZnQubGVmdC5RKCl8fChhPWViKGEpKTthPWEuSihudWxsLG51bGwsbnVsbCxkYihhLmxlZnQpLG51bGwpO3JldHVybiBjYihhKX1cclxuaC5yZW1vdmU9ZnVuY3Rpb24oYSxiKXt2YXIgYyxkO2M9dGhpcztpZigwPmIoYSxjLmtleSkpYy5sZWZ0LmYoKXx8Yy5sZWZ0LlEoKXx8Yy5sZWZ0LmxlZnQuUSgpfHwoYz1lYihjKSksYz1jLkoobnVsbCxudWxsLG51bGwsYy5sZWZ0LnJlbW92ZShhLGIpLG51bGwpO2Vsc2V7Yy5sZWZ0LlEoKSYmKGM9ZmIoYykpO2MucmlnaHQuZigpfHxjLnJpZ2h0LlEoKXx8Yy5yaWdodC5sZWZ0LlEoKXx8KGM9Z2IoYyksYy5sZWZ0LmxlZnQuUSgpJiYoYz1mYihjKSxjPWdiKGMpKSk7aWYoMD09PWIoYSxjLmtleSkpe2lmKGMucmlnaHQuZigpKXJldHVybiBWYTtkPWJiKGMucmlnaHQpO2M9Yy5KKGQua2V5LGQudmFsdWUsbnVsbCxudWxsLGRiKGMucmlnaHQpKX1jPWMuSihudWxsLG51bGwsbnVsbCxudWxsLGMucmlnaHQucmVtb3ZlKGEsYikpfXJldHVybiBjYihjKX07aC5RPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29sb3J9O1xyXG5mdW5jdGlvbiBjYihhKXthLnJpZ2h0LlEoKSYmIWEubGVmdC5RKCkmJihhPWhiKGEpKTthLmxlZnQuUSgpJiZhLmxlZnQubGVmdC5RKCkmJihhPWZiKGEpKTthLmxlZnQuUSgpJiZhLnJpZ2h0LlEoKSYmKGE9Z2IoYSkpO3JldHVybiBhfWZ1bmN0aW9uIGViKGEpe2E9Z2IoYSk7YS5yaWdodC5sZWZ0LlEoKSYmKGE9YS5KKG51bGwsbnVsbCxudWxsLG51bGwsZmIoYS5yaWdodCkpLGE9aGIoYSksYT1nYihhKSk7cmV0dXJuIGF9ZnVuY3Rpb24gaGIoYSl7cmV0dXJuIGEucmlnaHQuSihudWxsLG51bGwsYS5jb2xvcixhLkoobnVsbCxudWxsLCEwLG51bGwsYS5yaWdodC5sZWZ0KSxudWxsKX1mdW5jdGlvbiBmYihhKXtyZXR1cm4gYS5sZWZ0LkoobnVsbCxudWxsLGEuY29sb3IsbnVsbCxhLkoobnVsbCxudWxsLCEwLGEubGVmdC5yaWdodCxudWxsKSl9XHJcbmZ1bmN0aW9uIGdiKGEpe3JldHVybiBhLkoobnVsbCxudWxsLCFhLmNvbG9yLGEubGVmdC5KKG51bGwsbnVsbCwhYS5sZWZ0LmNvbG9yLG51bGwsbnVsbCksYS5yaWdodC5KKG51bGwsbnVsbCwhYS5yaWdodC5jb2xvcixudWxsLG51bGwpKX1mdW5jdGlvbiBpYigpe31oPWliLnByb3RvdHlwZTtoLko9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc307aC5zYT1mdW5jdGlvbihhLGIpe3JldHVybiBuZXcgWmEoYSxiLG51bGwpfTtoLnJlbW92ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzfTtoLmNvdW50PWZ1bmN0aW9uKCl7cmV0dXJuIDB9O2guZj1mdW5jdGlvbigpe3JldHVybiEwfTtoLkRhPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2guUWE9ZnVuY3Rpb24oKXtyZXR1cm4hMX07aC54Yj1mdW5jdGlvbigpe3JldHVybiBudWxsfTtoLmJiPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9O2guUT1mdW5jdGlvbigpe3JldHVybiExfTt2YXIgVmE9bmV3IGliO2Z1bmN0aW9uIGpiKGEpe3RoaXMuVWI9YTt0aGlzLmhjPVwiZmlyZWJhc2U6XCJ9amIucHJvdG90eXBlLnNldD1mdW5jdGlvbihhLGIpe251bGw9PWI/dGhpcy5VYi5yZW1vdmVJdGVtKHRoaXMuaGMrYSk6dGhpcy5VYi5zZXRJdGVtKHRoaXMuaGMrYSx1KGIpKX07amIucHJvdG90eXBlLmdldD1mdW5jdGlvbihhKXthPXRoaXMuVWIuZ2V0SXRlbSh0aGlzLmhjK2EpO3JldHVybiBudWxsPT1hP251bGw6cWEoYSl9O2piLnByb3RvdHlwZS5yZW1vdmU9ZnVuY3Rpb24oYSl7dGhpcy5VYi5yZW1vdmVJdGVtKHRoaXMuaGMrYSl9O2piLnByb3RvdHlwZS5uZD0hMTtmdW5jdGlvbiBrYigpe3RoaXMubmI9e319a2IucHJvdG90eXBlLnNldD1mdW5jdGlvbihhLGIpe251bGw9PWI/ZGVsZXRlIHRoaXMubmJbYV06dGhpcy5uYlthXT1ifTtrYi5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKGEpe3JldHVybiBBKHRoaXMubmIsYSk/dGhpcy5uYlthXTpudWxsfTtrYi5wcm90b3R5cGUucmVtb3ZlPWZ1bmN0aW9uKGEpe2RlbGV0ZSB0aGlzLm5iW2FdfTtrYi5wcm90b3R5cGUubmQ9ITA7ZnVuY3Rpb24gbGIoYSl7dHJ5e2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2Ygd2luZG93JiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIHdpbmRvd1thXSl7dmFyIGI9d2luZG93W2FdO2Iuc2V0SXRlbShcImZpcmViYXNlOnNlbnRpbmVsXCIsXCJjYWNoZVwiKTtiLnJlbW92ZUl0ZW0oXCJmaXJlYmFzZTpzZW50aW5lbFwiKTtyZXR1cm4gbmV3IGpiKGIpfX1jYXRjaChjKXt9cmV0dXJuIG5ldyBrYn12YXIgbWI9bGIoXCJsb2NhbFN0b3JhZ2VcIiksbmI9bGIoXCJzZXNzaW9uU3RvcmFnZVwiKTtmdW5jdGlvbiBvYihhLGIsYyxkKXt0aGlzLmhvc3Q9YS50b0xvd2VyQ2FzZSgpO3RoaXMuZG9tYWluPXRoaXMuaG9zdC5zdWJzdHIodGhpcy5ob3N0LmluZGV4T2YoXCIuXCIpKzEpO3RoaXMubmM9Yjt0aGlzLlliPWM7dGhpcy5nZT1kO3RoaXMuaGE9bWIuZ2V0KFwiaG9zdDpcIithKXx8dGhpcy5ob3N0fWZ1bmN0aW9uIHBiKGEsYil7YiE9PWEuaGEmJihhLmhhPWIsXCJzLVwiPT09YS5oYS5zdWJzdHIoMCwyKSYmbWIuc2V0KFwiaG9zdDpcIithLmhvc3QsYS5oYSkpfW9iLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybih0aGlzLm5jP1wiaHR0cHM6Ly9cIjpcImh0dHA6Ly9cIikrdGhpcy5ob3N0fTtmdW5jdGlvbiBxYigpe3RoaXMucWE9LTF9O2Z1bmN0aW9uIHJiKCl7dGhpcy5xYT0tMTt0aGlzLnFhPTY0O3RoaXMuQz1bXTt0aGlzLnhjPVtdO3RoaXMuRWQ9W107dGhpcy5lYz1bXTt0aGlzLmVjWzBdPTEyODtmb3IodmFyIGE9MTthPHRoaXMucWE7KythKXRoaXMuZWNbYV09MDt0aGlzLnJjPXRoaXMuJGE9MDt0aGlzLnJlc2V0KCl9amEocmIscWIpO3JiLnByb3RvdHlwZS5yZXNldD1mdW5jdGlvbigpe3RoaXMuQ1swXT0xNzMyNTg0MTkzO3RoaXMuQ1sxXT00MDIzMjMzNDE3O3RoaXMuQ1syXT0yNTYyMzgzMTAyO3RoaXMuQ1szXT0yNzE3MzM4Nzg7dGhpcy5DWzRdPTMyODUzNzc1MjA7dGhpcy5yYz10aGlzLiRhPTB9O1xyXG5mdW5jdGlvbiBzYihhLGIsYyl7Y3x8KGM9MCk7dmFyIGQ9YS5FZDtpZihxKGIpKWZvcih2YXIgZT0wOzE2PmU7ZSsrKWRbZV09Yi5jaGFyQ29kZUF0KGMpPDwyNHxiLmNoYXJDb2RlQXQoYysxKTw8MTZ8Yi5jaGFyQ29kZUF0KGMrMik8PDh8Yi5jaGFyQ29kZUF0KGMrMyksYys9NDtlbHNlIGZvcihlPTA7MTY+ZTtlKyspZFtlXT1iW2NdPDwyNHxiW2MrMV08PDE2fGJbYysyXTw8OHxiW2MrM10sYys9NDtmb3IoZT0xNjs4MD5lO2UrKyl7dmFyIGY9ZFtlLTNdXmRbZS04XV5kW2UtMTRdXmRbZS0xNl07ZFtlXT0oZjw8MXxmPj4+MzEpJjQyOTQ5NjcyOTV9Yj1hLkNbMF07Yz1hLkNbMV07Zm9yKHZhciBnPWEuQ1syXSxrPWEuQ1szXSxsPWEuQ1s0XSxtLGU9MDs4MD5lO2UrKyk0MD5lPzIwPmU/KGY9a15jJihnXmspLG09MTUxODUwMDI0OSk6KGY9Y15nXmssbT0xODU5Nzc1MzkzKTo2MD5lPyhmPWMmZ3xrJihjfGcpLG09MjQwMDk1OTcwOCk6KGY9Y15nXmssbT0zMzk1NDY5NzgyKSxmPShiPDxcclxuNXxiPj4+MjcpK2YrbCttK2RbZV0mNDI5NDk2NzI5NSxsPWssaz1nLGc9KGM8PDMwfGM+Pj4yKSY0Mjk0OTY3Mjk1LGM9YixiPWY7YS5DWzBdPWEuQ1swXStiJjQyOTQ5NjcyOTU7YS5DWzFdPWEuQ1sxXStjJjQyOTQ5NjcyOTU7YS5DWzJdPWEuQ1syXStnJjQyOTQ5NjcyOTU7YS5DWzNdPWEuQ1szXStrJjQyOTQ5NjcyOTU7YS5DWzRdPWEuQ1s0XStsJjQyOTQ5NjcyOTV9XHJcbnJiLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oYSxiKXtuKGIpfHwoYj1hLmxlbmd0aCk7Zm9yKHZhciBjPWItdGhpcy5xYSxkPTAsZT10aGlzLnhjLGY9dGhpcy4kYTtkPGI7KXtpZigwPT1mKWZvcig7ZDw9Yzspc2IodGhpcyxhLGQpLGQrPXRoaXMucWE7aWYocShhKSlmb3IoO2Q8Yjspe2lmKGVbZl09YS5jaGFyQ29kZUF0KGQpLCsrZiwrK2QsZj09dGhpcy5xYSl7c2IodGhpcyxlKTtmPTA7YnJlYWt9fWVsc2UgZm9yKDtkPGI7KWlmKGVbZl09YVtkXSwrK2YsKytkLGY9PXRoaXMucWEpe3NiKHRoaXMsZSk7Zj0wO2JyZWFrfX10aGlzLiRhPWY7dGhpcy5yYys9Yn07dmFyIHRiPUFycmF5LnByb3RvdHlwZSx1Yj10Yi5mb3JFYWNoP2Z1bmN0aW9uKGEsYixjKXt0Yi5mb3JFYWNoLmNhbGwoYSxiLGMpfTpmdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkPWEubGVuZ3RoLGU9cShhKT9hLnNwbGl0KFwiXCIpOmEsZj0wO2Y8ZDtmKyspZiBpbiBlJiZiLmNhbGwoYyxlW2ZdLGYsYSl9LHZiPXRiLm1hcD9mdW5jdGlvbihhLGIsYyl7cmV0dXJuIHRiLm1hcC5jYWxsKGEsYixjKX06ZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZD1hLmxlbmd0aCxlPUFycmF5KGQpLGY9cShhKT9hLnNwbGl0KFwiXCIpOmEsZz0wO2c8ZDtnKyspZyBpbiBmJiYoZVtnXT1iLmNhbGwoYyxmW2ddLGcsYSkpO3JldHVybiBlfSx3Yj10Yi5yZWR1Y2U/ZnVuY3Rpb24oYSxiLGMsZCl7ZCYmKGI9cihiLGQpKTtyZXR1cm4gdGIucmVkdWNlLmNhbGwoYSxiLGMpfTpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1jO3ViKGEsZnVuY3Rpb24oYyxnKXtlPWIuY2FsbChkLGUsYyxnLGEpfSk7cmV0dXJuIGV9LFxyXG54Yj10Yi5ldmVyeT9mdW5jdGlvbihhLGIsYyl7cmV0dXJuIHRiLmV2ZXJ5LmNhbGwoYSxiLGMpfTpmdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkPWEubGVuZ3RoLGU9cShhKT9hLnNwbGl0KFwiXCIpOmEsZj0wO2Y8ZDtmKyspaWYoZiBpbiBlJiYhYi5jYWxsKGMsZVtmXSxmLGEpKXJldHVybiExO3JldHVybiEwfTtmdW5jdGlvbiB5YihhLGIpe3ZhciBjO2E6e2M9YS5sZW5ndGg7Zm9yKHZhciBkPXEoYSk/YS5zcGxpdChcIlwiKTphLGU9MDtlPGM7ZSsrKWlmKGUgaW4gZCYmYi5jYWxsKHZvaWQgMCxkW2VdLGUsYSkpe2M9ZTticmVhayBhfWM9LTF9cmV0dXJuIDA+Yz9udWxsOnEoYSk/YS5jaGFyQXQoYyk6YVtjXX07dmFyIHpiO2E6e3ZhciBBYj1hYS5uYXZpZ2F0b3I7aWYoQWIpe3ZhciBCYj1BYi51c2VyQWdlbnQ7aWYoQmIpe3piPUJiO2JyZWFrIGF9fXpiPVwiXCJ9ZnVuY3Rpb24gQ2IoYSl7cmV0dXJuLTEhPXpiLmluZGV4T2YoYSl9O3ZhciBEYj1DYihcIk9wZXJhXCIpfHxDYihcIk9QUlwiKSxFYj1DYihcIlRyaWRlbnRcIil8fENiKFwiTVNJRVwiKSxGYj1DYihcIkdlY2tvXCIpJiYtMT09emIudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwid2Via2l0XCIpJiYhKENiKFwiVHJpZGVudFwiKXx8Q2IoXCJNU0lFXCIpKSxHYj0tMSE9emIudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwid2Via2l0XCIpOyhmdW5jdGlvbigpe3ZhciBhPVwiXCIsYjtpZihEYiYmYWEub3BlcmEpcmV0dXJuIGE9YWEub3BlcmEudmVyc2lvbixcImZ1bmN0aW9uXCI9PWRhKGEpP2EoKTphO0ZiP2I9L3J2XFw6KFteXFwpO10rKShcXCl8OykvOkViP2I9L1xcYig/Ok1TSUV8cnYpWzogXShbXlxcKTtdKykoXFwpfDspLzpHYiYmKGI9L1dlYktpdFxcLyhcXFMrKS8pO2ImJihhPShhPWIuZXhlYyh6YikpP2FbMV06XCJcIik7cmV0dXJuIEViJiYoYj0oYj1hYS5kb2N1bWVudCk/Yi5kb2N1bWVudE1vZGU6dm9pZCAwLGI+cGFyc2VGbG9hdChhKSk/U3RyaW5nKGIpOmF9KSgpO3ZhciBIYj1udWxsLEliPW51bGw7XHJcbmZ1bmN0aW9uIEpiKGEsYil7aWYoIWVhKGEpKXRocm93IEVycm9yKFwiZW5jb2RlQnl0ZUFycmF5IHRha2VzIGFuIGFycmF5IGFzIGEgcGFyYW1ldGVyXCIpO2lmKCFIYil7SGI9e307SWI9e307Zm9yKHZhciBjPTA7NjU+YztjKyspSGJbY109XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwiLmNoYXJBdChjKSxJYltjXT1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5LV8uXCIuY2hhckF0KGMpfWZvcih2YXIgYz1iP0liOkhiLGQ9W10sZT0wO2U8YS5sZW5ndGg7ZSs9Myl7dmFyIGY9YVtlXSxnPWUrMTxhLmxlbmd0aCxrPWc/YVtlKzFdOjAsbD1lKzI8YS5sZW5ndGgsbT1sP2FbZSsyXTowLHA9Zj4+MixmPShmJjMpPDw0fGs+PjQsaz0oayYxNSk8PDJ8bT4+NixtPW0mNjM7bHx8KG09NjQsZ3x8KGs9NjQpKTtkLnB1c2goY1twXSxjW2ZdLGNba10sY1ttXSl9cmV0dXJuIGQuam9pbihcIlwiKX1cclxuO3ZhciBLYj1mdW5jdGlvbigpe3ZhciBhPTE7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGErK319KCk7ZnVuY3Rpb24gdihhLGIpe2lmKCFhKXRocm93IEVycm9yKFwiRmlyZWJhc2UgSU5URVJOQUwgQVNTRVJUIEZBSUxFRDpcIitiKTt9ZnVuY3Rpb24gTGIoYSl7dmFyIGI9cmEoYSk7YT1uZXcgcmI7YS51cGRhdGUoYik7dmFyIGI9W10sYz04KmEucmM7NTY+YS4kYT9hLnVwZGF0ZShhLmVjLDU2LWEuJGEpOmEudXBkYXRlKGEuZWMsYS5xYS0oYS4kYS01NikpO2Zvcih2YXIgZD1hLnFhLTE7NTY8PWQ7ZC0tKWEueGNbZF09YyYyNTUsYy89MjU2O3NiKGEsYS54Yyk7Zm9yKGQ9Yz0wOzU+ZDtkKyspZm9yKHZhciBlPTI0OzA8PWU7ZS09OCliW2NdPWEuQ1tkXT4+ZSYyNTUsKytjO3JldHVybiBKYihiKX1cclxuZnVuY3Rpb24gTWIoYSl7Zm9yKHZhciBiPVwiXCIsYz0wO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYj1lYShhcmd1bWVudHNbY10pP2IrTWIuYXBwbHkobnVsbCxhcmd1bWVudHNbY10pOlwib2JqZWN0XCI9PT10eXBlb2YgYXJndW1lbnRzW2NdP2IrdShhcmd1bWVudHNbY10pOmIrYXJndW1lbnRzW2NdLGIrPVwiIFwiO3JldHVybiBifXZhciBOYj1udWxsLE9iPSEwO2Z1bmN0aW9uIEsoYSl7ITA9PT1PYiYmKE9iPSExLG51bGw9PT1OYiYmITA9PT1uYi5nZXQoXCJsb2dnaW5nX2VuYWJsZWRcIikmJlBiKCEwKSk7aWYoTmIpe3ZhciBiPU1iLmFwcGx5KG51bGwsYXJndW1lbnRzKTtOYihiKX19ZnVuY3Rpb24gUWIoYSl7cmV0dXJuIGZ1bmN0aW9uKCl7SyhhLGFyZ3VtZW50cyl9fVxyXG5mdW5jdGlvbiBSYihhKXtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUpe3ZhciBiPVwiRklSRUJBU0UgSU5URVJOQUwgRVJST1I6IFwiK01iLmFwcGx5KG51bGwsYXJndW1lbnRzKTtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUuZXJyb3I/Y29uc29sZS5lcnJvcihiKTpjb25zb2xlLmxvZyhiKX19ZnVuY3Rpb24gU2IoYSl7dmFyIGI9TWIuYXBwbHkobnVsbCxhcmd1bWVudHMpO3Rocm93IEVycm9yKFwiRklSRUJBU0UgRkFUQUwgRVJST1I6IFwiK2IpO31mdW5jdGlvbiBMKGEpe2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIGI9XCJGSVJFQkFTRSBXQVJOSU5HOiBcIitNYi5hcHBseShudWxsLGFyZ3VtZW50cyk7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlLndhcm4/Y29uc29sZS53YXJuKGIpOmNvbnNvbGUubG9nKGIpfX1cclxuZnVuY3Rpb24gQ2EoYSl7cmV0dXJuIGZhKGEpJiYoYSE9YXx8YT09TnVtYmVyLlBPU0lUSVZFX0lORklOSVRZfHxhPT1OdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkpfWZ1bmN0aW9uIFRiKGEpe2lmKFwiY29tcGxldGVcIj09PWRvY3VtZW50LnJlYWR5U3RhdGUpYSgpO2Vsc2V7dmFyIGI9ITEsYz1mdW5jdGlvbigpe2RvY3VtZW50LmJvZHk/Ynx8KGI9ITAsYSgpKTpzZXRUaW1lb3V0KGMsMTApfTtkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyPyhkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLGMsITEpLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLGMsITEpKTpkb2N1bWVudC5hdHRhY2hFdmVudCYmKGRvY3VtZW50LmF0dGFjaEV2ZW50KFwib25yZWFkeXN0YXRlY2hhbmdlXCIsZnVuY3Rpb24oKXtcImNvbXBsZXRlXCI9PT1kb2N1bWVudC5yZWFkeVN0YXRlJiZjKCl9KSx3aW5kb3cuYXR0YWNoRXZlbnQoXCJvbmxvYWRcIixjKSl9fVxyXG5mdW5jdGlvbiBVYihhLGIpe3JldHVybiBhIT09Yj9udWxsPT09YT8tMTpudWxsPT09Yj8xOnR5cGVvZiBhIT09dHlwZW9mIGI/XCJudW1iZXJcIj09PXR5cGVvZiBhPy0xOjE6YT5iPzE6LTE6MH1mdW5jdGlvbiBWYihhLGIpe2lmKGE9PT1iKXJldHVybiAwO3ZhciBjPVdiKGEpLGQ9V2IoYik7cmV0dXJuIG51bGwhPT1jP251bGwhPT1kPzA9PWMtZD9hLmxlbmd0aC1iLmxlbmd0aDpjLWQ6LTE6bnVsbCE9PWQ/MTphPGI/LTE6MX1mdW5jdGlvbiBYYihhLGIpe2lmKGImJmEgaW4gYilyZXR1cm4gYlthXTt0aHJvdyBFcnJvcihcIk1pc3NpbmcgcmVxdWlyZWQga2V5IChcIithK1wiKSBpbiBvYmplY3Q6IFwiK3UoYikpO31cclxuZnVuY3Rpb24gS2EoYSl7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YSlyZXR1cm4gdShhKTt2YXIgYj1bXSxjO2ZvcihjIGluIGEpYi5wdXNoKGMpO2Iuc29ydCgpO2M9XCJ7XCI7Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspMCE9PWQmJihjKz1cIixcIiksYys9dShiW2RdKSxjKz1cIjpcIixjKz1LYShhW2JbZF1dKTtyZXR1cm4gYytcIn1cIn1mdW5jdGlvbiBZYihhLGIpe2lmKGEubGVuZ3RoPD1iKXJldHVyblthXTtmb3IodmFyIGM9W10sZD0wO2Q8YS5sZW5ndGg7ZCs9YilkK2I+YT9jLnB1c2goYS5zdWJzdHJpbmcoZCxhLmxlbmd0aCkpOmMucHVzaChhLnN1YnN0cmluZyhkLGQrYikpO3JldHVybiBjfWZ1bmN0aW9uIFpiKGEsYil7aWYoXCJhcnJheVwiPT1kYShhKSlmb3IodmFyIGM9MDtjPGEubGVuZ3RoOysrYyliKGMsYVtjXSk7ZWxzZSAkYihhLGIpfWZ1bmN0aW9uIGFjKGEsYil7cmV0dXJuIGI/cihhLGIpOmF9XHJcbmZ1bmN0aW9uIGJjKGEpe3YoIUNhKGEpLFwiSW52YWxpZCBKU09OIG51bWJlclwiKTt2YXIgYixjLGQsZTswPT09YT8oZD1jPTAsYj0tSW5maW5pdHk9PT0xL2E/MTowKTooYj0wPmEsYT1NYXRoLmFicyhhKSxhPj1NYXRoLnBvdygyLC0xMDIyKT8oZD1NYXRoLm1pbihNYXRoLmZsb29yKE1hdGgubG9nKGEpL01hdGguTE4yKSwxMDIzKSxjPWQrMTAyMyxkPU1hdGgucm91bmQoYSpNYXRoLnBvdygyLDUyLWQpLU1hdGgucG93KDIsNTIpKSk6KGM9MCxkPU1hdGgucm91bmQoYS9NYXRoLnBvdygyLC0xMDc0KSkpKTtlPVtdO2ZvcihhPTUyO2E7YS09MSllLnB1c2goZCUyPzE6MCksZD1NYXRoLmZsb29yKGQvMik7Zm9yKGE9MTE7YTthLT0xKWUucHVzaChjJTI/MTowKSxjPU1hdGguZmxvb3IoYy8yKTtlLnB1c2goYj8xOjApO2UucmV2ZXJzZSgpO2I9ZS5qb2luKFwiXCIpO2M9XCJcIjtmb3IoYT0wOzY0PmE7YSs9OClkPXBhcnNlSW50KGIuc3Vic3RyKGEsOCksMikudG9TdHJpbmcoMTYpLDE9PT1kLmxlbmd0aCYmXHJcbihkPVwiMFwiK2QpLGMrPWQ7cmV0dXJuIGMudG9Mb3dlckNhc2UoKX1mdW5jdGlvbiBjYyhhKXt2YXIgYj1cIlVua25vd24gRXJyb3JcIjtcInRvb19iaWdcIj09PWE/Yj1cIlRoZSBkYXRhIHJlcXVlc3RlZCBleGNlZWRzIHRoZSBtYXhpbXVtIHNpemUgdGhhdCBjYW4gYmUgYWNjZXNzZWQgd2l0aCBhIHNpbmdsZSByZXF1ZXN0LlwiOlwicGVybWlzc2lvbl9kZW5pZWRcIj09YT9iPVwiQ2xpZW50IGRvZXNuJ3QgaGF2ZSBwZXJtaXNzaW9uIHRvIGFjY2VzcyB0aGUgZGVzaXJlZCBkYXRhLlwiOlwidW5hdmFpbGFibGVcIj09YSYmKGI9XCJUaGUgc2VydmljZSBpcyB1bmF2YWlsYWJsZVwiKTtiPUVycm9yKGErXCI6IFwiK2IpO2IuY29kZT1hLnRvVXBwZXJDYXNlKCk7cmV0dXJuIGJ9dmFyIGRjPS9eLT9cXGR7MSwxMH0kLztmdW5jdGlvbiBXYihhKXtyZXR1cm4gZGMudGVzdChhKSYmKGE9TnVtYmVyKGEpLC0yMTQ3NDgzNjQ4PD1hJiYyMTQ3NDgzNjQ3Pj1hKT9hOm51bGx9XHJcbmZ1bmN0aW9uIGVjKGEpe3RyeXthKCl9Y2F0Y2goYil7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGI7fSwwKX19O2Z1bmN0aW9uIGZjKGEsYil7dGhpcy5GPWE7dihudWxsIT09dGhpcy5GLFwiTGVhZk5vZGUgc2hvdWxkbid0IGJlIGNyZWF0ZWQgd2l0aCBudWxsIHZhbHVlLlwiKTt0aGlzLmdiPVwidW5kZWZpbmVkXCIhPT10eXBlb2YgYj9iOm51bGx9aD1mYy5wcm90b3R5cGU7aC5QPWZ1bmN0aW9uKCl7cmV0dXJuITB9O2guaz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdifTtoLklhPWZ1bmN0aW9uKGEpe3JldHVybiBuZXcgZmModGhpcy5GLGEpfTtoLk89ZnVuY3Rpb24oKXtyZXR1cm4gTX07aC5MPWZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT09QyhhKT90aGlzOk19O2guZ2E9ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH07aC5IPWZ1bmN0aW9uKGEsYil7cmV0dXJuKG5ldyBOKS5IKGEsYikuSWEodGhpcy5nYil9O2guQWE9ZnVuY3Rpb24oYSxiKXt2YXIgYz1DKGEpO3JldHVybiBudWxsPT09Yz9iOnRoaXMuSChjLE0uQWEoTGEoYSksYikpfTtoLmY9ZnVuY3Rpb24oKXtyZXR1cm4hMX07aC4kYj1mdW5jdGlvbigpe3JldHVybiAwfTtcclxuaC5WPWZ1bmN0aW9uKGEpe3JldHVybiBhJiZudWxsIT09dGhpcy5rKCk/e1wiLnZhbHVlXCI6dGhpcy5qKCksXCIucHJpb3JpdHlcIjp0aGlzLmsoKX06dGhpcy5qKCl9O2guaGFzaD1mdW5jdGlvbigpe3ZhciBhPVwiXCI7bnVsbCE9PXRoaXMuaygpJiYoYSs9XCJwcmlvcml0eTpcIitnYyh0aGlzLmsoKSkrXCI6XCIpO3ZhciBiPXR5cGVvZiB0aGlzLkYsYT1hKyhiK1wiOlwiKSxhPVwibnVtYmVyXCI9PT1iP2ErYmModGhpcy5GKTphK3RoaXMuRjtyZXR1cm4gTGIoYSl9O2guaj1mdW5jdGlvbigpe3JldHVybiB0aGlzLkZ9O2gudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIHRoaXMuRj90aGlzLkY6J1wiJyt0aGlzLkYrJ1wiJ307ZnVuY3Rpb24gaWMoYSxiKXtyZXR1cm4gVWIoYS5rYSxiLmthKXx8VmIoYS5uYW1lLGIubmFtZSl9ZnVuY3Rpb24gamMoYSxiKXtyZXR1cm4gVmIoYS5uYW1lLGIubmFtZSl9ZnVuY3Rpb24ga2MoYSxiKXtyZXR1cm4gVmIoYSxiKX07ZnVuY3Rpb24gTihhLGIpe3RoaXMubz1hfHxuZXcgVGEoa2MpO3RoaXMuZ2I9XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBiP2I6bnVsbH1oPU4ucHJvdG90eXBlO2guUD1mdW5jdGlvbigpe3JldHVybiExfTtoLms9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nYn07aC5JYT1mdW5jdGlvbihhKXtyZXR1cm4gbmV3IE4odGhpcy5vLGEpfTtoLkg9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLm8ucmVtb3ZlKGEpO2ImJmIuZigpJiYoYj1udWxsKTtudWxsIT09YiYmKGM9Yy5zYShhLGIpKTtyZXR1cm4gYiYmbnVsbCE9PWIuaygpP25ldyBsYyhjLG51bGwsdGhpcy5nYik6bmV3IE4oYyx0aGlzLmdiKX07aC5BYT1mdW5jdGlvbihhLGIpe3ZhciBjPUMoYSk7aWYobnVsbD09PWMpcmV0dXJuIGI7dmFyIGQ9dGhpcy5PKGMpLkFhKExhKGEpLGIpO3JldHVybiB0aGlzLkgoYyxkKX07aC5mPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuby5mKCl9O2guJGI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vLmNvdW50KCl9O1xyXG52YXIgbWM9L15cXGQrJC87aD1OLnByb3RvdHlwZTtoLlY9ZnVuY3Rpb24oYSl7aWYodGhpcy5mKCkpcmV0dXJuIG51bGw7dmFyIGI9e30sYz0wLGQ9MCxlPSEwO3RoaXMuQShmdW5jdGlvbihmLGcpe2JbZl09Zy5WKGEpO2MrKztlJiZtYy50ZXN0KGYpP2Q9TWF0aC5tYXgoZCxOdW1iZXIoZikpOmU9ITF9KTtpZighYSYmZSYmZDwyKmMpe3ZhciBmPVtdLGc7Zm9yKGcgaW4gYilmW2ddPWJbZ107cmV0dXJuIGZ9YSYmbnVsbCE9PXRoaXMuaygpJiYoYltcIi5wcmlvcml0eVwiXT10aGlzLmsoKSk7cmV0dXJuIGJ9O2guaGFzaD1mdW5jdGlvbigpe3ZhciBhPVwiXCI7bnVsbCE9PXRoaXMuaygpJiYoYSs9XCJwcmlvcml0eTpcIitnYyh0aGlzLmsoKSkrXCI6XCIpO3RoaXMuQShmdW5jdGlvbihiLGMpe3ZhciBkPWMuaGFzaCgpO1wiXCIhPT1kJiYoYSs9XCI6XCIrYitcIjpcIitkKX0pO3JldHVyblwiXCI9PT1hP1wiXCI6TGIoYSl9O1xyXG5oLk89ZnVuY3Rpb24oYSl7YT10aGlzLm8uZ2V0KGEpO3JldHVybiBudWxsPT09YT9NOmF9O2guTD1mdW5jdGlvbihhKXt2YXIgYj1DKGEpO3JldHVybiBudWxsPT09Yj90aGlzOnRoaXMuTyhiKS5MKExhKGEpKX07aC5nYT1mdW5jdGlvbihhKXtyZXR1cm4gV2EodGhpcy5vLGEpfTtoLmhkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuby54YigpfTtoLmtkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuby5iYigpfTtoLkE9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuby5EYShhKX07aC5FYz1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5vLlFhKGEpfTtoLlphPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuby5aYSgpfTtoLnRvU3RyaW5nPWZ1bmN0aW9uKCl7dmFyIGE9XCJ7XCIsYj0hMDt0aGlzLkEoZnVuY3Rpb24oYyxkKXtiP2I9ITE6YSs9XCIsIFwiO2ErPSdcIicrYysnXCIgOiAnK2QudG9TdHJpbmcoKX0pO3JldHVybiBhKz1cIn1cIn07dmFyIE09bmV3IE47ZnVuY3Rpb24gbGMoYSxiLGMpe04uY2FsbCh0aGlzLGEsYyk7bnVsbD09PWImJihiPW5ldyBUYShpYyksYS5EYShmdW5jdGlvbihhLGMpe2I9Yi5zYSh7bmFtZTphLGthOmMuaygpfSxjKX0pKTt0aGlzLnhhPWJ9amEobGMsTik7aD1sYy5wcm90b3R5cGU7aC5IPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5PKGEpLGQ9dGhpcy5vLGU9dGhpcy54YTtudWxsIT09YyYmKGQ9ZC5yZW1vdmUoYSksZT1lLnJlbW92ZSh7bmFtZTphLGthOmMuaygpfSkpO2ImJmIuZigpJiYoYj1udWxsKTtudWxsIT09YiYmKGQ9ZC5zYShhLGIpLGU9ZS5zYSh7bmFtZTphLGthOmIuaygpfSxiKSk7cmV0dXJuIG5ldyBsYyhkLGUsdGhpcy5rKCkpfTtoLmdhPWZ1bmN0aW9uKGEsYil7dmFyIGM9V2EodGhpcy54YSx7bmFtZTphLGthOmIuaygpfSk7cmV0dXJuIGM/Yy5uYW1lOm51bGx9O2guQT1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy54YS5EYShmdW5jdGlvbihiLGMpe3JldHVybiBhKGIubmFtZSxjKX0pfTtcclxuaC5FYz1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy54YS5RYShmdW5jdGlvbihiLGMpe3JldHVybiBhKGIubmFtZSxjKX0pfTtoLlphPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMueGEuWmEoZnVuY3Rpb24oYSxiKXtyZXR1cm57a2V5OmEubmFtZSx2YWx1ZTpifX0pfTtoLmhkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMueGEuZigpP251bGw6dGhpcy54YS54YigpLm5hbWV9O2gua2Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy54YS5mKCk/bnVsbDp0aGlzLnhhLmJiKCkubmFtZX07ZnVuY3Rpb24gTyhhLGIpe2lmKG51bGw9PT1hKXJldHVybiBNO3ZhciBjPW51bGw7XCJvYmplY3RcIj09PXR5cGVvZiBhJiZcIi5wcmlvcml0eVwiaW4gYT9jPWFbXCIucHJpb3JpdHlcIl06XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBiJiYoYz1iKTt2KG51bGw9PT1jfHxcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgY3x8XCJvYmplY3RcIj09PXR5cGVvZiBjJiZcIi5zdlwiaW4gYyxcIkludmFsaWQgcHJpb3JpdHkgdHlwZSBmb3VuZDogXCIrdHlwZW9mIGMpO1wib2JqZWN0XCI9PT10eXBlb2YgYSYmXCIudmFsdWVcImluIGEmJm51bGwhPT1hW1wiLnZhbHVlXCJdJiYoYT1hW1wiLnZhbHVlXCJdKTtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fFwiLnN2XCJpbiBhKXJldHVybiBuZXcgZmMoYSxjKTtpZihhIGluc3RhbmNlb2YgQXJyYXkpe3ZhciBkPU0sZT1hOyRiKGUsZnVuY3Rpb24oYSxiKXtpZihBKGUsYikmJlwiLlwiIT09Yi5zdWJzdHJpbmcoMCwxKSl7dmFyIGM9TyhhKTtpZihjLlAoKXx8IWMuZigpKWQ9XHJcbmQuSChiLGMpfX0pO3JldHVybiBkLklhKGMpfXZhciBmPVtdLGc9e30saz0hMSxsPWE7WmIobCxmdW5jdGlvbihhLGIpe2lmKFwic3RyaW5nXCIhPT10eXBlb2YgYnx8XCIuXCIhPT1iLnN1YnN0cmluZygwLDEpKXt2YXIgYz1PKGxbYl0pO2MuZigpfHwoaz1rfHxudWxsIT09Yy5rKCksZi5wdXNoKHtuYW1lOmIsa2E6Yy5rKCl9KSxnW2JdPWMpfX0pO3ZhciBtPW5jKGYsZywhMSk7aWYoayl7dmFyIHA9bmMoZixnLCEwKTtyZXR1cm4gbmV3IGxjKG0scCxjKX1yZXR1cm4gbmV3IE4obSxjKX12YXIgb2M9TWF0aC5sb2coMik7ZnVuY3Rpb24gcGMoYSl7dGhpcy5jb3VudD1wYXJzZUludChNYXRoLmxvZyhhKzEpL29jLDEwKTt0aGlzLmVkPXRoaXMuY291bnQtMTt0aGlzLkdkPWErMSZwYXJzZUludChBcnJheSh0aGlzLmNvdW50KzEpLmpvaW4oXCIxXCIpLDIpfWZ1bmN0aW9uIHFjKGEpe3ZhciBiPSEoYS5HZCYxPDxhLmVkKTthLmVkLS07cmV0dXJuIGJ9XHJcbmZ1bmN0aW9uIG5jKGEsYixjKXtmdW5jdGlvbiBkKGUsZil7dmFyIGw9Zi1lO2lmKDA9PWwpcmV0dXJuIG51bGw7aWYoMT09bCl7dmFyIGw9YVtlXS5uYW1lLG09Yz9hW2VdOmw7cmV0dXJuIG5ldyBaYShtLGJbbF0sITEsbnVsbCxudWxsKX12YXIgbT1wYXJzZUludChsLzIsMTApK2UscD1kKGUsbSksdD1kKG0rMSxmKSxsPWFbbV0ubmFtZSxtPWM/YVttXTpsO3JldHVybiBuZXcgWmEobSxiW2xdLCExLHAsdCl9dmFyIGU9Yz9pYzpqYzthLnNvcnQoZSk7dmFyIGY9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gZihlLGcpe3ZhciBrPXAtZSx0PXA7cC09ZTt2YXIgcz1hW2tdLm5hbWUsaz1uZXcgWmEoYz9hW2tdOnMsYltzXSxnLG51bGwsZChrKzEsdCkpO2w/bC5sZWZ0PWs6bT1rO2w9a31mb3IodmFyIGw9bnVsbCxtPW51bGwscD1hLmxlbmd0aCx0PTA7dDxlLmNvdW50OysrdCl7dmFyIHM9cWMoZSksdz1NYXRoLnBvdygyLGUuY291bnQtKHQrMSkpO3M/Zih3LCExKTooZih3LCExKSxmKHcsITApKX1yZXR1cm4gbX0obmV3IHBjKGEubGVuZ3RoKSksXHJcbmU9Yz9pYzprYztyZXR1cm4gbnVsbCE9PWY/bmV3IFRhKGUsZik6bmV3IFRhKGUpfWZ1bmN0aW9uIGdjKGEpe3JldHVyblwibnVtYmVyXCI9PT10eXBlb2YgYT9cIm51bWJlcjpcIitiYyhhKTpcInN0cmluZzpcIithfTtmdW5jdGlvbiBQKGEsYil7dGhpcy5CPWE7dGhpcy5rYz1ifVAucHJvdG90eXBlLlY9ZnVuY3Rpb24oKXt4KFwiRmlyZWJhc2UuRGF0YVNuYXBzaG90LnZhbFwiLDAsMCxhcmd1bWVudHMubGVuZ3RoKTtyZXR1cm4gdGhpcy5CLlYoKX07UC5wcm90b3R5cGUudmFsPVAucHJvdG90eXBlLlY7UC5wcm90b3R5cGUuS2Q9ZnVuY3Rpb24oKXt4KFwiRmlyZWJhc2UuRGF0YVNuYXBzaG90LmV4cG9ydFZhbFwiLDAsMCxhcmd1bWVudHMubGVuZ3RoKTtyZXR1cm4gdGhpcy5CLlYoITApfTtQLnByb3RvdHlwZS5leHBvcnRWYWw9UC5wcm90b3R5cGUuS2Q7UC5wcm90b3R5cGUuRz1mdW5jdGlvbihhKXt4KFwiRmlyZWJhc2UuRGF0YVNuYXBzaG90LmNoaWxkXCIsMCwxLGFyZ3VtZW50cy5sZW5ndGgpO2ZhKGEpJiYoYT1TdHJpbmcoYSkpO0hhKFwiRmlyZWJhc2UuRGF0YVNuYXBzaG90LmNoaWxkXCIsYSk7dmFyIGI9bmV3IEYoYSksYz10aGlzLmtjLkcoYik7cmV0dXJuIG5ldyBQKHRoaXMuQi5MKGIpLGMpfTtcclxuUC5wcm90b3R5cGUuY2hpbGQ9UC5wcm90b3R5cGUuRztQLnByb3RvdHlwZS5IYz1mdW5jdGlvbihhKXt4KFwiRmlyZWJhc2UuRGF0YVNuYXBzaG90Lmhhc0NoaWxkXCIsMSwxLGFyZ3VtZW50cy5sZW5ndGgpO0hhKFwiRmlyZWJhc2UuRGF0YVNuYXBzaG90Lmhhc0NoaWxkXCIsYSk7dmFyIGI9bmV3IEYoYSk7cmV0dXJuIXRoaXMuQi5MKGIpLmYoKX07UC5wcm90b3R5cGUuaGFzQ2hpbGQ9UC5wcm90b3R5cGUuSGM7UC5wcm90b3R5cGUuaz1mdW5jdGlvbigpe3goXCJGaXJlYmFzZS5EYXRhU25hcHNob3QuZ2V0UHJpb3JpdHlcIiwwLDAsYXJndW1lbnRzLmxlbmd0aCk7cmV0dXJuIHRoaXMuQi5rKCl9O1AucHJvdG90eXBlLmdldFByaW9yaXR5PVAucHJvdG90eXBlLms7XHJcblAucHJvdG90eXBlLmZvckVhY2g9ZnVuY3Rpb24oYSl7eChcIkZpcmViYXNlLkRhdGFTbmFwc2hvdC5mb3JFYWNoXCIsMSwxLGFyZ3VtZW50cy5sZW5ndGgpO3ooXCJGaXJlYmFzZS5EYXRhU25hcHNob3QuZm9yRWFjaFwiLDEsYSwhMSk7aWYodGhpcy5CLlAoKSlyZXR1cm4hMTt2YXIgYj10aGlzO3JldHVybiB0aGlzLkIuQShmdW5jdGlvbihjLGQpe3JldHVybiBhKG5ldyBQKGQsYi5rYy5HKGMpKSl9KX07UC5wcm90b3R5cGUuZm9yRWFjaD1QLnByb3RvdHlwZS5mb3JFYWNoO1AucHJvdG90eXBlLnNiPWZ1bmN0aW9uKCl7eChcIkZpcmViYXNlLkRhdGFTbmFwc2hvdC5oYXNDaGlsZHJlblwiLDAsMCxhcmd1bWVudHMubGVuZ3RoKTtyZXR1cm4gdGhpcy5CLlAoKT8hMTohdGhpcy5CLmYoKX07UC5wcm90b3R5cGUuaGFzQ2hpbGRyZW49UC5wcm90b3R5cGUuc2I7XHJcblAucHJvdG90eXBlLm5hbWU9ZnVuY3Rpb24oKXt4KFwiRmlyZWJhc2UuRGF0YVNuYXBzaG90Lm5hbWVcIiwwLDAsYXJndW1lbnRzLmxlbmd0aCk7cmV0dXJuIHRoaXMua2MubmFtZSgpfTtQLnByb3RvdHlwZS5uYW1lPVAucHJvdG90eXBlLm5hbWU7UC5wcm90b3R5cGUuJGI9ZnVuY3Rpb24oKXt4KFwiRmlyZWJhc2UuRGF0YVNuYXBzaG90Lm51bUNoaWxkcmVuXCIsMCwwLGFyZ3VtZW50cy5sZW5ndGgpO3JldHVybiB0aGlzLkIuJGIoKX07UC5wcm90b3R5cGUubnVtQ2hpbGRyZW49UC5wcm90b3R5cGUuJGI7UC5wcm90b3R5cGUuVWM9ZnVuY3Rpb24oKXt4KFwiRmlyZWJhc2UuRGF0YVNuYXBzaG90LnJlZlwiLDAsMCxhcmd1bWVudHMubGVuZ3RoKTtyZXR1cm4gdGhpcy5rY307UC5wcm90b3R5cGUucmVmPVAucHJvdG90eXBlLlVjO2Z1bmN0aW9uIHJjKGEpe3YoXCJhcnJheVwiPT1kYShhKSYmMDxhLmxlbmd0aCxcIlJlcXVpcmVzIGEgbm9uLWVtcHR5IGFycmF5XCIpO3RoaXMuRmQ9YTt0aGlzLndiPXt9fXJjLnByb3RvdHlwZS5iZD1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz10aGlzLndiW2FdfHxbXSxkPTA7ZDxjLmxlbmd0aDtkKyspY1tkXS5iYS5hcHBseShjW2RdLlksQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpKX07cmMucHJvdG90eXBlLmZiPWZ1bmN0aW9uKGEsYixjKXtzYyh0aGlzLGEpO3RoaXMud2JbYV09dGhpcy53YlthXXx8W107dGhpcy53YlthXS5wdXNoKHtiYTpiLFk6Y30pOyhhPXRoaXMuamQoYSkpJiZiLmFwcGx5KGMsYSl9O3JjLnByb3RvdHlwZS55Yj1mdW5jdGlvbihhLGIsYyl7c2ModGhpcyxhKTthPXRoaXMud2JbYV18fFtdO2Zvcih2YXIgZD0wO2Q8YS5sZW5ndGg7ZCsrKWlmKGFbZF0uYmE9PT1iJiYoIWN8fGM9PT1hW2RdLlkpKXthLnNwbGljZShkLDEpO2JyZWFrfX07XHJcbmZ1bmN0aW9uIHNjKGEsYil7dih5YihhLkZkLGZ1bmN0aW9uKGEpe3JldHVybiBhPT09Yn0pLFwiVW5rbm93biBldmVudDogXCIrYil9O2Z1bmN0aW9uIHRjKCl7cmMuY2FsbCh0aGlzLFtcInZpc2libGVcIl0pO3ZhciBhLGI7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudCYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyJiYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudC5oaWRkZW4/KGI9XCJ2aXNpYmlsaXR5Y2hhbmdlXCIsYT1cImhpZGRlblwiKTpcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50Lm1vekhpZGRlbj8oYj1cIm1venZpc2liaWxpdHljaGFuZ2VcIixhPVwibW96SGlkZGVuXCIpOlwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQubXNIaWRkZW4/KGI9XCJtc3Zpc2liaWxpdHljaGFuZ2VcIixhPVwibXNIaWRkZW5cIik6XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudC53ZWJraXRIaWRkZW4mJihiPVwid2Via2l0dmlzaWJpbGl0eWNoYW5nZVwiLGE9XCJ3ZWJraXRIaWRkZW5cIikpO3RoaXMubGI9ITA7aWYoYil7dmFyIGM9dGhpcztkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKGIsXHJcbmZ1bmN0aW9uKCl7dmFyIGI9IWRvY3VtZW50W2FdO2IhPT1jLmxiJiYoYy5sYj1iLGMuYmQoXCJ2aXNpYmxlXCIsYikpfSwhMSl9fWphKHRjLHJjKTtjYSh0Yyk7dGMucHJvdG90eXBlLmpkPWZ1bmN0aW9uKGEpe3YoXCJ2aXNpYmxlXCI9PT1hLFwiVW5rbm93biBldmVudCB0eXBlOiBcIithKTtyZXR1cm5bdGhpcy5sYl19O2Z1bmN0aW9uIHVjKCl7cmMuY2FsbCh0aGlzLFtcIm9ubGluZVwiXSk7dGhpcy5DYj0hMDtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIHdpbmRvdyYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcil7dmFyIGE9dGhpczt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm9ubGluZVwiLGZ1bmN0aW9uKCl7YS5DYnx8YS5iZChcIm9ubGluZVwiLCEwKTthLkNiPSEwfSwhMSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvZmZsaW5lXCIsZnVuY3Rpb24oKXthLkNiJiZhLmJkKFwib25saW5lXCIsITEpO2EuQ2I9ITF9LCExKX19amEodWMscmMpO2NhKHVjKTt1Yy5wcm90b3R5cGUuamQ9ZnVuY3Rpb24oYSl7dihcIm9ubGluZVwiPT09YSxcIlVua25vd24gZXZlbnQgdHlwZTogXCIrYSk7cmV0dXJuW3RoaXMuQ2JdfTtmdW5jdGlvbiAkYihhLGIpe2Zvcih2YXIgYyBpbiBhKWIuY2FsbCh2b2lkIDAsYVtjXSxjLGEpfWZ1bmN0aW9uIHZjKGEpe3ZhciBiPVtdLGM9MCxkO2ZvcihkIGluIGEpYltjKytdPWQ7cmV0dXJuIGJ9ZnVuY3Rpb24gd2MoYSl7dmFyIGI9e30sYztmb3IoYyBpbiBhKWJbY109YVtjXTtyZXR1cm4gYn07ZnVuY3Rpb24geGMoKXt0aGlzLm9iPXt9fWZ1bmN0aW9uIHljKGEsYixjKXtuKGMpfHwoYz0xKTtBKGEub2IsYil8fChhLm9iW2JdPTApO2Eub2JbYl0rPWN9eGMucHJvdG90eXBlLmdldD1mdW5jdGlvbigpe3JldHVybiB3Yyh0aGlzLm9iKX07ZnVuY3Rpb24gemMoYSl7dGhpcy5IZD1hO3RoaXMuV2I9bnVsbH16Yy5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5IZC5nZXQoKSxiPXdjKGEpO2lmKHRoaXMuV2IpZm9yKHZhciBjIGluIHRoaXMuV2IpYltjXS09dGhpcy5XYltjXTt0aGlzLldiPWE7cmV0dXJuIGJ9O2Z1bmN0aW9uIEFjKGEsYil7dGhpcy5aYz17fTt0aGlzLnFjPW5ldyB6YyhhKTt0aGlzLnU9YjtzZXRUaW1lb3V0KHIodGhpcy5zZCx0aGlzKSwxMCs2RTQqTWF0aC5yYW5kb20oKSl9QWMucHJvdG90eXBlLnNkPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5xYy5nZXQoKSxiPXt9LGM9ITEsZDtmb3IoZCBpbiBhKTA8YVtkXSYmQSh0aGlzLlpjLGQpJiYoYltkXT1hW2RdLGM9ITApO2MmJihhPXRoaXMudSxhLlMmJihiPXtjOmJ9LGEuZShcInJlcG9ydFN0YXRzXCIsYiksYS5HYShcInNcIixiKSkpO3NldFRpbWVvdXQocih0aGlzLnNkLHRoaXMpLDZFNSpNYXRoLnJhbmRvbSgpKX07dmFyIEJjPXt9LENjPXt9O2Z1bmN0aW9uIERjKGEpe2E9YS50b1N0cmluZygpO0JjW2FdfHwoQmNbYV09bmV3IHhjKTtyZXR1cm4gQmNbYV19ZnVuY3Rpb24gRWMoYSxiKXt2YXIgYz1hLnRvU3RyaW5nKCk7Q2NbY118fChDY1tjXT1iKCkpO3JldHVybiBDY1tjXX07dmFyIEZjPW51bGw7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNb3pXZWJTb2NrZXQ/RmM9TW96V2ViU29ja2V0OlwidW5kZWZpbmVkXCIhPT10eXBlb2YgV2ViU29ja2V0JiYoRmM9V2ViU29ja2V0KTtmdW5jdGlvbiBRKGEsYixjKXt0aGlzLkFjPWE7dGhpcy5lPVFiKHRoaXMuQWMpO3RoaXMuZnJhbWVzPXRoaXMudWI9bnVsbDt0aGlzLmFkPTA7dGhpcy5hYT1EYyhiKTt0aGlzLlVhPShiLm5jP1wid3NzOi8vXCI6XCJ3czovL1wiKStiLmhhK1wiLy53cz92PTVcIjtiLmhvc3QhPT1iLmhhJiYodGhpcy5VYT10aGlzLlVhK1wiJm5zPVwiK2IuWWIpO2MmJih0aGlzLlVhPXRoaXMuVWErXCImcz1cIitjKX12YXIgR2M7XHJcblEucHJvdG90eXBlLm9wZW49ZnVuY3Rpb24oYSxiKXt0aGlzLmphPWI7dGhpcy5UZD1hO3RoaXMuZShcIldlYnNvY2tldCBjb25uZWN0aW5nIHRvIFwiK3RoaXMuVWEpO3RoaXMuVz1uZXcgRmModGhpcy5VYSk7dGhpcy5wYj0hMTttYi5zZXQoXCJwcmV2aW91c193ZWJzb2NrZXRfZmFpbHVyZVwiLCEwKTt2YXIgYz10aGlzO3RoaXMuVy5vbm9wZW49ZnVuY3Rpb24oKXtjLmUoXCJXZWJzb2NrZXQgY29ubmVjdGVkLlwiKTtjLnBiPSEwfTt0aGlzLlcub25jbG9zZT1mdW5jdGlvbigpe2MuZShcIldlYnNvY2tldCBjb25uZWN0aW9uIHdhcyBkaXNjb25uZWN0ZWQuXCIpO2MuVz1udWxsO2MuT2EoKX07dGhpcy5XLm9ubWVzc2FnZT1mdW5jdGlvbihhKXtpZihudWxsIT09Yy5XKWlmKGE9YS5kYXRhLHljKGMuYWEsXCJieXRlc19yZWNlaXZlZFwiLGEubGVuZ3RoKSxIYyhjKSxudWxsIT09Yy5mcmFtZXMpSWMoYyxhKTtlbHNle2E6e3YobnVsbD09PWMuZnJhbWVzLFwiV2UgYWxyZWFkeSBoYXZlIGEgZnJhbWUgYnVmZmVyXCIpO1xyXG5pZig2Pj1hLmxlbmd0aCl7dmFyIGI9TnVtYmVyKGEpO2lmKCFpc05hTihiKSl7Yy5hZD1iO2MuZnJhbWVzPVtdO2E9bnVsbDticmVhayBhfX1jLmFkPTE7Yy5mcmFtZXM9W119bnVsbCE9PWEmJkljKGMsYSl9fTt0aGlzLlcub25lcnJvcj1mdW5jdGlvbihhKXtjLmUoXCJXZWJTb2NrZXQgZXJyb3IuICBDbG9zaW5nIGNvbm5lY3Rpb24uXCIpOyhhPWEubWVzc2FnZXx8YS5kYXRhKSYmYy5lKGEpO2MuT2EoKX19O1EucHJvdG90eXBlLnN0YXJ0PWZ1bmN0aW9uKCl7fTtRLmlzQXZhaWxhYmxlPWZ1bmN0aW9uKCl7dmFyIGE9ITE7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBuYXZpZ2F0b3ImJm5hdmlnYXRvci51c2VyQWdlbnQpe3ZhciBiPW5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0FuZHJvaWQgKFswLTldezAsfVxcLlswLTldezAsfSkvKTtiJiYxPGIubGVuZ3RoJiY0LjQ+cGFyc2VGbG9hdChiWzFdKSYmKGE9ITApfXJldHVybiFhJiZudWxsIT09RmMmJiFHY307XHJcblEucmVzcG9uc2VzUmVxdWlyZWRUb0JlSGVhbHRoeT0yO1EuaGVhbHRoeVRpbWVvdXQ9M0U0O2g9US5wcm90b3R5cGU7aC5MYz1mdW5jdGlvbigpe21iLnJlbW92ZShcInByZXZpb3VzX3dlYnNvY2tldF9mYWlsdXJlXCIpfTtmdW5jdGlvbiBJYyhhLGIpe2EuZnJhbWVzLnB1c2goYik7aWYoYS5mcmFtZXMubGVuZ3RoPT1hLmFkKXt2YXIgYz1hLmZyYW1lcy5qb2luKFwiXCIpO2EuZnJhbWVzPW51bGw7Yz1xYShjKTthLlRkKGMpfX1oLnNlbmQ9ZnVuY3Rpb24oYSl7SGModGhpcyk7YT11KGEpO3ljKHRoaXMuYWEsXCJieXRlc19zZW50XCIsYS5sZW5ndGgpO2E9WWIoYSwxNjM4NCk7MTxhLmxlbmd0aCYmdGhpcy5XLnNlbmQoU3RyaW5nKGEubGVuZ3RoKSk7Zm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspdGhpcy5XLnNlbmQoYVtiXSl9O1xyXG5oLk1iPWZ1bmN0aW9uKCl7dGhpcy5NYT0hMDt0aGlzLnViJiYoY2xlYXJJbnRlcnZhbCh0aGlzLnViKSx0aGlzLnViPW51bGwpO3RoaXMuVyYmKHRoaXMuVy5jbG9zZSgpLHRoaXMuVz1udWxsKX07aC5PYT1mdW5jdGlvbigpe3RoaXMuTWF8fCh0aGlzLmUoXCJXZWJTb2NrZXQgaXMgY2xvc2luZyBpdHNlbGZcIiksdGhpcy5NYigpLHRoaXMuamEmJih0aGlzLmphKHRoaXMucGIpLHRoaXMuamE9bnVsbCkpfTtoLmNsb3NlPWZ1bmN0aW9uKCl7dGhpcy5NYXx8KHRoaXMuZShcIldlYlNvY2tldCBpcyBiZWluZyBjbG9zZWRcIiksdGhpcy5NYigpKX07ZnVuY3Rpb24gSGMoYSl7Y2xlYXJJbnRlcnZhbChhLnViKTthLnViPXNldEludGVydmFsKGZ1bmN0aW9uKCl7YS5XJiZhLlcuc2VuZChcIjBcIik7SGMoYSl9LDQ1RTMpfTtmdW5jdGlvbiBKYyhhKXt0aGlzLlBjPWE7dGhpcy5nYz1bXTt0aGlzLlZhPTA7dGhpcy56Yz0tMTt0aGlzLk5hPW51bGx9ZnVuY3Rpb24gS2MoYSxiLGMpe2EuemM9YjthLk5hPWM7YS56YzxhLlZhJiYoYS5OYSgpLGEuTmE9bnVsbCl9ZnVuY3Rpb24gTGMoYSxiLGMpe2ZvcihhLmdjW2JdPWM7YS5nY1thLlZhXTspe3ZhciBkPWEuZ2NbYS5WYV07ZGVsZXRlIGEuZ2NbYS5WYV07Zm9yKHZhciBlPTA7ZTxkLmxlbmd0aDsrK2UpaWYoZFtlXSl7dmFyIGY9YTtlYyhmdW5jdGlvbigpe2YuUGMoZFtlXSl9KX1pZihhLlZhPT09YS56Yyl7YS5OYSYmKGNsZWFyVGltZW91dChhLk5hKSxhLk5hKCksYS5OYT1udWxsKTticmVha31hLlZhKyt9fTtmdW5jdGlvbiBNYygpe3RoaXMuc2V0PXt9fWg9TWMucHJvdG90eXBlO2guYWRkPWZ1bmN0aW9uKGEsYil7dGhpcy5zZXRbYV09bnVsbCE9PWI/YjohMH07aC5jb250YWlucz1mdW5jdGlvbihhKXtyZXR1cm4gQSh0aGlzLnNldCxhKX07aC5nZXQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuY29udGFpbnMoYSk/dGhpcy5zZXRbYV06dm9pZCAwfTtoLnJlbW92ZT1mdW5jdGlvbihhKXtkZWxldGUgdGhpcy5zZXRbYV19O2guZj1mdW5jdGlvbigpe3ZhciBhO2E6e2E9dGhpcy5zZXQ7Zm9yKHZhciBiIGluIGEpe2E9ITE7YnJlYWsgYX1hPSEwfXJldHVybiBhfTtoLmNvdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5zZXQsYj0wLGM7Zm9yKGMgaW4gYSliKys7cmV0dXJuIGJ9O2Z1bmN0aW9uIFIoYSxiKXskYihhLnNldCxmdW5jdGlvbihhLGQpe2IoZCxhKX0pfWgua2V5cz1mdW5jdGlvbigpe3ZhciBhPVtdOyRiKHRoaXMuc2V0LGZ1bmN0aW9uKGIsYyl7YS5wdXNoKGMpfSk7cmV0dXJuIGF9O2Z1bmN0aW9uIE5jKGEsYixjKXt0aGlzLkFjPWE7dGhpcy5lPVFiKGEpO3RoaXMuYWE9RGMoYik7dGhpcy5wYz1jO3RoaXMucGI9ITE7dGhpcy5RYj1mdW5jdGlvbihhKXtiLmhvc3QhPT1iLmhhJiYoYS5ucz1iLlliKTt2YXIgYz1bXSxmO2ZvcihmIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShmKSYmYy5wdXNoKGYrXCI9XCIrYVtmXSk7cmV0dXJuKGIubmM/XCJodHRwczovL1wiOlwiaHR0cDovL1wiKStiLmhhK1wiLy5scD9cIitjLmpvaW4oXCImXCIpfX12YXIgT2MsUGM7XHJcbk5jLnByb3RvdHlwZS5vcGVuPWZ1bmN0aW9uKGEsYil7dGhpcy5kZD0wO3RoaXMuVD1iO3RoaXMub2Q9bmV3IEpjKGEpO3RoaXMuTWE9ITE7dmFyIGM9dGhpczt0aGlzLkphPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtjLmUoXCJUaW1lZCBvdXQgdHJ5aW5nIHRvIGNvbm5lY3QuXCIpO2MuT2EoKTtjLkphPW51bGx9LDNFNCk7VGIoZnVuY3Rpb24oKXtpZighYy5NYSl7Yy5tYT1uZXcgUWMoZnVuY3Rpb24oYSxiLGQsayxsKXt5YyhjLmFhLFwiYnl0ZXNfcmVjZWl2ZWRcIix1KGFyZ3VtZW50cykubGVuZ3RoKTtpZihjLm1hKWlmKGMuSmEmJihjbGVhclRpbWVvdXQoYy5KYSksYy5KYT1udWxsKSxjLnBiPSEwLFwic3RhcnRcIj09YSljLmlkPWIsYy5yZD1kO2Vsc2UgaWYoXCJjbG9zZVwiPT09YSliPyhjLm1hLm9jPSExLEtjKGMub2QsYixmdW5jdGlvbigpe2MuT2EoKX0pKTpjLk9hKCk7ZWxzZSB0aHJvdyBFcnJvcihcIlVucmVjb2duaXplZCBjb21tYW5kIHJlY2VpdmVkOiBcIithKTt9LGZ1bmN0aW9uKGEsXHJcbmIpe3ljKGMuYWEsXCJieXRlc19yZWNlaXZlZFwiLHUoYXJndW1lbnRzKS5sZW5ndGgpO0xjKGMub2QsYSxiKX0sZnVuY3Rpb24oKXtjLk9hKCl9LGMuUWIpO3ZhciBhPXtzdGFydDpcInRcIn07YS5zZXI9TWF0aC5mbG9vcigxRTgqTWF0aC5yYW5kb20oKSk7Yy5tYS5zYyYmKGEuY2I9Yy5tYS5zYyk7YS52PVwiNVwiO2MucGMmJihhLnM9Yy5wYyk7YT1jLlFiKGEpO2MuZShcIkNvbm5lY3RpbmcgdmlhIGxvbmctcG9sbCB0byBcIithKTtSYyhjLm1hLGEsZnVuY3Rpb24oKXt9KX19KX07XHJcbk5jLnByb3RvdHlwZS5zdGFydD1mdW5jdGlvbigpe3ZhciBhPXRoaXMubWEsYj10aGlzLnJkO2EuUmQ9dGhpcy5pZDthLlNkPWI7Zm9yKGEudmM9ITA7U2MoYSk7KTthPXRoaXMuaWQ7Yj10aGlzLnJkO3RoaXMuZWI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTt2YXIgYz17ZGZyYW1lOlwidFwifTtjLmlkPWE7Yy5wdz1iO3RoaXMuZWIuc3JjPXRoaXMuUWIoYyk7dGhpcy5lYi5zdHlsZS5kaXNwbGF5PVwibm9uZVwiO2RvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5lYil9O05jLmlzQXZhaWxhYmxlPWZ1bmN0aW9uKCl7cmV0dXJuIVBjJiYhKFwib2JqZWN0XCI9PT10eXBlb2Ygd2luZG93JiZ3aW5kb3cuY2hyb21lJiZ3aW5kb3cuY2hyb21lLmV4dGVuc2lvbiYmIS9eY2hyb21lLy50ZXN0KHdpbmRvdy5sb2NhdGlvbi5ocmVmKSkmJiEoXCJvYmplY3RcIj09PXR5cGVvZiBXaW5kb3dzJiZcIm9iamVjdFwiPT09dHlwZW9mIFdpbmRvd3MuaGUpJiYoT2N8fCEwKX07aD1OYy5wcm90b3R5cGU7XHJcbmguTGM9ZnVuY3Rpb24oKXt9O2guTWI9ZnVuY3Rpb24oKXt0aGlzLk1hPSEwO3RoaXMubWEmJih0aGlzLm1hLmNsb3NlKCksdGhpcy5tYT1udWxsKTt0aGlzLmViJiYoZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLmViKSx0aGlzLmViPW51bGwpO3RoaXMuSmEmJihjbGVhclRpbWVvdXQodGhpcy5KYSksdGhpcy5KYT1udWxsKX07aC5PYT1mdW5jdGlvbigpe3RoaXMuTWF8fCh0aGlzLmUoXCJMb25ncG9sbCBpcyBjbG9zaW5nIGl0c2VsZlwiKSx0aGlzLk1iKCksdGhpcy5UJiYodGhpcy5UKHRoaXMucGIpLHRoaXMuVD1udWxsKSl9O2guY2xvc2U9ZnVuY3Rpb24oKXt0aGlzLk1hfHwodGhpcy5lKFwiTG9uZ3BvbGwgaXMgYmVpbmcgY2xvc2VkLlwiKSx0aGlzLk1iKCkpfTtcclxuaC5zZW5kPWZ1bmN0aW9uKGEpe2E9dShhKTt5Yyh0aGlzLmFhLFwiYnl0ZXNfc2VudFwiLGEubGVuZ3RoKTthPXJhKGEpO2E9SmIoYSwhMCk7YT1ZYihhLDE4NDApO2Zvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz10aGlzLm1hO2MuR2IucHVzaCh7YWU6dGhpcy5kZCxmZTphLmxlbmd0aCxmZDphW2JdfSk7Yy52YyYmU2MoYyk7dGhpcy5kZCsrfX07XHJcbmZ1bmN0aW9uIFFjKGEsYixjLGQpe3RoaXMuUWI9ZDt0aGlzLmphPWM7dGhpcy5SYz1uZXcgTWM7dGhpcy5HYj1bXTt0aGlzLkJjPU1hdGguZmxvb3IoMUU4Kk1hdGgucmFuZG9tKCkpO3RoaXMub2M9ITA7dGhpcy5zYz1LYigpO3dpbmRvd1tcInBMUENvbW1hbmRcIit0aGlzLnNjXT1hO3dpbmRvd1tcInBSVExQQ0JcIit0aGlzLnNjXT1iO2E9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTthLnN0eWxlLmRpc3BsYXk9XCJub25lXCI7aWYoZG9jdW1lbnQuYm9keSl7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTt0cnl7YS5jb250ZW50V2luZG93LmRvY3VtZW50fHxLKFwiTm8gSUUgZG9tYWluIHNldHRpbmcgcmVxdWlyZWRcIil9Y2F0Y2goZSl7YS5zcmM9XCJqYXZhc2NyaXB0OnZvaWQoKGZ1bmN0aW9uKCl7ZG9jdW1lbnQub3BlbigpO2RvY3VtZW50LmRvbWFpbj0nXCIrZG9jdW1lbnQuZG9tYWluK1wiJztkb2N1bWVudC5jbG9zZSgpO30pKCkpXCJ9fWVsc2UgdGhyb3dcIkRvY3VtZW50IGJvZHkgaGFzIG5vdCBpbml0aWFsaXplZC4gV2FpdCB0byBpbml0aWFsaXplIEZpcmViYXNlIHVudGlsIGFmdGVyIHRoZSBkb2N1bWVudCBpcyByZWFkeS5cIjtcclxuYS5jb250ZW50RG9jdW1lbnQ/YS5CYT1hLmNvbnRlbnREb2N1bWVudDphLmNvbnRlbnRXaW5kb3c/YS5CYT1hLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ6YS5kb2N1bWVudCYmKGEuQmE9YS5kb2N1bWVudCk7dGhpcy5aPWE7YT1cIlwiO3RoaXMuWi5zcmMmJlwiamF2YXNjcmlwdDpcIj09PXRoaXMuWi5zcmMuc3Vic3RyKDAsMTEpJiYoYT0nPHNjcmlwdD5kb2N1bWVudC5kb21haW49XCInK2RvY3VtZW50LmRvbWFpbisnXCI7XFx4M2Mvc2NyaXB0PicpO2E9XCI8aHRtbD48Ym9keT5cIithK1wiPC9ib2R5PjwvaHRtbD5cIjt0cnl7dGhpcy5aLkJhLm9wZW4oKSx0aGlzLlouQmEud3JpdGUoYSksdGhpcy5aLkJhLmNsb3NlKCl9Y2F0Y2goZil7SyhcImZyYW1lIHdyaXRpbmcgZXhjZXB0aW9uXCIpLGYuc3RhY2smJksoZi5zdGFjayksSyhmKX19XHJcblFjLnByb3RvdHlwZS5jbG9zZT1mdW5jdGlvbigpe3RoaXMudmM9ITE7aWYodGhpcy5aKXt0aGlzLlouQmEuYm9keS5pbm5lckhUTUw9XCJcIjt2YXIgYT10aGlzO3NldFRpbWVvdXQoZnVuY3Rpb24oKXtudWxsIT09YS5aJiYoZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChhLlopLGEuWj1udWxsKX0sMCl9dmFyIGI9dGhpcy5qYTtiJiYodGhpcy5qYT1udWxsLGIoKSl9O1xyXG5mdW5jdGlvbiBTYyhhKXtpZihhLnZjJiZhLm9jJiZhLlJjLmNvdW50KCk8KDA8YS5HYi5sZW5ndGg/MjoxKSl7YS5CYysrO3ZhciBiPXt9O2IuaWQ9YS5SZDtiLnB3PWEuU2Q7Yi5zZXI9YS5CYztmb3IodmFyIGI9YS5RYihiKSxjPVwiXCIsZD0wOzA8YS5HYi5sZW5ndGg7KWlmKDE4NzA+PWEuR2JbMF0uZmQubGVuZ3RoKzMwK2MubGVuZ3RoKXt2YXIgZT1hLkdiLnNoaWZ0KCksYz1jK1wiJnNlZ1wiK2QrXCI9XCIrZS5hZStcIiZ0c1wiK2QrXCI9XCIrZS5mZStcIiZkXCIrZCtcIj1cIitlLmZkO2QrK31lbHNlIGJyZWFrO1ZjKGEsYitjLGEuQmMpO3JldHVybiEwfXJldHVybiExfWZ1bmN0aW9uIFZjKGEsYixjKXtmdW5jdGlvbiBkKCl7YS5SYy5yZW1vdmUoYyk7U2MoYSl9YS5SYy5hZGQoYyk7dmFyIGU9c2V0VGltZW91dChkLDI1RTMpO1JjKGEsYixmdW5jdGlvbigpe2NsZWFyVGltZW91dChlKTtkKCl9KX1cclxuZnVuY3Rpb24gUmMoYSxiLGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0cnl7aWYoYS5vYyl7dmFyIGQ9YS5aLkJhLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7ZC50eXBlPVwidGV4dC9qYXZhc2NyaXB0XCI7ZC5hc3luYz0hMDtkLnNyYz1iO2Qub25sb2FkPWQub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7dmFyIGE9ZC5yZWFkeVN0YXRlO2EmJlwibG9hZGVkXCIhPT1hJiZcImNvbXBsZXRlXCIhPT1hfHwoZC5vbmxvYWQ9ZC5vbnJlYWR5c3RhdGVjaGFuZ2U9bnVsbCxkLnBhcmVudE5vZGUmJmQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkKSxjKCkpfTtkLm9uZXJyb3I9ZnVuY3Rpb24oKXtLKFwiTG9uZy1wb2xsIHNjcmlwdCBmYWlsZWQgdG8gbG9hZDogXCIrYik7YS5vYz0hMTthLmNsb3NlKCl9O2EuWi5CYS5ib2R5LmFwcGVuZENoaWxkKGQpfX1jYXRjaChlKXt9fSwxKX07ZnVuY3Rpb24gV2MoYSl7WGModGhpcyxhKX12YXIgWWM9W05jLFFdO2Z1bmN0aW9uIFhjKGEsYil7dmFyIGM9USYmUS5pc0F2YWlsYWJsZSgpLGQ9YyYmIShtYi5uZHx8ITA9PT1tYi5nZXQoXCJwcmV2aW91c193ZWJzb2NrZXRfZmFpbHVyZVwiKSk7Yi5nZSYmKGN8fEwoXCJ3c3M6Ly8gVVJMIHVzZWQsIGJ1dCBicm93c2VyIGlzbid0IGtub3duIHRvIHN1cHBvcnQgd2Vic29ja2V0cy4gIFRyeWluZyBhbnl3YXkuXCIpLGQ9ITApO2lmKGQpYS5OYj1bUV07ZWxzZXt2YXIgZT1hLk5iPVtdO1piKFljLGZ1bmN0aW9uKGEsYil7YiYmYi5pc0F2YWlsYWJsZSgpJiZlLnB1c2goYil9KX19ZnVuY3Rpb24gWmMoYSl7aWYoMDxhLk5iLmxlbmd0aClyZXR1cm4gYS5OYlswXTt0aHJvdyBFcnJvcihcIk5vIHRyYW5zcG9ydHMgYXZhaWxhYmxlXCIpO307ZnVuY3Rpb24gJGMoYSxiLGMsZCxlLGYpe3RoaXMuaWQ9YTt0aGlzLmU9UWIoXCJjOlwiK3RoaXMuaWQrXCI6XCIpO3RoaXMuUGM9Yzt0aGlzLkJiPWQ7dGhpcy5UPWU7dGhpcy5PYz1mO3RoaXMuTj1iO3RoaXMuZmM9W107dGhpcy5jZD0wO3RoaXMuQWQ9bmV3IFdjKGIpO3RoaXMubmE9MDt0aGlzLmUoXCJDb25uZWN0aW9uIGNyZWF0ZWRcIik7YWQodGhpcyl9XHJcbmZ1bmN0aW9uIGFkKGEpe3ZhciBiPVpjKGEuQWQpO2EuSz1uZXcgYihcImM6XCIrYS5pZCtcIjpcIithLmNkKyssYS5OKTthLlRjPWIucmVzcG9uc2VzUmVxdWlyZWRUb0JlSGVhbHRoeXx8MDt2YXIgYz1iZChhLGEuSyksZD1jZChhLGEuSyk7YS5PYj1hLks7YS5MYj1hLks7YS53PW51bGw7YS5hYj0hMTtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YS5LJiZhLksub3BlbihjLGQpfSwwKTtiPWIuaGVhbHRoeVRpbWVvdXR8fDA7MDxiJiYoYS5WYj1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YS5WYj1udWxsO2EuYWJ8fChhLmUoXCJDbG9zaW5nIHVuaGVhbHRoeSBjb25uZWN0aW9uIGFmdGVyIHRpbWVvdXQuXCIpLGEuY2xvc2UoKSl9LGIpKX1cclxuZnVuY3Rpb24gY2QoYSxiKXtyZXR1cm4gZnVuY3Rpb24oYyl7Yj09PWEuSz8oYS5LPW51bGwsY3x8MCE9PWEubmE/MT09PWEubmEmJmEuZShcIlJlYWx0aW1lIGNvbm5lY3Rpb24gbG9zdC5cIik6KGEuZShcIlJlYWx0aW1lIGNvbm5lY3Rpb24gZmFpbGVkLlwiKSxcInMtXCI9PT1hLk4uaGEuc3Vic3RyKDAsMikmJihtYi5yZW1vdmUoXCJob3N0OlwiK2EuTi5ob3N0KSxhLk4uaGE9YS5OLmhvc3QpKSxhLmNsb3NlKCkpOmI9PT1hLnc/KGEuZShcIlNlY29uZGFyeSBjb25uZWN0aW9uIGxvc3QuXCIpLGM9YS53LGEudz1udWxsLGEuT2IhPT1jJiZhLkxiIT09Y3x8YS5jbG9zZSgpKTphLmUoXCJjbG9zaW5nIGFuIG9sZCBjb25uZWN0aW9uXCIpfX1cclxuZnVuY3Rpb24gYmQoYSxiKXtyZXR1cm4gZnVuY3Rpb24oYyl7aWYoMiE9YS5uYSlpZihiPT09YS5MYil7dmFyIGQ9WGIoXCJ0XCIsYyk7Yz1YYihcImRcIixjKTtpZihcImNcIj09ZCl7aWYoZD1YYihcInRcIixjKSxcImRcImluIGMpaWYoYz1jLmQsXCJoXCI9PT1kKXt2YXIgZD1jLnRzLGU9Yy52LGY9Yy5oO2EucGM9Yy5zO3BiKGEuTixmKTswPT1hLm5hJiYoYS5LLnN0YXJ0KCksZGQoYSxhLkssZCksXCI1XCIhPT1lJiZMKFwiUHJvdG9jb2wgdmVyc2lvbiBtaXNtYXRjaCBkZXRlY3RlZFwiKSxjPWEuQWQsKGM9MTxjLk5iLmxlbmd0aD9jLk5iWzFdOm51bGwpJiZlZChhLGMpKX1lbHNlIGlmKFwiblwiPT09ZCl7YS5lKFwicmVjdmQgZW5kIHRyYW5zbWlzc2lvbiBvbiBwcmltYXJ5XCIpO2EuTGI9YS53O2ZvcihjPTA7YzxhLmZjLmxlbmd0aDsrK2MpYS5jYyhhLmZjW2NdKTthLmZjPVtdO2ZkKGEpfWVsc2VcInNcIj09PWQ/KGEuZShcIkNvbm5lY3Rpb24gc2h1dGRvd24gY29tbWFuZCByZWNlaXZlZC4gU2h1dHRpbmcgZG93bi4uLlwiKSxcclxuYS5PYyYmKGEuT2MoYyksYS5PYz1udWxsKSxhLlQ9bnVsbCxhLmNsb3NlKCkpOlwiclwiPT09ZD8oYS5lKFwiUmVzZXQgcGFja2V0IHJlY2VpdmVkLiAgTmV3IGhvc3Q6IFwiK2MpLHBiKGEuTixjKSwxPT09YS5uYT9hLmNsb3NlKCk6KGdkKGEpLGFkKGEpKSk6XCJlXCI9PT1kP1JiKFwiU2VydmVyIEVycm9yOiBcIitjKTpcIm9cIj09PWQ/KGEuZShcImdvdCBwb25nIG9uIHByaW1hcnkuXCIpLGhkKGEpLGlkKGEpKTpSYihcIlVua25vd24gY29udHJvbCBwYWNrZXQgY29tbWFuZDogXCIrZCl9ZWxzZVwiZFwiPT1kJiZhLmNjKGMpfWVsc2UgaWYoYj09PWEudylpZihkPVhiKFwidFwiLGMpLGM9WGIoXCJkXCIsYyksXCJjXCI9PWQpXCJ0XCJpbiBjJiYoYz1jLnQsXCJhXCI9PT1jP2pkKGEpOlwiclwiPT09Yz8oYS5lKFwiR290IGEgcmVzZXQgb24gc2Vjb25kYXJ5LCBjbG9zaW5nIGl0XCIpLGEudy5jbG9zZSgpLGEuT2IhPT1hLncmJmEuTGIhPT1hLnd8fGEuY2xvc2UoKSk6XCJvXCI9PT1jJiYoYS5lKFwiZ290IHBvbmcgb24gc2Vjb25kYXJ5LlwiKSxcclxuYS53ZC0tLGpkKGEpKSk7ZWxzZSBpZihcImRcIj09ZClhLmZjLnB1c2goYyk7ZWxzZSB0aHJvdyBFcnJvcihcIlVua25vd24gcHJvdG9jb2wgbGF5ZXI6IFwiK2QpO2Vsc2UgYS5lKFwibWVzc2FnZSBvbiBvbGQgY29ubmVjdGlvblwiKX19JGMucHJvdG90eXBlLnhkPWZ1bmN0aW9uKGEpe2tkKHRoaXMse3Q6XCJkXCIsZDphfSl9O2Z1bmN0aW9uIGZkKGEpe2EuT2I9PT1hLncmJmEuTGI9PT1hLncmJihhLmUoXCJjbGVhbmluZyB1cCBhbmQgcHJvbW90aW5nIGEgY29ubmVjdGlvbjogXCIrYS53LkFjKSxhLks9YS53LGEudz1udWxsKX1cclxuZnVuY3Rpb24gamQoYSl7MD49YS53ZD8oYS5lKFwiU2Vjb25kYXJ5IGNvbm5lY3Rpb24gaXMgaGVhbHRoeS5cIiksYS5hYj0hMCxhLncuTGMoKSxhLncuc3RhcnQoKSxhLmUoXCJzZW5kaW5nIGNsaWVudCBhY2sgb24gc2Vjb25kYXJ5XCIpLGEudy5zZW5kKHt0OlwiY1wiLGQ6e3Q6XCJhXCIsZDp7fX19KSxhLmUoXCJFbmRpbmcgdHJhbnNtaXNzaW9uIG9uIHByaW1hcnlcIiksYS5LLnNlbmQoe3Q6XCJjXCIsZDp7dDpcIm5cIixkOnt9fX0pLGEuT2I9YS53LGZkKGEpKTooYS5lKFwic2VuZGluZyBwaW5nIG9uIHNlY29uZGFyeS5cIiksYS53LnNlbmQoe3Q6XCJjXCIsZDp7dDpcInBcIixkOnt9fX0pKX0kYy5wcm90b3R5cGUuY2M9ZnVuY3Rpb24oYSl7aGQodGhpcyk7dGhpcy5QYyhhKX07ZnVuY3Rpb24gaGQoYSl7YS5hYnx8KGEuVGMtLSwwPj1hLlRjJiYoYS5lKFwiUHJpbWFyeSBjb25uZWN0aW9uIGlzIGhlYWx0aHkuXCIpLGEuYWI9ITAsYS5LLkxjKCkpKX1cclxuZnVuY3Rpb24gZWQoYSxiKXthLnc9bmV3IGIoXCJjOlwiK2EuaWQrXCI6XCIrYS5jZCsrLGEuTixhLnBjKTthLndkPWIucmVzcG9uc2VzUmVxdWlyZWRUb0JlSGVhbHRoeXx8MDthLncub3BlbihiZChhLGEudyksY2QoYSxhLncpKTtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YS53JiYoYS5lKFwiVGltZWQgb3V0IHRyeWluZyB0byB1cGdyYWRlLlwiKSxhLncuY2xvc2UoKSl9LDZFNCl9ZnVuY3Rpb24gZGQoYSxiLGMpe2EuZShcIlJlYWx0aW1lIGNvbm5lY3Rpb24gZXN0YWJsaXNoZWQuXCIpO2EuSz1iO2EubmE9MTthLkJiJiYoYS5CYihjKSxhLkJiPW51bGwpOzA9PT1hLlRjPyhhLmUoXCJQcmltYXJ5IGNvbm5lY3Rpb24gaXMgaGVhbHRoeS5cIiksYS5hYj0hMCk6c2V0VGltZW91dChmdW5jdGlvbigpe2lkKGEpfSw1RTMpfWZ1bmN0aW9uIGlkKGEpe2EuYWJ8fDEhPT1hLm5hfHwoYS5lKFwic2VuZGluZyBwaW5nIG9uIHByaW1hcnkuXCIpLGtkKGEse3Q6XCJjXCIsZDp7dDpcInBcIixkOnt9fX0pKX1cclxuZnVuY3Rpb24ga2QoYSxiKXtpZigxIT09YS5uYSl0aHJvd1wiQ29ubmVjdGlvbiBpcyBub3QgY29ubmVjdGVkXCI7YS5PYi5zZW5kKGIpfSRjLnByb3RvdHlwZS5jbG9zZT1mdW5jdGlvbigpezIhPT10aGlzLm5hJiYodGhpcy5lKFwiQ2xvc2luZyByZWFsdGltZSBjb25uZWN0aW9uLlwiKSx0aGlzLm5hPTIsZ2QodGhpcyksdGhpcy5UJiYodGhpcy5UKCksdGhpcy5UPW51bGwpKX07ZnVuY3Rpb24gZ2QoYSl7YS5lKFwiU2h1dHRpbmcgZG93biBhbGwgY29ubmVjdGlvbnNcIik7YS5LJiYoYS5LLmNsb3NlKCksYS5LPW51bGwpO2EudyYmKGEudy5jbG9zZSgpLGEudz1udWxsKTthLlZiJiYoY2xlYXJUaW1lb3V0KGEuVmIpLGEuVmI9bnVsbCl9O2Z1bmN0aW9uIGxkKGEsYixjLGQsZSxmKXt0aGlzLmlkPW1kKys7dGhpcy5lPVFiKFwicDpcIit0aGlzLmlkK1wiOlwiKTt0aGlzLlJhPSEwO3RoaXMuaWE9e307dGhpcy5VPVtdO3RoaXMuRGI9MDt0aGlzLkFiPVtdO3RoaXMuUz0hMTt0aGlzLnVhPTFFMzt0aGlzLlhiPTNFNTt0aGlzLmRjPWJ8fGJhO3RoaXMuYmM9Y3x8YmE7dGhpcy56Yj1kfHxiYTt0aGlzLlFjPWV8fGJhO3RoaXMuR2M9Znx8YmE7dGhpcy5OPWE7dGhpcy5WYz1udWxsO3RoaXMuS2I9e307dGhpcy4kZD0wO3RoaXMudmI9dGhpcy5LYz1udWxsO25kKHRoaXMsMCk7dGMucmIoKS5mYihcInZpc2libGVcIix0aGlzLlZkLHRoaXMpOy0xPT09YS5ob3N0LmluZGV4T2YoXCJmYmxvY2FsXCIpJiZ1Yy5yYigpLmZiKFwib25saW5lXCIsdGhpcy5VZCx0aGlzKX12YXIgbWQ9MCxvZD0wO2g9bGQucHJvdG90eXBlO1xyXG5oLkdhPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD0rK3RoaXMuJGQ7YT17cjpkLGE6YSxiOmJ9O3RoaXMuZSh1KGEpKTt2KHRoaXMuUyxcInNlbmRSZXF1ZXN0XyBjYWxsIHdoZW4gd2UncmUgbm90IGNvbm5lY3RlZCBub3QgYWxsb3dlZC5cIik7dGhpcy5sYS54ZChhKTtjJiYodGhpcy5LYltkXT1jKX07ZnVuY3Rpb24gcGQoYSxiLGMpe3ZhciBkPWIudG9TdHJpbmcoKSxlPWIucGF0aCgpLnRvU3RyaW5nKCk7YS5pYVtlXT1hLmlhW2VdfHx7fTt2KCFhLmlhW2VdW2RdLFwibGlzdGVuKCkgY2FsbGVkIHR3aWNlIGZvciBzYW1lIHBhdGgvcXVlcnlJZC5cIik7YS5pYVtlXVtkXT17aGI6Yi5oYigpLEQ6Y307YS5TJiZxZChhLGUsZCxiLmhiKCksYyl9XHJcbmZ1bmN0aW9uIHFkKGEsYixjLGQsZSl7YS5lKFwiTGlzdGVuIG9uIFwiK2IrXCIgZm9yIFwiK2MpO3ZhciBmPXtwOmJ9O2Q9dmIoZCxmdW5jdGlvbihhKXtyZXR1cm4gSmEoYSl9KTtcInt9XCIhPT1jJiYoZi5xPWQpO2YuaD1hLkdjKGIpO2EuR2EoXCJsXCIsZixmdW5jdGlvbihkKXthLmUoXCJsaXN0ZW4gcmVzcG9uc2VcIixkKTtkPWQucztcIm9rXCIhPT1kJiZyZChhLGIsYyk7ZSYmZShkKX0pfVxyXG5oLm1iPWZ1bmN0aW9uKGEsYixjKXt0aGlzLkthPXtJZDphLGdkOiExLGJhOmIsU2I6Y307dGhpcy5lKFwiQXV0aGVudGljYXRpbmcgdXNpbmcgY3JlZGVudGlhbDogXCIrdGhpcy5LYSk7c2QodGhpcyk7aWYoIShiPTQwPT1hLmxlbmd0aCkpYTp7dmFyIGQ7dHJ5e3ZhciBlPWEuc3BsaXQoXCIuXCIpO2lmKDMhPT1lLmxlbmd0aCl7Yj0hMTticmVhayBhfXZhciBmO2I6e3RyeXtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGF0b2Ipe2Y9YXRvYihlWzFdKTticmVhayBifX1jYXRjaChnKXtLKFwiYmFzZTY0RGVjb2RlSWZOYXRpdmVTdXBwb3J0IGZhaWxlZDogXCIsZyl9Zj1udWxsfW51bGwhPT1mJiYoZD1xYShmKSl9Y2F0Y2goayl7SyhcImlzQWRtaW5BdXRoVG9rZW5fIGZhaWxlZFwiLGspfWI9XCJvYmplY3RcIj09PXR5cGVvZiBkJiYhMD09PXZhKGQsXCJhZG1pblwiKX1iJiYodGhpcy5lKFwiQWRtaW4gYXV0aCBjcmVkZW50aWFsIGRldGVjdGVkLiAgUmVkdWNpbmcgbWF4IHJlY29ubmVjdCB0aW1lLlwiKSx0aGlzLlhiPVxyXG4zRTQpfTtoLlBiPWZ1bmN0aW9uKGEpe2RlbGV0ZSB0aGlzLkthO3RoaXMuemIoITEpO3RoaXMuUyYmdGhpcy5HYShcInVuYXV0aFwiLHt9LGZ1bmN0aW9uKGIpe2EoYi5zLGIuZCl9KX07ZnVuY3Rpb24gc2QoYSl7dmFyIGI9YS5LYTthLlMmJmImJmEuR2EoXCJhdXRoXCIse2NyZWQ6Yi5JZH0sZnVuY3Rpb24oYyl7dmFyIGQ9Yy5zO2M9Yy5kfHxcImVycm9yXCI7XCJva1wiIT09ZCYmYS5LYT09PWImJmRlbGV0ZSBhLkthO2EuemIoXCJva1wiPT09ZCk7Yi5nZD9cIm9rXCIhPT1kJiZiLlNiJiZiLlNiKGQsYyk6KGIuZ2Q9ITAsYi5iYSYmYi5iYShkLGMpKX0pfWZ1bmN0aW9uIHRkKGEsYixjLGQpe2I9Yi50b1N0cmluZygpO3JkKGEsYixjKSYmYS5TJiZ1ZChhLGIsYyxkKX1mdW5jdGlvbiB1ZChhLGIsYyxkKXthLmUoXCJVbmxpc3RlbiBvbiBcIitiK1wiIGZvciBcIitjKTtiPXtwOmJ9O2Q9dmIoZCxmdW5jdGlvbihhKXtyZXR1cm4gSmEoYSl9KTtcInt9XCIhPT1jJiYoYi5xPWQpO2EuR2EoXCJ1XCIsYil9XHJcbmZ1bmN0aW9uIHZkKGEsYixjLGQpe2EuUz93ZChhLFwib1wiLGIsYyxkKTphLkFiLnB1c2goe1NjOmIsYWN0aW9uOlwib1wiLGRhdGE6YyxEOmR9KX1mdW5jdGlvbiB4ZChhLGIsYyxkKXthLlM/d2QoYSxcIm9tXCIsYixjLGQpOmEuQWIucHVzaCh7U2M6YixhY3Rpb246XCJvbVwiLGRhdGE6YyxEOmR9KX1oLk5jPWZ1bmN0aW9uKGEsYil7dGhpcy5TP3dkKHRoaXMsXCJvY1wiLGEsbnVsbCxiKTp0aGlzLkFiLnB1c2goe1NjOmEsYWN0aW9uOlwib2NcIixkYXRhOm51bGwsRDpifSl9O2Z1bmN0aW9uIHdkKGEsYixjLGQsZSl7Yz17cDpjLGQ6ZH07YS5lKFwib25EaXNjb25uZWN0IFwiK2IsYyk7YS5HYShiLGMsZnVuY3Rpb24oYSl7ZSYmc2V0VGltZW91dChmdW5jdGlvbigpe2UoYS5zLGEuZCl9LDApfSl9aC5wdXQ9ZnVuY3Rpb24oYSxiLGMsZCl7eWQodGhpcyxcInBcIixhLGIsYyxkKX07ZnVuY3Rpb24gemQoYSxiLGMsZCl7eWQoYSxcIm1cIixiLGMsZCx2b2lkIDApfVxyXG5mdW5jdGlvbiB5ZChhLGIsYyxkLGUsZil7Yz17cDpjLGQ6ZH07bihmKSYmKGMuaD1mKTthLlUucHVzaCh7YWN0aW9uOmIsdGQ6YyxEOmV9KTthLkRiKys7Yj1hLlUubGVuZ3RoLTE7YS5TJiZBZChhLGIpfWZ1bmN0aW9uIEFkKGEsYil7dmFyIGM9YS5VW2JdLmFjdGlvbixkPWEuVVtiXS50ZCxlPWEuVVtiXS5EO2EuVVtiXS5YZD1hLlM7YS5HYShjLGQsZnVuY3Rpb24oZCl7YS5lKGMrXCIgcmVzcG9uc2VcIixkKTtkZWxldGUgYS5VW2JdO2EuRGItLTswPT09YS5EYiYmKGEuVT1bXSk7ZSYmZShkLnMsZC5kKX0pfVxyXG5oLmNjPWZ1bmN0aW9uKGEpe2lmKFwiclwiaW4gYSl7dGhpcy5lKFwiZnJvbSBzZXJ2ZXI6IFwiK3UoYSkpO3ZhciBiPWEucixjPXRoaXMuS2JbYl07YyYmKGRlbGV0ZSB0aGlzLktiW2JdLGMoYS5iKSl9ZWxzZXtpZihcImVycm9yXCJpbiBhKXRocm93XCJBIHNlcnZlci1zaWRlIGVycm9yIGhhcyBvY2N1cnJlZDogXCIrYS5lcnJvcjtcImFcImluIGEmJihiPWEuYSxjPWEuYix0aGlzLmUoXCJoYW5kbGVTZXJ2ZXJNZXNzYWdlXCIsYixjKSxcImRcIj09PWI/dGhpcy5kYyhjLnAsYy5kLCExKTpcIm1cIj09PWI/dGhpcy5kYyhjLnAsYy5kLCEwKTpcImNcIj09PWI/QmQodGhpcyxjLnAsYy5xKTpcImFjXCI9PT1iPyhhPWMucyxiPWMuZCxjPXRoaXMuS2EsZGVsZXRlIHRoaXMuS2EsYyYmYy5TYiYmYy5TYihhLGIpLHRoaXMuemIoITEpKTpcInNkXCI9PT1iP3RoaXMuVmM/dGhpcy5WYyhjKTpcIm1zZ1wiaW4gYyYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlJiZjb25zb2xlLmxvZyhcIkZJUkVCQVNFOiBcIitjLm1zZy5yZXBsYWNlKFwiXFxuXCIsXHJcblwiXFxuRklSRUJBU0U6IFwiKSk6UmIoXCJVbnJlY29nbml6ZWQgYWN0aW9uIHJlY2VpdmVkIGZyb20gc2VydmVyOiBcIit1KGIpK1wiXFxuQXJlIHlvdSB1c2luZyB0aGUgbGF0ZXN0IGNsaWVudD9cIikpfX07aC5CYj1mdW5jdGlvbihhKXt0aGlzLmUoXCJjb25uZWN0aW9uIHJlYWR5XCIpO3RoaXMuUz0hMDt0aGlzLnZiPShuZXcgRGF0ZSkuZ2V0VGltZSgpO3RoaXMuUWMoe3NlcnZlclRpbWVPZmZzZXQ6YS0obmV3IERhdGUpLmdldFRpbWUoKX0pO3NkKHRoaXMpO2Zvcih2YXIgYiBpbiB0aGlzLmlhKWZvcih2YXIgYyBpbiB0aGlzLmlhW2JdKWE9dGhpcy5pYVtiXVtjXSxxZCh0aGlzLGIsYyxhLmhiLGEuRCk7Zm9yKGI9MDtiPHRoaXMuVS5sZW5ndGg7YisrKXRoaXMuVVtiXSYmQWQodGhpcyxiKTtmb3IoO3RoaXMuQWIubGVuZ3RoOyliPXRoaXMuQWIuc2hpZnQoKSx3ZCh0aGlzLGIuYWN0aW9uLGIuU2MsYi5kYXRhLGIuRCk7dGhpcy5iYyghMCl9O1xyXG5mdW5jdGlvbiBuZChhLGIpe3YoIWEubGEsXCJTY2hlZHVsaW5nIGEgY29ubmVjdCB3aGVuIHdlJ3JlIGFscmVhZHkgY29ubmVjdGVkL2luZz9cIik7YS5YYSYmY2xlYXJUaW1lb3V0KGEuWGEpO2EuWGE9c2V0VGltZW91dChmdW5jdGlvbigpe2EuWGE9bnVsbDtDZChhKX0sYil9aC5WZD1mdW5jdGlvbihhKXthJiYhdGhpcy5sYiYmdGhpcy51YT09PXRoaXMuWGImJih0aGlzLmUoXCJXaW5kb3cgYmVjYW1lIHZpc2libGUuICBSZWR1Y2luZyBkZWxheS5cIiksdGhpcy51YT0xRTMsdGhpcy5sYXx8bmQodGhpcywwKSk7dGhpcy5sYj1hfTtoLlVkPWZ1bmN0aW9uKGEpe2E/KHRoaXMuZShcIkJyb3dzZXIgd2VudCBvbmxpbmUuICBSZWNvbm5lY3RpbmcuXCIpLHRoaXMudWE9MUUzLHRoaXMuUmE9ITAsdGhpcy5sYXx8bmQodGhpcywwKSk6KHRoaXMuZShcIkJyb3dzZXIgd2VudCBvZmZsaW5lLiAgS2lsbGluZyBjb25uZWN0aW9uOyBkb24ndCByZWNvbm5lY3QuXCIpLHRoaXMuUmE9ITEsdGhpcy5sYSYmdGhpcy5sYS5jbG9zZSgpKX07XHJcbmgucGQ9ZnVuY3Rpb24oKXt0aGlzLmUoXCJkYXRhIGNsaWVudCBkaXNjb25uZWN0ZWRcIik7dGhpcy5TPSExO3RoaXMubGE9bnVsbDtmb3IodmFyIGE9MDthPHRoaXMuVS5sZW5ndGg7YSsrKXt2YXIgYj10aGlzLlVbYV07YiYmXCJoXCJpbiBiLnRkJiZiLlhkJiYoYi5EJiZiLkQoXCJkaXNjb25uZWN0XCIpLGRlbGV0ZSB0aGlzLlVbYV0sdGhpcy5EYi0tKX0wPT09dGhpcy5EYiYmKHRoaXMuVT1bXSk7aWYodGhpcy5SYSl0aGlzLmxiP3RoaXMudmImJigzRTQ8KG5ldyBEYXRlKS5nZXRUaW1lKCktdGhpcy52YiYmKHRoaXMudWE9MUUzKSx0aGlzLnZiPW51bGwpOih0aGlzLmUoXCJXaW5kb3cgaXNuJ3QgdmlzaWJsZS4gIERlbGF5aW5nIHJlY29ubmVjdC5cIiksdGhpcy51YT10aGlzLlhiLHRoaXMuS2M9KG5ldyBEYXRlKS5nZXRUaW1lKCkpLGE9TWF0aC5tYXgoMCx0aGlzLnVhLSgobmV3IERhdGUpLmdldFRpbWUoKS10aGlzLktjKSksYSo9TWF0aC5yYW5kb20oKSx0aGlzLmUoXCJUcnlpbmcgdG8gcmVjb25uZWN0IGluIFwiK1xyXG5hK1wibXNcIiksbmQodGhpcyxhKSx0aGlzLnVhPU1hdGgubWluKHRoaXMuWGIsMS4zKnRoaXMudWEpO2Vsc2UgZm9yKHZhciBjIGluIHRoaXMuS2IpZGVsZXRlIHRoaXMuS2JbY107dGhpcy5iYyghMSl9O2Z1bmN0aW9uIENkKGEpe2lmKGEuUmEpe2EuZShcIk1ha2luZyBhIGNvbm5lY3Rpb24gYXR0ZW1wdFwiKTthLktjPShuZXcgRGF0ZSkuZ2V0VGltZSgpO2EudmI9bnVsbDt2YXIgYj1yKGEuY2MsYSksYz1yKGEuQmIsYSksZD1yKGEucGQsYSksZT1hLmlkK1wiOlwiK29kKys7YS5sYT1uZXcgJGMoZSxhLk4sYixjLGQsZnVuY3Rpb24oYil7TChiK1wiIChcIithLk4udG9TdHJpbmcoKStcIilcIik7YS5SYT0hMX0pfX1oLkxhPWZ1bmN0aW9uKCl7dGhpcy5SYT0hMTt0aGlzLmxhP3RoaXMubGEuY2xvc2UoKToodGhpcy5YYSYmKGNsZWFyVGltZW91dCh0aGlzLlhhKSx0aGlzLlhhPW51bGwpLHRoaXMuUyYmdGhpcy5wZCgpKX07XHJcbmguamI9ZnVuY3Rpb24oKXt0aGlzLlJhPSEwO3RoaXMudWE9MUUzO3RoaXMuU3x8bmQodGhpcywwKX07ZnVuY3Rpb24gQmQoYSxiLGMpe2M9Yz92YihjLGZ1bmN0aW9uKGEpe3JldHVybiBLYShhKX0pLmpvaW4oXCIkXCIpOlwie31cIjsoYT1yZChhLGIsYykpJiZhLkQmJmEuRChcInBlcm1pc3Npb25fZGVuaWVkXCIpfWZ1bmN0aW9uIHJkKGEsYixjKXtiPShuZXcgRihiKSkudG9TdHJpbmcoKTtjfHwoYz1cInt9XCIpO3ZhciBkPWEuaWFbYl1bY107ZGVsZXRlIGEuaWFbYl1bY107cmV0dXJuIGR9O2Z1bmN0aW9uIERkKCl7dGhpcy5vPXRoaXMuRj1udWxsfWZ1bmN0aW9uIEVkKGEsYixjKXtpZihiLmYoKSlhLkY9YyxhLm89bnVsbDtlbHNlIGlmKG51bGwhPT1hLkYpYS5GPWEuRi5BYShiLGMpO2Vsc2V7bnVsbD09YS5vJiYoYS5vPW5ldyBNYyk7dmFyIGQ9QyhiKTthLm8uY29udGFpbnMoZCl8fGEuby5hZGQoZCxuZXcgRGQpO2E9YS5vLmdldChkKTtiPUxhKGIpO0VkKGEsYixjKX19ZnVuY3Rpb24gRmQoYSxiKXtpZihiLmYoKSlyZXR1cm4gYS5GPW51bGwsYS5vPW51bGwsITA7aWYobnVsbCE9PWEuRil7aWYoYS5GLlAoKSlyZXR1cm4hMTt2YXIgYz1hLkY7YS5GPW51bGw7Yy5BKGZ1bmN0aW9uKGIsYyl7RWQoYSxuZXcgRihiKSxjKX0pO3JldHVybiBGZChhLGIpfXJldHVybiBudWxsIT09YS5vPyhjPUMoYiksYj1MYShiKSxhLm8uY29udGFpbnMoYykmJkZkKGEuby5nZXQoYyksYikmJmEuby5yZW1vdmUoYyksYS5vLmYoKT8oYS5vPW51bGwsITApOiExKTohMH1cclxuZnVuY3Rpb24gR2QoYSxiLGMpe251bGwhPT1hLkY/YyhiLGEuRik6YS5BKGZ1bmN0aW9uKGEsZSl7dmFyIGY9bmV3IEYoYi50b1N0cmluZygpK1wiL1wiK2EpO0dkKGUsZixjKX0pfURkLnByb3RvdHlwZS5BPWZ1bmN0aW9uKGEpe251bGwhPT10aGlzLm8mJlIodGhpcy5vLGZ1bmN0aW9uKGIsYyl7YShiLGMpfSl9O2Z1bmN0aW9uIEhkKCl7dGhpcy4kPU19ZnVuY3Rpb24gUyhhLGIpe3JldHVybiBhLiQuTChiKX1mdW5jdGlvbiBUKGEsYixjKXthLiQ9YS4kLkFhKGIsYyl9SGQucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJC50b1N0cmluZygpfTtmdW5jdGlvbiBJZCgpe3RoaXMudmE9bmV3IEhkO3RoaXMuTT1uZXcgSGQ7dGhpcy5wYT1uZXcgSGQ7dGhpcy5GYj1uZXcgUGF9ZnVuY3Rpb24gSmQoYSxiLGMpe1QoYS52YSxiLGMpO3JldHVybiBLZChhLGIpfWZ1bmN0aW9uIEtkKGEsYil7Zm9yKHZhciBjPVMoYS52YSxiKSxkPVMoYS5NLGIpLGU9SShhLkZiLGIpLGY9ITEsZz1lO251bGwhPT1nOyl7aWYobnVsbCE9PWcuaigpKXtmPSEwO2JyZWFrfWc9Zy5wYXJlbnQoKX1pZihmKXJldHVybiExO2M9TGQoYyxkLGUpO3JldHVybiBjIT09ZD8oVChhLk0sYixjKSwhMCk6ITF9ZnVuY3Rpb24gTGQoYSxiLGMpe2lmKGMuZigpKXJldHVybiBhO2lmKG51bGwhPT1jLmooKSlyZXR1cm4gYjthPWF8fE07Yy5BKGZ1bmN0aW9uKGQpe2Q9ZC5uYW1lKCk7dmFyIGU9YS5PKGQpLGY9Yi5PKGQpLGc9SShjLGQpLGU9TGQoZSxmLGcpO2E9YS5IKGQsZSl9KTtyZXR1cm4gYX1cclxuSWQucHJvdG90eXBlLnNldD1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMsZD1bXTt1YihiLGZ1bmN0aW9uKGEpe3ZhciBiPWEucGF0aDthPWEudGE7dmFyIGc9S2IoKTtKKEkoYy5GYixiKSxnKTtUKGMuTSxiLGEpO2QucHVzaCh7cGF0aDpiLGJlOmd9KX0pO3JldHVybiBkfTtmdW5jdGlvbiBNZChhLGIpe3ViKGIsZnVuY3Rpb24oYil7dmFyIGQ9Yi5iZTtiPUkoYS5GYixiLnBhdGgpO3ZhciBlPWIuaigpO3YobnVsbCE9PWUsXCJwZW5kaW5nUHV0IHNob3VsZCBub3QgYmUgbnVsbC5cIik7ZT09PWQmJkooYixudWxsKX0pfTtmdW5jdGlvbiBOZChhLGIpe3JldHVybiBhJiZcIm9iamVjdFwiPT09dHlwZW9mIGE/KHYoXCIuc3ZcImluIGEsXCJVbmV4cGVjdGVkIGxlYWYgbm9kZSBvciBwcmlvcml0eSBjb250ZW50c1wiKSxiW2FbXCIuc3ZcIl1dKTphfWZ1bmN0aW9uIE9kKGEsYil7dmFyIGM9bmV3IERkO0dkKGEsbmV3IEYoXCJcIiksZnVuY3Rpb24oYSxlKXtFZChjLGEsUGQoZSxiKSl9KTtyZXR1cm4gY31mdW5jdGlvbiBQZChhLGIpe3ZhciBjPU5kKGEuaygpLGIpLGQ7aWYoYS5QKCkpe3ZhciBlPU5kKGEuaigpLGIpO3JldHVybiBlIT09YS5qKCl8fGMhPT1hLmsoKT9uZXcgZmMoZSxjKTphfWQ9YTtjIT09YS5rKCkmJihkPWQuSWEoYykpO2EuQShmdW5jdGlvbihhLGMpe3ZhciBlPVBkKGMsYik7ZSE9PWMmJihkPWQuSChhLGUpKX0pO3JldHVybiBkfTtmdW5jdGlvbiBRZCgpe3RoaXMuWWE9W119ZnVuY3Rpb24gUmQoYSxiKXtpZigwIT09Yi5sZW5ndGgpZm9yKHZhciBjPTA7YzxiLmxlbmd0aDtjKyspYS5ZYS5wdXNoKGJbY10pfVFkLnByb3RvdHlwZS5JYj1mdW5jdGlvbigpe2Zvcih2YXIgYT0wO2E8dGhpcy5ZYS5sZW5ndGg7YSsrKWlmKHRoaXMuWWFbYV0pe3ZhciBiPXRoaXMuWWFbYV07dGhpcy5ZYVthXT1udWxsO1NkKGIpfXRoaXMuWWE9W119O2Z1bmN0aW9uIFNkKGEpe3ZhciBiPWEuYmEsYz1hLnlkLGQ9YS5IYjtlYyhmdW5jdGlvbigpe2IoYyxkKX0pfTtmdW5jdGlvbiBVKGEsYixjLGQpe3RoaXMudHlwZT1hO3RoaXMud2E9Yjt0aGlzLmNhPWM7dGhpcy5IYj1kfTtmdW5jdGlvbiBUZChhKXt0aGlzLlI9YTt0aGlzLnJhPVtdO3RoaXMuRGM9bmV3IFFkfWZ1bmN0aW9uIFVkKGEsYixjLGQsZSl7YS5yYS5wdXNoKHt0eXBlOmIsYmE6YyxjYW5jZWw6ZCxZOmV9KTtkPVtdO3ZhciBmPVZkKGEuaSk7YS50YiYmZi5wdXNoKG5ldyBVKFwidmFsdWVcIixhLmkpKTtmb3IodmFyIGc9MDtnPGYubGVuZ3RoO2crKylpZihmW2ddLnR5cGU9PT1iKXt2YXIgaz1uZXcgRShhLlIubSxhLlIucGF0aCk7ZltnXS5jYSYmKGs9ay5HKGZbZ10uY2EpKTtkLnB1c2goe2JhOmFjKGMsZSkseWQ6bmV3IFAoZltnXS53YSxrKSxIYjpmW2ddLkhifSl9UmQoYS5EYyxkKX1UZC5wcm90b3R5cGUuaWM9ZnVuY3Rpb24oYSxiKXtiPXRoaXMuamMoYSxiKTtudWxsIT1iJiZXZCh0aGlzLGIpfTtcclxuZnVuY3Rpb24gV2QoYSxiKXtmb3IodmFyIGM9W10sZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdLGY9ZS50eXBlLGc9bmV3IEUoYS5SLm0sYS5SLnBhdGgpO2JbZF0uY2EmJihnPWcuRyhiW2RdLmNhKSk7Zz1uZXcgUChiW2RdLndhLGcpO1widmFsdWVcIiE9PWUudHlwZXx8Zy5zYigpP1widmFsdWVcIiE9PWUudHlwZSYmKGYrPVwiIFwiK2cubmFtZSgpKTpmKz1cIihcIitnLlYoKStcIilcIjtLKGEuUi5tLnUuaWQrXCI6IGV2ZW50OlwiK2EuUi5wYXRoK1wiOlwiK2EuUi5QYSgpK1wiOlwiK2YpO2ZvcihmPTA7ZjxhLnJhLmxlbmd0aDtmKyspe3ZhciBrPWEucmFbZl07YltkXS50eXBlPT09ay50eXBlJiZjLnB1c2goe2JhOmFjKGsuYmEsay5ZKSx5ZDpnLEhiOmUuSGJ9KX19UmQoYS5EYyxjKX1UZC5wcm90b3R5cGUuSWI9ZnVuY3Rpb24oKXt0aGlzLkRjLkliKCl9O1xyXG5mdW5jdGlvbiBWZChhKXt2YXIgYj1bXTtpZighYS5QKCkpe3ZhciBjPW51bGw7YS5BKGZ1bmN0aW9uKGEsZSl7Yi5wdXNoKG5ldyBVKFwiY2hpbGRfYWRkZWRcIixlLGEsYykpO2M9YX0pfXJldHVybiBifWZ1bmN0aW9uIFhkKGEpe2EudGJ8fChhLnRiPSEwLFdkKGEsW25ldyBVKFwidmFsdWVcIixhLmkpXSkpfTtmdW5jdGlvbiBZZChhLGIpe1RkLmNhbGwodGhpcyxhKTt0aGlzLmk9Yn1qYShZZCxUZCk7WWQucHJvdG90eXBlLmpjPWZ1bmN0aW9uKGEsYil7dGhpcy5pPWE7dGhpcy50YiYmbnVsbCE9YiYmYi5wdXNoKG5ldyBVKFwidmFsdWVcIix0aGlzLmkpKTtyZXR1cm4gYn07WWQucHJvdG90eXBlLnFiPWZ1bmN0aW9uKCl7cmV0dXJue319O2Z1bmN0aW9uIFpkKGEsYil7dGhpcy5UYj1hO3RoaXMuTWM9Yn1mdW5jdGlvbiAkZChhLGIsYyxkLGUpe3ZhciBmPWEuTChjKSxnPWIuTChjKTtkPW5ldyBaZChkLGUpO2U9YWUoZCxjLGYsZyk7Zz0hZi5mKCkmJiFnLmYoKSYmZi5rKCkhPT1nLmsoKTtpZihlfHxnKWZvcihmPWMsYz1lO251bGwhPT1mLnBhcmVudCgpOyl7dmFyIGs9YS5MKGYpO2U9Yi5MKGYpO3ZhciBsPWYucGFyZW50KCk7aWYoIWQuVGJ8fEkoZC5UYixsKS5qKCkpe3ZhciBtPWIuTChsKSxwPVtdLGY9TWEoZik7ay5mKCk/KGs9bS5nYShmLGUpLHAucHVzaChuZXcgVShcImNoaWxkX2FkZGVkXCIsZSxmLGspKSk6ZS5mKCk/cC5wdXNoKG5ldyBVKFwiY2hpbGRfcmVtb3ZlZFwiLGssZikpOihrPW0uZ2EoZixlKSxnJiZwLnB1c2gobmV3IFUoXCJjaGlsZF9tb3ZlZFwiLGUsZixrKSksYyYmcC5wdXNoKG5ldyBVKFwiY2hpbGRfY2hhbmdlZFwiLGUsZixrKSkpO2QuTWMobCxtLHApfWcmJihnPSExLGM9ITApO2Y9bH19XHJcbmZ1bmN0aW9uIGFlKGEsYixjLGQpe3ZhciBlLGY9W107Yz09PWQ/ZT0hMTpjLlAoKSYmZC5QKCk/ZT1jLmooKSE9PWQuaigpOmMuUCgpPyhiZShhLGIsTSxkLGYpLGU9ITApOmQuUCgpPyhiZShhLGIsYyxNLGYpLGU9ITApOmU9YmUoYSxiLGMsZCxmKTtlP2EuTWMoYixkLGYpOmMuaygpIT09ZC5rKCkmJmEuTWMoYixkLG51bGwpO3JldHVybiBlfVxyXG5mdW5jdGlvbiBiZShhLGIsYyxkLGUpe3ZhciBmPSExLGc9IWEuVGJ8fCFJKGEuVGIsYikuZigpLGs9W10sbD1bXSxtPVtdLHA9W10sdD17fSxzPXt9LHcsVixHLEg7dz1jLlphKCk7Rz1ZYSh3KTtWPWQuWmEoKTtmb3IoSD1ZYShWKTtudWxsIT09R3x8bnVsbCE9PUg7KXtjPUg7Yz1udWxsPT09Rz8xOm51bGw9PT1jPy0xOkcua2V5PT09Yy5rZXk/MDppYyh7bmFtZTpHLmtleSxrYTpHLnZhbHVlLmsoKX0se25hbWU6Yy5rZXksa2E6Yy52YWx1ZS5rKCl9KTtpZigwPmMpZj12YSh0LEcua2V5KSxuKGYpPyhtLnB1c2goe0ZjOkcsJGM6a1tmXX0pLGtbZl09bnVsbCk6KHNbRy5rZXldPWwubGVuZ3RoLGwucHVzaChHKSksZj0hMCxHPVlhKHcpO2Vsc2V7aWYoMDxjKWY9dmEocyxILmtleSksbihmKT8obS5wdXNoKHtGYzpsW2ZdLCRjOkh9KSxsW2ZdPW51bGwpOih0W0gua2V5XT1rLmxlbmd0aCxrLnB1c2goSCkpLGY9ITA7ZWxzZXtjPWIuRyhILmtleSk7aWYoYz1hZShhLGMsRy52YWx1ZSxcclxuSC52YWx1ZSkpcC5wdXNoKEgpLGY9ITA7Ry52YWx1ZS5rKCkhPT1ILnZhbHVlLmsoKSYmKG0ucHVzaCh7RmM6RywkYzpIfSksZj0hMCk7Rz1ZYSh3KX1IPVlhKFYpfWlmKCFnJiZmKXJldHVybiEwfWZvcihnPTA7ZzxsLmxlbmd0aDtnKyspaWYodD1sW2ddKWM9Yi5HKHQua2V5KSxhZShhLGMsdC52YWx1ZSxNKSxlLnB1c2gobmV3IFUoXCJjaGlsZF9yZW1vdmVkXCIsdC52YWx1ZSx0LmtleSkpO2ZvcihnPTA7ZzxrLmxlbmd0aDtnKyspaWYodD1rW2ddKWM9Yi5HKHQua2V5KSxsPWQuZ2EodC5rZXksdC52YWx1ZSksYWUoYSxjLE0sdC52YWx1ZSksZS5wdXNoKG5ldyBVKFwiY2hpbGRfYWRkZWRcIix0LnZhbHVlLHQua2V5LGwpKTtmb3IoZz0wO2c8bS5sZW5ndGg7ZysrKXQ9bVtnXS5GYyxrPW1bZ10uJGMsYz1iLkcoay5rZXkpLGw9ZC5nYShrLmtleSxrLnZhbHVlKSxlLnB1c2gobmV3IFUoXCJjaGlsZF9tb3ZlZFwiLGsudmFsdWUsay5rZXksbCkpLChjPWFlKGEsYyx0LnZhbHVlLGsudmFsdWUpKSYmXHJcbnAucHVzaChrKTtmb3IoZz0wO2c8cC5sZW5ndGg7ZysrKWE9cFtnXSxsPWQuZ2EoYS5rZXksYS52YWx1ZSksZS5wdXNoKG5ldyBVKFwiY2hpbGRfY2hhbmdlZFwiLGEudmFsdWUsYS5rZXksbCkpO3JldHVybiBmfTtmdW5jdGlvbiBjZSgpe3RoaXMuWD10aGlzLnphPW51bGw7dGhpcy5zZXQ9e319amEoY2UsTWMpO2g9Y2UucHJvdG90eXBlO2guc2V0QWN0aXZlPWZ1bmN0aW9uKGEpe3RoaXMuemE9YX07ZnVuY3Rpb24gZGUoYSxiLGMpe2EuYWRkKGIsYyk7YS5YfHwoYS5YPWMuUi5wYXRoKX1mdW5jdGlvbiBlZShhKXt2YXIgYj1hLnphO2EuemE9bnVsbDtyZXR1cm4gYn1mdW5jdGlvbiBmZShhKXtyZXR1cm4gYS5jb250YWlucyhcImRlZmF1bHRcIil9ZnVuY3Rpb24gZ2UoYSl7cmV0dXJuIG51bGwhPWEuemEmJmZlKGEpfWguZGVmYXVsdFZpZXc9ZnVuY3Rpb24oKXtyZXR1cm4gZmUodGhpcyk/dGhpcy5nZXQoXCJkZWZhdWx0XCIpOm51bGx9O2gucGF0aD1mdW5jdGlvbigpe3JldHVybiB0aGlzLlh9O2gudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdmIodGhpcy5rZXlzKCksZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWZhdWx0XCI9PT1hP1wie31cIjphfSkuam9pbihcIiRcIil9O1xyXG5oLmhiPWZ1bmN0aW9uKCl7dmFyIGE9W107Uih0aGlzLGZ1bmN0aW9uKGIsYyl7YS5wdXNoKGMuUil9KTtyZXR1cm4gYX07ZnVuY3Rpb24gaGUoYSxiKXtUZC5jYWxsKHRoaXMsYSk7dGhpcy5pPU07dGhpcy5qYyhiLFZkKGIpKX1qYShoZSxUZCk7XHJcbmhlLnByb3RvdHlwZS5qYz1mdW5jdGlvbihhLGIpe2lmKG51bGw9PT1iKXJldHVybiBiO3ZhciBjPVtdLGQ9dGhpcy5SO24oZC5mYSkmJihuKGQueWEpJiZudWxsIT1kLnlhP2MucHVzaChmdW5jdGlvbihhLGIpe3ZhciBjPVViKGIsZC5mYSk7cmV0dXJuIDA8Y3x8MD09PWMmJjA8PVZiKGEsZC55YSl9KTpjLnB1c2goZnVuY3Rpb24oYSxiKXtyZXR1cm4gMDw9VWIoYixkLmZhKX0pKTtuKGQuQ2EpJiYobihkLldhKT9jLnB1c2goZnVuY3Rpb24oYSxiKXt2YXIgYz1VYihiLGQuQ2EpO3JldHVybiAwPmN8fDA9PT1jJiYwPj1WYihhLGQuV2EpfSk6Yy5wdXNoKGZ1bmN0aW9uKGEsYil7cmV0dXJuIDA+PVViKGIsZC5DYSl9KSk7dmFyIGU9bnVsbCxmPW51bGw7aWYobih0aGlzLlIuRWEpKWlmKG4odGhpcy5SLmZhKSl7aWYoZT1pZShhLGMsdGhpcy5SLkVhLCExKSl7dmFyIGc9YS5PKGUpLmsoKTtjLnB1c2goZnVuY3Rpb24oYSxiKXt2YXIgYz1VYihiLGcpO3JldHVybiAwPmN8fDA9PT1jJiZcclxuMD49VmIoYSxlKX0pfX1lbHNlIGlmKGY9aWUoYSxjLHRoaXMuUi5FYSwhMCkpe3ZhciBrPWEuTyhmKS5rKCk7Yy5wdXNoKGZ1bmN0aW9uKGEsYil7dmFyIGM9VWIoYixrKTtyZXR1cm4gMDxjfHwwPT09YyYmMDw9VmIoYSxmKX0pfWZvcih2YXIgbD1bXSxtPVtdLHA9W10sdD1bXSxzPTA7czxiLmxlbmd0aDtzKyspe3ZhciB3PWJbc10uY2EsVj1iW3NdLndhO3N3aXRjaChiW3NdLnR5cGUpe2Nhc2UgXCJjaGlsZF9hZGRlZFwiOmplKGMsdyxWKSYmKHRoaXMuaT10aGlzLmkuSCh3LFYpLG0ucHVzaChiW3NdKSk7YnJlYWs7Y2FzZSBcImNoaWxkX3JlbW92ZWRcIjp0aGlzLmkuTyh3KS5mKCl8fCh0aGlzLmk9dGhpcy5pLkgodyxudWxsKSxsLnB1c2goYltzXSkpO2JyZWFrO2Nhc2UgXCJjaGlsZF9jaGFuZ2VkXCI6IXRoaXMuaS5PKHcpLmYoKSYmamUoYyx3LFYpJiYodGhpcy5pPXRoaXMuaS5IKHcsViksdC5wdXNoKGJbc10pKTticmVhaztjYXNlIFwiY2hpbGRfbW92ZWRcIjp2YXIgRz0hdGhpcy5pLk8odykuZigpLFxyXG5IPWplKGMsdyxWKTtHP0g/KHRoaXMuaT10aGlzLmkuSCh3LFYpLHAucHVzaChiW3NdKSk6KGwucHVzaChuZXcgVShcImNoaWxkX3JlbW92ZWRcIix0aGlzLmkuTyh3KSx3KSksdGhpcy5pPXRoaXMuaS5IKHcsbnVsbCkpOkgmJih0aGlzLmk9dGhpcy5pLkgodyxWKSxtLnB1c2goYltzXSkpfX12YXIgVGM9ZXx8ZjtpZihUYyl7dmFyIFVjPShzPW51bGwhPT1mKT90aGlzLmkuaGQoKTp0aGlzLmkua2QoKSxoYz0hMSwkYT0hMSxhYj10aGlzOyhzP2EuRWM6YS5BKS5jYWxsKGEsZnVuY3Rpb24oYSxiKXskYXx8bnVsbCE9PVVjfHwoJGE9ITApO2lmKCRhJiZoYylyZXR1cm4hMDtoYz8obC5wdXNoKG5ldyBVKFwiY2hpbGRfcmVtb3ZlZFwiLGFiLmkuTyhhKSxhKSksYWIuaT1hYi5pLkgoYSxudWxsKSk6JGEmJihtLnB1c2gobmV3IFUoXCJjaGlsZF9hZGRlZFwiLGIsYSkpLGFiLmk9YWIuaS5IKGEsYikpO1VjPT09YSYmKCRhPSEwKTthPT09VGMmJihoYz0hMCl9KX1mb3Iocz0wO3M8bS5sZW5ndGg7cysrKWM9XHJcbm1bc10sdz10aGlzLmkuZ2EoYy5jYSxjLndhKSxsLnB1c2gobmV3IFUoXCJjaGlsZF9hZGRlZFwiLGMud2EsYy5jYSx3KSk7Zm9yKHM9MDtzPHAubGVuZ3RoO3MrKyljPXBbc10sdz10aGlzLmkuZ2EoYy5jYSxjLndhKSxsLnB1c2gobmV3IFUoXCJjaGlsZF9tb3ZlZFwiLGMud2EsYy5jYSx3KSk7Zm9yKHM9MDtzPHQubGVuZ3RoO3MrKyljPXRbc10sdz10aGlzLmkuZ2EoYy5jYSxjLndhKSxsLnB1c2gobmV3IFUoXCJjaGlsZF9jaGFuZ2VkXCIsYy53YSxjLmNhLHcpKTt0aGlzLnRiJiYwPGwubGVuZ3RoJiZsLnB1c2gobmV3IFUoXCJ2YWx1ZVwiLHRoaXMuaSkpO3JldHVybiBsfTtmdW5jdGlvbiBpZShhLGIsYyxkKXtpZihhLlAoKSlyZXR1cm4gbnVsbDt2YXIgZT1udWxsOyhkP2EuRWM6YS5BKS5jYWxsKGEsZnVuY3Rpb24oYSxkKXtpZihqZShiLGEsZCkmJihlPWEsYy0tLDA9PT1jKSlyZXR1cm4hMH0pO3JldHVybiBlfVxyXG5mdW5jdGlvbiBqZShhLGIsYyl7Zm9yKHZhciBkPTA7ZDxhLmxlbmd0aDtkKyspaWYoIWFbZF0oYixjLmsoKSkpcmV0dXJuITE7cmV0dXJuITB9aGUucHJvdG90eXBlLkhjPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmkuTyhhKSE9PU19O1xyXG5oZS5wcm90b3R5cGUucWI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXt9O3RoaXMuaS5QKCl8fHRoaXMuaS5BKGZ1bmN0aW9uKGEpe2RbYV09M30pO3ZhciBlPXRoaXMuaTtjPVMoYyxuZXcgRihcIlwiKSk7dmFyIGY9bmV3IFBhO0ooSShmLHRoaXMuUi5wYXRoKSwhMCk7Yj1NLkFhKGEsYik7dmFyIGc9dGhpczskZChjLGIsYSxmLGZ1bmN0aW9uKGEsYixjKXtudWxsIT09YyYmYS50b1N0cmluZygpPT09Zy5SLnBhdGgudG9TdHJpbmcoKSYmZy5qYyhiLGMpfSk7dGhpcy5pLlAoKT8kYihkLGZ1bmN0aW9uKGEsYil7ZFtiXT0yfSk6KHRoaXMuaS5BKGZ1bmN0aW9uKGEpe0EoZCxhKXx8KGRbYV09MSl9KSwkYihkLGZ1bmN0aW9uKGEsYil7Zy5pLk8oYikuZigpJiYoZFtiXT0yKX0pKTt0aGlzLmk9ZTtyZXR1cm4gZH07ZnVuY3Rpb24ga2UoYSxiKXt0aGlzLnU9YTt0aGlzLmc9Yjt0aGlzLmFjPWIuJDt0aGlzLm9hPW5ldyBQYX1rZS5wcm90b3R5cGUuUmI9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1hLnBhdGgsZz1JKHRoaXMub2EsZiksaz1nLmooKTtudWxsPT09az8oaz1uZXcgY2UsSihnLGspKTp2KCFrLmYoKSxcIldlIHNob3VsZG4ndCBiZSBzdG9yaW5nIGVtcHR5IFF1ZXJ5TWFwc1wiKTt2YXIgbD1hLlBhKCk7aWYoay5jb250YWlucyhsKSlhPWsuZ2V0KGwpLFVkKGEsYixjLGQsZSk7ZWxzZXt2YXIgbT10aGlzLmcuJC5MKGYpO2E9bGUoYSxtKTttZSh0aGlzLGcsayxsLGEpO1VkKGEsYixjLGQsZSk7KGI9KGI9U2EoSSh0aGlzLm9hLGYpLGZ1bmN0aW9uKGEpe3ZhciBiO2lmKGI9YS5qKCkmJmEuaigpLmRlZmF1bHRWaWV3KCkpYj1hLmooKS5kZWZhdWx0VmlldygpLnRiO2lmKGIpcmV0dXJuITB9LCEwKSl8fG51bGw9PT10aGlzLnUmJiFTKHRoaXMuZyxmKS5mKCkpJiZYZChhKX1hLkliKCl9O1xyXG5mdW5jdGlvbiBuZShhLGIsYyxkLGUpe3ZhciBmPWEuZ2V0KGIpLGc7aWYoZz1mKXtnPSExO2Zvcih2YXIgaz1mLnJhLmxlbmd0aC0xOzA8PWs7ay0tKXt2YXIgbD1mLnJhW2tdO2lmKCEoYyYmbC50eXBlIT09Y3x8ZCYmbC5iYSE9PWR8fGUmJmwuWSE9PWUpJiYoZi5yYS5zcGxpY2UoaywxKSxnPSEwLGMmJmQpKWJyZWFrfX0oYz1nJiYhKDA8Zi5yYS5sZW5ndGgpKSYmYS5yZW1vdmUoYik7cmV0dXJuIGN9ZnVuY3Rpb24gb2UoYSxiLGMsZCxlKXtiPWI/Yi5QYSgpOm51bGw7dmFyIGY9W107YiYmXCJkZWZhdWx0XCIhPT1iP25lKGEsYixjLGQsZSkmJmYucHVzaChiKTp1YihhLmtleXMoKSxmdW5jdGlvbihiKXtuZShhLGIsYyxkLGUpJiZmLnB1c2goYil9KTtyZXR1cm4gZn1rZS5wcm90b3R5cGUubGM9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9SSh0aGlzLm9hLGEucGF0aCkuaigpO3JldHVybiBudWxsPT09ZT9udWxsOnBlKHRoaXMsZSxhLGIsYyxkKX07XHJcbmZ1bmN0aW9uIHBlKGEsYixjLGQsZSxmKXt2YXIgZz1iLnBhdGgoKSxnPUkoYS5vYSxnKTtjPW9lKGIsYyxkLGUsZik7Yi5mKCkmJkooZyxudWxsKTtkPXFlKGcpO2lmKDA8Yy5sZW5ndGgmJiFkKXtkPWc7ZT1nLnBhcmVudCgpO2ZvcihjPSExOyFjJiZlOyl7aWYoZj1lLmooKSl7dighZ2UoZikpO3ZhciBrPWQubmFtZSgpLGw9ITE7UihmLGZ1bmN0aW9uKGEsYil7bD1iLkhjKGspfHxsfSk7bCYmKGM9ITApfWQ9ZTtlPWUucGFyZW50KCl9ZD1udWxsO2dlKGIpfHwoYj1lZShiKSxkPXJlKGEsZyksYiYmYigpKTtyZXR1cm4gYz9udWxsOmR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gc2UoYSxiLGMpe1JhKEkoYS5vYSxiKSxmdW5jdGlvbihhKXsoYT1hLmooKSkmJlIoYSxmdW5jdGlvbihhLGIpe1hkKGIpfSl9LGMsITApfVxyXG5mdW5jdGlvbiBXKGEsYixjKXtmdW5jdGlvbiBkKGEpe2Rve2lmKGdbYS50b1N0cmluZygpXSlyZXR1cm4hMDthPWEucGFyZW50KCl9d2hpbGUobnVsbCE9PWEpO3JldHVybiExfXZhciBlPWEuYWMsZj1hLmcuJDthLmFjPWY7Zm9yKHZhciBnPXt9LGs9MDtrPGMubGVuZ3RoO2srKylnW2Nba10udG9TdHJpbmcoKV09ITA7JGQoZSxmLGIsYS5vYSxmdW5jdGlvbihjLGUsZil7aWYoYi5jb250YWlucyhjKSl7dmFyIGc9ZChjKTtnJiZzZShhLGMsITEpO2EuaWMoYyxlLGYpO2cmJnNlKGEsYywhMCl9ZWxzZSBhLmljKGMsZSxmKX0pO2QoYikmJnNlKGEsYiwhMCk7dGUoYSxiKX1mdW5jdGlvbiB0ZShhLGIpe3ZhciBjPUkoYS5vYSxiKTtSYShjLGZ1bmN0aW9uKGEpeyhhPWEuaigpKSYmUihhLGZ1bmN0aW9uKGEsYil7Yi5JYigpfSl9LCEwLCEwKTtTYShjLGZ1bmN0aW9uKGEpeyhhPWEuaigpKSYmUihhLGZ1bmN0aW9uKGEsYil7Yi5JYigpfSl9LCExKX1cclxua2UucHJvdG90eXBlLmljPWZ1bmN0aW9uKGEsYixjKXthPUkodGhpcy5vYSxhKS5qKCk7bnVsbCE9PWEmJlIoYSxmdW5jdGlvbihhLGUpe2UuaWMoYixjKX0pfTtmdW5jdGlvbiBxZShhKXtyZXR1cm4gU2EoYSxmdW5jdGlvbihhKXtyZXR1cm4gYS5qKCkmJmdlKGEuaigpKX0pfWZ1bmN0aW9uIG1lKGEsYixjLGQsZSl7aWYoZ2UoYyl8fHFlKGIpKWRlKGMsZCxlKTtlbHNle3ZhciBmLGc7Yy5mKCl8fChmPWMudG9TdHJpbmcoKSxnPWMuaGIoKSk7ZGUoYyxkLGUpO2Muc2V0QWN0aXZlKHVlKGEsYykpO2YmJmcmJnRkKGEudSxjLnBhdGgoKSxmLGcpfWdlKGMpJiZSYShiLGZ1bmN0aW9uKGEpe2lmKGE9YS5qKCkpYS56YSYmYS56YSgpLGEuemE9bnVsbH0pfVxyXG5mdW5jdGlvbiByZShhLGIpe2Z1bmN0aW9uIGMoYil7dmFyIGY9Yi5qKCk7aWYoZiYmZmUoZikpZC5wdXNoKGYucGF0aCgpKSxudWxsPT1mLnphJiZmLnNldEFjdGl2ZSh1ZShhLGYpKTtlbHNle2lmKGYpe251bGwhPWYuemF8fGYuc2V0QWN0aXZlKHVlKGEsZikpO3ZhciBnPXt9O1IoZixmdW5jdGlvbihhLGIpe2IuaS5BKGZ1bmN0aW9uKGEpe0EoZyxhKXx8KGdbYV09ITAsYT1mLnBhdGgoKS5HKGEpLGQucHVzaChhKSl9KX0pfWIuQShjKX19dmFyIGQ9W107YyhiKTtyZXR1cm4gZH1cclxuZnVuY3Rpb24gdWUoYSxiKXtpZihhLnUpe3ZhciBjPWEudSxkPWIucGF0aCgpLGU9Yi50b1N0cmluZygpLGY9Yi5oYigpLGcsaz1iLmtleXMoKSxsPWZlKGIpO3BkKGEudSxiLGZ1bmN0aW9uKGMpe1wib2tcIiE9PWM/KGM9Y2MoYyksTChcIm9uKCkgb3Igb25jZSgpIGZvciBcIitiLnBhdGgoKS50b1N0cmluZygpK1wiIGZhaWxlZDogXCIrYy50b1N0cmluZygpKSx2ZShhLGIsYykpOmd8fChsP3NlKGEsYi5wYXRoKCksITApOnViKGssZnVuY3Rpb24oYSl7KGE9Yi5nZXQoYSkpJiZYZChhKX0pLHRlKGEsYi5wYXRoKCkpKX0pO3JldHVybiBmdW5jdGlvbigpe2c9ITA7dGQoYyxkLGUsZil9fXJldHVybiBiYX1mdW5jdGlvbiB2ZShhLGIsYyl7YiYmKFIoYixmdW5jdGlvbihhLGIpe2Zvcih2YXIgZj0wO2Y8Yi5yYS5sZW5ndGg7ZisrKXt2YXIgZz1iLnJhW2ZdO2cuY2FuY2VsJiZhYyhnLmNhbmNlbCxnLlkpKGMpfX0pLHBlKGEsYikpfVxyXG5mdW5jdGlvbiBsZShhLGIpe3JldHVyblwiZGVmYXVsdFwiPT09YS5QYSgpP25ldyBZZChhLGIpOm5ldyBoZShhLGIpfWtlLnByb3RvdHlwZS5xYj1mdW5jdGlvbihhLGIsYyxkKXtmdW5jdGlvbiBlKGEpeyRiKGEsZnVuY3Rpb24oYSxiKXtmW2JdPTM9PT1hPzM6KHZhKGYsYil8fGEpPT09YT9hOjN9KX12YXIgZj17fTtSKGIsZnVuY3Rpb24oYixmKXtlKGYucWIoYSxjLGQpKX0pO2MuUCgpfHxjLkEoZnVuY3Rpb24oYSl7QShmLGEpfHwoZlthXT00KX0pO3JldHVybiBmfTtmdW5jdGlvbiB3ZShhLGIsYyxkLGUpe3ZhciBmPWIucGF0aCgpO2I9YS5xYihmLGIsZCxlKTt2YXIgZz1NLGs9W107JGIoYixmdW5jdGlvbihiLG0pe3ZhciBwPW5ldyBGKG0pOzM9PT1ifHwxPT09Yj9nPWcuSChtLGQuTChwKSk6KDI9PT1iJiZrLnB1c2goe3BhdGg6Zi5HKG0pLHRhOk19KSxrPWsuY29uY2F0KHhlKGEsZC5MKHApLEkoYyxwKSxlKSkpfSk7cmV0dXJuW3twYXRoOmYsdGE6Z31dLmNvbmNhdChrKX1cclxuZnVuY3Rpb24geWUoYSxiLGMsZCl7dmFyIGU7YTp7dmFyIGY9SShhLm9hLGIpO2U9Zi5wYXJlbnQoKTtmb3IodmFyIGc9W107bnVsbCE9PWU7KXt2YXIgaz1lLmooKTtpZihudWxsIT09ayl7aWYoZmUoaykpe2U9W3twYXRoOmIsdGE6Y31dO2JyZWFrIGF9az1hLnFiKGIsayxjLGQpO2Y9dmEoayxmLm5hbWUoKSk7aWYoMz09PWZ8fDE9PT1mKXtlPVt7cGF0aDpiLHRhOmN9XTticmVhayBhfTI9PT1mJiZnLnB1c2goe3BhdGg6Yix0YTpNfSl9Zj1lO2U9ZS5wYXJlbnQoKX1lPWd9aWYoMT09ZS5sZW5ndGgmJighZVswXS50YS5mKCl8fGMuZigpKSlyZXR1cm4gZTtnPUkoYS5vYSxiKTtmPWcuaigpO251bGwhPT1mP2ZlKGYpP2UucHVzaCh7cGF0aDpiLHRhOmN9KTplPWUuY29uY2F0KHdlKGEsZixnLGMsZCkpOmU9ZS5jb25jYXQoeGUoYSxjLGcsZCkpO3JldHVybiBlfVxyXG5mdW5jdGlvbiB4ZShhLGIsYyxkKXt2YXIgZT1jLmooKTtpZihudWxsIT09ZSlyZXR1cm4gZmUoZSk/W3twYXRoOmMucGF0aCgpLHRhOmJ9XTp3ZShhLGUsYyxiLGQpO3ZhciBmPVtdO2MuQShmdW5jdGlvbihjKXt2YXIgZT1iLlAoKT9NOmIuTyhjLm5hbWUoKSk7Yz14ZShhLGUsYyxkKTtmPWYuY29uY2F0KGMpfSk7cmV0dXJuIGZ9O2Z1bmN0aW9uIHplKGEpe3RoaXMuTj1hO3RoaXMuYWE9RGMoYSk7dGhpcy51PW5ldyBsZCh0aGlzLk4scih0aGlzLmRjLHRoaXMpLHIodGhpcy5iYyx0aGlzKSxyKHRoaXMuemIsdGhpcykscih0aGlzLlFjLHRoaXMpLHIodGhpcy5HYyx0aGlzKSk7dGhpcy56ZD1FYyhhLHIoZnVuY3Rpb24oKXtyZXR1cm4gbmV3IEFjKHRoaXMuYWEsdGhpcy51KX0sdGhpcykpO3RoaXMuU2E9bmV3IFBhO3RoaXMuSGE9bmV3IEhkO3RoaXMuZz1uZXcgSWQ7dGhpcy5JPW5ldyBrZSh0aGlzLnUsdGhpcy5nLnBhKTt0aGlzLkljPW5ldyBIZDt0aGlzLkpjPW5ldyBrZShudWxsLHRoaXMuSWMpO0FlKHRoaXMsXCJjb25uZWN0ZWRcIiwhMSk7QWUodGhpcyxcImF1dGhlbnRpY2F0ZWRcIiwhMSk7dGhpcy5UPW5ldyBEZDt0aGlzLkNjPTB9aD16ZS5wcm90b3R5cGU7aC50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybih0aGlzLk4ubmM/XCJodHRwczovL1wiOlwiaHR0cDovL1wiKSt0aGlzLk4uaG9zdH07aC5uYW1lPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuTi5ZYn07XHJcbmZ1bmN0aW9uIEJlKGEpe2E9UyhhLkljLG5ldyBGKFwiLmluZm8vc2VydmVyVGltZU9mZnNldFwiKSkuVigpfHwwO3JldHVybihuZXcgRGF0ZSkuZ2V0VGltZSgpK2F9ZnVuY3Rpb24gQ2UoYSl7YT1hPXt0aW1lc3RhbXA6QmUoYSl9O2EudGltZXN0YW1wPWEudGltZXN0YW1wfHwobmV3IERhdGUpLmdldFRpbWUoKTtyZXR1cm4gYX1cclxuaC5kYz1mdW5jdGlvbihhLGIsYyl7dGhpcy5DYysrO3RoaXMubWQmJihiPXRoaXMubWQoYSxiKSk7dmFyIGQsZSxmPVtdOzk8PWEubGVuZ3RoJiZhLmxhc3RJbmRleE9mKFwiLnByaW9yaXR5XCIpPT09YS5sZW5ndGgtOT8oZD1uZXcgRihhLnN1YnN0cmluZygwLGEubGVuZ3RoLTkpKSxlPVModGhpcy5nLnZhLGQpLklhKGIpLGYucHVzaChkKSk6Yz8oZD1uZXcgRihhKSxlPVModGhpcy5nLnZhLGQpLCRiKGIsZnVuY3Rpb24oYSxiKXt2YXIgYz1uZXcgRihiKTtcIi5wcmlvcml0eVwiPT09Yj9lPWUuSWEoYSk6KGU9ZS5BYShjLE8oYSkpLGYucHVzaChkLkcoYikpKX0pKTooZD1uZXcgRihhKSxlPU8oYiksZi5wdXNoKGQpKTthPXllKHRoaXMuSSxkLGUsdGhpcy5nLk0pO2I9ITE7Zm9yKGM9MDtjPGEubGVuZ3RoOysrYyl7dmFyIGc9YVtjXTtiPUpkKHRoaXMuZyxnLnBhdGgsZy50YSl8fGJ9YiYmKGQ9RGUodGhpcyxkKSk7Vyh0aGlzLkksZCxmKX07XHJcbmguYmM9ZnVuY3Rpb24oYSl7QWUodGhpcyxcImNvbm5lY3RlZFwiLGEpOyExPT09YSYmRWUodGhpcyl9O2guUWM9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztaYihhLGZ1bmN0aW9uKGEsZCl7QWUoYixkLGEpfSl9O2guR2M9ZnVuY3Rpb24oYSl7YT1uZXcgRihhKTtyZXR1cm4gUyh0aGlzLmcudmEsYSkuaGFzaCgpfTtoLnpiPWZ1bmN0aW9uKGEpe0FlKHRoaXMsXCJhdXRoZW50aWNhdGVkXCIsYSl9O2Z1bmN0aW9uIEFlKGEsYixjKXtiPW5ldyBGKFwiLy5pbmZvL1wiK2IpO1QoYS5JYyxiLE8oYykpO1coYS5KYyxiLFtiXSl9XHJcbmgubWI9ZnVuY3Rpb24oYSxiLGMpe1wiZmlyZWJhc2Vpby1kZW1vLmNvbVwiPT09dGhpcy5OLmRvbWFpbiYmTChcIkZpcmViYXNlUmVmLmF1dGgoKSBub3Qgc3VwcG9ydGVkIG9uIGRlbW8gKCouZmlyZWJhc2Vpby1kZW1vLmNvbSkgRmlyZWJhc2VzLiBQbGVhc2UgdXNlIG9uIHByb2R1Y3Rpb24gKCouZmlyZWJhc2Vpby5jb20pIEZpcmViYXNlcyBvbmx5LlwiKTt0aGlzLnUubWIoYSxmdW5jdGlvbihhLGMpe1goYixhLGMpfSxmdW5jdGlvbihhLGIpe0woXCJhdXRoKCkgd2FzIGNhbmNlbGVkOiBcIitiKTtpZihjKXt2YXIgZj1FcnJvcihiKTtmLmNvZGU9YS50b1VwcGVyQ2FzZSgpO2MoZil9fSl9O2guUGI9ZnVuY3Rpb24oYSl7dGhpcy51LlBiKGZ1bmN0aW9uKGIsYyl7WChhLGIsYyl9KX07XHJcbmgua2I9ZnVuY3Rpb24oYSxiLGMsZCl7dGhpcy5lKFwic2V0XCIse3BhdGg6YS50b1N0cmluZygpLHZhbHVlOmIsa2E6Y30pO3ZhciBlPUNlKHRoaXMpO2I9TyhiLGMpO3ZhciBlPVBkKGIsZSksZT15ZSh0aGlzLkksYSxlLHRoaXMuZy5NKSxmPXRoaXMuZy5zZXQoYSxlKSxnPXRoaXM7dGhpcy51LnB1dChhLnRvU3RyaW5nKCksYi5WKCEwKSxmdW5jdGlvbihiLGMpe1wib2tcIiE9PWImJkwoXCJzZXQgYXQgXCIrYStcIiBmYWlsZWQ6IFwiK2IpO01kKGcuZyxmKTtLZChnLmcsYSk7dmFyIGU9RGUoZyxhKTtXKGcuSSxlLFtdKTtYKGQsYixjKX0pO2U9RmUodGhpcyxhKTtEZSh0aGlzLGUpO1codGhpcy5JLGUsW2FdKX07XHJcbmgudXBkYXRlPWZ1bmN0aW9uKGEsYixjKXt0aGlzLmUoXCJ1cGRhdGVcIix7cGF0aDphLnRvU3RyaW5nKCksdmFsdWU6Yn0pO3ZhciBkPVModGhpcy5nLnBhLGEpLGU9ITAsZj1bXSxnPUNlKHRoaXMpLGs9W10sbDtmb3IobCBpbiBiKXt2YXIgZT0hMSxtPU8oYltsXSksbT1QZChtLGcpLGQ9ZC5IKGwsbSkscD1hLkcobCk7Zi5wdXNoKHApO209eWUodGhpcy5JLHAsbSx0aGlzLmcuTSk7az1rLmNvbmNhdCh0aGlzLmcuc2V0KGEsbSkpfWlmKGUpSyhcInVwZGF0ZSgpIGNhbGxlZCB3aXRoIGVtcHR5IGRhdGEuICBEb24ndCBkbyBhbnl0aGluZy5cIiksWChjLFwib2tcIik7ZWxzZXt2YXIgdD10aGlzO3pkKHRoaXMudSxhLnRvU3RyaW5nKCksYixmdW5jdGlvbihiLGQpe3YoXCJva1wiPT09Ynx8XCJwZXJtaXNzaW9uX2RlbmllZFwiPT09YixcIm1lcmdlIGF0IFwiK2ErXCIgZmFpbGVkLlwiKTtcIm9rXCIhPT1iJiZMKFwidXBkYXRlIGF0IFwiK2ErXCIgZmFpbGVkOiBcIitiKTtNZCh0Lmcsayk7S2QodC5nLGEpO3ZhciBlPVxyXG5EZSh0LGEpO1codC5JLGUsW10pO1goYyxiLGQpfSk7Yj1GZSh0aGlzLGEpO0RlKHRoaXMsYik7Vyh0LkksYixmKX19O2guV2M9ZnVuY3Rpb24oYSxiLGMpe3RoaXMuZShcInNldFByaW9yaXR5XCIse3BhdGg6YS50b1N0cmluZygpLGthOmJ9KTt2YXIgZD1DZSh0aGlzKSxkPU5kKGIsZCksZD1TKHRoaXMuZy5NLGEpLklhKGQpLGQ9eWUodGhpcy5JLGEsZCx0aGlzLmcuTSksZT10aGlzLmcuc2V0KGEsZCksZj10aGlzO3RoaXMudS5wdXQoYS50b1N0cmluZygpK1wiLy5wcmlvcml0eVwiLGIsZnVuY3Rpb24oYixkKXtcInBlcm1pc3Npb25fZGVuaWVkXCI9PT1iJiZMKFwic2V0UHJpb3JpdHkgYXQgXCIrYStcIiBmYWlsZWQ6IFwiK2IpO01kKGYuZyxlKTtLZChmLmcsYSk7dmFyIGw9RGUoZixhKTtXKGYuSSxsLFtdKTtYKGMsYixkKX0pO2I9RGUodGhpcyxhKTtXKGYuSSxiLFtdKX07XHJcbmZ1bmN0aW9uIEVlKGEpe2EuZShcIm9uRGlzY29ubmVjdEV2ZW50c1wiKTt2YXIgYj1bXSxjPUNlKGEpO0dkKE9kKGEuVCxjKSxuZXcgRihcIlwiKSxmdW5jdGlvbihjLGUpe3ZhciBmPXllKGEuSSxjLGUsYS5nLk0pO2IucHVzaC5hcHBseShiLGEuZy5zZXQoYyxmKSk7Zj1GZShhLGMpO0RlKGEsZik7VyhhLkksZixbY10pfSk7TWQoYS5nLGIpO2EuVD1uZXcgRGR9aC5OYz1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXM7dGhpcy51Lk5jKGEudG9TdHJpbmcoKSxmdW5jdGlvbihkLGUpe1wib2tcIj09PWQmJkZkKGMuVCxhKTtYKGIsZCxlKX0pfTtmdW5jdGlvbiBHZShhLGIsYyxkKXt2YXIgZT1PKGMpO3ZkKGEudSxiLnRvU3RyaW5nKCksZS5WKCEwKSxmdW5jdGlvbihjLGcpe1wib2tcIj09PWMmJkVkKGEuVCxiLGUpO1goZCxjLGcpfSl9XHJcbmZ1bmN0aW9uIEhlKGEsYixjLGQsZSl7dmFyIGY9TyhjLGQpO3ZkKGEudSxiLnRvU3RyaW5nKCksZi5WKCEwKSxmdW5jdGlvbihjLGQpe1wib2tcIj09PWMmJkVkKGEuVCxiLGYpO1goZSxjLGQpfSl9ZnVuY3Rpb24gSWUoYSxiLGMsZCl7dmFyIGU9ITAsZjtmb3IoZiBpbiBjKWU9ITE7ZT8oSyhcIm9uRGlzY29ubmVjdCgpLnVwZGF0ZSgpIGNhbGxlZCB3aXRoIGVtcHR5IGRhdGEuICBEb24ndCBkbyBhbnl0aGluZy5cIiksWChkLFwib2tcIikpOnhkKGEudSxiLnRvU3RyaW5nKCksYyxmdW5jdGlvbihlLGYpe2lmKFwib2tcIj09PWUpZm9yKHZhciBsIGluIGMpe3ZhciBtPU8oY1tsXSk7RWQoYS5ULGIuRyhsKSxtKX1YKGQsZSxmKX0pfWZ1bmN0aW9uIEplKGEpe3ljKGEuYWEsXCJkZXByZWNhdGVkX29uX2Rpc2Nvbm5lY3RcIik7YS56ZC5aYy5kZXByZWNhdGVkX29uX2Rpc2Nvbm5lY3Q9ITB9XHJcbmguUmI9ZnVuY3Rpb24oYSxiLGMsZCxlKXtcIi5pbmZvXCI9PT1DKGEucGF0aCk/dGhpcy5KYy5SYihhLGIsYyxkLGUpOnRoaXMuSS5SYihhLGIsYyxkLGUpfTtoLmxjPWZ1bmN0aW9uKGEsYixjLGQpe2lmKFwiLmluZm9cIj09PUMoYS5wYXRoKSl0aGlzLkpjLmxjKGEsYixjLGQpO2Vsc2V7Yj10aGlzLkkubGMoYSxiLGMsZCk7aWYoYz1udWxsIT09Yil7Yz10aGlzLmc7ZD1hLnBhdGg7Zm9yKHZhciBlPVtdLGY9MDtmPGIubGVuZ3RoOysrZillW2ZdPVMoYy52YSxiW2ZdKTtUKGMudmEsZCxNKTtmb3IoZj0wO2Y8Yi5sZW5ndGg7KytmKVQoYy52YSxiW2ZdLGVbZl0pO2M9S2QoYyxkKX1jJiYodih0aGlzLmcucGEuJD09PXRoaXMuSS5hYyxcIldlIHNob3VsZCBoYXZlIHJhaXNlZCBhbnkgb3V0c3RhbmRpbmcgZXZlbnRzIGJ5IG5vdy4gIEVsc2UsIHdlJ2xsIGJsb3cgdGhlbSBhd2F5LlwiKSxUKHRoaXMuZy5wYSxhLnBhdGgsUyh0aGlzLmcuTSxhLnBhdGgpKSx0aGlzLkkuYWM9dGhpcy5nLnBhLiQpfX07XHJcbmguTGE9ZnVuY3Rpb24oKXt0aGlzLnUuTGEoKX07aC5qYj1mdW5jdGlvbigpe3RoaXMudS5qYigpfTtoLlhjPWZ1bmN0aW9uKGEpe2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7YT8odGhpcy5xY3x8KHRoaXMucWM9bmV3IHpjKHRoaXMuYWEpKSxhPXRoaXMucWMuZ2V0KCkpOmE9dGhpcy5hYS5nZXQoKTt2YXIgYj13Yih2YyhhKSxmdW5jdGlvbihhLGIpe3JldHVybiBNYXRoLm1heChiLmxlbmd0aCxhKX0sMCksYztmb3IoYyBpbiBhKXtmb3IodmFyIGQ9YVtjXSxlPWMubGVuZ3RoO2U8YisyO2UrKyljKz1cIiBcIjtjb25zb2xlLmxvZyhjK2QpfX19O2guWWM9ZnVuY3Rpb24oYSl7eWModGhpcy5hYSxhKTt0aGlzLnpkLlpjW2FdPSEwfTtoLmU9ZnVuY3Rpb24oKXtLKFwicjpcIit0aGlzLnUuaWQrXCI6XCIsYXJndW1lbnRzKX07XHJcbmZ1bmN0aW9uIFgoYSxiLGMpe2EmJmVjKGZ1bmN0aW9uKCl7aWYoXCJva1wiPT1iKWEobnVsbCxjKTtlbHNle3ZhciBkPShifHxcImVycm9yXCIpLnRvVXBwZXJDYXNlKCksZT1kO2MmJihlKz1cIjogXCIrYyk7ZT1FcnJvcihlKTtlLmNvZGU9ZDthKGUpfX0pfTtmdW5jdGlvbiBLZShhLGIsYyxkLGUpe2Z1bmN0aW9uIGYoKXt9YS5lKFwidHJhbnNhY3Rpb24gb24gXCIrYik7dmFyIGc9bmV3IEUoYSxiKTtnLmZiKFwidmFsdWVcIixmKTtjPXtwYXRoOmIsdXBkYXRlOmMsRDpkLHN0YXR1czpudWxsLHFkOktiKCksd2M6ZSx2ZDowLHRjOmZ1bmN0aW9uKCl7Zy55YihcInZhbHVlXCIsZil9LHVjOm51bGx9O2EuSGEuJD1MZShhLGEuSGEuJCxhLmcuTS4kLGEuU2EpO2Q9Yy51cGRhdGUoUyhhLkhhLGIpLlYoKSk7aWYobihkKSl7QWEoXCJ0cmFuc2FjdGlvbiBmYWlsZWQ6IERhdGEgcmV0dXJuZWQgXCIsZCk7Yy5zdGF0dXM9MTtlPUkoYS5TYSxiKTt2YXIgaz1lLmooKXx8W107ay5wdXNoKGMpO0ooZSxrKTtrPVwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQmJkEoZCxcIi5wcmlvcml0eVwiKT9kW1wiLnByaW9yaXR5XCJdOlMoYS5nLk0sYikuaygpO2U9Q2UoYSk7ZD1PKGQsayk7ZD1QZChkLGUpO1QoYS5IYSxiLGQpO2Mud2MmJihUKGEuZy5wYSxiLGQpLFcoYS5JLFxyXG5iLFtiXSkpO01lKGEpfWVsc2UgYy50YygpLGMuRCYmKGE9TmUoYSxiKSxjLkQobnVsbCwhMSxhKSl9ZnVuY3Rpb24gTWUoYSxiKXt2YXIgYz1ifHxhLlNhO2J8fE9lKGEsYyk7aWYobnVsbCE9PWMuaigpKXt2YXIgZD1QZShhLGMpO3YoMDxkLmxlbmd0aCk7eGIoZCxmdW5jdGlvbihhKXtyZXR1cm4gMT09PWEuc3RhdHVzfSkmJlFlKGEsYy5wYXRoKCksZCl9ZWxzZSBjLnNiKCkmJmMuQShmdW5jdGlvbihiKXtNZShhLGIpfSl9XHJcbmZ1bmN0aW9uIFFlKGEsYixjKXtmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl2KDE9PT1jW2RdLnN0YXR1cyxcInRyeVRvU2VuZFRyYW5zYWN0aW9uUXVldWVfOiBpdGVtcyBpbiBxdWV1ZSBzaG91bGQgYWxsIGJlIHJ1bi5cIiksY1tkXS5zdGF0dXM9MixjW2RdLnZkKys7dmFyIGU9UyhhLmcuTSxiKS5oYXNoKCk7VChhLmcuTSxiLFMoYS5nLnBhLGIpKTtmb3IodmFyIGY9UyhhLkhhLGIpLlYoITApLGc9S2IoKSxrPVJlKGMpLGQ9MDtkPGsubGVuZ3RoO2QrKylKKEkoYS5nLkZiLGtbZF0pLGcpO2EudS5wdXQoYi50b1N0cmluZygpLGYsZnVuY3Rpb24oZSl7YS5lKFwidHJhbnNhY3Rpb24gcHV0IHJlc3BvbnNlXCIse3BhdGg6Yi50b1N0cmluZygpLHN0YXR1czplfSk7Zm9yKGQ9MDtkPGsubGVuZ3RoO2QrKyl7dmFyIGY9SShhLmcuRmIsa1tkXSkscD1mLmooKTt2KG51bGwhPT1wLFwic2VuZFRyYW5zYWN0aW9uUXVldWVfOiBwZW5kaW5nUHV0IHNob3VsZCBub3QgYmUgbnVsbC5cIik7cD09PVxyXG5nJiYoSihmLG51bGwpLFQoYS5nLk0sa1tkXSxTKGEuZy52YSxrW2RdKSkpfWlmKFwib2tcIj09PWUpe2U9W107Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKyljW2RdLnN0YXR1cz0zLGNbZF0uRCYmKGY9TmUoYSxjW2RdLnBhdGgpLGUucHVzaChyKGNbZF0uRCxudWxsLG51bGwsITAsZikpKSxjW2RdLnRjKCk7T2UoYSxJKGEuU2EsYikpO01lKGEpO2ZvcihkPTA7ZDxlLmxlbmd0aDtkKyspZWMoZVtkXSl9ZWxzZXtpZihcImRhdGFzdGFsZVwiPT09ZSlmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWNbZF0uc3RhdHVzPTQ9PT1jW2RdLnN0YXR1cz81OjE7ZWxzZSBmb3IoTChcInRyYW5zYWN0aW9uIGF0IFwiK2IrXCIgZmFpbGVkOiBcIitlKSxkPTA7ZDxjLmxlbmd0aDtkKyspY1tkXS5zdGF0dXM9NSxjW2RdLnVjPWU7ZT1EZShhLGIpO1coYS5JLGUsW2JdKX19LGUpfVxyXG5mdW5jdGlvbiBSZShhKXtmb3IodmFyIGI9e30sYz0wO2M8YS5sZW5ndGg7YysrKWFbY10ud2MmJihiW2FbY10ucGF0aC50b1N0cmluZygpXT1hW2NdLnBhdGgpO2E9W107Zm9yKHZhciBkIGluIGIpYS5wdXNoKGJbZF0pO3JldHVybiBhfVxyXG5mdW5jdGlvbiBEZShhLGIpe3ZhciBjPVNlKGEsYiksZD1jLnBhdGgoKSxjPVBlKGEsYyk7VChhLmcucGEsZCxTKGEuZy5NLGQpKTtUKGEuSGEsZCxTKGEuZy5NLGQpKTtpZigwIT09Yy5sZW5ndGgpe2Zvcih2YXIgZT1TKGEuZy5wYSxkKSxmPWUsZz1bXSxrPTA7azxjLmxlbmd0aDtrKyspe3ZhciBsPU5hKGQsY1trXS5wYXRoKSxtPSExLHA7dihudWxsIT09bCxcInJlcnVuVHJhbnNhY3Rpb25zVW5kZXJOb2RlXzogcmVsYXRpdmVQYXRoIHNob3VsZCBub3QgYmUgbnVsbC5cIik7aWYoNT09PWNba10uc3RhdHVzKW09ITAscD1jW2tdLnVjO2Vsc2UgaWYoMT09PWNba10uc3RhdHVzKWlmKDI1PD1jW2tdLnZkKW09ITAscD1cIm1heHJldHJ5XCI7ZWxzZXt2YXIgdD1lLkwobCkscz1jW2tdLnVwZGF0ZSh0LlYoKSk7aWYobihzKSl7QWEoXCJ0cmFuc2FjdGlvbiBmYWlsZWQ6IERhdGEgcmV0dXJuZWQgXCIscyk7dmFyIHc9TyhzKTtcIm9iamVjdFwiPT09dHlwZW9mIHMmJm51bGwhPXMmJkEocyxcIi5wcmlvcml0eVwiKXx8XHJcbih3PXcuSWEodC5rKCkpKTtlPWUuQWEobCx3KTtjW2tdLndjJiYoZj1mLkFhKGwsdykpfWVsc2UgbT0hMCxwPVwibm9kYXRhXCJ9bSYmKGNba10uc3RhdHVzPTMsc2V0VGltZW91dChjW2tdLnRjLDApLGNba10uRCYmKG09bmV3IEUoYSxjW2tdLnBhdGgpLGw9bmV3IFAoZS5MKGwpLG0pLFwibm9kYXRhXCI9PT1wP2cucHVzaChyKGNba10uRCxudWxsLG51bGwsITEsbCkpOmcucHVzaChyKGNba10uRCxudWxsLEVycm9yKHApLCExLGwpKSkpfVQoYS5IYSxkLGUpO1QoYS5nLnBhLGQsZik7T2UoYSxhLlNhKTtmb3Ioaz0wO2s8Zy5sZW5ndGg7aysrKWVjKGdba10pO01lKGEpfXJldHVybiBkfWZ1bmN0aW9uIFNlKGEsYil7Zm9yKHZhciBjLGQ9YS5TYTtudWxsIT09KGM9QyhiKSkmJm51bGw9PT1kLmooKTspZD1JKGQsYyksYj1MYShiKTtyZXR1cm4gZH1cclxuZnVuY3Rpb24gUGUoYSxiKXt2YXIgYz1bXTtUZShhLGIsYyk7Yy5zb3J0KGZ1bmN0aW9uKGEsYil7cmV0dXJuIGEucWQtYi5xZH0pO3JldHVybiBjfWZ1bmN0aW9uIFRlKGEsYixjKXt2YXIgZD1iLmooKTtpZihudWxsIT09ZClmb3IodmFyIGU9MDtlPGQubGVuZ3RoO2UrKyljLnB1c2goZFtlXSk7Yi5BKGZ1bmN0aW9uKGIpe1RlKGEsYixjKX0pfWZ1bmN0aW9uIE9lKGEsYil7dmFyIGM9Yi5qKCk7aWYoYyl7Zm9yKHZhciBkPTAsZT0wO2U8Yy5sZW5ndGg7ZSsrKTMhPT1jW2VdLnN0YXR1cyYmKGNbZF09Y1tlXSxkKyspO2MubGVuZ3RoPWQ7SihiLDA8Yy5sZW5ndGg/YzpudWxsKX1iLkEoZnVuY3Rpb24oYil7T2UoYSxiKX0pfWZ1bmN0aW9uIEZlKGEsYil7dmFyIGM9U2UoYSxiKS5wYXRoKCksZD1JKGEuU2EsYik7U2EoZCxmdW5jdGlvbihhKXtVZShhKX0pO1VlKGQpO1JhKGQsZnVuY3Rpb24oYSl7VWUoYSl9KTtyZXR1cm4gY31cclxuZnVuY3Rpb24gVWUoYSl7dmFyIGI9YS5qKCk7aWYobnVsbCE9PWIpe2Zvcih2YXIgYz1bXSxkPS0xLGU9MDtlPGIubGVuZ3RoO2UrKyk0IT09YltlXS5zdGF0dXMmJigyPT09YltlXS5zdGF0dXM/KHYoZD09PWUtMSxcIkFsbCBTRU5UIGl0ZW1zIHNob3VsZCBiZSBhdCBiZWdpbm5pbmcgb2YgcXVldWUuXCIpLGQ9ZSxiW2VdLnN0YXR1cz00LGJbZV0udWM9XCJzZXRcIik6KHYoMT09PWJbZV0uc3RhdHVzKSxiW2VdLnRjKCksYltlXS5EJiZjLnB1c2gocihiW2VdLkQsbnVsbCxFcnJvcihcInNldFwiKSwhMSxudWxsKSkpKTstMT09PWQ/SihhLG51bGwpOmIubGVuZ3RoPWQrMTtmb3IoZT0wO2U8Yy5sZW5ndGg7ZSsrKWVjKGNbZV0pfX1mdW5jdGlvbiBOZShhLGIpe3ZhciBjPW5ldyBFKGEsYik7cmV0dXJuIG5ldyBQKFMoYS5IYSxiKSxjKX1cclxuZnVuY3Rpb24gTGUoYSxiLGMsZCl7aWYoZC5mKCkpcmV0dXJuIGM7aWYobnVsbCE9ZC5qKCkpcmV0dXJuIGI7dmFyIGU9YztkLkEoZnVuY3Rpb24oZCl7dmFyIGc9ZC5uYW1lKCksaz1uZXcgRihnKTtkPUxlKGEsYi5MKGspLGMuTChrKSxkKTtlPWUuSChnLGQpfSk7cmV0dXJuIGV9O2Z1bmN0aW9uIFkoKXt0aGlzLmliPXt9fWNhKFkpO1kucHJvdG90eXBlLkxhPWZ1bmN0aW9uKCl7Zm9yKHZhciBhIGluIHRoaXMuaWIpdGhpcy5pYlthXS5MYSgpfTtZLnByb3RvdHlwZS5pbnRlcnJ1cHQ9WS5wcm90b3R5cGUuTGE7WS5wcm90b3R5cGUuamI9ZnVuY3Rpb24oKXtmb3IodmFyIGEgaW4gdGhpcy5pYil0aGlzLmliW2FdLmpiKCl9O1kucHJvdG90eXBlLnJlc3VtZT1ZLnByb3RvdHlwZS5qYjt2YXIgWj17TmQ6ZnVuY3Rpb24oYSl7dmFyIGI9Ti5wcm90b3R5cGUuaGFzaDtOLnByb3RvdHlwZS5oYXNoPWE7dmFyIGM9ZmMucHJvdG90eXBlLmhhc2g7ZmMucHJvdG90eXBlLmhhc2g9YTtyZXR1cm4gZnVuY3Rpb24oKXtOLnByb3RvdHlwZS5oYXNoPWI7ZmMucHJvdG90eXBlLmhhc2g9Y319fTtaLmhpamFja0hhc2g9Wi5OZDtaLlBhPWZ1bmN0aW9uKGEpe3JldHVybiBhLlBhKCl9O1oucXVlcnlJZGVudGlmaWVyPVouUGE7Wi5RZD1mdW5jdGlvbihhKXtyZXR1cm4gYS5tLnUuaWF9O1oubGlzdGVucz1aLlFkO1ouWWQ9ZnVuY3Rpb24oYSl7cmV0dXJuIGEubS51LmxhfTtaLnJlZkNvbm5lY3Rpb249Wi5ZZDtaLkNkPWxkO1ouRGF0YUNvbm5lY3Rpb249Wi5DZDtsZC5wcm90b3R5cGUuc2VuZFJlcXVlc3Q9bGQucHJvdG90eXBlLkdhO2xkLnByb3RvdHlwZS5pbnRlcnJ1cHQ9bGQucHJvdG90eXBlLkxhO1ouRGQ9JGM7Wi5SZWFsVGltZUNvbm5lY3Rpb249Wi5EZDtcclxuJGMucHJvdG90eXBlLnNlbmRSZXF1ZXN0PSRjLnByb3RvdHlwZS54ZDskYy5wcm90b3R5cGUuY2xvc2U9JGMucHJvdG90eXBlLmNsb3NlO1ouQmQ9b2I7Wi5Db25uZWN0aW9uVGFyZ2V0PVouQmQ7Wi5MZD1mdW5jdGlvbigpe09jPUdjPSEwfTtaLmZvcmNlTG9uZ1BvbGxpbmc9Wi5MZDtaLk1kPWZ1bmN0aW9uKCl7UGM9ITB9O1ouZm9yY2VXZWJTb2NrZXRzPVouTWQ7Wi5kZT1mdW5jdGlvbihhLGIpe2EubS51LlZjPWJ9O1ouc2V0U2VjdXJpdHlEZWJ1Z0NhbGxiYWNrPVouZGU7Wi5YYz1mdW5jdGlvbihhLGIpe2EubS5YYyhiKX07Wi5zdGF0cz1aLlhjO1ouWWM9ZnVuY3Rpb24oYSxiKXthLm0uWWMoYil9O1ouc3RhdHNJbmNyZW1lbnRDb3VudGVyPVouWWM7Wi5DYz1mdW5jdGlvbihhKXtyZXR1cm4gYS5tLkNjfTtaLk9kPWZ1bmN0aW9uKGEsYil7YS5tLm1kPWJ9O1ouaW50ZXJjZXB0U2VydmVyRGF0YT1aLk9kO2Z1bmN0aW9uICQoYSxiLGMpe3RoaXMuSmI9YTt0aGlzLlg9Yjt0aGlzLkZhPWN9JC5wcm90b3R5cGUuY2FuY2VsPWZ1bmN0aW9uKGEpe3goXCJGaXJlYmFzZS5vbkRpc2Nvbm5lY3QoKS5jYW5jZWxcIiwwLDEsYXJndW1lbnRzLmxlbmd0aCk7eihcIkZpcmViYXNlLm9uRGlzY29ubmVjdCgpLmNhbmNlbFwiLDEsYSwhMCk7dGhpcy5KYi5OYyh0aGlzLlgsYSl9OyQucHJvdG90eXBlLmNhbmNlbD0kLnByb3RvdHlwZS5jYW5jZWw7JC5wcm90b3R5cGUucmVtb3ZlPWZ1bmN0aW9uKGEpe3goXCJGaXJlYmFzZS5vbkRpc2Nvbm5lY3QoKS5yZW1vdmVcIiwwLDEsYXJndW1lbnRzLmxlbmd0aCk7QihcIkZpcmViYXNlLm9uRGlzY29ubmVjdCgpLnJlbW92ZVwiLHRoaXMuWCk7eihcIkZpcmViYXNlLm9uRGlzY29ubmVjdCgpLnJlbW92ZVwiLDEsYSwhMCk7R2UodGhpcy5KYix0aGlzLlgsbnVsbCxhKX07JC5wcm90b3R5cGUucmVtb3ZlPSQucHJvdG90eXBlLnJlbW92ZTtcclxuJC5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKGEsYil7eChcIkZpcmViYXNlLm9uRGlzY29ubmVjdCgpLnNldFwiLDEsMixhcmd1bWVudHMubGVuZ3RoKTtCKFwiRmlyZWJhc2Uub25EaXNjb25uZWN0KCkuc2V0XCIsdGhpcy5YKTt6YShcIkZpcmViYXNlLm9uRGlzY29ubmVjdCgpLnNldFwiLGEsITEpO3ooXCJGaXJlYmFzZS5vbkRpc2Nvbm5lY3QoKS5zZXRcIiwyLGIsITApO0dlKHRoaXMuSmIsdGhpcy5YLGEsYil9OyQucHJvdG90eXBlLnNldD0kLnByb3RvdHlwZS5zZXQ7XHJcbiQucHJvdG90eXBlLmtiPWZ1bmN0aW9uKGEsYixjKXt4KFwiRmlyZWJhc2Uub25EaXNjb25uZWN0KCkuc2V0V2l0aFByaW9yaXR5XCIsMiwzLGFyZ3VtZW50cy5sZW5ndGgpO0IoXCJGaXJlYmFzZS5vbkRpc2Nvbm5lY3QoKS5zZXRXaXRoUHJpb3JpdHlcIix0aGlzLlgpO3phKFwiRmlyZWJhc2Uub25EaXNjb25uZWN0KCkuc2V0V2l0aFByaW9yaXR5XCIsYSwhMSk7RWEoXCJGaXJlYmFzZS5vbkRpc2Nvbm5lY3QoKS5zZXRXaXRoUHJpb3JpdHlcIiwyLGIsITEpO3ooXCJGaXJlYmFzZS5vbkRpc2Nvbm5lY3QoKS5zZXRXaXRoUHJpb3JpdHlcIiwzLGMsITApO2lmKFwiLmxlbmd0aFwiPT09dGhpcy5GYXx8XCIua2V5c1wiPT09dGhpcy5GYSl0aHJvd1wiRmlyZWJhc2Uub25EaXNjb25uZWN0KCkuc2V0V2l0aFByaW9yaXR5IGZhaWxlZDogXCIrdGhpcy5GYStcIiBpcyBhIHJlYWQtb25seSBvYmplY3QuXCI7SGUodGhpcy5KYix0aGlzLlgsYSxiLGMpfTskLnByb3RvdHlwZS5zZXRXaXRoUHJpb3JpdHk9JC5wcm90b3R5cGUua2I7XHJcbiQucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbihhLGIpe3goXCJGaXJlYmFzZS5vbkRpc2Nvbm5lY3QoKS51cGRhdGVcIiwxLDIsYXJndW1lbnRzLmxlbmd0aCk7QihcIkZpcmViYXNlLm9uRGlzY29ubmVjdCgpLnVwZGF0ZVwiLHRoaXMuWCk7RGEoXCJGaXJlYmFzZS5vbkRpc2Nvbm5lY3QoKS51cGRhdGVcIixhKTt6KFwiRmlyZWJhc2Uub25EaXNjb25uZWN0KCkudXBkYXRlXCIsMixiLCEwKTtJZSh0aGlzLkpiLHRoaXMuWCxhLGIpfTskLnByb3RvdHlwZS51cGRhdGU9JC5wcm90b3R5cGUudXBkYXRlO3ZhciBWZT1mdW5jdGlvbigpe3ZhciBhPTAsYj1bXTtyZXR1cm4gZnVuY3Rpb24oYyl7dmFyIGQ9Yz09PWE7YT1jO2Zvcih2YXIgZT1BcnJheSg4KSxmPTc7MDw9ZjtmLS0pZVtmXT1cIi0wMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpfYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcIi5jaGFyQXQoYyU2NCksYz1NYXRoLmZsb29yKGMvNjQpO3YoMD09PWMsXCJDYW5ub3QgcHVzaCBhdCB0aW1lID09IDBcIik7Yz1lLmpvaW4oXCJcIik7aWYoZCl7Zm9yKGY9MTE7MDw9ZiYmNjM9PT1iW2ZdO2YtLSliW2ZdPTA7YltmXSsrfWVsc2UgZm9yKGY9MDsxMj5mO2YrKyliW2ZdPU1hdGguZmxvb3IoNjQqTWF0aC5yYW5kb20oKSk7Zm9yKGY9MDsxMj5mO2YrKyljKz1cIi0wMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpfYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcIi5jaGFyQXQoYltmXSk7digyMD09PWMubGVuZ3RoLFwiTmV4dFB1c2hJZDogTGVuZ3RoIHNob3VsZCBiZSAyMC5cIik7XHJcbnJldHVybiBjfX0oKTtmdW5jdGlvbiBFKGEsYil7dmFyIGMsZDtpZihhIGluc3RhbmNlb2YgemUpYz1hLGQ9YjtlbHNle3goXCJuZXcgRmlyZWJhc2VcIiwxLDIsYXJndW1lbnRzLmxlbmd0aCk7dmFyIGU9YXJndW1lbnRzWzBdO2Q9Yz1cIlwiO3ZhciBmPSEwLGc9XCJcIjtpZihxKGUpKXt2YXIgaz1lLmluZGV4T2YoXCIvL1wiKTtpZigwPD1rKXZhciBsPWUuc3Vic3RyaW5nKDAsay0xKSxlPWUuc3Vic3RyaW5nKGsrMik7az1lLmluZGV4T2YoXCIvXCIpOy0xPT09ayYmKGs9ZS5sZW5ndGgpO2M9ZS5zdWJzdHJpbmcoMCxrKTt2YXIgZT1lLnN1YnN0cmluZyhrKzEpLG09Yy5zcGxpdChcIi5cIik7aWYoMz09bS5sZW5ndGgpe2s9bVsyXS5pbmRleE9mKFwiOlwiKTtmPTA8PWs/XCJodHRwc1wiPT09bHx8XCJ3c3NcIj09PWw6ITA7aWYoXCJmaXJlYmFzZVwiPT09bVsxXSlTYihjK1wiIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQuIFBsZWFzZSB1c2UgPFlPVVIgRklSRUJBU0U+LmZpcmViYXNlaW8uY29tIGluc3RlYWRcIik7ZWxzZSBmb3IoZD1tWzBdLFxyXG5nPVwiXCIsZT0oXCIvXCIrZSkuc3BsaXQoXCIvXCIpLGs9MDtrPGUubGVuZ3RoO2srKylpZigwPGVba10ubGVuZ3RoKXttPWVba107dHJ5e209ZGVjb2RlVVJJQ29tcG9uZW50KG0ucmVwbGFjZSgvXFwrL2csXCIgXCIpKX1jYXRjaChwKXt9Zys9XCIvXCIrbX1kPWQudG9Mb3dlckNhc2UoKX1lbHNlIFNiKFwiQ2Fubm90IHBhcnNlIEZpcmViYXNlIHVybC4gUGxlYXNlIHVzZSBodHRwczo8WU9VUiBGSVJFQkFTRT4uZmlyZWJhc2Vpby5jb21cIil9Znx8XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiB3aW5kb3cmJndpbmRvdy5sb2NhdGlvbiYmd2luZG93LmxvY2F0aW9uLnByb3RvY29sJiYtMSE9PXdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbC5pbmRleE9mKFwiaHR0cHM6XCIpJiZMKFwiSW5zZWN1cmUgRmlyZWJhc2UgYWNjZXNzIGZyb20gYSBzZWN1cmUgcGFnZS4gUGxlYXNlIHVzZSBodHRwcyBpbiBjYWxscyB0byBuZXcgRmlyZWJhc2UoKS5cIik7Yz1uZXcgb2IoYyxmLGQsXCJ3c1wiPT09bHx8XCJ3c3NcIj09PWwpO2Q9bmV3IEYoZyk7XHJcbmY9ZC50b1N0cmluZygpOyEobD0hcShjLmhvc3QpfHwwPT09Yy5ob3N0Lmxlbmd0aHx8IXlhKGMuWWIpKSYmKGw9MCE9PWYubGVuZ3RoKSYmKGYmJihmPWYucmVwbGFjZSgvXlxcLypcXC5pbmZvKFxcL3wkKS8sXCIvXCIpKSxsPSEocShmKSYmMCE9PWYubGVuZ3RoJiYheGEudGVzdChmKSkpO2lmKGwpdGhyb3cgRXJyb3IoeShcIm5ldyBGaXJlYmFzZVwiLDEsITEpKydtdXN0IGJlIGEgdmFsaWQgZmlyZWJhc2UgVVJMIGFuZCB0aGUgcGF0aCBjYW5cXCd0IGNvbnRhaW4gXCIuXCIsIFwiI1wiLCBcIiRcIiwgXCJbXCIsIG9yIFwiXVwiLicpO2lmKGIpaWYoYiBpbnN0YW5jZW9mIFkpZj1iO2Vsc2UgdGhyb3cgRXJyb3IoXCJFeHBlY3RlZCBhIHZhbGlkIEZpcmViYXNlLkNvbnRleHQgZm9yIHNlY29uZCBhcmd1bWVudCB0byBuZXcgRmlyZWJhc2UoKVwiKTtlbHNlIGY9WS5yYigpO2w9Yy50b1N0cmluZygpO2U9dmEoZi5pYixsKTtlfHwoZT1uZXcgemUoYyksZi5pYltsXT1lKTtjPWV9RC5jYWxsKHRoaXMsYyxkKX1cclxuamEoRSxEKTt2YXIgV2U9RSxYZT1bXCJGaXJlYmFzZVwiXSxZZT1hYTtYZVswXWluIFllfHwhWWUuZXhlY1NjcmlwdHx8WWUuZXhlY1NjcmlwdChcInZhciBcIitYZVswXSk7Zm9yKHZhciBaZTtYZS5sZW5ndGgmJihaZT1YZS5zaGlmdCgpKTspIVhlLmxlbmd0aCYmbihXZSk/WWVbWmVdPVdlOlllPVllW1plXT9ZZVtaZV06WWVbWmVdPXt9O0UucHJvdG90eXBlLm5hbWU9ZnVuY3Rpb24oKXt4KFwiRmlyZWJhc2UubmFtZVwiLDAsMCxhcmd1bWVudHMubGVuZ3RoKTtyZXR1cm4gdGhpcy5wYXRoLmYoKT9udWxsOk1hKHRoaXMucGF0aCl9O0UucHJvdG90eXBlLm5hbWU9RS5wcm90b3R5cGUubmFtZTtcclxuRS5wcm90b3R5cGUuRz1mdW5jdGlvbihhKXt4KFwiRmlyZWJhc2UuY2hpbGRcIiwxLDEsYXJndW1lbnRzLmxlbmd0aCk7aWYoZmEoYSkpYT1TdHJpbmcoYSk7ZWxzZSBpZighKGEgaW5zdGFuY2VvZiBGKSlpZihudWxsPT09Qyh0aGlzLnBhdGgpKXt2YXIgYj1hO2ImJihiPWIucmVwbGFjZSgvXlxcLypcXC5pbmZvKFxcL3wkKS8sXCIvXCIpKTtIYShcIkZpcmViYXNlLmNoaWxkXCIsYil9ZWxzZSBIYShcIkZpcmViYXNlLmNoaWxkXCIsYSk7cmV0dXJuIG5ldyBFKHRoaXMubSx0aGlzLnBhdGguRyhhKSl9O0UucHJvdG90eXBlLmNoaWxkPUUucHJvdG90eXBlLkc7RS5wcm90b3R5cGUucGFyZW50PWZ1bmN0aW9uKCl7eChcIkZpcmViYXNlLnBhcmVudFwiLDAsMCxhcmd1bWVudHMubGVuZ3RoKTt2YXIgYT10aGlzLnBhdGgucGFyZW50KCk7cmV0dXJuIG51bGw9PT1hP251bGw6bmV3IEUodGhpcy5tLGEpfTtFLnByb3RvdHlwZS5wYXJlbnQ9RS5wcm90b3R5cGUucGFyZW50O1xyXG5FLnByb3RvdHlwZS5yb290PWZ1bmN0aW9uKCl7eChcIkZpcmViYXNlLnJlZlwiLDAsMCxhcmd1bWVudHMubGVuZ3RoKTtmb3IodmFyIGE9dGhpcztudWxsIT09YS5wYXJlbnQoKTspYT1hLnBhcmVudCgpO3JldHVybiBhfTtFLnByb3RvdHlwZS5yb290PUUucHJvdG90eXBlLnJvb3Q7RS5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXt4KFwiRmlyZWJhc2UudG9TdHJpbmdcIiwwLDAsYXJndW1lbnRzLmxlbmd0aCk7dmFyIGE7aWYobnVsbD09PXRoaXMucGFyZW50KCkpYT10aGlzLm0udG9TdHJpbmcoKTtlbHNle2E9dGhpcy5wYXJlbnQoKS50b1N0cmluZygpK1wiL1wiO3ZhciBiPXRoaXMubmFtZSgpO2ErPWVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoYikpfXJldHVybiBhfTtFLnByb3RvdHlwZS50b1N0cmluZz1FLnByb3RvdHlwZS50b1N0cmluZztcclxuRS5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKGEsYil7eChcIkZpcmViYXNlLnNldFwiLDEsMixhcmd1bWVudHMubGVuZ3RoKTtCKFwiRmlyZWJhc2Uuc2V0XCIsdGhpcy5wYXRoKTt6YShcIkZpcmViYXNlLnNldFwiLGEsITEpO3ooXCJGaXJlYmFzZS5zZXRcIiwyLGIsITApO3RoaXMubS5rYih0aGlzLnBhdGgsYSxudWxsLGIpfTtFLnByb3RvdHlwZS5zZXQ9RS5wcm90b3R5cGUuc2V0O0UucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbihhLGIpe3goXCJGaXJlYmFzZS51cGRhdGVcIiwxLDIsYXJndW1lbnRzLmxlbmd0aCk7QihcIkZpcmViYXNlLnVwZGF0ZVwiLHRoaXMucGF0aCk7RGEoXCJGaXJlYmFzZS51cGRhdGVcIixhKTt6KFwiRmlyZWJhc2UudXBkYXRlXCIsMixiLCEwKTtpZihBKGEsXCIucHJpb3JpdHlcIikpdGhyb3cgRXJyb3IoXCJ1cGRhdGUoKSBkb2VzIG5vdCBjdXJyZW50bHkgc3VwcG9ydCB1cGRhdGluZyAucHJpb3JpdHkuXCIpO3RoaXMubS51cGRhdGUodGhpcy5wYXRoLGEsYil9O1xyXG5FLnByb3RvdHlwZS51cGRhdGU9RS5wcm90b3R5cGUudXBkYXRlO0UucHJvdG90eXBlLmtiPWZ1bmN0aW9uKGEsYixjKXt4KFwiRmlyZWJhc2Uuc2V0V2l0aFByaW9yaXR5XCIsMiwzLGFyZ3VtZW50cy5sZW5ndGgpO0IoXCJGaXJlYmFzZS5zZXRXaXRoUHJpb3JpdHlcIix0aGlzLnBhdGgpO3phKFwiRmlyZWJhc2Uuc2V0V2l0aFByaW9yaXR5XCIsYSwhMSk7RWEoXCJGaXJlYmFzZS5zZXRXaXRoUHJpb3JpdHlcIiwyLGIsITEpO3ooXCJGaXJlYmFzZS5zZXRXaXRoUHJpb3JpdHlcIiwzLGMsITApO2lmKFwiLmxlbmd0aFwiPT09dGhpcy5uYW1lKCl8fFwiLmtleXNcIj09PXRoaXMubmFtZSgpKXRocm93XCJGaXJlYmFzZS5zZXRXaXRoUHJpb3JpdHkgZmFpbGVkOiBcIit0aGlzLm5hbWUoKStcIiBpcyBhIHJlYWQtb25seSBvYmplY3QuXCI7dGhpcy5tLmtiKHRoaXMucGF0aCxhLGIsYyl9O0UucHJvdG90eXBlLnNldFdpdGhQcmlvcml0eT1FLnByb3RvdHlwZS5rYjtcclxuRS5wcm90b3R5cGUucmVtb3ZlPWZ1bmN0aW9uKGEpe3goXCJGaXJlYmFzZS5yZW1vdmVcIiwwLDEsYXJndW1lbnRzLmxlbmd0aCk7QihcIkZpcmViYXNlLnJlbW92ZVwiLHRoaXMucGF0aCk7eihcIkZpcmViYXNlLnJlbW92ZVwiLDEsYSwhMCk7dGhpcy5zZXQobnVsbCxhKX07RS5wcm90b3R5cGUucmVtb3ZlPUUucHJvdG90eXBlLnJlbW92ZTtcclxuRS5wcm90b3R5cGUudHJhbnNhY3Rpb249ZnVuY3Rpb24oYSxiLGMpe3goXCJGaXJlYmFzZS50cmFuc2FjdGlvblwiLDEsMyxhcmd1bWVudHMubGVuZ3RoKTtCKFwiRmlyZWJhc2UudHJhbnNhY3Rpb25cIix0aGlzLnBhdGgpO3ooXCJGaXJlYmFzZS50cmFuc2FjdGlvblwiLDEsYSwhMSk7eihcIkZpcmViYXNlLnRyYW5zYWN0aW9uXCIsMixiLCEwKTtpZihuKGMpJiZcImJvb2xlYW5cIiE9dHlwZW9mIGMpdGhyb3cgRXJyb3IoeShcIkZpcmViYXNlLnRyYW5zYWN0aW9uXCIsMywhMCkrXCJtdXN0IGJlIGEgYm9vbGVhbi5cIik7aWYoXCIubGVuZ3RoXCI9PT10aGlzLm5hbWUoKXx8XCIua2V5c1wiPT09dGhpcy5uYW1lKCkpdGhyb3dcIkZpcmViYXNlLnRyYW5zYWN0aW9uIGZhaWxlZDogXCIrdGhpcy5uYW1lKCkrXCIgaXMgYSByZWFkLW9ubHkgb2JqZWN0LlwiO1widW5kZWZpbmVkXCI9PT10eXBlb2YgYyYmKGM9ITApO0tlKHRoaXMubSx0aGlzLnBhdGgsYSxiLGMpfTtFLnByb3RvdHlwZS50cmFuc2FjdGlvbj1FLnByb3RvdHlwZS50cmFuc2FjdGlvbjtcclxuRS5wcm90b3R5cGUuV2M9ZnVuY3Rpb24oYSxiKXt4KFwiRmlyZWJhc2Uuc2V0UHJpb3JpdHlcIiwxLDIsYXJndW1lbnRzLmxlbmd0aCk7QihcIkZpcmViYXNlLnNldFByaW9yaXR5XCIsdGhpcy5wYXRoKTtFYShcIkZpcmViYXNlLnNldFByaW9yaXR5XCIsMSxhLCExKTt6KFwiRmlyZWJhc2Uuc2V0UHJpb3JpdHlcIiwyLGIsITApO3RoaXMubS5XYyh0aGlzLnBhdGgsYSxiKX07RS5wcm90b3R5cGUuc2V0UHJpb3JpdHk9RS5wcm90b3R5cGUuV2M7RS5wcm90b3R5cGUucHVzaD1mdW5jdGlvbihhLGIpe3goXCJGaXJlYmFzZS5wdXNoXCIsMCwyLGFyZ3VtZW50cy5sZW5ndGgpO0IoXCJGaXJlYmFzZS5wdXNoXCIsdGhpcy5wYXRoKTt6YShcIkZpcmViYXNlLnB1c2hcIixhLCEwKTt6KFwiRmlyZWJhc2UucHVzaFwiLDIsYiwhMCk7dmFyIGM9QmUodGhpcy5tKSxjPVZlKGMpLGM9dGhpcy5HKGMpO1widW5kZWZpbmVkXCIhPT10eXBlb2YgYSYmbnVsbCE9PWEmJmMuc2V0KGEsYik7cmV0dXJuIGN9O1xyXG5FLnByb3RvdHlwZS5wdXNoPUUucHJvdG90eXBlLnB1c2g7RS5wcm90b3R5cGUuamE9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3ICQodGhpcy5tLHRoaXMucGF0aCx0aGlzLm5hbWUoKSl9O0UucHJvdG90eXBlLm9uRGlzY29ubmVjdD1FLnByb3RvdHlwZS5qYTtFLnByb3RvdHlwZS5aZD1mdW5jdGlvbigpe0woXCJGaXJlYmFzZVJlZi5yZW1vdmVPbkRpc2Nvbm5lY3QoKSBiZWluZyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIEZpcmViYXNlUmVmLm9uRGlzY29ubmVjdCgpLnJlbW92ZSgpIGluc3RlYWQuXCIpO3RoaXMuamEoKS5yZW1vdmUoKTtKZSh0aGlzLm0pfTtFLnByb3RvdHlwZS5yZW1vdmVPbkRpc2Nvbm5lY3Q9RS5wcm90b3R5cGUuWmQ7XHJcbkUucHJvdG90eXBlLmNlPWZ1bmN0aW9uKGEpe0woXCJGaXJlYmFzZVJlZi5zZXRPbkRpc2Nvbm5lY3QodmFsdWUpIGJlaW5nIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgRmlyZWJhc2VSZWYub25EaXNjb25uZWN0KCkuc2V0KHZhbHVlKSBpbnN0ZWFkLlwiKTt0aGlzLmphKCkuc2V0KGEpO0plKHRoaXMubSl9O0UucHJvdG90eXBlLnNldE9uRGlzY29ubmVjdD1FLnByb3RvdHlwZS5jZTtFLnByb3RvdHlwZS5tYj1mdW5jdGlvbihhLGIsYyl7eChcIkZpcmViYXNlLmF1dGhcIiwxLDMsYXJndW1lbnRzLmxlbmd0aCk7aWYoIXEoYSkpdGhyb3cgRXJyb3IoeShcIkZpcmViYXNlLmF1dGhcIiwxLCExKStcIm11c3QgYmUgYSB2YWxpZCBjcmVkZW50aWFsIChhIHN0cmluZykuXCIpO3ooXCJGaXJlYmFzZS5hdXRoXCIsMixiLCEwKTt6KFwiRmlyZWJhc2UuYXV0aFwiLDMsYiwhMCk7dGhpcy5tLm1iKGEsYixjKX07RS5wcm90b3R5cGUuYXV0aD1FLnByb3RvdHlwZS5tYjtcclxuRS5wcm90b3R5cGUuUGI9ZnVuY3Rpb24oYSl7eChcIkZpcmViYXNlLnVuYXV0aFwiLDAsMSxhcmd1bWVudHMubGVuZ3RoKTt6KFwiRmlyZWJhc2UudW5hdXRoXCIsMSxhLCEwKTt0aGlzLm0uUGIoYSl9O0UucHJvdG90eXBlLnVuYXV0aD1FLnByb3RvdHlwZS5QYjtFLmdvT2ZmbGluZT1mdW5jdGlvbigpe3goXCJGaXJlYmFzZS5nb09mZmxpbmVcIiwwLDAsYXJndW1lbnRzLmxlbmd0aCk7WS5yYigpLkxhKCl9O0UuZ29PbmxpbmU9ZnVuY3Rpb24oKXt4KFwiRmlyZWJhc2UuZ29PbmxpbmVcIiwwLDAsYXJndW1lbnRzLmxlbmd0aCk7WS5yYigpLmpiKCl9O1xyXG5mdW5jdGlvbiBQYihhLGIpe3YoIWJ8fCEwPT09YXx8ITE9PT1hLFwiQ2FuJ3QgdHVybiBvbiBjdXN0b20gbG9nZ2VycyBwZXJzaXN0ZW50bHkuXCIpOyEwPT09YT8oXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGNvbnNvbGUubG9nP05iPXIoY29uc29sZS5sb2csY29uc29sZSk6XCJvYmplY3RcIj09PXR5cGVvZiBjb25zb2xlLmxvZyYmKE5iPWZ1bmN0aW9uKGEpe2NvbnNvbGUubG9nKGEpfSkpLGImJm5iLnNldChcImxvZ2dpbmdfZW5hYmxlZFwiLCEwKSk6YT9OYj1hOihOYj1udWxsLG5iLnJlbW92ZShcImxvZ2dpbmdfZW5hYmxlZFwiKSl9RS5lbmFibGVMb2dnaW5nPVBiO0UuU2VydmVyVmFsdWU9e1RJTUVTVEFNUDp7XCIuc3ZcIjpcInRpbWVzdGFtcFwifX07RS5JTlRFUk5BTD1aO0UuQ29udGV4dD1ZO30pKCk7XHJcbm1vZHVsZS5leHBvcnRzID0gRmlyZWJhc2U7XHJcblxufSx7fV0sMjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChyb290LCBwbHVyYWxpemUpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICAgIC8vIE5vZGUuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBwbHVyYWxpemUoKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAvLyBBTUQsIHJlZ2lzdGVycyBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgIGRlZmluZShmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcGx1cmFsaXplKCk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQnJvd3NlciBnbG9iYWwuXG4gICAgcm9vdC5wbHVyYWxpemUgPSBwbHVyYWxpemUoKTtcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKCkge1xuICAvLyBSdWxlIHN0b3JhZ2UgLSBwbHVyYWxpemUgYW5kIHNpbmd1bGFyaXplIG5lZWQgdG8gYmUgcnVuIHNlcXVlbnRpYWxseSxcbiAgLy8gd2hpbGUgb3RoZXIgcnVsZXMgY2FuIGJlIG9wdGltaXplZCB1c2luZyBhbiBvYmplY3QgZm9yIGluc3RhbnQgbG9va3Vwcy5cbiAgdmFyIHBsdXJhbFJ1bGVzICAgICAgPSBbXTtcbiAgdmFyIHNpbmd1bGFyUnVsZXMgICAgPSBbXTtcbiAgdmFyIHVuY291bnRhYmxlcyAgICAgPSB7fTtcbiAgdmFyIGlycmVndWxhclBsdXJhbHMgPSB7fTtcbiAgdmFyIGlycmVndWxhclNpbmdsZXMgPSB7fTtcblxuICAvKipcbiAgICogVGl0bGUgY2FzZSBhIHN0cmluZy5cbiAgICpcbiAgICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgZnVuY3Rpb24gdG9UaXRsZUNhc2UgKHN0cikge1xuICAgIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc3Vic3RyKDEpLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICAvKipcbiAgICogU2FuaXRpemUgYSBwbHVyYWxpemF0aW9uIHJ1bGUgdG8gYSB1c2FibGUgcmVndWxhciBleHByZXNzaW9uLlxuICAgKlxuICAgKiBAcGFyYW0gIHsoUmVnRXhwfHN0cmluZyl9IHJ1bGVcbiAgICogQHJldHVybiB7UmVnRXhwfVxuICAgKi9cbiAgZnVuY3Rpb24gc2FuaXRpemVSdWxlIChydWxlKSB7XG4gICAgaWYgKHR5cGVvZiBydWxlID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgcnVsZSArICckJywgJ2knKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXNzIGluIGEgd29yZCB0b2tlbiB0byBwcm9kdWNlIGEgZnVuY3Rpb24gdGhhdCBjYW4gcmVwbGljYXRlIHRoZSBjYXNlIG9uXG4gICAqIGFub3RoZXIgd29yZC5cbiAgICpcbiAgICogQHBhcmFtICB7c3RyaW5nfSAgIHdvcmRcbiAgICogQHBhcmFtICB7c3RyaW5nfSAgIHRva2VuXG4gICAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICAgKi9cbiAgZnVuY3Rpb24gcmVzdG9yZUNhc2UgKHdvcmQsIHRva2VuKSB7XG4gICAgLy8gVXBwZXIgY2FzZWQgd29yZHMuIEUuZy4gXCJIRUxMT1wiLlxuICAgIGlmICh3b3JkID09PSB3b3JkLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIHJldHVybiB0b2tlbi50b1VwcGVyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8vIFRpdGxlIGNhc2VkIHdvcmRzLiBFLmcuIFwiVGl0bGVcIi5cbiAgICBpZiAod29yZFswXSA9PT0gd29yZFswXS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICByZXR1cm4gdG9UaXRsZUNhc2UodG9rZW4pO1xuICAgIH1cblxuICAgIC8vIExvd2VyIGNhc2VkIHdvcmRzLiBFLmcuIFwidGVzdFwiLlxuICAgIHJldHVybiB0b2tlbi50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEludGVycG9sYXRlIGEgcmVnZXhwIHN0cmluZy5cbiAgICpcbiAgICogQHBhcmFtICB7W3R5cGVdfSBzdHIgIFtkZXNjcmlwdGlvbl1cbiAgICogQHBhcmFtICB7W3R5cGVdfSBhcmdzIFtkZXNjcmlwdGlvbl1cbiAgICogQHJldHVybiB7W3R5cGVdfSAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlIChzdHIsIGFyZ3MpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoL1xcJChcXGR7MSwyfSkvZywgZnVuY3Rpb24gKG1hdGNoLCBpbmRleCkge1xuICAgICAgcmV0dXJuIGFyZ3NbaW5kZXhdIHx8ICcnO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNhbml0aXplIGEgd29yZCBieSBwYXNzaW5nIGluIHRoZSB3b3JkIGFuZCBzYW5pdGl6YXRpb24gcnVsZXMuXG4gICAqXG4gICAqIEBwYXJhbSAge1N0cmluZ30gICB3b3JkXG4gICAqIEBwYXJhbSAge0FycmF5fSAgICBjb2xsZWN0aW9uXG4gICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICovXG4gIGZ1bmN0aW9uIHNhbml0aXplV29yZCAod29yZCwgY29sbGVjdGlvbikge1xuICAgIC8vIEVtcHR5IHN0cmluZyBvciBkb2Vzbid0IG5lZWQgZml4aW5nLlxuICAgIGlmICghd29yZC5sZW5ndGggfHwgdW5jb3VudGFibGVzLmhhc093blByb3BlcnR5KHdvcmQpKSB7XG4gICAgICByZXR1cm4gd29yZDtcbiAgICB9XG5cbiAgICB2YXIgbGVuID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cbiAgICAvLyBJdGVyYXRlIG92ZXIgdGhlIHNhbml0aXphdGlvbiBydWxlcyBhbmQgdXNlIHRoZSBmaXJzdCBvbmUgdG8gbWF0Y2guXG4gICAgd2hpbGUgKGxlbi0tKSB7XG4gICAgICB2YXIgcnVsZSA9IGNvbGxlY3Rpb25bbGVuXTtcblxuICAgICAgLy8gSWYgdGhlIHJ1bGUgcGFzc2VzLCByZXR1cm4gdGhlIHJlcGxhY2VtZW50LlxuICAgICAgaWYgKHJ1bGVbMF0udGVzdCh3b3JkKSkge1xuICAgICAgICByZXR1cm4gd29yZC5yZXBsYWNlKHJ1bGVbMF0sIGZ1bmN0aW9uIChtYXRjaCwgaW5kZXgsIHdvcmQpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gaW50ZXJwb2xhdGUocnVsZVsxXSwgYXJndW1lbnRzKTtcblxuICAgICAgICAgIGlmIChtYXRjaCA9PT0gJycpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN0b3JlQ2FzZSh3b3JkW2luZGV4IC0gMV0sIHJlc3VsdCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHJlc3RvcmVDYXNlKG1hdGNoLCByZXN1bHQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gd29yZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBsYWNlIGEgd29yZCB3aXRoIHRoZSB1cGRhdGVkIHdvcmQuXG4gICAqXG4gICAqIEBwYXJhbSAge09iamVjdH0gICByZXBsYWNlTWFwXG4gICAqIEBwYXJhbSAge09iamVjdH0gICBrZWVwTWFwXG4gICAqIEBwYXJhbSAge0FycmF5fSAgICBydWxlc1xuICAgKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAgICovXG4gIGZ1bmN0aW9uIHJlcGxhY2VXb3JkIChyZXBsYWNlTWFwLCBrZWVwTWFwLCBydWxlcykge1xuICAgIHJldHVybiBmdW5jdGlvbiAod29yZCkge1xuICAgICAgLy8gR2V0IHRoZSBjb3JyZWN0IHRva2VuIGFuZCBjYXNlIHJlc3RvcmF0aW9uIGZ1bmN0aW9ucy5cbiAgICAgIHZhciB0b2tlbiA9IHdvcmQudG9Mb3dlckNhc2UoKTtcblxuICAgICAgLy8gQ2hlY2sgYWdhaW5zdCB0aGUga2VlcCBvYmplY3QgbWFwLlxuICAgICAgaWYgKGtlZXBNYXAuaGFzT3duUHJvcGVydHkodG9rZW4pKSB7XG4gICAgICAgIHJldHVybiByZXN0b3JlQ2FzZSh3b3JkLCB0b2tlbik7XG4gICAgICB9XG5cbiAgICAgIC8vIENoZWNrIGFnYWluc3QgdGhlIHJlcGxhY2VtZW50IG1hcCBmb3IgYSBkaXJlY3Qgd29yZCByZXBsYWNlbWVudC5cbiAgICAgIGlmIChyZXBsYWNlTWFwLmhhc093blByb3BlcnR5KHRva2VuKSkge1xuICAgICAgICByZXR1cm4gcmVzdG9yZUNhc2Uod29yZCwgcmVwbGFjZU1hcFt0b2tlbl0pO1xuICAgICAgfVxuXG4gICAgICAvLyBSdW4gYWxsIHRoZSBydWxlcyBhZ2FpbnN0IHRoZSB3b3JkLlxuICAgICAgcmV0dXJuIHNhbml0aXplV29yZCh3b3JkLCBydWxlcyk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQbHVyYWxpemUgb3Igc2luZ3VsYXJpemUgYSB3b3JkIGJhc2VkIG9uIHRoZSBwYXNzZWQgaW4gY291bnQuXG4gICAqXG4gICAqIEBwYXJhbSAge1N0cmluZ30gIHdvcmRcbiAgICogQHBhcmFtICB7TnVtYmVyfSAgY291bnRcbiAgICogQHBhcmFtICB7Qm9vbGVhbn0gaW5jbHVzaXZlXG4gICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICovXG4gIGZ1bmN0aW9uIHBsdXJhbGl6ZSAod29yZCwgY291bnQsIGluY2x1c2l2ZSkge1xuICAgIHZhciBwbHVyYWxpemVkID0gY291bnQgPT09IDEgP1xuICAgICAgcGx1cmFsaXplLnNpbmd1bGFyKHdvcmQpIDogcGx1cmFsaXplLnBsdXJhbCh3b3JkKTtcblxuICAgIHJldHVybiAoaW5jbHVzaXZlID8gY291bnQgKyAnICcgOiAnJykgKyBwbHVyYWxpemVkO1xuICB9XG5cbiAgLyoqXG4gICAqIFBsdXJhbGl6ZSBhIHdvcmQuXG4gICAqXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICovXG4gIHBsdXJhbGl6ZS5wbHVyYWwgPSByZXBsYWNlV29yZChcbiAgICBpcnJlZ3VsYXJTaW5nbGVzLCBpcnJlZ3VsYXJQbHVyYWxzLCBwbHVyYWxSdWxlc1xuICApO1xuXG4gIC8qKlxuICAgKiBTaW5ndWxhcml6ZSBhIHdvcmQuXG4gICAqXG4gICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICovXG4gIHBsdXJhbGl6ZS5zaW5ndWxhciA9IHJlcGxhY2VXb3JkKFxuICAgIGlycmVndWxhclBsdXJhbHMsIGlycmVndWxhclNpbmdsZXMsIHNpbmd1bGFyUnVsZXNcbiAgKTtcblxuICAvKipcbiAgICogQWRkIGEgcGx1cmFsaXphdGlvbiBydWxlIHRvIHRoZSBjb2xsZWN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0geyhzdHJpbmd8UmVnRXhwKX0gcnVsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gICAgICAgICAgcmVwbGFjZW1lbnRcbiAgICovXG4gIHBsdXJhbGl6ZS5hZGRQbHVyYWxSdWxlID0gZnVuY3Rpb24gKHJ1bGUsIHJlcGxhY2VtZW50KSB7XG4gICAgcGx1cmFsUnVsZXMucHVzaChbc2FuaXRpemVSdWxlKHJ1bGUpLCByZXBsYWNlbWVudF0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBZGQgYSBzaW5ndWxhcml6YXRpb24gcnVsZSB0byB0aGUgY29sbGVjdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHsoc3RyaW5nfFJlZ0V4cCl9IHJ1bGVcbiAgICogQHBhcmFtIHtzdHJpbmd9ICAgICAgICAgIHJlcGxhY2VtZW50XG4gICAqL1xuICBwbHVyYWxpemUuYWRkU2luZ3VsYXJSdWxlID0gZnVuY3Rpb24gKHJ1bGUsIHJlcGxhY2VtZW50KSB7XG4gICAgc2luZ3VsYXJSdWxlcy5wdXNoKFtzYW5pdGl6ZVJ1bGUocnVsZSksIHJlcGxhY2VtZW50XSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEFkZCBhbiB1bmNvdW50YWJsZSB3b3JkIHJ1bGUuXG4gICAqXG4gICAqIEBwYXJhbSB7KHN0cmluZ3xSZWdFeHApfSB3b3JkXG4gICAqL1xuICBwbHVyYWxpemUuYWRkVW5jb3VudGFibGVSdWxlID0gZnVuY3Rpb24gKHdvcmQpIHtcbiAgICBpZiAodHlwZW9mIHdvcmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gdW5jb3VudGFibGVzW3dvcmQudG9Mb3dlckNhc2UoKV0gPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIFNldCBzaW5ndWxhciBhbmQgcGx1cmFsIHJlZmVyZW5jZXMgZm9yIHRoZSB3b3JkLlxuICAgIHBsdXJhbGl6ZS5hZGRQbHVyYWxSdWxlKHdvcmQsICckMCcpO1xuICAgIHBsdXJhbGl6ZS5hZGRTaW5ndWxhclJ1bGUod29yZCwgJyQwJyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEFkZCBhbiBpcnJlZ3VsYXIgd29yZCBkZWZpbml0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2luZ2xlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwbHVyYWxcbiAgICovXG4gIHBsdXJhbGl6ZS5hZGRJcnJlZ3VsYXJSdWxlID0gZnVuY3Rpb24gKHNpbmdsZSwgcGx1cmFsKSB7XG4gICAgcGx1cmFsID0gcGx1cmFsLnRvTG93ZXJDYXNlKCk7XG4gICAgc2luZ2xlID0gc2luZ2xlLnRvTG93ZXJDYXNlKCk7XG5cbiAgICBpcnJlZ3VsYXJTaW5nbGVzW3NpbmdsZV0gPSBwbHVyYWw7XG4gICAgaXJyZWd1bGFyUGx1cmFsc1twbHVyYWxdID0gc2luZ2xlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBJcnJlZ3VsYXIgcnVsZXMuXG4gICAqL1xuICBbXG4gICAgLy8gUHJvbm91bnMuXG4gICAgWydJJywgICAgICAgICd3ZSddLFxuICAgIFsnbWUnLCAgICAgICAndXMnXSxcbiAgICBbJ2hlJywgICAgICAgJ3RoZXknXSxcbiAgICBbJ3NoZScsICAgICAgJ3RoZXknXSxcbiAgICBbJ3RoZW0nLCAgICAgJ3RoZW0nXSxcbiAgICBbJ215c2VsZicsICAgJ291cnNlbHZlcyddLFxuICAgIFsneW91cnNlbGYnLCAneW91cnNlbHZlcyddLFxuICAgIFsnaXRzZWxmJywgICAndGhlbXNlbHZlcyddLFxuICAgIFsnaGVyc2VsZicsICAndGhlbXNlbHZlcyddLFxuICAgIFsnaGltc2VsZicsICAndGhlbXNlbHZlcyddLFxuICAgIFsndGhlbXNlbGYnLCAndGhlbXNlbHZlcyddLFxuICAgIFsndGhpcycsICAgICAndGhlc2UnXSxcbiAgICBbJ3RoYXQnLCAgICAgJ3Rob3NlJ10sXG4gICAgLy8gV29yZHMgZW5kaW5nIGluIHdpdGggYSBjb25zb25hbnQgYW5kIGBvYC5cbiAgICBbJ2VjaG8nLCAnZWNob2VzJ10sXG4gICAgWydkaW5nbycsICdkaW5nb2VzJ10sXG4gICAgWyd2b2xjYW5vJywgJ3ZvbGNhbm9lcyddLFxuICAgIFsndG9ybmFkbycsICd0b3JuYWRvZXMnXSxcbiAgICBbJ3RvcnBlZG8nLCAndG9ycGVkb2VzJ10sXG4gICAgLy8gRW5kcyB3aXRoIGB1c2AuXG4gICAgWydnZW51cycsICAnZ2VuZXJhJ10sXG4gICAgWyd2aXNjdXMnLCAndmlzY2VyYSddLFxuICAgIC8vIEVuZHMgd2l0aCBgbWFgLlxuICAgIFsnc3RpZ21hJywgICAnc3RpZ21hdGEnXSxcbiAgICBbJ3N0b21hJywgICAgJ3N0b21hdGEnXSxcbiAgICBbJ2RvZ21hJywgICAgJ2RvZ21hdGEnXSxcbiAgICBbJ2xlbW1hJywgICAgJ2xlbW1hdGEnXSxcbiAgICBbJ3NjaGVtYScsICAgJ3NjaGVtYXRhJ10sXG4gICAgWydhbmF0aGVtYScsICdhbmF0aGVtYXRhJ10sXG4gICAgLy8gT3RoZXIgaXJyZWd1bGFyIHJ1bGVzLlxuICAgIFsnb3gnLCAgICAgICdveGVuJ10sXG4gICAgWydheGUnLCAgICAgJ2F4ZXMnXSxcbiAgICBbJ2RpZScsICAgICAnZGljZSddLFxuICAgIFsneWVzJywgICAgICd5ZXNlcyddLFxuICAgIFsnZm9vdCcsICAgICdmZWV0J10sXG4gICAgWydlYXZlJywgICAgJ2VhdmVzJ10sXG4gICAgWydnb29zZScsICAgJ2dlZXNlJ10sXG4gICAgWyd0b290aCcsICAgJ3RlZXRoJ10sXG4gICAgWydxdWl6JywgICAgJ3F1aXp6ZXMnXSxcbiAgICBbJ2h1bWFuJywgICAnaHVtYW5zJ10sXG4gICAgWydwcm9vZicsICAgJ3Byb29mcyddLFxuICAgIFsnY2FydmUnLCAgICdjYXJ2ZXMnXSxcbiAgICBbJ3ZhbHZlJywgICAndmFsdmVzJ10sXG4gICAgWyd0aGllZicsICAgJ3RoaWV2ZXMnXSxcbiAgICBbJ2dlbmllJywgICAnZ2VuaWVzJ10sXG4gICAgWydncm9vdmUnLCAgJ2dyb292ZXMnXSxcbiAgICBbJ3BpY2theGUnLCAncGlja2F4ZXMnXSxcbiAgICBbJ3doaXNrZXknLCAnd2hpc2tpZXMnXVxuICBdLmZvckVhY2goZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICByZXR1cm4gcGx1cmFsaXplLmFkZElycmVndWxhclJ1bGUocnVsZVswXSwgcnVsZVsxXSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBQbHVyYWxpemF0aW9uIHJ1bGVzLlxuICAgKi9cbiAgW1xuICAgIFsvcz8kL2ksICdzJ10sXG4gICAgWy8oW15hZWlvdV1lc2UpJC9pLCAnJDEnXSxcbiAgICBbLyhheHx0ZXN0KWlzJC9pLCAnJDFlcyddLFxuICAgIFsvKGFsaWFzfFteYW91XXVzfHRsYXN8Z2FzfHJpcykkL2ksICckMWVzJ10sXG4gICAgWy8oZVttbl11KXM/JC9pLCAnJDFzJ10sXG4gICAgWy8oW15sXWlhc3xbYWVpb3VdbGFzfFtlbWp6cl1hc3xbaXVdYW0pJC9pLCAnJDEnXSxcbiAgICBbLyhhbHVtbnxzeWxsYWJ8b2N0b3B8dmlyfHJhZGl8bnVjbGV8ZnVuZ3xjYWN0fHN0aW11bHx0ZXJtaW58YmFjaWxsfGZvY3x1dGVyfGxvY3xzdHJhdCkoPzp1c3xpKSQvaSwgJyQxaSddLFxuICAgIFsvKGFsdW1ufGFsZ3x2ZXJ0ZWJyKSg/OmF8YWUpJC9pLCAnJDFhZSddLFxuICAgIFsvKHNlcmFwaHxjaGVydWIpKD86aW0pPyQvaSwgJyQxaW0nXSxcbiAgICBbLyhoZXJ8YXR8Z3IpbyQvaSwgJyQxb2VzJ10sXG4gICAgWy8oYWdlbmR8YWRkZW5kfG1pbGxlbm5pfGRhdHxleHRyZW18YmFjdGVyaXxkZXNpZGVyYXR8c3RyYXR8Y2FuZGVsYWJyfGVycmF0fG92fHN5bXBvc2l8Y3VycmljdWx8YXV0b21hdHxxdW9yKSg/OmF8dW0pJC9pLCAnJDFhJ10sXG4gICAgWy8oYXBoZWxpfGh5cGVyYmF0fHBlcmloZWxpfGFzeW5kZXR8bm91bWVufHBoZW5vbWVufGNyaXRlcml8b3JnYW58cHJvbGVnb21lbnxcXHcraGVkcikoPzphfG9uKSQvaSwgJyQxYSddLFxuICAgIFsvc2lzJC9pLCAnc2VzJ10sXG4gICAgWy8oPzooaSlmZXwoYXJ8bHxlYXxlb3xvYXxob28pZikkL2ksICckMSQydmVzJ10sXG4gICAgWy8oW15hZWlvdXldfHF1KXkkL2ksICckMWllcyddLFxuICAgIFsvKFteY2hdW2llb11bbG5dKWV5JC9pLCAnJDFpZXMnXSxcbiAgICBbLyh4fGNofHNzfHNofHp6KSQvaSwgJyQxZXMnXSxcbiAgICBbLyhtYXRyfGNvZHxtdXJ8c2lsfHZlcnR8aW5kfGFwcGVuZCkoPzppeHxleCkkL2ksICckMWljZXMnXSxcbiAgICBbLyhtfGwpKD86aWNlfG91c2UpJC9pLCAnJDFpY2UnXSxcbiAgICBbLyhwZSkoPzpyc29ufG9wbGUpJC9pLCAnJDFvcGxlJ10sXG4gICAgWy8oY2hpbGQpKD86cmVuKT8kL2ksICckMXJlbiddLFxuICAgIFsvZWF1eCQvaSwgJyQwJ10sXG4gICAgWy9tW2FlXW4kL2ksICdtZW4nXVxuICBdLmZvckVhY2goZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICByZXR1cm4gcGx1cmFsaXplLmFkZFBsdXJhbFJ1bGUocnVsZVswXSwgcnVsZVsxXSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBTaW5ndWxhcml6YXRpb24gcnVsZXMuXG4gICAqL1xuICBbXG4gICAgWy9zJC9pLCAnJ10sXG4gICAgWy8oc3MpJC9pLCAnJDEnXSxcbiAgICBbLygoYSluYWx5fChiKWF8KGQpaWFnbm98KHApYXJlbnRoZXwocClyb2dub3wocyl5bm9wfCh0KWhlKSg/OnNpc3xzZXMpJC9pLCAnJDFzaXMnXSxcbiAgICBbLyheYW5hbHkpKD86c2lzfHNlcykkL2ksICckMXNpcyddLFxuICAgIFsvKFteYWVmbG9yXSl2ZXMkL2ksICckMWZlJ10sXG4gICAgWy8oaGl2ZXx0aXZlfGRyP2l2ZSlzJC9pLCAnJDEnXSxcbiAgICBbLyhhcnwoPzp3b3xbYWVdKWx8W2VvXVthb10pdmVzJC9pLCAnJDFmJ10sXG4gICAgWy8oW15hZWlvdXldfHF1KWllcyQvaSwgJyQxeSddLFxuICAgIFsvKF5bcGxdfHpvbWJ8Xig/Om5lY2spP3R8W2Flb11bbHRdfGN1dClpZXMkL2ksICckMWllJ10sXG4gICAgWy8oW15jXVtlb3JdbnxzbWlsKWllcyQvaSwgJyQxZXknXSxcbiAgICBbLyhtfGwpaWNlJC9pLCAnJDFvdXNlJ10sXG4gICAgWy8oc2VyYXBofGNoZXJ1YilpbSQvaSwgJyQxJ10sXG4gICAgWy8oeHxjaHxzc3xzaHx6enx0dG98Z298Y2hvfGFsaWFzfFteYW91XXVzfHRsYXN8Z2FzfCg/OmhlcnxhdHxncilvfHJpcykoPzplcyk/JC9pLCAnJDEnXSxcbiAgICBbLyhlW21uXXUpcz8kL2ksICckMSddLFxuICAgIFsvKG1vdmllfHR3ZWx2ZSlzJC9pLCAnJDEnXSxcbiAgICBbLyhjcmlzfHRlc3R8ZGlhZ25vcykoPzppc3xlcykkL2ksICckMWlzJ10sXG4gICAgWy8oYWx1bW58c3lsbGFifG9jdG9wfHZpcnxyYWRpfG51Y2xlfGZ1bmd8Y2FjdHxzdGltdWx8dGVybWlufGJhY2lsbHxmb2N8dXRlcnxsb2N8c3RyYXQpKD86dXN8aSkkL2ksICckMXVzJ10sXG4gICAgWy8oYWdlbmR8YWRkZW5kfG1pbGxlbm5pfGRhdHxleHRyZW18YmFjdGVyaXxkZXNpZGVyYXR8c3RyYXR8Y2FuZGVsYWJyfGVycmF0fG92fHN5bXBvc2l8Y3VycmljdWx8YXV0b21hdHxxdW9yKWEkL2ksICckMXVtJ10sXG4gICAgWy8oYXBoZWxpfGh5cGVyYmF0fHBlcmloZWxpfGFzeW5kZXR8bm91bWVufHBoZW5vbWVufGNyaXRlcml8b3JnYW58cHJvbGVnb21lbnxcXHcraGVkcilhJC9pLCAnJDFvbiddLFxuICAgIFsvKGFsdW1ufGFsZ3x2ZXJ0ZWJyKWFlJC9pLCAnJDFhJ10sXG4gICAgWy8oY29kfG11cnxzaWx8dmVydHxpbmQpaWNlcyQvaSwgJyQxZXgnXSxcbiAgICBbLyhtYXRyfGFwcGVuZClpY2VzJC9pLCAnJDFpeCddLFxuICAgIFsvKHBlKShyc29ufG9wbGUpJC9pLCAnJDFyc29uJ10sXG4gICAgWy8oY2hpbGQpcmVuJC9pLCAnJDEnXSxcbiAgICBbLyhlYXUpeD8kL2ksICckMSddLFxuICAgIFsvbWVuJC9pLCAnbWFuJ11cbiAgXS5mb3JFYWNoKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgcmV0dXJuIHBsdXJhbGl6ZS5hZGRTaW5ndWxhclJ1bGUocnVsZVswXSwgcnVsZVsxXSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBVbmNvdW50YWJsZSBydWxlcy5cbiAgICovXG4gIFtcbiAgICAvLyBTaW5ndWxhciB3b3JkcyB3aXRoIG5vIHBsdXJhbHMuXG4gICAgJ2FkdmljZScsXG4gICAgJ2FnZW5kYScsXG4gICAgJ2Jpc29uJyxcbiAgICAnYnJlYW0nLFxuICAgICdidWZmYWxvJyxcbiAgICAnY2FycCcsXG4gICAgJ2NoYXNzaXMnLFxuICAgICdjb2QnLFxuICAgICdjb29wZXJhdGlvbicsXG4gICAgJ2NvcnBzJyxcbiAgICAnZGlnZXN0aW9uJyxcbiAgICAnZGVicmlzJyxcbiAgICAnZGlhYmV0ZXMnLFxuICAgICdlbmVyZ3knLFxuICAgICdlcXVpcG1lbnQnLFxuICAgICdlbGsnLFxuICAgICdleGNyZXRpb24nLFxuICAgICdleHBlcnRpc2UnLFxuICAgICdmbG91bmRlcicsXG4gICAgJ2dhbGxvd3MnLFxuICAgICdncmFmZml0aScsXG4gICAgJ2hlYWRxdWFydGVycycsXG4gICAgJ2hlYWx0aCcsXG4gICAgJ2hlcnBlcycsXG4gICAgJ2hpZ2hqaW5rcycsXG4gICAgJ2hvbWV3b3JrJyxcbiAgICAnaW5mb3JtYXRpb24nLFxuICAgICdqZWFucycsXG4gICAgJ2p1c3RpY2UnLFxuICAgICdrdWRvcycsXG4gICAgJ2xhYm91cicsXG4gICAgJ21hY2hpbmVyeScsXG4gICAgJ21hY2tlcmVsJyxcbiAgICAnbWVkaWEnLFxuICAgICdtZXdzJyxcbiAgICAnbW9vc2UnLFxuICAgICduZXdzJyxcbiAgICAncGlrZScsXG4gICAgJ3BsYW5rdG9uJyxcbiAgICAncGxpZXJzJyxcbiAgICAncG9sbHV0aW9uJyxcbiAgICAncHJlbWlzZXMnLFxuICAgICdyYWluJyxcbiAgICAncmljZScsXG4gICAgJ3NhbG1vbicsXG4gICAgJ3NjaXNzb3JzJyxcbiAgICAnc2VyaWVzJyxcbiAgICAnc2V3YWdlJyxcbiAgICAnc2hhbWJsZXMnLFxuICAgICdzaHJpbXAnLFxuICAgICdzcGVjaWVzJyxcbiAgICAnc3RhZmYnLFxuICAgICdzd2luZScsXG4gICAgJ3Ryb3V0JyxcbiAgICAndHVuYScsXG4gICAgJ3doaXRpbmcnLFxuICAgICd3aWxkZWJlZXN0JyxcbiAgICAnd2lsZGxpZmUnLFxuICAgIC8vIFJlZ2V4ZXMuXG4gICAgL3BveCQvaSwgLy8gXCJjaGlja3BveFwiLCBcInNtYWxscG94XCJcbiAgICAvb2lzJC9pLFxuICAgIC9kZWVyJC9pLCAvLyBcImRlZXJcIiwgXCJyZWluZGVlclwiXG4gICAgL2Zpc2gkL2ksIC8vIFwiZmlzaFwiLCBcImJsb3dmaXNoXCIsIFwiYW5nZWxmaXNoXCJcbiAgICAvc2hlZXAkL2ksXG4gICAgL21lYXNsZXMkL2ksXG4gICAgL1teYWVpb3VdZXNlJC9pIC8vIFwiY2hpbmVzZVwiLCBcImphcGFuZXNlXCJcbiAgXS5mb3JFYWNoKHBsdXJhbGl6ZS5hZGRVbmNvdW50YWJsZVJ1bGUpO1xuXG4gIHJldHVybiBwbHVyYWxpemU7XG59KTtcblxufSx7fV0sMjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBBY3Rpb25zIHRoYXQgbW9kaWZ5IHRoZSBVUkwuXG4gKi9cbnZhciBMb2NhdGlvbkFjdGlvbnMgPSB7XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyBhIG5ldyBsb2NhdGlvbiBpcyBiZWluZyBwdXNoZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2suXG4gICAqL1xuICBQVVNIOiAncHVzaCcsXG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyB0aGUgY3VycmVudCBsb2NhdGlvbiBzaG91bGQgYmUgcmVwbGFjZWQuXG4gICAqL1xuICBSRVBMQUNFOiAncmVwbGFjZScsXG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyB0aGUgbW9zdCByZWNlbnQgZW50cnkgc2hvdWxkIGJlIHJlbW92ZWQgZnJvbSB0aGUgaGlzdG9yeSBzdGFjay5cbiAgICovXG4gIFBPUDogJ3BvcCdcblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBMb2NhdGlvbkFjdGlvbnM7XG5cbn0se31dLDIzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBMb2NhdGlvbkFjdGlvbnMgPSByZXF1aXJlKCcuLi9hY3Rpb25zL0xvY2F0aW9uQWN0aW9ucycpO1xuXG4vKipcbiAqIEEgc2Nyb2xsIGJlaGF2aW9yIHRoYXQgYXR0ZW1wdHMgdG8gaW1pdGF0ZSB0aGUgZGVmYXVsdCBiZWhhdmlvclxuICogb2YgbW9kZXJuIGJyb3dzZXJzLlxuICovXG52YXIgSW1pdGF0ZUJyb3dzZXJCZWhhdmlvciA9IHtcblxuICB1cGRhdGVTY3JvbGxQb3NpdGlvbjogZnVuY3Rpb24gKHBvc2l0aW9uLCBhY3Rpb25UeXBlKSB7XG4gICAgc3dpdGNoIChhY3Rpb25UeXBlKSB7XG4gICAgICBjYXNlIExvY2F0aW9uQWN0aW9ucy5QVVNIOlxuICAgICAgY2FzZSBMb2NhdGlvbkFjdGlvbnMuUkVQTEFDRTpcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTG9jYXRpb25BY3Rpb25zLlBPUDpcbiAgICAgICAgaWYgKHBvc2l0aW9uKSB7XG4gICAgICAgICAgd2luZG93LnNjcm9sbFRvKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbWl0YXRlQnJvd3NlckJlaGF2aW9yO1xuXG59LHtcIi4uL2FjdGlvbnMvTG9jYXRpb25BY3Rpb25zXCI6MjJ9XSwyNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIEEgc2Nyb2xsIGJlaGF2aW9yIHRoYXQgYWx3YXlzIHNjcm9sbHMgdG8gdGhlIHRvcCBvZiB0aGUgcGFnZVxuICogYWZ0ZXIgYSB0cmFuc2l0aW9uLlxuICovXG52YXIgU2Nyb2xsVG9Ub3BCZWhhdmlvciA9IHtcblxuICB1cGRhdGVTY3JvbGxQb3NpdGlvbjogZnVuY3Rpb24gKCkge1xuICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNjcm9sbFRvVG9wQmVoYXZpb3I7XG5cbn0se31dLDI1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgRmFrZU5vZGUgPSByZXF1aXJlKCcuLi9taXhpbnMvRmFrZU5vZGUnKTtcbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCcuLi91dGlscy9Qcm9wVHlwZXMnKTtcblxuLyoqXG4gKiBBIDxEZWZhdWx0Um91dGU+IGNvbXBvbmVudCBpcyBhIHNwZWNpYWwga2luZCBvZiA8Um91dGU+IHRoYXRcbiAqIHJlbmRlcnMgd2hlbiBpdHMgcGFyZW50IG1hdGNoZXMgYnV0IG5vbmUgb2YgaXRzIHNpYmxpbmdzIGRvLlxuICogT25seSBvbmUgc3VjaCByb3V0ZSBtYXkgYmUgdXNlZCBhdCBhbnkgZ2l2ZW4gbGV2ZWwgaW4gdGhlXG4gKiByb3V0ZSBoaWVyYXJjaHkuXG4gKi9cbnZhciBEZWZhdWx0Um91dGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cbiAgZGlzcGxheU5hbWU6ICdEZWZhdWx0Um91dGUnLFxuXG4gIG1peGluczogWyBGYWtlTm9kZSBdLFxuXG4gIHByb3BUeXBlczoge1xuICAgIG5hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgcGF0aDogUHJvcFR5cGVzLmZhbHN5LFxuICAgIGhhbmRsZXI6IFJlYWN0LlByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBEZWZhdWx0Um91dGU7XG5cbn0se1wiLi4vbWl4aW5zL0Zha2VOb2RlXCI6MzUsXCIuLi91dGlscy9Qcm9wVHlwZXNcIjo0NixcInJlYWN0XCI6MjE2fV0sMjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBjbGFzc1NldCA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9jeCcpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9PYmplY3QuYXNzaWduJyk7XG52YXIgTmF2aWdhdGlvbiA9IHJlcXVpcmUoJy4uL21peGlucy9OYXZpZ2F0aW9uJyk7XG52YXIgU3RhdGUgPSByZXF1aXJlKCcuLi9taXhpbnMvU3RhdGUnKTtcblxuZnVuY3Rpb24gaXNMZWZ0Q2xpY2tFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuYnV0dG9uID09PSAwO1xufVxuXG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuXG4vKipcbiAqIDxMaW5rPiBjb21wb25lbnRzIGFyZSB1c2VkIHRvIGNyZWF0ZSBhbiA8YT4gZWxlbWVudCB0aGF0IGxpbmtzIHRvIGEgcm91dGUuXG4gKiBXaGVuIHRoYXQgcm91dGUgaXMgYWN0aXZlLCB0aGUgbGluayBnZXRzIGFuIFwiYWN0aXZlXCIgY2xhc3MgbmFtZSAob3IgdGhlXG4gKiB2YWx1ZSBvZiBpdHMgYGFjdGl2ZUNsYXNzTmFtZWAgcHJvcCkuXG4gKlxuICogRm9yIGV4YW1wbGUsIGFzc3VtaW5nIHlvdSBoYXZlIHRoZSBmb2xsb3dpbmcgcm91dGU6XG4gKlxuICogICA8Um91dGUgbmFtZT1cInNob3dQb3N0XCIgcGF0aD1cIi9wb3N0cy86cG9zdElEXCIgaGFuZGxlcj17UG9zdH0vPlxuICpcbiAqIFlvdSBjb3VsZCB1c2UgdGhlIGZvbGxvd2luZyBjb21wb25lbnQgdG8gbGluayB0byB0aGF0IHJvdXRlOlxuICpcbiAqICAgPExpbmsgdG89XCJzaG93UG9zdFwiIHBhcmFtcz17eyBwb3N0SUQ6IFwiMTIzXCIgfX0gLz5cbiAqXG4gKiBJbiBhZGRpdGlvbiB0byBwYXJhbXMsIGxpbmtzIG1heSBwYXNzIGFsb25nIHF1ZXJ5IHN0cmluZyBwYXJhbWV0ZXJzXG4gKiB1c2luZyB0aGUgYHF1ZXJ5YCBwcm9wLlxuICpcbiAqICAgPExpbmsgdG89XCJzaG93UG9zdFwiIHBhcmFtcz17eyBwb3N0SUQ6IFwiMTIzXCIgfX0gcXVlcnk9e3sgc2hvdzp0cnVlIH19Lz5cbiAqL1xudmFyIExpbmsgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cbiAgZGlzcGxheU5hbWU6ICdMaW5rJyxcblxuICBtaXhpbnM6IFsgTmF2aWdhdGlvbiwgU3RhdGUgXSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICBhY3RpdmVDbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICB0bzogUmVhY3QuUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIHBhcmFtczogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBxdWVyeTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgICBvbkNsaWNrOiBSZWFjdC5Qcm9wVHlwZXMuZnVuY1xuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhY3RpdmVDbGFzc05hbWU6ICdhY3RpdmUnXG4gICAgfTtcbiAgfSxcblxuICBoYW5kbGVDbGljazogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIGFsbG93VHJhbnNpdGlvbiA9IHRydWU7XG4gICAgdmFyIGNsaWNrUmVzdWx0O1xuXG4gICAgaWYgKHRoaXMucHJvcHMub25DbGljaylcbiAgICAgIGNsaWNrUmVzdWx0ID0gdGhpcy5wcm9wcy5vbkNsaWNrKGV2ZW50KTtcblxuICAgIGlmIChpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHx8ICFpc0xlZnRDbGlja0V2ZW50KGV2ZW50KSlcbiAgICAgIHJldHVybjtcblxuICAgIGlmIChjbGlja1Jlc3VsdCA9PT0gZmFsc2UgfHwgZXZlbnQuZGVmYXVsdFByZXZlbnRlZCA9PT0gdHJ1ZSlcbiAgICAgIGFsbG93VHJhbnNpdGlvbiA9IGZhbHNlO1xuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmIChhbGxvd1RyYW5zaXRpb24pXG4gICAgICB0aGlzLnRyYW5zaXRpb25Ubyh0aGlzLnByb3BzLnRvLCB0aGlzLnByb3BzLnBhcmFtcywgdGhpcy5wcm9wcy5xdWVyeSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBcImhyZWZcIiBhdHRyaWJ1dGUgdG8gdXNlIG9uIHRoZSBET00gZWxlbWVudC5cbiAgICovXG4gIGdldEhyZWY6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5tYWtlSHJlZih0aGlzLnByb3BzLnRvLCB0aGlzLnByb3BzLnBhcmFtcywgdGhpcy5wcm9wcy5xdWVyeSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBcImNsYXNzXCIgYXR0cmlidXRlIHRvIHVzZSBvbiB0aGUgRE9NIGVsZW1lbnQsIHdoaWNoIGNvbnRhaW5zXG4gICAqIHRoZSB2YWx1ZSBvZiB0aGUgYWN0aXZlQ2xhc3NOYW1lIHByb3BlcnR5IHdoZW4gdGhpcyA8TGluaz4gaXMgYWN0aXZlLlxuICAgKi9cbiAgZ2V0Q2xhc3NOYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNsYXNzTmFtZXMgPSB7fTtcblxuICAgIGlmICh0aGlzLnByb3BzLmNsYXNzTmFtZSlcbiAgICAgIGNsYXNzTmFtZXNbdGhpcy5wcm9wcy5jbGFzc05hbWVdID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLmlzQWN0aXZlKHRoaXMucHJvcHMudG8sIHRoaXMucHJvcHMucGFyYW1zLCB0aGlzLnByb3BzLnF1ZXJ5KSlcbiAgICAgIGNsYXNzTmFtZXNbdGhpcy5wcm9wcy5hY3RpdmVDbGFzc05hbWVdID0gdHJ1ZTtcblxuICAgIHJldHVybiBjbGFzc1NldChjbGFzc05hbWVzKTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvcHMgPSBhc3NpZ24oe30sIHRoaXMucHJvcHMsIHtcbiAgICAgIGhyZWY6IHRoaXMuZ2V0SHJlZigpLFxuICAgICAgY2xhc3NOYW1lOiB0aGlzLmdldENsYXNzTmFtZSgpLFxuICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGlja1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LkRPTS5hKHByb3BzLCB0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBMaW5rO1xuXG59LHtcIi4uL21peGlucy9OYXZpZ2F0aW9uXCI6MzYsXCIuLi9taXhpbnMvU3RhdGVcIjo0MCxcInJlYWN0XCI6MjE2LFwicmVhY3QvbGliL09iamVjdC5hc3NpZ25cIjo5NSxcInJlYWN0L2xpYi9jeFwiOjE3NH1dLDI3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgRmFrZU5vZGUgPSByZXF1aXJlKCcuLi9taXhpbnMvRmFrZU5vZGUnKTtcbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCcuLi91dGlscy9Qcm9wVHlwZXMnKTtcblxuLyoqXG4gKiBBIDxOb3RGb3VuZFJvdXRlPiBpcyBhIHNwZWNpYWwga2luZCBvZiA8Um91dGU+IHRoYXRcbiAqIHJlbmRlcnMgd2hlbiB0aGUgYmVnaW5uaW5nIG9mIGl0cyBwYXJlbnQncyBwYXRoIG1hdGNoZXNcbiAqIGJ1dCBub25lIG9mIGl0cyBzaWJsaW5ncyBkbywgaW5jbHVkaW5nIGFueSA8RGVmYXVsdFJvdXRlPi5cbiAqIE9ubHkgb25lIHN1Y2ggcm91dGUgbWF5IGJlIHVzZWQgYXQgYW55IGdpdmVuIGxldmVsIGluIHRoZVxuICogcm91dGUgaGllcmFyY2h5LlxuICovXG52YXIgTm90Rm91bmRSb3V0ZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblxuICBkaXNwbGF5TmFtZTogJ05vdEZvdW5kUm91dGUnLFxuXG4gIG1peGluczogWyBGYWtlTm9kZSBdLFxuXG4gIHByb3BUeXBlczoge1xuICAgIG5hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgcGF0aDogUHJvcFR5cGVzLmZhbHN5LFxuICAgIGhhbmRsZXI6IFJlYWN0LlByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBOb3RGb3VuZFJvdXRlO1xuXG59LHtcIi4uL21peGlucy9GYWtlTm9kZVwiOjM1LFwiLi4vdXRpbHMvUHJvcFR5cGVzXCI6NDYsXCJyZWFjdFwiOjIxNn1dLDI4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgRmFrZU5vZGUgPSByZXF1aXJlKCcuLi9taXhpbnMvRmFrZU5vZGUnKTtcbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCcuLi91dGlscy9Qcm9wVHlwZXMnKTtcblxuLyoqXG4gKiBBIDxSZWRpcmVjdD4gY29tcG9uZW50IGlzIGEgc3BlY2lhbCBraW5kIG9mIDxSb3V0ZT4gdGhhdCBhbHdheXNcbiAqIHJlZGlyZWN0cyB0byBhbm90aGVyIHJvdXRlIHdoZW4gaXQgbWF0Y2hlcy5cbiAqL1xudmFyIFJlZGlyZWN0ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXG4gIGRpc3BsYXlOYW1lOiAnUmVkaXJlY3QnLFxuXG4gIG1peGluczogWyBGYWtlTm9kZSBdLFxuXG4gIHByb3BUeXBlczoge1xuICAgIHBhdGg6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgZnJvbTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZywgLy8gQWxpYXMgZm9yIHBhdGguXG4gICAgdG86IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgaGFuZGxlcjogUHJvcFR5cGVzLmZhbHN5XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVkaXJlY3Q7XG5cbn0se1wiLi4vbWl4aW5zL0Zha2VOb2RlXCI6MzUsXCIuLi91dGlscy9Qcm9wVHlwZXNcIjo0NixcInJlYWN0XCI6MjE2fV0sMjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBGYWtlTm9kZSA9IHJlcXVpcmUoJy4uL21peGlucy9GYWtlTm9kZScpO1xuXG4vKipcbiAqIDxSb3V0ZT4gY29tcG9uZW50cyBzcGVjaWZ5IGNvbXBvbmVudHMgdGhhdCBhcmUgcmVuZGVyZWQgdG8gdGhlIHBhZ2Ugd2hlbiB0aGVcbiAqIFVSTCBtYXRjaGVzIGEgZ2l2ZW4gcGF0dGVybi5cbiAqXG4gKiBSb3V0ZXMgYXJlIGFycmFuZ2VkIGluIGEgbmVzdGVkIHRyZWUgc3RydWN0dXJlLiBXaGVuIGEgbmV3IFVSTCBpcyByZXF1ZXN0ZWQsXG4gKiB0aGUgdHJlZSBpcyBzZWFyY2hlZCBkZXB0aC1maXJzdCB0byBmaW5kIGEgcm91dGUgd2hvc2UgcGF0aCBtYXRjaGVzIHRoZSBVUkwuXG4gKiBXaGVuIG9uZSBpcyBmb3VuZCwgYWxsIHJvdXRlcyBpbiB0aGUgdHJlZSB0aGF0IGxlYWQgdG8gaXQgYXJlIGNvbnNpZGVyZWRcbiAqIFwiYWN0aXZlXCIgYW5kIHRoZWlyIGNvbXBvbmVudHMgYXJlIHJlbmRlcmVkIGludG8gdGhlIERPTSwgbmVzdGVkIGluIHRoZSBzYW1lXG4gKiBvcmRlciBhcyB0aGV5IGFyZSBpbiB0aGUgdHJlZS5cbiAqXG4gKiBUaGUgcHJlZmVycmVkIHdheSB0byBjb25maWd1cmUgYSByb3V0ZXIgaXMgdXNpbmcgSlNYLiBUaGUgWE1MLWxpa2Ugc3ludGF4IGlzXG4gKiBhIGdyZWF0IHdheSB0byB2aXN1YWxpemUgaG93IHJvdXRlcyBhcmUgbGFpZCBvdXQgaW4gYW4gYXBwbGljYXRpb24uXG4gKlxuICogICB2YXIgcm91dGVzID0gW1xuICogICAgIDxSb3V0ZSBoYW5kbGVyPXtBcHB9PlxuICogICAgICAgPFJvdXRlIG5hbWU9XCJsb2dpblwiIGhhbmRsZXI9e0xvZ2lufS8+XG4gKiAgICAgICA8Um91dGUgbmFtZT1cImxvZ291dFwiIGhhbmRsZXI9e0xvZ291dH0vPlxuICogICAgICAgPFJvdXRlIG5hbWU9XCJhYm91dFwiIGhhbmRsZXI9e0Fib3V0fS8+XG4gKiAgICAgPC9Sb3V0ZT5cbiAqICAgXTtcbiAqICAgXG4gKiAgIFJvdXRlci5ydW4ocm91dGVzLCBmdW5jdGlvbiAoSGFuZGxlcikge1xuICogICAgIFJlYWN0LnJlbmRlcig8SGFuZGxlci8+LCBkb2N1bWVudC5ib2R5KTtcbiAqICAgfSk7XG4gKlxuICogSGFuZGxlcnMgZm9yIFJvdXRlIGNvbXBvbmVudHMgdGhhdCBjb250YWluIGNoaWxkcmVuIGNhbiByZW5kZXIgdGhlaXIgYWN0aXZlXG4gKiBjaGlsZCByb3V0ZSB1c2luZyBhIDxSb3V0ZUhhbmRsZXI+IGVsZW1lbnQuXG4gKlxuICogICB2YXIgQXBwID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICogICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICogICAgICAgcmV0dXJuIChcbiAqICAgICAgICAgPGRpdiBjbGFzcz1cImFwcGxpY2F0aW9uXCI+XG4gKiAgICAgICAgICAgPFJvdXRlSGFuZGxlci8+XG4gKiAgICAgICAgIDwvZGl2PlxuICogICAgICAgKTtcbiAqICAgICB9XG4gKiAgIH0pO1xuICovXG52YXIgUm91dGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cbiAgZGlzcGxheU5hbWU6ICdSb3V0ZScsXG5cbiAgbWl4aW5zOiBbIEZha2VOb2RlIF0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgbmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBwYXRoOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGhhbmRsZXI6IFJlYWN0LlByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgaWdub3JlU2Nyb2xsQmVoYXZpb3I6IFJlYWN0LlByb3BUeXBlcy5ib29sXG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUm91dGU7XG5cbn0se1wiLi4vbWl4aW5zL0Zha2VOb2RlXCI6MzUsXCJyZWFjdFwiOjIxNn1dLDMwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgUm91dGVIYW5kbGVyTWl4aW4gPSByZXF1aXJlKCcuLi9taXhpbnMvUm91dGVIYW5kbGVyJyk7XG5cbi8qKlxuICogQSA8Um91dGVIYW5kbGVyPiBjb21wb25lbnQgcmVuZGVycyB0aGUgYWN0aXZlIGNoaWxkIHJvdXRlIGhhbmRsZXJcbiAqIHdoZW4gcm91dGVzIGFyZSBuZXN0ZWQuXG4gKi9cbnZhciBSb3V0ZUhhbmRsZXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cbiAgZGlzcGxheU5hbWU6ICdSb3V0ZUhhbmRsZXInLFxuXG4gIG1peGluczogW1JvdXRlSGFuZGxlck1peGluXSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVmOiAnX19yb3V0ZUhhbmRsZXJfXydcbiAgICB9O1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmdldFJvdXRlSGFuZGxlcigpO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJvdXRlSGFuZGxlcjtcblxufSx7XCIuLi9taXhpbnMvUm91dGVIYW5kbGVyXCI6MzgsXCJyZWFjdFwiOjIxNn1dLDMxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbmV4cG9ydHMuRGVmYXVsdFJvdXRlID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL0RlZmF1bHRSb3V0ZScpO1xuZXhwb3J0cy5MaW5rID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL0xpbmsnKTtcbmV4cG9ydHMuTm90Rm91bmRSb3V0ZSA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9Ob3RGb3VuZFJvdXRlJyk7XG5leHBvcnRzLlJlZGlyZWN0ID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL1JlZGlyZWN0Jyk7XG5leHBvcnRzLlJvdXRlID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL1JvdXRlJyk7XG5leHBvcnRzLlJvdXRlSGFuZGxlciA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9Sb3V0ZUhhbmRsZXInKTtcblxuZXhwb3J0cy5IYXNoTG9jYXRpb24gPSByZXF1aXJlKCcuL2xvY2F0aW9ucy9IYXNoTG9jYXRpb24nKTtcbmV4cG9ydHMuSGlzdG9yeUxvY2F0aW9uID0gcmVxdWlyZSgnLi9sb2NhdGlvbnMvSGlzdG9yeUxvY2F0aW9uJyk7XG5leHBvcnRzLlJlZnJlc2hMb2NhdGlvbiA9IHJlcXVpcmUoJy4vbG9jYXRpb25zL1JlZnJlc2hMb2NhdGlvbicpO1xuXG5leHBvcnRzLkltaXRhdGVCcm93c2VyQmVoYXZpb3IgPSByZXF1aXJlKCcuL2JlaGF2aW9ycy9JbWl0YXRlQnJvd3NlckJlaGF2aW9yJyk7XG5leHBvcnRzLlNjcm9sbFRvVG9wQmVoYXZpb3IgPSByZXF1aXJlKCcuL2JlaGF2aW9ycy9TY3JvbGxUb1RvcEJlaGF2aW9yJyk7XG5cbmV4cG9ydHMuTmF2aWdhdGlvbiA9IHJlcXVpcmUoJy4vbWl4aW5zL05hdmlnYXRpb24nKTtcbmV4cG9ydHMuU3RhdGUgPSByZXF1aXJlKCcuL21peGlucy9TdGF0ZScpO1xuXG5leHBvcnRzLmNyZWF0ZSA9IHJlcXVpcmUoJy4vdXRpbHMvY3JlYXRlUm91dGVyJyk7XG5leHBvcnRzLnJ1biA9IHJlcXVpcmUoJy4vdXRpbHMvcnVuUm91dGVyJyk7XG5cbmV4cG9ydHMuSGlzdG9yeSA9IHJlcXVpcmUoJy4vdXRpbHMvSGlzdG9yeScpO1xuXG59LHtcIi4vYmVoYXZpb3JzL0ltaXRhdGVCcm93c2VyQmVoYXZpb3JcIjoyMyxcIi4vYmVoYXZpb3JzL1Njcm9sbFRvVG9wQmVoYXZpb3JcIjoyNCxcIi4vY29tcG9uZW50cy9EZWZhdWx0Um91dGVcIjoyNSxcIi4vY29tcG9uZW50cy9MaW5rXCI6MjYsXCIuL2NvbXBvbmVudHMvTm90Rm91bmRSb3V0ZVwiOjI3LFwiLi9jb21wb25lbnRzL1JlZGlyZWN0XCI6MjgsXCIuL2NvbXBvbmVudHMvUm91dGVcIjoyOSxcIi4vY29tcG9uZW50cy9Sb3V0ZUhhbmRsZXJcIjozMCxcIi4vbG9jYXRpb25zL0hhc2hMb2NhdGlvblwiOjMyLFwiLi9sb2NhdGlvbnMvSGlzdG9yeUxvY2F0aW9uXCI6MzMsXCIuL2xvY2F0aW9ucy9SZWZyZXNoTG9jYXRpb25cIjozNCxcIi4vbWl4aW5zL05hdmlnYXRpb25cIjozNixcIi4vbWl4aW5zL1N0YXRlXCI6NDAsXCIuL3V0aWxzL0hpc3RvcnlcIjo0MyxcIi4vdXRpbHMvY3JlYXRlUm91dGVyXCI6NDksXCIuL3V0aWxzL3J1blJvdXRlclwiOjUzfV0sMzI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIExvY2F0aW9uQWN0aW9ucyA9IHJlcXVpcmUoJy4uL2FjdGlvbnMvTG9jYXRpb25BY3Rpb25zJyk7XG52YXIgSGlzdG9yeSA9IHJlcXVpcmUoJy4uL3V0aWxzL0hpc3RvcnknKTtcbnZhciBQYXRoID0gcmVxdWlyZSgnLi4vdXRpbHMvUGF0aCcpO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgVVJMIHBhdGggZnJvbSB0aGUgYGhhc2hgIHBvcnRpb24gb2YgdGhlIFVSTCwgaW5jbHVkaW5nXG4gKiBxdWVyeSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICByZXR1cm4gUGF0aC5kZWNvZGUoXG4gICAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAgIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gICAgd2luZG93LmxvY2F0aW9uLmhyZWYuc3BsaXQoJyMnKVsxXSB8fCAnJ1xuICApO1xufVxuXG52YXIgX2FjdGlvblR5cGU7XG5cbmZ1bmN0aW9uIGVuc3VyZVNsYXNoKCkge1xuICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG5cbiAgaWYgKHBhdGguY2hhckF0KDApID09PSAnLycpXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgSGFzaExvY2F0aW9uLnJlcGxhY2UoJy8nICsgcGF0aCk7XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG52YXIgX2NoYW5nZUxpc3RlbmVycyA9IFtdO1xuXG5mdW5jdGlvbiBub3RpZnlDaGFuZ2UodHlwZSkge1xuICBpZiAodHlwZSA9PT0gTG9jYXRpb25BY3Rpb25zLlBVU0gpXG4gICAgSGlzdG9yeS5sZW5ndGggKz0gMTtcblxuICB2YXIgY2hhbmdlID0ge1xuICAgIHBhdGg6IGdldEhhc2hQYXRoKCksXG4gICAgdHlwZTogdHlwZVxuICB9O1xuXG4gIF9jaGFuZ2VMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICBsaXN0ZW5lcihjaGFuZ2UpO1xuICB9KTtcbn1cblxudmFyIF9pc0xpc3RlbmluZyA9IGZhbHNlO1xuXG5mdW5jdGlvbiBvbkhhc2hDaGFuZ2UoKSB7XG4gIGlmIChlbnN1cmVTbGFzaCgpKSB7XG4gICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhbiBfYWN0aW9uVHlwZSB0aGVuIGFsbCB3ZSBrbm93IGlzIHRoZSBoYXNoXG4gICAgLy8gY2hhbmdlZC4gSXQgd2FzIHByb2JhYmx5IGNhdXNlZCBieSB0aGUgdXNlciBjbGlja2luZyB0aGUgQmFja1xuICAgIC8vIGJ1dHRvbiwgYnV0IG1heSBoYXZlIGFsc28gYmVlbiB0aGUgRm9yd2FyZCBidXR0b24gb3IgbWFudWFsXG4gICAgLy8gbWFuaXB1bGF0aW9uLiBTbyBqdXN0IGd1ZXNzICdwb3AnLlxuICAgIG5vdGlmeUNoYW5nZShfYWN0aW9uVHlwZSB8fCBMb2NhdGlvbkFjdGlvbnMuUE9QKTtcbiAgICBfYWN0aW9uVHlwZSA9IG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBBIExvY2F0aW9uIHRoYXQgdXNlcyBgd2luZG93LmxvY2F0aW9uLmhhc2hgLlxuICovXG52YXIgSGFzaExvY2F0aW9uID0ge1xuXG4gIGFkZENoYW5nZUxpc3RlbmVyOiBmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICBfY2hhbmdlTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgLy8gRG8gdGhpcyBCRUZPUkUgbGlzdGVuaW5nIGZvciBoYXNoY2hhbmdlLlxuICAgIGVuc3VyZVNsYXNoKCk7XG5cbiAgICBpZiAoX2lzTGlzdGVuaW5nKVxuICAgICAgcmV0dXJuO1xuXG4gICAgaWYgKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIG9uSGFzaENoYW5nZSwgZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aW5kb3cuYXR0YWNoRXZlbnQoJ29uaGFzaGNoYW5nZScsIG9uSGFzaENoYW5nZSk7XG4gICAgfVxuXG4gICAgX2lzTGlzdGVuaW5nID0gdHJ1ZTtcbiAgfSxcblxuICByZW1vdmVDaGFuZ2VMaXN0ZW5lcjogZnVuY3Rpb24obGlzdGVuZXIpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IF9jaGFuZ2VMaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbDsgaSArKykge1xuICAgICAgaWYgKF9jaGFuZ2VMaXN0ZW5lcnNbaV0gPT09IGxpc3RlbmVyKSB7XG4gICAgICAgIF9jaGFuZ2VMaXN0ZW5lcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAod2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgb25IYXNoQ2hhbmdlLCBmYWxzZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudCgnb25oYXNoY2hhbmdlJywgb25IYXNoQ2hhbmdlKTtcbiAgICB9XG5cbiAgICBpZiAoX2NoYW5nZUxpc3RlbmVycy5sZW5ndGggPT09IDApXG4gICAgICBfaXNMaXN0ZW5pbmcgPSBmYWxzZTtcbiAgfSxcblxuXG5cbiAgcHVzaDogZnVuY3Rpb24gKHBhdGgpIHtcbiAgICBfYWN0aW9uVHlwZSA9IExvY2F0aW9uQWN0aW9ucy5QVVNIO1xuICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gUGF0aC5lbmNvZGUocGF0aCk7XG4gIH0sXG5cbiAgcmVwbGFjZTogZnVuY3Rpb24gKHBhdGgpIHtcbiAgICBfYWN0aW9uVHlwZSA9IExvY2F0aW9uQWN0aW9ucy5SRVBMQUNFO1xuICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArICcjJyArIFBhdGguZW5jb2RlKHBhdGgpKTtcbiAgfSxcblxuICBwb3A6IGZ1bmN0aW9uICgpIHtcbiAgICBfYWN0aW9uVHlwZSA9IExvY2F0aW9uQWN0aW9ucy5QT1A7XG4gICAgSGlzdG9yeS5iYWNrKCk7XG4gIH0sXG5cbiAgZ2V0Q3VycmVudFBhdGg6IGdldEhhc2hQYXRoLFxuXG4gIHRvU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICc8SGFzaExvY2F0aW9uPic7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoTG9jYXRpb247XG5cbn0se1wiLi4vYWN0aW9ucy9Mb2NhdGlvbkFjdGlvbnNcIjoyMixcIi4uL3V0aWxzL0hpc3RvcnlcIjo0MyxcIi4uL3V0aWxzL1BhdGhcIjo0NH1dLDMzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBMb2NhdGlvbkFjdGlvbnMgPSByZXF1aXJlKCcuLi9hY3Rpb25zL0xvY2F0aW9uQWN0aW9ucycpO1xudmFyIEhpc3RvcnkgPSByZXF1aXJlKCcuLi91dGlscy9IaXN0b3J5Jyk7XG52YXIgUGF0aCA9IHJlcXVpcmUoJy4uL3V0aWxzL1BhdGgnKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IFVSTCBwYXRoIGZyb20gYHdpbmRvdy5sb2NhdGlvbmAsIGluY2x1ZGluZyBxdWVyeSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGdldFdpbmRvd1BhdGgoKSB7XG4gIHJldHVybiBQYXRoLmRlY29kZShcbiAgICB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgKyB3aW5kb3cubG9jYXRpb24uc2VhcmNoXG4gICk7XG59XG5cbnZhciBfY2hhbmdlTGlzdGVuZXJzID0gW107XG5cbmZ1bmN0aW9uIG5vdGlmeUNoYW5nZSh0eXBlKSB7XG4gIHZhciBjaGFuZ2UgPSB7XG4gICAgcGF0aDogZ2V0V2luZG93UGF0aCgpLFxuICAgIHR5cGU6IHR5cGVcbiAgfTtcblxuICBfY2hhbmdlTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgbGlzdGVuZXIoY2hhbmdlKTtcbiAgfSk7XG59XG5cbnZhciBfaXNMaXN0ZW5pbmcgPSBmYWxzZTtcblxuZnVuY3Rpb24gb25Qb3BTdGF0ZSgpIHtcbiAgbm90aWZ5Q2hhbmdlKExvY2F0aW9uQWN0aW9ucy5QT1ApO1xufVxuXG4vKipcbiAqIEEgTG9jYXRpb24gdGhhdCB1c2VzIEhUTUw1IGhpc3RvcnkuXG4gKi9cbnZhciBIaXN0b3J5TG9jYXRpb24gPSB7XG5cbiAgYWRkQ2hhbmdlTGlzdGVuZXI6IGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgIF9jaGFuZ2VMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG5cbiAgICBpZiAoX2lzTGlzdGVuaW5nKVxuICAgICAgcmV0dXJuO1xuXG4gICAgaWYgKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBvblBvcFN0YXRlLCBmYWxzZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdpbmRvdy5hdHRhY2hFdmVudCgncG9wc3RhdGUnLCBvblBvcFN0YXRlKTtcbiAgICB9XG5cbiAgICBfaXNMaXN0ZW5pbmcgPSB0cnVlO1xuICB9LFxuXG4gIHJlbW92ZUNoYW5nZUxpc3RlbmVyOiBmdW5jdGlvbihsaXN0ZW5lcikge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gX2NoYW5nZUxpc3RlbmVycy5sZW5ndGg7IGkgPCBsOyBpICsrKSB7XG4gICAgICBpZiAoX2NoYW5nZUxpc3RlbmVyc1tpXSA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgX2NoYW5nZUxpc3RlbmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgb25Qb3BTdGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudCgncG9wc3RhdGUnLCBvblBvcFN0YXRlKTtcbiAgICB9XG5cbiAgICBpZiAoX2NoYW5nZUxpc3RlbmVycy5sZW5ndGggPT09IDApXG4gICAgICBfaXNMaXN0ZW5pbmcgPSBmYWxzZTtcbiAgfSxcblxuXG5cbiAgcHVzaDogZnVuY3Rpb24gKHBhdGgpIHtcbiAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoeyBwYXRoOiBwYXRoIH0sICcnLCBQYXRoLmVuY29kZShwYXRoKSk7XG4gICAgSGlzdG9yeS5sZW5ndGggKz0gMTtcbiAgICBub3RpZnlDaGFuZ2UoTG9jYXRpb25BY3Rpb25zLlBVU0gpO1xuICB9LFxuXG4gIHJlcGxhY2U6IGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHsgcGF0aDogcGF0aCB9LCAnJywgUGF0aC5lbmNvZGUocGF0aCkpO1xuICAgIG5vdGlmeUNoYW5nZShMb2NhdGlvbkFjdGlvbnMuUkVQTEFDRSk7XG4gIH0sXG5cbiAgcG9wOiBIaXN0b3J5LmJhY2ssXG5cbiAgZ2V0Q3VycmVudFBhdGg6IGdldFdpbmRvd1BhdGgsXG5cbiAgdG9TdHJpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJzxIaXN0b3J5TG9jYXRpb24+JztcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhpc3RvcnlMb2NhdGlvbjtcblxufSx7XCIuLi9hY3Rpb25zL0xvY2F0aW9uQWN0aW9uc1wiOjIyLFwiLi4vdXRpbHMvSGlzdG9yeVwiOjQzLFwiLi4vdXRpbHMvUGF0aFwiOjQ0fV0sMzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIEhpc3RvcnlMb2NhdGlvbiA9IHJlcXVpcmUoJy4vSGlzdG9yeUxvY2F0aW9uJyk7XG52YXIgSGlzdG9yeSA9IHJlcXVpcmUoJy4uL3V0aWxzL0hpc3RvcnknKTtcbnZhciBQYXRoID0gcmVxdWlyZSgnLi4vdXRpbHMvUGF0aCcpO1xuXG4vKipcbiAqIEEgTG9jYXRpb24gdGhhdCB1c2VzIGZ1bGwgcGFnZSByZWZyZXNoZXMuIFRoaXMgaXMgdXNlZCBhc1xuICogdGhlIGZhbGxiYWNrIGZvciBIaXN0b3J5TG9jYXRpb24gaW4gYnJvd3NlcnMgdGhhdCBkbyBub3RcbiAqIHN1cHBvcnQgdGhlIEhUTUw1IGhpc3RvcnkgQVBJLlxuICovXG52YXIgUmVmcmVzaExvY2F0aW9uID0ge1xuXG4gIHB1c2g6IGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgd2luZG93LmxvY2F0aW9uID0gUGF0aC5lbmNvZGUocGF0aCk7XG4gIH0sXG5cbiAgcmVwbGFjZTogZnVuY3Rpb24gKHBhdGgpIHtcbiAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShQYXRoLmVuY29kZShwYXRoKSk7XG4gIH0sXG5cbiAgcG9wOiBIaXN0b3J5LmJhY2ssXG5cbiAgZ2V0Q3VycmVudFBhdGg6IEhpc3RvcnlMb2NhdGlvbi5nZXRDdXJyZW50UGF0aCxcblxuICB0b1N0cmluZzogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnPFJlZnJlc2hMb2NhdGlvbj4nO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVmcmVzaExvY2F0aW9uO1xuXG59LHtcIi4uL3V0aWxzL0hpc3RvcnlcIjo0MyxcIi4uL3V0aWxzL1BhdGhcIjo0NCxcIi4vSGlzdG9yeUxvY2F0aW9uXCI6MzN9XSwzNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgncmVhY3QvbGliL2ludmFyaWFudCcpO1xuXG52YXIgRmFrZU5vZGUgPSB7XG5cbiAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgZmFsc2UsXG4gICAgICAnJXMgZWxlbWVudHMgc2hvdWxkIG5vdCBiZSByZW5kZXJlZCcsXG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lXG4gICAgKTtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZha2VOb2RlO1xuXG59LHtcInJlYWN0L2xpYi9pbnZhcmlhbnRcIjoxOTZ9XSwzNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG4vKipcbiAqIEEgbWl4aW4gZm9yIGNvbXBvbmVudHMgdGhhdCBtb2RpZnkgdGhlIFVSTC5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqICAgdmFyIE15TGluayA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAqICAgICBtaXhpbnM6IFsgUm91dGVyLk5hdmlnYXRpb24gXSxcbiAqICAgICBoYW5kbGVDbGljazogZnVuY3Rpb24gKGV2ZW50KSB7XG4gKiAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICogICAgICAgdGhpcy50cmFuc2l0aW9uVG8oJ2FSb3V0ZScsIHsgdGhlOiAncGFyYW1zJyB9LCB7IHRoZTogJ3F1ZXJ5JyB9KTtcbiAqICAgICB9LFxuICogICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICogICAgICAgcmV0dXJuIChcbiAqICAgICAgICAgPGEgb25DbGljaz17dGhpcy5oYW5kbGVDbGlja30+Q2xpY2sgbWUhPC9hPlxuICogICAgICAgKTtcbiAqICAgICB9XG4gKiAgIH0pO1xuICovXG52YXIgTmF2aWdhdGlvbiA9IHtcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBtYWtlUGF0aDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBtYWtlSHJlZjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB0cmFuc2l0aW9uVG86IFJlYWN0LlByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgcmVwbGFjZVdpdGg6IFJlYWN0LlByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZ29CYWNrOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gYWJzb2x1dGUgVVJMIHBhdGggY3JlYXRlZCBmcm9tIHRoZSBnaXZlbiByb3V0ZVxuICAgKiBuYW1lLCBVUkwgcGFyYW1ldGVycywgYW5kIHF1ZXJ5IHZhbHVlcy5cbiAgICovXG4gIG1ha2VQYXRoOiBmdW5jdGlvbiAodG8sIHBhcmFtcywgcXVlcnkpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm1ha2VQYXRoKHRvLCBwYXJhbXMsIHF1ZXJ5KTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyB0aGF0IG1heSBzYWZlbHkgYmUgdXNlZCBhcyB0aGUgaHJlZiBvZiBhXG4gICAqIGxpbmsgdG8gdGhlIHJvdXRlIHdpdGggdGhlIGdpdmVuIG5hbWUuXG4gICAqL1xuICBtYWtlSHJlZjogZnVuY3Rpb24gKHRvLCBwYXJhbXMsIHF1ZXJ5KSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5tYWtlSHJlZih0bywgcGFyYW1zLCBxdWVyeSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRyYW5zaXRpb25zIHRvIHRoZSBVUkwgc3BlY2lmaWVkIGluIHRoZSBhcmd1bWVudHMgYnkgcHVzaGluZ1xuICAgKiBhIG5ldyBVUkwgb250byB0aGUgaGlzdG9yeSBzdGFjay5cbiAgICovXG4gIHRyYW5zaXRpb25UbzogZnVuY3Rpb24gKHRvLCBwYXJhbXMsIHF1ZXJ5KSB7XG4gICAgdGhpcy5jb250ZXh0LnRyYW5zaXRpb25Ubyh0bywgcGFyYW1zLCBxdWVyeSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRyYW5zaXRpb25zIHRvIHRoZSBVUkwgc3BlY2lmaWVkIGluIHRoZSBhcmd1bWVudHMgYnkgcmVwbGFjaW5nXG4gICAqIHRoZSBjdXJyZW50IFVSTCBpbiB0aGUgaGlzdG9yeSBzdGFjay5cbiAgICovXG4gIHJlcGxhY2VXaXRoOiBmdW5jdGlvbiAodG8sIHBhcmFtcywgcXVlcnkpIHtcbiAgICB0aGlzLmNvbnRleHQucmVwbGFjZVdpdGgodG8sIHBhcmFtcywgcXVlcnkpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUcmFuc2l0aW9ucyB0byB0aGUgcHJldmlvdXMgVVJMLlxuICAgKi9cbiAgZ29CYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5jb250ZXh0LmdvQmFjaygpO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTmF2aWdhdGlvbjtcblxufSx7XCJyZWFjdFwiOjIxNn1dLDM3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbi8qKlxuICogUHJvdmlkZXMgdGhlIHJvdXRlciB3aXRoIGNvbnRleHQgZm9yIFJvdXRlci5OYXZpZ2F0aW9uLlxuICovXG52YXIgTmF2aWdhdGlvbkNvbnRleHQgPSB7XG5cbiAgY2hpbGRDb250ZXh0VHlwZXM6IHtcbiAgICBtYWtlUGF0aDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBtYWtlSHJlZjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB0cmFuc2l0aW9uVG86IFJlYWN0LlByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgcmVwbGFjZVdpdGg6IFJlYWN0LlByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZ29CYWNrOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gIH0sXG5cbiAgZ2V0Q2hpbGRDb250ZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1ha2VQYXRoOiB0aGlzLmNvbnN0cnVjdG9yLm1ha2VQYXRoLFxuICAgICAgbWFrZUhyZWY6IHRoaXMuY29uc3RydWN0b3IubWFrZUhyZWYsXG4gICAgICB0cmFuc2l0aW9uVG86IHRoaXMuY29uc3RydWN0b3IudHJhbnNpdGlvblRvLFxuICAgICAgcmVwbGFjZVdpdGg6IHRoaXMuY29uc3RydWN0b3IucmVwbGFjZVdpdGgsXG4gICAgICBnb0JhY2s6IHRoaXMuY29uc3RydWN0b3IuZ29CYWNrXG4gICAgfTtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5hdmlnYXRpb25Db250ZXh0O1xuXG59LHtcInJlYWN0XCI6MjE2fV0sMzg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNvbnRleHRUeXBlczoge1xuICAgIGdldFJvdXRlQXREZXB0aDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBnZXRSb3V0ZUNvbXBvbmVudHM6IFJlYWN0LlByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgcm91dGVIYW5kbGVyczogUmVhY3QuUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWRcbiAgfSxcblxuICBjaGlsZENvbnRleHRUeXBlczoge1xuICAgIHJvdXRlSGFuZGxlcnM6IFJlYWN0LlByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkXG4gIH0sXG5cbiAgZ2V0Q2hpbGRDb250ZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlSGFuZGxlcnM6IHRoaXMuY29udGV4dC5yb3V0ZUhhbmRsZXJzLmNvbmNhdChbIHRoaXMgXSlcbiAgICB9O1xuICB9LFxuXG4gIGdldFJvdXRlRGVwdGg6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0LnJvdXRlSGFuZGxlcnMubGVuZ3RoIC0gMTtcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3VwZGF0ZVJvdXRlQ29tcG9uZW50KCk7XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fdXBkYXRlUm91dGVDb21wb25lbnQoKTtcbiAgfSxcblxuICBfdXBkYXRlUm91dGVDb21wb25lbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZGVwdGggPSB0aGlzLmdldFJvdXRlRGVwdGgoKTtcbiAgICB2YXIgY29tcG9uZW50cyA9IHRoaXMuY29udGV4dC5nZXRSb3V0ZUNvbXBvbmVudHMoKTtcbiAgICBjb21wb25lbnRzW2RlcHRoXSA9IHRoaXMucmVmc1t0aGlzLnByb3BzLnJlZiB8fCAnX19yb3V0ZUhhbmRsZXJfXyddO1xuICB9LFxuXG4gIGdldFJvdXRlSGFuZGxlcjogZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIHJvdXRlID0gdGhpcy5jb250ZXh0LmdldFJvdXRlQXREZXB0aCh0aGlzLmdldFJvdXRlRGVwdGgoKSk7XG4gICAgcmV0dXJuIHJvdXRlID8gUmVhY3QuY3JlYXRlRWxlbWVudChyb3V0ZS5oYW5kbGVyLCBwcm9wcyB8fCB0aGlzLnByb3BzKSA6IG51bGw7XG4gIH1cbn07XG59LHtcInJlYWN0XCI6MjE2fV0sMzk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9pbnZhcmlhbnQnKTtcbnZhciBjYW5Vc2VET00gPSByZXF1aXJlKCdyZWFjdC9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKS5jYW5Vc2VET007XG52YXIgZ2V0V2luZG93U2Nyb2xsUG9zaXRpb24gPSByZXF1aXJlKCcuLi91dGlscy9nZXRXaW5kb3dTY3JvbGxQb3NpdGlvbicpO1xuXG5mdW5jdGlvbiBzaG91bGRVcGRhdGVTY3JvbGwoc3RhdGUsIHByZXZTdGF0ZSkge1xuICBpZiAoIXByZXZTdGF0ZSlcbiAgICByZXR1cm4gdHJ1ZTtcblxuICAvLyBEb24ndCB1cGRhdGUgc2Nyb2xsIHBvc2l0aW9uIHdoZW4gb25seSB0aGUgcXVlcnkgaGFzIGNoYW5nZWQuXG4gIGlmIChzdGF0ZS5wYXRobmFtZSA9PT0gcHJldlN0YXRlLnBhdGhuYW1lKVxuICAgIHJldHVybiBmYWxzZTtcblxuICB2YXIgcm91dGVzID0gc3RhdGUucm91dGVzO1xuICB2YXIgcHJldlJvdXRlcyA9IHByZXZTdGF0ZS5yb3V0ZXM7XG5cbiAgdmFyIHNoYXJlZEFuY2VzdG9yUm91dGVzID0gcm91dGVzLmZpbHRlcihmdW5jdGlvbiAocm91dGUpIHtcbiAgICByZXR1cm4gcHJldlJvdXRlcy5pbmRleE9mKHJvdXRlKSAhPT0gLTE7XG4gIH0pO1xuXG4gIHJldHVybiAhc2hhcmVkQW5jZXN0b3JSb3V0ZXMuc29tZShmdW5jdGlvbiAocm91dGUpIHtcbiAgICByZXR1cm4gcm91dGUuaWdub3JlU2Nyb2xsQmVoYXZpb3I7XG4gIH0pO1xufVxuXG4vKipcbiAqIFByb3ZpZGVzIHRoZSByb3V0ZXIgd2l0aCB0aGUgYWJpbGl0eSB0byBtYW5hZ2Ugd2luZG93IHNjcm9sbCBwb3NpdGlvblxuICogYWNjb3JkaW5nIHRvIGl0cyBzY3JvbGwgYmVoYXZpb3IuXG4gKi9cbnZhciBTY3JvbGxpbmcgPSB7XG5cbiAgc3RhdGljczoge1xuICAgIC8qKlxuICAgICAqIFJlY29yZHMgY3VyZW50IHNjcm9sbCBwb3NpdGlvbiBhcyB0aGUgbGFzdCBrbm93biBwb3NpdGlvbiBmb3IgdGhlIGdpdmVuIFVSTCBwYXRoLlxuICAgICAqL1xuICAgIHJlY29yZFNjcm9sbFBvc2l0aW9uOiBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgaWYgKCF0aGlzLnNjcm9sbEhpc3RvcnkpXG4gICAgICAgIHRoaXMuc2Nyb2xsSGlzdG9yeSA9IHt9O1xuXG4gICAgICB0aGlzLnNjcm9sbEhpc3RvcnlbcGF0aF0gPSBnZXRXaW5kb3dTY3JvbGxQb3NpdGlvbigpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBsYXN0IGtub3duIHNjcm9sbCBwb3NpdGlvbiBmb3IgdGhlIGdpdmVuIFVSTCBwYXRoLlxuICAgICAqL1xuICAgIGdldFNjcm9sbFBvc2l0aW9uOiBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgaWYgKCF0aGlzLnNjcm9sbEhpc3RvcnkpXG4gICAgICAgIHRoaXMuc2Nyb2xsSGlzdG9yeSA9IHt9O1xuXG4gICAgICByZXR1cm4gdGhpcy5zY3JvbGxIaXN0b3J5W3BhdGhdIHx8IG51bGw7XG4gICAgfVxuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24gKCkge1xuICAgIGludmFyaWFudChcbiAgICAgIHRoaXMuZ2V0U2Nyb2xsQmVoYXZpb3IoKSA9PSBudWxsIHx8IGNhblVzZURPTSxcbiAgICAgICdDYW5ub3QgdXNlIHNjcm9sbCBiZWhhdmlvciB3aXRob3V0IGEgRE9NJ1xuICAgICk7XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl91cGRhdGVTY3JvbGwoKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uIChwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgIHRoaXMuX3VwZGF0ZVNjcm9sbChwcmV2U3RhdGUpO1xuICB9LFxuXG4gIF91cGRhdGVTY3JvbGw6IGZ1bmN0aW9uIChwcmV2U3RhdGUpIHtcbiAgICBpZiAoIXNob3VsZFVwZGF0ZVNjcm9sbCh0aGlzLnN0YXRlLCBwcmV2U3RhdGUpKVxuICAgICAgcmV0dXJuO1xuXG4gICAgdmFyIHNjcm9sbEJlaGF2aW9yID0gdGhpcy5nZXRTY3JvbGxCZWhhdmlvcigpO1xuXG4gICAgaWYgKHNjcm9sbEJlaGF2aW9yKVxuICAgICAgc2Nyb2xsQmVoYXZpb3IudXBkYXRlU2Nyb2xsUG9zaXRpb24oXG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IuZ2V0U2Nyb2xsUG9zaXRpb24odGhpcy5zdGF0ZS5wYXRoKSxcbiAgICAgICAgdGhpcy5zdGF0ZS5hY3Rpb25cbiAgICAgICk7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTY3JvbGxpbmc7XG5cbn0se1wiLi4vdXRpbHMvZ2V0V2luZG93U2Nyb2xsUG9zaXRpb25cIjo1MSxcInJlYWN0L2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOjkwLFwicmVhY3QvbGliL2ludmFyaWFudFwiOjE5Nn1dLDQwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbi8qKlxuICogQSBtaXhpbiBmb3IgY29tcG9uZW50cyB0aGF0IG5lZWQgdG8ga25vdyB0aGUgcGF0aCwgcm91dGVzLCBVUkxcbiAqIHBhcmFtcyBhbmQgcXVlcnkgdGhhdCBhcmUgY3VycmVudGx5IGFjdGl2ZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqICAgdmFyIEFib3V0TGluayA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAqICAgICBtaXhpbnM6IFsgUm91dGVyLlN0YXRlIF0sXG4gKiAgICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gKiAgICAgICB2YXIgY2xhc3NOYW1lID0gdGhpcy5wcm9wcy5jbGFzc05hbWU7XG4gKiAgIFxuICogICAgICAgaWYgKHRoaXMuaXNBY3RpdmUoJ2Fib3V0JykpXG4gKiAgICAgICAgIGNsYXNzTmFtZSArPSAnIGlzLWFjdGl2ZSc7XG4gKiAgIFxuICogICAgICAgcmV0dXJuIFJlYWN0LkRPTS5hKHsgY2xhc3NOYW1lOiBjbGFzc05hbWUgfSwgdGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gKiAgICAgfVxuICogICB9KTtcbiAqL1xudmFyIFN0YXRlID0ge1xuXG4gIGNvbnRleHRUeXBlczoge1xuICAgIGdldEN1cnJlbnRQYXRoOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGdldEN1cnJlbnRSb3V0ZXM6IFJlYWN0LlByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZ2V0Q3VycmVudFBhdGhuYW1lOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGdldEN1cnJlbnRQYXJhbXM6IFJlYWN0LlByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZ2V0Q3VycmVudFF1ZXJ5OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGlzQWN0aXZlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgVVJMIHBhdGguXG4gICAqL1xuICBnZXRQYXRoOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5nZXRDdXJyZW50UGF0aCgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIHRoZSByb3V0ZXMgdGhhdCBhcmUgY3VycmVudGx5IGFjdGl2ZS5cbiAgICovXG4gIGdldFJvdXRlczogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQuZ2V0Q3VycmVudFJvdXRlcygpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IFVSTCBwYXRoIHdpdGhvdXQgdGhlIHF1ZXJ5IHN0cmluZy5cbiAgICovXG4gIGdldFBhdGhuYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5nZXRDdXJyZW50UGF0aG5hbWUoKTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyBhbiBvYmplY3Qgb2YgdGhlIFVSTCBwYXJhbXMgdGhhdCBhcmUgY3VycmVudGx5IGFjdGl2ZS5cbiAgICovXG4gIGdldFBhcmFtczogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQuZ2V0Q3VycmVudFBhcmFtcygpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIG9iamVjdCBvZiB0aGUgcXVlcnkgcGFyYW1zIHRoYXQgYXJlIGN1cnJlbnRseSBhY3RpdmUuXG4gICAqL1xuICBnZXRRdWVyeTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQuZ2V0Q3VycmVudFF1ZXJ5KCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEEgaGVscGVyIG1ldGhvZCB0byBkZXRlcm1pbmUgaWYgYSBnaXZlbiByb3V0ZSwgcGFyYW1zLCBhbmQgcXVlcnlcbiAgICogYXJlIGFjdGl2ZS5cbiAgICovXG4gIGlzQWN0aXZlOiBmdW5jdGlvbiAodG8sIHBhcmFtcywgcXVlcnkpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0LmlzQWN0aXZlKHRvLCBwYXJhbXMsIHF1ZXJ5KTtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0YXRlO1xuXG59LHtcInJlYWN0XCI6MjE2fV0sNDE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCdyZWFjdC9saWIvT2JqZWN0LmFzc2lnbicpO1xudmFyIFBhdGggPSByZXF1aXJlKCcuLi91dGlscy9QYXRoJyk7XG5cbmZ1bmN0aW9uIHJvdXRlSXNBY3RpdmUoYWN0aXZlUm91dGVzLCByb3V0ZU5hbWUpIHtcbiAgcmV0dXJuIGFjdGl2ZVJvdXRlcy5zb21lKGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgIHJldHVybiByb3V0ZS5uYW1lID09PSByb3V0ZU5hbWU7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwYXJhbXNBcmVBY3RpdmUoYWN0aXZlUGFyYW1zLCBwYXJhbXMpIHtcbiAgZm9yICh2YXIgcHJvcGVydHkgaW4gcGFyYW1zKVxuICAgIGlmIChTdHJpbmcoYWN0aXZlUGFyYW1zW3Byb3BlcnR5XSkgIT09IFN0cmluZyhwYXJhbXNbcHJvcGVydHldKSlcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcXVlcnlJc0FjdGl2ZShhY3RpdmVRdWVyeSwgcXVlcnkpIHtcbiAgZm9yICh2YXIgcHJvcGVydHkgaW4gcXVlcnkpXG4gICAgaWYgKFN0cmluZyhhY3RpdmVRdWVyeVtwcm9wZXJ0eV0pICE9PSBTdHJpbmcocXVlcnlbcHJvcGVydHldKSlcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBQcm92aWRlcyB0aGUgcm91dGVyIHdpdGggY29udGV4dCBmb3IgUm91dGVyLlN0YXRlLlxuICovXG52YXIgU3RhdGVDb250ZXh0ID0ge1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IFVSTCBwYXRoICsgcXVlcnkgc3RyaW5nLlxuICAgKi9cbiAgZ2V0Q3VycmVudFBhdGg6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5wYXRoO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcmVhZC1vbmx5IGFycmF5IG9mIHRoZSBjdXJyZW50bHkgYWN0aXZlIHJvdXRlcy5cbiAgICovXG4gIGdldEN1cnJlbnRSb3V0ZXM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5yb3V0ZXMuc2xpY2UoMCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgVVJMIHBhdGggd2l0aG91dCB0aGUgcXVlcnkgc3RyaW5nLlxuICAgKi9cbiAgZ2V0Q3VycmVudFBhdGhuYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUucGF0aG5hbWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSByZWFkLW9ubHkgb2JqZWN0IG9mIHRoZSBjdXJyZW50bHkgYWN0aXZlIFVSTCBwYXJhbWV0ZXJzLlxuICAgKi9cbiAgZ2V0Q3VycmVudFBhcmFtczogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhc3NpZ24oe30sIHRoaXMuc3RhdGUucGFyYW1zKTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyBhIHJlYWQtb25seSBvYmplY3Qgb2YgdGhlIGN1cnJlbnRseSBhY3RpdmUgcXVlcnkgcGFyYW1ldGVycy5cbiAgICovXG4gIGdldEN1cnJlbnRRdWVyeTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhc3NpZ24oe30sIHRoaXMuc3RhdGUucXVlcnkpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHJvdXRlLCBwYXJhbXMsIGFuZCBxdWVyeSBhcmUgYWN0aXZlLlxuICAgKi9cbiAgaXNBY3RpdmU6IGZ1bmN0aW9uICh0bywgcGFyYW1zLCBxdWVyeSkge1xuICAgIGlmIChQYXRoLmlzQWJzb2x1dGUodG8pKVxuICAgICAgcmV0dXJuIHRvID09PSB0aGlzLnN0YXRlLnBhdGg7XG5cbiAgICByZXR1cm4gcm91dGVJc0FjdGl2ZSh0aGlzLnN0YXRlLnJvdXRlcywgdG8pICYmXG4gICAgICBwYXJhbXNBcmVBY3RpdmUodGhpcy5zdGF0ZS5wYXJhbXMsIHBhcmFtcykgJiZcbiAgICAgIChxdWVyeSA9PSBudWxsIHx8IHF1ZXJ5SXNBY3RpdmUodGhpcy5zdGF0ZS5xdWVyeSwgcXVlcnkpKTtcbiAgfSxcblxuICBjaGlsZENvbnRleHRUeXBlczoge1xuICAgIGdldEN1cnJlbnRQYXRoOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGdldEN1cnJlbnRSb3V0ZXM6IFJlYWN0LlByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZ2V0Q3VycmVudFBhdGhuYW1lOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGdldEN1cnJlbnRQYXJhbXM6IFJlYWN0LlByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZ2V0Q3VycmVudFF1ZXJ5OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGlzQWN0aXZlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gIH0sXG5cbiAgZ2V0Q2hpbGRDb250ZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdldEN1cnJlbnRQYXRoOiB0aGlzLmdldEN1cnJlbnRQYXRoLFxuICAgICAgZ2V0Q3VycmVudFJvdXRlczogdGhpcy5nZXRDdXJyZW50Um91dGVzLFxuICAgICAgZ2V0Q3VycmVudFBhdGhuYW1lOiB0aGlzLmdldEN1cnJlbnRQYXRobmFtZSxcbiAgICAgIGdldEN1cnJlbnRQYXJhbXM6IHRoaXMuZ2V0Q3VycmVudFBhcmFtcyxcbiAgICAgIGdldEN1cnJlbnRRdWVyeTogdGhpcy5nZXRDdXJyZW50UXVlcnksXG4gICAgICBpc0FjdGl2ZTogdGhpcy5pc0FjdGl2ZVxuICAgIH07XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTdGF0ZUNvbnRleHQ7XG5cbn0se1wiLi4vdXRpbHMvUGF0aFwiOjQ0LFwicmVhY3RcIjoyMTYsXCJyZWFjdC9saWIvT2JqZWN0LmFzc2lnblwiOjk1fV0sNDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgY2FuY2VsbGF0aW9uIGNhdXNlZCBieSBuYXZpZ2F0aW5nIGF3YXlcbiAqIGJlZm9yZSB0aGUgcHJldmlvdXMgdHJhbnNpdGlvbiBoYXMgZnVsbHkgcmVzb2x2ZWQuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbGxhdGlvbigpIHsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbGxhdGlvbjtcblxufSx7fV0sNDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9pbnZhcmlhbnQnKTtcbnZhciBjYW5Vc2VET00gPSByZXF1aXJlKCdyZWFjdC9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKS5jYW5Vc2VET007XG5cbnZhciBIaXN0b3J5ID0ge1xuXG4gIC8qKlxuICAgKiBTZW5kcyB0aGUgYnJvd3NlciBiYWNrIG9uZSBlbnRyeSBpbiB0aGUgaGlzdG9yeS5cbiAgICovXG4gIGJhY2s6IGZ1bmN0aW9uICgpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBjYW5Vc2VET00sXG4gICAgICAnQ2Fubm90IHVzZSBIaXN0b3J5LmJhY2sgd2l0aG91dCBhIERPTSdcbiAgICApO1xuXG4gICAgLy8gRG8gdGhpcyBmaXJzdCBzbyB0aGF0IEhpc3RvcnkubGVuZ3RoIHdpbGxcbiAgICAvLyBiZSBhY2N1cmF0ZSBpbiBsb2NhdGlvbiBjaGFuZ2UgbGlzdGVuZXJzLlxuICAgIEhpc3RvcnkubGVuZ3RoIC09IDE7XG5cbiAgICB3aW5kb3cuaGlzdG9yeS5iYWNrKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IG51bWJlciBvZiBlbnRyaWVzIGluIHRoZSBoaXN0b3J5LlxuICAgKi9cbiAgbGVuZ3RoOiAxXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSGlzdG9yeTtcblxufSx7XCJyZWFjdC9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnRcIjo5MCxcInJlYWN0L2xpYi9pbnZhcmlhbnRcIjoxOTZ9XSw0NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgncmVhY3QvbGliL2ludmFyaWFudCcpO1xudmFyIG1lcmdlID0gcmVxdWlyZSgncXMvbGliL3V0aWxzJykubWVyZ2U7XG52YXIgcXMgPSByZXF1aXJlKCdxcycpO1xuXG52YXIgcGFyYW1Db21waWxlTWF0Y2hlciA9IC86KFthLXpBLVpfJF1bYS16QS1aMC05XyRdKil8WyouKClcXFtcXF1cXFxcK3x7fV4kXS9nO1xudmFyIHBhcmFtSW5qZWN0TWF0Y2hlciA9IC86KFthLXpBLVpfJF1bYS16QS1aMC05XyQ/XSpbP10/KXxbKl0vZztcbnZhciBwYXJhbUluamVjdFRyYWlsaW5nU2xhc2hNYXRjaGVyID0gL1xcL1xcL1xcP3xcXC9cXD8vZztcbnZhciBxdWVyeU1hdGNoZXIgPSAvXFw/KC4rKS87XG5cbnZhciBfY29tcGlsZWRQYXR0ZXJucyA9IHt9O1xuXG5mdW5jdGlvbiBjb21waWxlUGF0dGVybihwYXR0ZXJuKSB7XG4gIGlmICghKHBhdHRlcm4gaW4gX2NvbXBpbGVkUGF0dGVybnMpKSB7XG4gICAgdmFyIHBhcmFtTmFtZXMgPSBbXTtcbiAgICB2YXIgc291cmNlID0gcGF0dGVybi5yZXBsYWNlKHBhcmFtQ29tcGlsZU1hdGNoZXIsIGZ1bmN0aW9uIChtYXRjaCwgcGFyYW1OYW1lKSB7XG4gICAgICBpZiAocGFyYW1OYW1lKSB7XG4gICAgICAgIHBhcmFtTmFtZXMucHVzaChwYXJhbU5hbWUpO1xuICAgICAgICByZXR1cm4gJyhbXi8/I10rKSc7XG4gICAgICB9IGVsc2UgaWYgKG1hdGNoID09PSAnKicpIHtcbiAgICAgICAgcGFyYW1OYW1lcy5wdXNoKCdzcGxhdCcpO1xuICAgICAgICByZXR1cm4gJyguKj8pJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAnXFxcXCcgKyBtYXRjaDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9jb21waWxlZFBhdHRlcm5zW3BhdHRlcm5dID0ge1xuICAgICAgbWF0Y2hlcjogbmV3IFJlZ0V4cCgnXicgKyBzb3VyY2UgKyAnJCcsICdpJyksXG4gICAgICBwYXJhbU5hbWVzOiBwYXJhbU5hbWVzXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfY29tcGlsZWRQYXR0ZXJuc1twYXR0ZXJuXTtcbn1cblxudmFyIFBhdGggPSB7XG5cbiAgLyoqXG4gICAqIFNhZmVseSBkZWNvZGVzIHNwZWNpYWwgY2hhcmFjdGVycyBpbiB0aGUgZ2l2ZW4gVVJMIHBhdGguXG4gICAqL1xuICBkZWNvZGU6IGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSShwYXRoLnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcbiAgfSxcblxuICAvKipcbiAgICogU2FmZWx5IGVuY29kZXMgc3BlY2lhbCBjaGFyYWN0ZXJzIGluIHRoZSBnaXZlbiBVUkwgcGF0aC5cbiAgICovXG4gIGVuY29kZTogZnVuY3Rpb24gKHBhdGgpIHtcbiAgICByZXR1cm4gZW5jb2RlVVJJKHBhdGgpLnJlcGxhY2UoLyUyMC9nLCAnKycpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIHRoZSBuYW1lcyBvZiBhbGwgcGFyYW1ldGVycyBpbiB0aGUgZ2l2ZW4gcGF0dGVybi5cbiAgICovXG4gIGV4dHJhY3RQYXJhbU5hbWVzOiBmdW5jdGlvbiAocGF0dGVybikge1xuICAgIHJldHVybiBjb21waWxlUGF0dGVybihwYXR0ZXJuKS5wYXJhbU5hbWVzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBFeHRyYWN0cyB0aGUgcG9ydGlvbnMgb2YgdGhlIGdpdmVuIFVSTCBwYXRoIHRoYXQgbWF0Y2ggdGhlIGdpdmVuIHBhdHRlcm5cbiAgICogYW5kIHJldHVybnMgYW4gb2JqZWN0IG9mIHBhcmFtIG5hbWUgPT4gdmFsdWUgcGFpcnMuIFJldHVybnMgbnVsbCBpZiB0aGVcbiAgICogcGF0dGVybiBkb2VzIG5vdCBtYXRjaCB0aGUgZ2l2ZW4gcGF0aC5cbiAgICovXG4gIGV4dHJhY3RQYXJhbXM6IGZ1bmN0aW9uIChwYXR0ZXJuLCBwYXRoKSB7XG4gICAgdmFyIG9iamVjdCA9IGNvbXBpbGVQYXR0ZXJuKHBhdHRlcm4pO1xuICAgIHZhciBtYXRjaCA9IHBhdGgubWF0Y2gob2JqZWN0Lm1hdGNoZXIpO1xuXG4gICAgaWYgKCFtYXRjaClcbiAgICAgIHJldHVybiBudWxsO1xuXG4gICAgdmFyIHBhcmFtcyA9IHt9O1xuXG4gICAgb2JqZWN0LnBhcmFtTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAocGFyYW1OYW1lLCBpbmRleCkge1xuICAgICAgcGFyYW1zW3BhcmFtTmFtZV0gPSBtYXRjaFtpbmRleCArIDFdO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyBhIHZlcnNpb24gb2YgdGhlIGdpdmVuIHJvdXRlIHBhdGggd2l0aCBwYXJhbXMgaW50ZXJwb2xhdGVkLiBUaHJvd3NcbiAgICogaWYgdGhlcmUgaXMgYSBkeW5hbWljIHNlZ21lbnQgb2YgdGhlIHJvdXRlIHBhdGggZm9yIHdoaWNoIHRoZXJlIGlzIG5vIHBhcmFtLlxuICAgKi9cbiAgaW5qZWN0UGFyYW1zOiBmdW5jdGlvbiAocGF0dGVybiwgcGFyYW1zKSB7XG4gICAgcGFyYW1zID0gcGFyYW1zIHx8IHt9O1xuXG4gICAgdmFyIHNwbGF0SW5kZXggPSAwO1xuXG4gICAgcmV0dXJuIHBhdHRlcm4ucmVwbGFjZShwYXJhbUluamVjdE1hdGNoZXIsIGZ1bmN0aW9uIChtYXRjaCwgcGFyYW1OYW1lKSB7XG4gICAgICBwYXJhbU5hbWUgPSBwYXJhbU5hbWUgfHwgJ3NwbGF0JztcblxuICAgICAgLy8gSWYgcGFyYW0gaXMgb3B0aW9uYWwgZG9uJ3QgY2hlY2sgZm9yIGV4aXN0ZW5jZVxuICAgICAgaWYgKHBhcmFtTmFtZS5zbGljZSgtMSkgIT09ICc/Jykge1xuICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgcGFyYW1zW3BhcmFtTmFtZV0gIT0gbnVsbCxcbiAgICAgICAgICAnTWlzc2luZyBcIicgKyBwYXJhbU5hbWUgKyAnXCIgcGFyYW1ldGVyIGZvciBwYXRoIFwiJyArIHBhdHRlcm4gKyAnXCInXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJhbU5hbWUgPSBwYXJhbU5hbWUuc2xpY2UoMCwgLTEpO1xuXG4gICAgICAgIGlmIChwYXJhbXNbcGFyYW1OYW1lXSA9PSBudWxsKVxuICAgICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgICAgdmFyIHNlZ21lbnQ7XG4gICAgICBpZiAocGFyYW1OYW1lID09PSAnc3BsYXQnICYmIEFycmF5LmlzQXJyYXkocGFyYW1zW3BhcmFtTmFtZV0pKSB7XG4gICAgICAgIHNlZ21lbnQgPSBwYXJhbXNbcGFyYW1OYW1lXVtzcGxhdEluZGV4KytdO1xuXG4gICAgICAgIGludmFyaWFudChcbiAgICAgICAgICBzZWdtZW50ICE9IG51bGwsXG4gICAgICAgICAgJ01pc3Npbmcgc3BsYXQgIyAnICsgc3BsYXRJbmRleCArICcgZm9yIHBhdGggXCInICsgcGF0dGVybiArICdcIidcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlZ21lbnQgPSBwYXJhbXNbcGFyYW1OYW1lXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlZ21lbnQ7XG4gICAgfSkucmVwbGFjZShwYXJhbUluamVjdFRyYWlsaW5nU2xhc2hNYXRjaGVyLCAnLycpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGlzIHRoZSByZXN1bHQgb2YgcGFyc2luZyBhbnkgcXVlcnkgc3RyaW5nIGNvbnRhaW5lZFxuICAgKiBpbiB0aGUgZ2l2ZW4gcGF0aCwgbnVsbCBpZiB0aGUgcGF0aCBjb250YWlucyBubyBxdWVyeSBzdHJpbmcuXG4gICAqL1xuICBleHRyYWN0UXVlcnk6IGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgdmFyIG1hdGNoID0gcGF0aC5tYXRjaChxdWVyeU1hdGNoZXIpO1xuICAgIHJldHVybiBtYXRjaCAmJiBxcy5wYXJzZShtYXRjaFsxXSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSB2ZXJzaW9uIG9mIHRoZSBnaXZlbiBwYXRoIHdpdGhvdXQgdGhlIHF1ZXJ5IHN0cmluZy5cbiAgICovXG4gIHdpdGhvdXRRdWVyeTogZnVuY3Rpb24gKHBhdGgpIHtcbiAgICByZXR1cm4gcGF0aC5yZXBsYWNlKHF1ZXJ5TWF0Y2hlciwgJycpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgdmVyc2lvbiBvZiB0aGUgZ2l2ZW4gcGF0aCB3aXRoIHRoZSBwYXJhbWV0ZXJzIGluIHRoZSBnaXZlblxuICAgKiBxdWVyeSBtZXJnZWQgaW50byB0aGUgcXVlcnkgc3RyaW5nLlxuICAgKi9cbiAgd2l0aFF1ZXJ5OiBmdW5jdGlvbiAocGF0aCwgcXVlcnkpIHtcbiAgICB2YXIgZXhpc3RpbmdRdWVyeSA9IFBhdGguZXh0cmFjdFF1ZXJ5KHBhdGgpO1xuXG4gICAgaWYgKGV4aXN0aW5nUXVlcnkpXG4gICAgICBxdWVyeSA9IHF1ZXJ5ID8gbWVyZ2UoZXhpc3RpbmdRdWVyeSwgcXVlcnkpIDogZXhpc3RpbmdRdWVyeTtcblxuICAgIHZhciBxdWVyeVN0cmluZyA9IHF1ZXJ5ICYmIHFzLnN0cmluZ2lmeShxdWVyeSk7XG5cbiAgICBpZiAocXVlcnlTdHJpbmcpXG4gICAgICByZXR1cm4gUGF0aC53aXRob3V0UXVlcnkocGF0aCkgKyAnPycgKyBxdWVyeVN0cmluZztcblxuICAgIHJldHVybiBwYXRoO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHBhdGggaXMgYWJzb2x1dGUuXG4gICAqL1xuICBpc0Fic29sdXRlOiBmdW5jdGlvbiAocGF0aCkge1xuICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbm9ybWFsaXplZCB2ZXJzaW9uIG9mIHRoZSBnaXZlbiBwYXRoLlxuICAgKi9cbiAgbm9ybWFsaXplOiBmdW5jdGlvbiAocGF0aCwgcGFyZW50Um91dGUpIHtcbiAgICByZXR1cm4gcGF0aC5yZXBsYWNlKC9eXFwvKi8sICcvJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEpvaW5zIHR3byBVUkwgcGF0aHMgdG9nZXRoZXIuXG4gICAqL1xuICBqb2luOiBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBhLnJlcGxhY2UoL1xcLyokLywgJy8nKSArIGI7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQYXRoO1xuXG59LHtcInFzXCI6NTUsXCJxcy9saWIvdXRpbHNcIjo1OSxcInJlYWN0L2xpYi9pbnZhcmlhbnRcIjoxOTZ9XSw0NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgUHJvbWlzZSA9IHJlcXVpcmUoJ3doZW4vbGliL1Byb21pc2UnKTtcblxuLy8gVE9ETzogVXNlIHByb2Nlc3MuZW52Lk5PREVfRU5WIGNoZWNrICsgZW52aWZ5IHRvIGVuYWJsZVxuLy8gd2hlbidzIHByb21pc2UgbW9uaXRvciBoZXJlIHdoZW4gaW4gZGV2LlxuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21pc2U7XG5cbn0se1wid2hlbi9saWIvUHJvbWlzZVwiOjYwfV0sNDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIFByb3BUeXBlcyA9IHtcblxuICAvKipcbiAgICogUmVxdWlyZXMgdGhhdCB0aGUgdmFsdWUgb2YgYSBwcm9wIGJlIGZhbHN5LlxuICAgKi9cbiAgZmFsc3k6IGZ1bmN0aW9uIChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHtcbiAgICBpZiAocHJvcHNbcHJvcE5hbWVdKVxuICAgICAgcmV0dXJuIG5ldyBFcnJvcignPCcgKyBjb21wb25lbnROYW1lICsgJz4gbWF5IG5vdCBoYXZlIGEgXCInICsgcHJvcE5hbWUgKyAnXCIgcHJvcCcpO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvcFR5cGVzO1xuXG59LHt9XSw0NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIEVuY2Fwc3VsYXRlcyBhIHJlZGlyZWN0IHRvIHRoZSBnaXZlbiByb3V0ZS5cbiAqL1xuZnVuY3Rpb24gUmVkaXJlY3QodG8sIHBhcmFtcywgcXVlcnkpIHtcbiAgdGhpcy50byA9IHRvO1xuICB0aGlzLnBhcmFtcyA9IHBhcmFtcztcbiAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlZGlyZWN0O1xuXG59LHt9XSw0ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgYXNzaWduID0gcmVxdWlyZSgncmVhY3QvbGliL09iamVjdC5hc3NpZ24nKTtcbnZhciByZXZlcnNlZEFycmF5ID0gcmVxdWlyZSgnLi9yZXZlcnNlZEFycmF5Jyk7XG52YXIgUmVkaXJlY3QgPSByZXF1aXJlKCcuL1JlZGlyZWN0Jyk7XG52YXIgUHJvbWlzZSA9IHJlcXVpcmUoJy4vUHJvbWlzZScpO1xuXG4vKipcbiAqIFJ1bnMgYWxsIGhvb2sgZnVuY3Rpb25zIHNlcmlhbGx5IGFuZCBjYWxscyBjYWxsYmFjayhlcnJvcikgd2hlbiBmaW5pc2hlZC5cbiAqIEEgaG9vayBtYXkgcmV0dXJuIGEgcHJvbWlzZSBpZiBpdCBuZWVkcyB0byBleGVjdXRlIGFzeW5jaHJvbm91c2x5LlxuICovXG5mdW5jdGlvbiBydW5Ib29rcyhob29rcywgY2FsbGJhY2spIHtcbiAgdmFyIHByb21pc2U7XG4gIHRyeSB7XG4gICAgcHJvbWlzZSA9IGhvb2tzLnJlZHVjZShmdW5jdGlvbiAocHJvbWlzZSwgaG9vaykge1xuICAgICAgLy8gVGhlIGZpcnN0IGhvb2sgdG8gdXNlIHRyYW5zaXRpb24ud2FpdCBtYWtlcyB0aGUgcmVzdFxuICAgICAgLy8gb2YgdGhlIHRyYW5zaXRpb24gYXN5bmMgZnJvbSB0aGF0IHBvaW50IGZvcndhcmQuXG4gICAgICByZXR1cm4gcHJvbWlzZSA/IHByb21pc2UudGhlbihob29rKSA6IGhvb2soKTtcbiAgICB9LCBudWxsKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gY2FsbGJhY2soZXJyb3IpOyAvLyBTeW5jIGVycm9yLlxuICB9XG5cbiAgaWYgKHByb21pc2UpIHtcbiAgICAvLyBVc2Ugc2V0VGltZW91dCB0byBicmVhayB0aGUgcHJvbWlzZSBjaGFpbi5cbiAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgc2V0VGltZW91dChjYWxsYmFjayk7XG4gICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2FsbGJhY2soZXJyb3IpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgY2FsbGJhY2soKTtcbiAgfVxufVxuXG4vKipcbiAqIENhbGxzIHRoZSB3aWxsVHJhbnNpdGlvbkZyb20gaG9vayBvZiBhbGwgaGFuZGxlcnMgaW4gdGhlIGdpdmVuIG1hdGNoZXNcbiAqIHNlcmlhbGx5IGluIHJldmVyc2Ugd2l0aCB0aGUgdHJhbnNpdGlvbiBvYmplY3QgYW5kIHRoZSBjdXJyZW50IGluc3RhbmNlIG9mXG4gKiB0aGUgcm91dGUncyBoYW5kbGVyLCBzbyB0aGF0IHRoZSBkZWVwZXN0IG5lc3RlZCBoYW5kbGVycyBhcmUgY2FsbGVkIGZpcnN0LlxuICogQ2FsbHMgY2FsbGJhY2soZXJyb3IpIHdoZW4gZmluaXNoZWQuXG4gKi9cbmZ1bmN0aW9uIHJ1blRyYW5zaXRpb25Gcm9tSG9va3ModHJhbnNpdGlvbiwgcm91dGVzLCBjb21wb25lbnRzLCBjYWxsYmFjaykge1xuICBjb21wb25lbnRzID0gcmV2ZXJzZWRBcnJheShjb21wb25lbnRzKTtcblxuICB2YXIgaG9va3MgPSByZXZlcnNlZEFycmF5KHJvdXRlcykubWFwKGZ1bmN0aW9uIChyb3V0ZSwgaW5kZXgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGhhbmRsZXIgPSByb3V0ZS5oYW5kbGVyO1xuXG4gICAgICBpZiAoIXRyYW5zaXRpb24uaXNBYm9ydGVkICYmIGhhbmRsZXIud2lsbFRyYW5zaXRpb25Gcm9tKVxuICAgICAgICByZXR1cm4gaGFuZGxlci53aWxsVHJhbnNpdGlvbkZyb20odHJhbnNpdGlvbiwgY29tcG9uZW50c1tpbmRleF0pO1xuXG4gICAgICB2YXIgcHJvbWlzZSA9IHRyYW5zaXRpb24uX3Byb21pc2U7XG4gICAgICB0cmFuc2l0aW9uLl9wcm9taXNlID0gbnVsbDtcblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfTtcbiAgfSk7XG5cbiAgcnVuSG9va3MoaG9va3MsIGNhbGxiYWNrKTtcbn1cblxuLyoqXG4gKiBDYWxscyB0aGUgd2lsbFRyYW5zaXRpb25UbyBob29rIG9mIGFsbCBoYW5kbGVycyBpbiB0aGUgZ2l2ZW4gbWF0Y2hlc1xuICogc2VyaWFsbHkgd2l0aCB0aGUgdHJhbnNpdGlvbiBvYmplY3QgYW5kIGFueSBwYXJhbXMgdGhhdCBhcHBseSB0byB0aGF0XG4gKiBoYW5kbGVyLiBDYWxscyBjYWxsYmFjayhlcnJvcikgd2hlbiBmaW5pc2hlZC5cbiAqL1xuZnVuY3Rpb24gcnVuVHJhbnNpdGlvblRvSG9va3ModHJhbnNpdGlvbiwgcm91dGVzLCBwYXJhbXMsIHF1ZXJ5LCBjYWxsYmFjaykge1xuICB2YXIgaG9va3MgPSByb3V0ZXMubWFwKGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IHJvdXRlLmhhbmRsZXI7XG5cbiAgICAgIGlmICghdHJhbnNpdGlvbi5pc0Fib3J0ZWQgJiYgaGFuZGxlci53aWxsVHJhbnNpdGlvblRvKVxuICAgICAgICBoYW5kbGVyLndpbGxUcmFuc2l0aW9uVG8odHJhbnNpdGlvbiwgcGFyYW1zLCBxdWVyeSk7XG5cbiAgICAgIHZhciBwcm9taXNlID0gdHJhbnNpdGlvbi5fcHJvbWlzZTtcbiAgICAgIHRyYW5zaXRpb24uX3Byb21pc2UgPSBudWxsO1xuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9O1xuICB9KTtcblxuICBydW5Ib29rcyhob29rcywgY2FsbGJhY2spO1xufVxuXG4vKipcbiAqIEVuY2Fwc3VsYXRlcyBhIHRyYW5zaXRpb24gdG8gYSBnaXZlbiBwYXRoLlxuICpcbiAqIFRoZSB3aWxsVHJhbnNpdGlvblRvIGFuZCB3aWxsVHJhbnNpdGlvbkZyb20gaGFuZGxlcnMgcmVjZWl2ZVxuICogYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBhcyB0aGVpciBmaXJzdCBhcmd1bWVudC5cbiAqL1xuZnVuY3Rpb24gVHJhbnNpdGlvbihwYXRoLCByZXRyeSkge1xuICB0aGlzLnBhdGggPSBwYXRoO1xuICB0aGlzLmFib3J0UmVhc29uID0gbnVsbDtcbiAgdGhpcy5pc0Fib3J0ZWQgPSBmYWxzZTtcbiAgdGhpcy5yZXRyeSA9IHJldHJ5LmJpbmQodGhpcyk7XG4gIHRoaXMuX3Byb21pc2UgPSBudWxsO1xufVxuXG5hc3NpZ24oVHJhbnNpdGlvbi5wcm90b3R5cGUsIHtcblxuICBhYm9ydDogZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIGlmICh0aGlzLmlzQWJvcnRlZCkge1xuICAgICAgLy8gRmlyc3QgYWJvcnQgd2lucy5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmFib3J0UmVhc29uID0gcmVhc29uO1xuICAgIHRoaXMuaXNBYm9ydGVkID0gdHJ1ZTtcbiAgfSxcblxuICByZWRpcmVjdDogZnVuY3Rpb24gKHRvLCBwYXJhbXMsIHF1ZXJ5KSB7XG4gICAgdGhpcy5hYm9ydChuZXcgUmVkaXJlY3QodG8sIHBhcmFtcywgcXVlcnkpKTtcbiAgfSxcblxuICB3YWl0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLl9wcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKTtcbiAgfSxcblxuICBmcm9tOiBmdW5jdGlvbiAocm91dGVzLCBjb21wb25lbnRzLCBjYWxsYmFjaykge1xuICAgIHJldHVybiBydW5UcmFuc2l0aW9uRnJvbUhvb2tzKHRoaXMsIHJvdXRlcywgY29tcG9uZW50cywgY2FsbGJhY2spO1xuICB9LFxuXG4gIHRvOiBmdW5jdGlvbiAocm91dGVzLCBwYXJhbXMsIHF1ZXJ5LCBjYWxsYmFjaykge1xuICAgIHJldHVybiBydW5UcmFuc2l0aW9uVG9Ib29rcyh0aGlzLCByb3V0ZXMsIHBhcmFtcywgcXVlcnksIGNhbGxiYWNrKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2l0aW9uO1xuXG59LHtcIi4vUHJvbWlzZVwiOjQ1LFwiLi9SZWRpcmVjdFwiOjQ3LFwiLi9yZXZlcnNlZEFycmF5XCI6NTIsXCJyZWFjdC9saWIvT2JqZWN0LmFzc2lnblwiOjk1fV0sNDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qIGpzaGludCAtVzA1OCAqL1xudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgncmVhY3QvbGliL3dhcm5pbmcnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdyZWFjdC9saWIvaW52YXJpYW50Jyk7XG52YXIgY2FuVXNlRE9NID0gcmVxdWlyZSgncmVhY3QvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50JykuY2FuVXNlRE9NO1xudmFyIEltaXRhdGVCcm93c2VyQmVoYXZpb3IgPSByZXF1aXJlKCcuLi9iZWhhdmlvcnMvSW1pdGF0ZUJyb3dzZXJCZWhhdmlvcicpO1xudmFyIFJvdXRlSGFuZGxlciA9IHJlcXVpcmUoJy4uL2NvbXBvbmVudHMvUm91dGVIYW5kbGVyJyk7XG52YXIgTG9jYXRpb25BY3Rpb25zID0gcmVxdWlyZSgnLi4vYWN0aW9ucy9Mb2NhdGlvbkFjdGlvbnMnKTtcbnZhciBIYXNoTG9jYXRpb24gPSByZXF1aXJlKCcuLi9sb2NhdGlvbnMvSGFzaExvY2F0aW9uJyk7XG52YXIgSGlzdG9yeUxvY2F0aW9uID0gcmVxdWlyZSgnLi4vbG9jYXRpb25zL0hpc3RvcnlMb2NhdGlvbicpO1xudmFyIFJlZnJlc2hMb2NhdGlvbiA9IHJlcXVpcmUoJy4uL2xvY2F0aW9ucy9SZWZyZXNoTG9jYXRpb24nKTtcbnZhciBOYXZpZ2F0aW9uQ29udGV4dCA9IHJlcXVpcmUoJy4uL21peGlucy9OYXZpZ2F0aW9uQ29udGV4dCcpO1xudmFyIFN0YXRlQ29udGV4dCA9IHJlcXVpcmUoJy4uL21peGlucy9TdGF0ZUNvbnRleHQnKTtcbnZhciBTY3JvbGxpbmcgPSByZXF1aXJlKCcuLi9taXhpbnMvU2Nyb2xsaW5nJyk7XG52YXIgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuID0gcmVxdWlyZSgnLi9jcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4nKTtcbnZhciBzdXBwb3J0c0hpc3RvcnkgPSByZXF1aXJlKCcuL3N1cHBvcnRzSGlzdG9yeScpO1xudmFyIFRyYW5zaXRpb24gPSByZXF1aXJlKCcuL1RyYW5zaXRpb24nKTtcbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCcuL1Byb3BUeXBlcycpO1xudmFyIFJlZGlyZWN0ID0gcmVxdWlyZSgnLi9SZWRpcmVjdCcpO1xudmFyIEhpc3RvcnkgPSByZXF1aXJlKCcuL0hpc3RvcnknKTtcbnZhciBDYW5jZWxsYXRpb24gPSByZXF1aXJlKCcuL0NhbmNlbGxhdGlvbicpO1xudmFyIFBhdGggPSByZXF1aXJlKCcuL1BhdGgnKTtcblxuLyoqXG4gKiBUaGUgZGVmYXVsdCBsb2NhdGlvbiBmb3IgbmV3IHJvdXRlcnMuXG4gKi9cbnZhciBERUZBVUxUX0xPQ0FUSU9OID0gY2FuVXNlRE9NID8gSGFzaExvY2F0aW9uIDogJy8nO1xuXG4vKipcbiAqIFRoZSBkZWZhdWx0IHNjcm9sbCBiZWhhdmlvciBmb3IgbmV3IHJvdXRlcnMuXG4gKi9cbnZhciBERUZBVUxUX1NDUk9MTF9CRUhBVklPUiA9IGNhblVzZURPTSA/IEltaXRhdGVCcm93c2VyQmVoYXZpb3IgOiBudWxsO1xuXG4vKipcbiAqIFRoZSBkZWZhdWx0IGVycm9yIGhhbmRsZXIgZm9yIG5ldyByb3V0ZXJzLlxuICovXG5mdW5jdGlvbiBkZWZhdWx0RXJyb3JIYW5kbGVyKGVycm9yKSB7XG4gIC8vIFRocm93IHNvIHdlIGRvbid0IHNpbGVudGx5IHN3YWxsb3cgYXN5bmMgZXJyb3JzLlxuICB0aHJvdyBlcnJvcjsgLy8gVGhpcyBlcnJvciBwcm9iYWJseSBvcmlnaW5hdGVkIGluIGEgdHJhbnNpdGlvbiBob29rLlxufVxuXG4vKipcbiAqIFRoZSBkZWZhdWx0IGFib3J0ZWQgdHJhbnNpdGlvbiBoYW5kbGVyIGZvciBuZXcgcm91dGVycy5cbiAqL1xuZnVuY3Rpb24gZGVmYXVsdEFib3J0SGFuZGxlcihhYm9ydFJlYXNvbiwgbG9jYXRpb24pIHtcbiAgaWYgKHR5cGVvZiBsb2NhdGlvbiA9PT0gJ3N0cmluZycpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmhhbmRsZWQgYWJvcnRlZCB0cmFuc2l0aW9uISBSZWFzb246ICcgKyBhYm9ydFJlYXNvbik7XG5cbiAgaWYgKGFib3J0UmVhc29uIGluc3RhbmNlb2YgQ2FuY2VsbGF0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9IGVsc2UgaWYgKGFib3J0UmVhc29uIGluc3RhbmNlb2YgUmVkaXJlY3QpIHtcbiAgICBsb2NhdGlvbi5yZXBsYWNlKHRoaXMubWFrZVBhdGgoYWJvcnRSZWFzb24udG8sIGFib3J0UmVhc29uLnBhcmFtcywgYWJvcnRSZWFzb24ucXVlcnkpKTtcbiAgfSBlbHNlIHtcbiAgICBsb2NhdGlvbi5wb3AoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kTWF0Y2gocGF0aG5hbWUsIHJvdXRlcywgZGVmYXVsdFJvdXRlLCBub3RGb3VuZFJvdXRlKSB7XG4gIHZhciBtYXRjaCwgcm91dGUsIHBhcmFtcztcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gcm91dGVzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgcm91dGUgPSByb3V0ZXNbaV07XG5cbiAgICAvLyBDaGVjayB0aGUgc3VidHJlZSBmaXJzdCB0byBmaW5kIHRoZSBtb3N0IGRlZXBseS1uZXN0ZWQgbWF0Y2guXG4gICAgbWF0Y2ggPSBmaW5kTWF0Y2gocGF0aG5hbWUsIHJvdXRlLmNoaWxkUm91dGVzLCByb3V0ZS5kZWZhdWx0Um91dGUsIHJvdXRlLm5vdEZvdW5kUm91dGUpO1xuXG4gICAgaWYgKG1hdGNoICE9IG51bGwpIHtcbiAgICAgIG1hdGNoLnJvdXRlcy51bnNoaWZ0KHJvdXRlKTtcbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9XG5cbiAgICAvLyBObyByb3V0ZXMgaW4gdGhlIHN1YnRyZWUgbWF0Y2hlZCwgc28gY2hlY2sgdGhpcyByb3V0ZS5cbiAgICBwYXJhbXMgPSBQYXRoLmV4dHJhY3RQYXJhbXMocm91dGUucGF0aCwgcGF0aG5hbWUpO1xuXG4gICAgaWYgKHBhcmFtcylcbiAgICAgIHJldHVybiBjcmVhdGVNYXRjaChyb3V0ZSwgcGFyYW1zKTtcbiAgfVxuXG4gIC8vIE5vIHJvdXRlcyBtYXRjaGVkLCBzbyB0cnkgdGhlIGRlZmF1bHQgcm91dGUgaWYgdGhlcmUgaXMgb25lLlxuICBpZiAoZGVmYXVsdFJvdXRlICYmIChwYXJhbXMgPSBQYXRoLmV4dHJhY3RQYXJhbXMoZGVmYXVsdFJvdXRlLnBhdGgsIHBhdGhuYW1lKSkpXG4gICAgcmV0dXJuIGNyZWF0ZU1hdGNoKGRlZmF1bHRSb3V0ZSwgcGFyYW1zKTtcblxuICAvLyBMYXN0IGF0dGVtcHQ6IGRvZXMgdGhlIFwibm90IGZvdW5kXCIgcm91dGUgbWF0Y2g/XG4gIGlmIChub3RGb3VuZFJvdXRlICYmIChwYXJhbXMgPSBQYXRoLmV4dHJhY3RQYXJhbXMobm90Rm91bmRSb3V0ZS5wYXRoLCBwYXRobmFtZSkpKVxuICAgIHJldHVybiBjcmVhdGVNYXRjaChub3RGb3VuZFJvdXRlLCBwYXJhbXMpO1xuXG4gIHJldHVybiBtYXRjaDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTWF0Y2gocm91dGUsIHBhcmFtcykge1xuICByZXR1cm4geyByb3V0ZXM6IFsgcm91dGUgXSwgcGFyYW1zOiBwYXJhbXMgfTtcbn1cblxuZnVuY3Rpb24gaGFzUHJvcGVydGllcyhvYmplY3QsIHByb3BlcnRpZXMpIHtcbiAgZm9yICh2YXIgcHJvcGVydHlOYW1lIGluIHByb3BlcnRpZXMpXG4gICAgaWYgKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHlOYW1lKSAmJiBvYmplY3RbcHJvcGVydHlOYW1lXSAhPT0gcHJvcGVydGllc1twcm9wZXJ0eU5hbWVdKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBoYXNNYXRjaChyb3V0ZXMsIHJvdXRlLCBwcmV2UGFyYW1zLCBuZXh0UGFyYW1zLCBwcmV2UXVlcnksIG5leHRRdWVyeSkge1xuICByZXR1cm4gcm91dGVzLnNvbWUoZnVuY3Rpb24gKHIpIHtcbiAgICBpZiAociAhPT0gcm91dGUpXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICB2YXIgcGFyYW1OYW1lcyA9IHJvdXRlLnBhcmFtTmFtZXM7XG4gICAgdmFyIHBhcmFtTmFtZTtcblxuICAgIC8vIEVuc3VyZSB0aGF0IGFsbCBwYXJhbXMgdGhlIHJvdXRlIGNhcmVzIGFib3V0IGRpZCBub3QgY2hhbmdlLlxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBwYXJhbU5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICBwYXJhbU5hbWUgPSBwYXJhbU5hbWVzW2ldO1xuXG4gICAgICBpZiAobmV4dFBhcmFtc1twYXJhbU5hbWVdICE9PSBwcmV2UGFyYW1zW3BhcmFtTmFtZV0pXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBFbnN1cmUgdGhlIHF1ZXJ5IGhhc24ndCBjaGFuZ2VkLlxuICAgIHJldHVybiBoYXNQcm9wZXJ0aWVzKHByZXZRdWVyeSwgbmV4dFF1ZXJ5KSAmJiBoYXNQcm9wZXJ0aWVzKG5leHRRdWVyeSwgcHJldlF1ZXJ5KTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbmQgcmV0dXJucyBhIG5ldyByb3V0ZXIgdXNpbmcgdGhlIGdpdmVuIG9wdGlvbnMuIEEgcm91dGVyXG4gKiBpcyBhIFJlYWN0Q29tcG9uZW50IGNsYXNzIHRoYXQga25vd3MgaG93IHRvIHJlYWN0IHRvIGNoYW5nZXMgaW4gdGhlXG4gKiBVUkwgYW5kIGtlZXAgdGhlIGNvbnRlbnRzIG9mIHRoZSBwYWdlIGluIHN5bmMuXG4gKlxuICogT3B0aW9ucyBtYXkgYmUgYW55IG9mIHRoZSBmb2xsb3dpbmc6XG4gKlxuICogLSByb3V0ZXMgICAgICAgICAgIChyZXF1aXJlZCkgVGhlIHJvdXRlIGNvbmZpZ1xuICogLSBsb2NhdGlvbiAgICAgICAgIFRoZSBsb2NhdGlvbiB0byB1c2UuIERlZmF1bHRzIHRvIEhhc2hMb2NhdGlvbiB3aGVuXG4gKiAgICAgICAgICAgICAgICAgICAgdGhlIERPTSBpcyBhdmFpbGFibGUsIFwiL1wiIG90aGVyd2lzZVxuICogLSBzY3JvbGxCZWhhdmlvciAgIFRoZSBzY3JvbGwgYmVoYXZpb3IgdG8gdXNlLiBEZWZhdWx0cyB0byBJbWl0YXRlQnJvd3NlckJlaGF2aW9yXG4gKiAgICAgICAgICAgICAgICAgICAgd2hlbiB0aGUgRE9NIGlzIGF2YWlsYWJsZSwgbnVsbCBvdGhlcndpc2VcbiAqIC0gb25FcnJvciAgICAgICAgICBBIGZ1bmN0aW9uIHRoYXQgaXMgdXNlZCB0byBoYW5kbGUgZXJyb3JzXG4gKiAtIG9uQWJvcnQgICAgICAgICAgQSBmdW5jdGlvbiB0aGF0IGlzIHVzZWQgdG8gaGFuZGxlIGFib3J0ZWQgdHJhbnNpdGlvbnNcbiAqXG4gKiBXaGVuIHJlbmRlcmluZyBpbiBhIHNlcnZlci1zaWRlIGVudmlyb25tZW50LCB0aGUgbG9jYXRpb24gc2hvdWxkIHNpbXBseVxuICogYmUgdGhlIFVSTCBwYXRoIHRoYXQgd2FzIHVzZWQgaW4gdGhlIHJlcXVlc3QsIGluY2x1ZGluZyB0aGUgcXVlcnkgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZXIob3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zID0geyByb3V0ZXM6IG9wdGlvbnMgfTsgLy8gUm91dGVyLmNyZWF0ZSg8Um91dGU+KVxuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucykpIHtcbiAgICBvcHRpb25zID0geyByb3V0ZXM6IG9wdGlvbnMgfTsgLy8gUm91dGVyLmNyZWF0ZShbIDxSb3V0ZT4sIDxSb3V0ZT4gXSlcbiAgfVxuXG4gIHZhciByb3V0ZXMgPSBbXTtcbiAgdmFyIG5hbWVkUm91dGVzID0ge307XG4gIHZhciBjb21wb25lbnRzID0gW107XG4gIHZhciBsb2NhdGlvbiA9IG9wdGlvbnMubG9jYXRpb24gfHwgREVGQVVMVF9MT0NBVElPTjtcbiAgdmFyIHNjcm9sbEJlaGF2aW9yID0gb3B0aW9ucy5zY3JvbGxCZWhhdmlvciB8fCBERUZBVUxUX1NDUk9MTF9CRUhBVklPUjtcbiAgdmFyIG9uRXJyb3IgPSBvcHRpb25zLm9uRXJyb3IgfHwgZGVmYXVsdEVycm9ySGFuZGxlcjtcbiAgdmFyIG9uQWJvcnQgPSBvcHRpb25zLm9uQWJvcnQgfHwgZGVmYXVsdEFib3J0SGFuZGxlcjtcbiAgdmFyIHN0YXRlID0ge307XG4gIHZhciBuZXh0U3RhdGUgPSB7fTtcbiAgdmFyIHBlbmRpbmdUcmFuc2l0aW9uID0gbnVsbDtcblxuICBmdW5jdGlvbiB1cGRhdGVTdGF0ZSgpIHtcbiAgICBzdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICBuZXh0U3RhdGUgPSB7fTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgbG9jYXRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgd2FybmluZyhcbiAgICAgICFjYW5Vc2VET00gfHwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0JyxcbiAgICAgICdZb3Ugc2hvdWxkIG5vdCB1c2UgYSBzdGF0aWMgbG9jYXRpb24gaW4gYSBET00gZW52aXJvbm1lbnQgYmVjYXVzZSAnICtcbiAgICAgICd0aGUgcm91dGVyIHdpbGwgbm90IGJlIGtlcHQgaW4gc3luYyB3aXRoIHRoZSBjdXJyZW50IFVSTCdcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIGludmFyaWFudChcbiAgICAgIGNhblVzZURPTSxcbiAgICAgICdZb3UgY2Fubm90IHVzZSAlcyB3aXRob3V0IGEgRE9NJyxcbiAgICAgIGxvY2F0aW9uXG4gICAgKTtcbiAgfVxuXG4gIC8vIEF1dG9tYXRpY2FsbHkgZmFsbCBiYWNrIHRvIGZ1bGwgcGFnZSByZWZyZXNoZXMgaW5cbiAgLy8gYnJvd3NlcnMgdGhhdCBkb24ndCBzdXBwb3J0IHRoZSBIVE1MIGhpc3RvcnkgQVBJLlxuICBpZiAobG9jYXRpb24gPT09IEhpc3RvcnlMb2NhdGlvbiAmJiAhc3VwcG9ydHNIaXN0b3J5KCkpXG4gICAgbG9jYXRpb24gPSBSZWZyZXNoTG9jYXRpb247XG5cbiAgdmFyIHJvdXRlciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblxuICAgIGRpc3BsYXlOYW1lOiAnUm91dGVyJyxcblxuICAgIG1peGluczogWyBOYXZpZ2F0aW9uQ29udGV4dCwgU3RhdGVDb250ZXh0LCBTY3JvbGxpbmcgXSxcblxuICAgIHN0YXRpY3M6IHtcblxuICAgICAgZGVmYXVsdFJvdXRlOiBudWxsLFxuICAgICAgbm90Rm91bmRSb3V0ZTogbnVsbCxcblxuICAgICAgLyoqXG4gICAgICAgKiBBZGRzIHJvdXRlcyB0byB0aGlzIHJvdXRlciBmcm9tIHRoZSBnaXZlbiBjaGlsZHJlbiBvYmplY3QgKHNlZSBSZWFjdENoaWxkcmVuKS5cbiAgICAgICAqL1xuICAgICAgYWRkUm91dGVzOiBmdW5jdGlvbiAoY2hpbGRyZW4pIHtcbiAgICAgICAgcm91dGVzLnB1c2guYXBwbHkocm91dGVzLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oY2hpbGRyZW4sIHRoaXMsIG5hbWVkUm91dGVzKSk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFJldHVybnMgYW4gYWJzb2x1dGUgVVJMIHBhdGggY3JlYXRlZCBmcm9tIHRoZSBnaXZlbiByb3V0ZVxuICAgICAgICogbmFtZSwgVVJMIHBhcmFtZXRlcnMsIGFuZCBxdWVyeS5cbiAgICAgICAqL1xuICAgICAgbWFrZVBhdGg6IGZ1bmN0aW9uICh0bywgcGFyYW1zLCBxdWVyeSkge1xuICAgICAgICB2YXIgcGF0aDtcbiAgICAgICAgaWYgKFBhdGguaXNBYnNvbHV0ZSh0bykpIHtcbiAgICAgICAgICBwYXRoID0gUGF0aC5ub3JtYWxpemUodG8pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciByb3V0ZSA9IG5hbWVkUm91dGVzW3RvXTtcblxuICAgICAgICAgIGludmFyaWFudChcbiAgICAgICAgICAgIHJvdXRlLFxuICAgICAgICAgICAgJ1VuYWJsZSB0byBmaW5kIDxSb3V0ZSBuYW1lPVwiJXNcIj4nLFxuICAgICAgICAgICAgdG9cbiAgICAgICAgICApO1xuXG4gICAgICAgICAgcGF0aCA9IHJvdXRlLnBhdGg7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUGF0aC53aXRoUXVlcnkoUGF0aC5pbmplY3RQYXJhbXMocGF0aCwgcGFyYW1zKSwgcXVlcnkpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIHRoYXQgbWF5IHNhZmVseSBiZSB1c2VkIGFzIHRoZSBocmVmIG9mIGEgbGlua1xuICAgICAgICogdG8gdGhlIHJvdXRlIHdpdGggdGhlIGdpdmVuIG5hbWUsIFVSTCBwYXJhbWV0ZXJzLCBhbmQgcXVlcnkuXG4gICAgICAgKi9cbiAgICAgIG1ha2VIcmVmOiBmdW5jdGlvbiAodG8sIHBhcmFtcywgcXVlcnkpIHtcbiAgICAgICAgdmFyIHBhdGggPSB0aGlzLm1ha2VQYXRoKHRvLCBwYXJhbXMsIHF1ZXJ5KTtcbiAgICAgICAgcmV0dXJuIChsb2NhdGlvbiA9PT0gSGFzaExvY2F0aW9uKSA/ICcjJyArIHBhdGggOiBwYXRoO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBUcmFuc2l0aW9ucyB0byB0aGUgVVJMIHNwZWNpZmllZCBpbiB0aGUgYXJndW1lbnRzIGJ5IHB1c2hpbmdcbiAgICAgICAqIGEgbmV3IFVSTCBvbnRvIHRoZSBoaXN0b3J5IHN0YWNrLlxuICAgICAgICovXG4gICAgICB0cmFuc2l0aW9uVG86IGZ1bmN0aW9uICh0bywgcGFyYW1zLCBxdWVyeSkge1xuICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgdHlwZW9mIGxvY2F0aW9uICE9PSAnc3RyaW5nJyxcbiAgICAgICAgICAnWW91IGNhbm5vdCB1c2UgdHJhbnNpdGlvblRvIHdpdGggYSBzdGF0aWMgbG9jYXRpb24nXG4gICAgICAgICk7XG5cbiAgICAgICAgdmFyIHBhdGggPSB0aGlzLm1ha2VQYXRoKHRvLCBwYXJhbXMsIHF1ZXJ5KTtcblxuICAgICAgICBpZiAocGVuZGluZ1RyYW5zaXRpb24pIHtcbiAgICAgICAgICAvLyBSZXBsYWNlIHNvIHBlbmRpbmcgbG9jYXRpb24gZG9lcyBub3Qgc3RheSBpbiBoaXN0b3J5LlxuICAgICAgICAgIGxvY2F0aW9uLnJlcGxhY2UocGF0aCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbG9jYXRpb24ucHVzaChwYXRoKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBUcmFuc2l0aW9ucyB0byB0aGUgVVJMIHNwZWNpZmllZCBpbiB0aGUgYXJndW1lbnRzIGJ5IHJlcGxhY2luZ1xuICAgICAgICogdGhlIGN1cnJlbnQgVVJMIGluIHRoZSBoaXN0b3J5IHN0YWNrLlxuICAgICAgICovXG4gICAgICByZXBsYWNlV2l0aDogZnVuY3Rpb24gKHRvLCBwYXJhbXMsIHF1ZXJ5KSB7XG4gICAgICAgIGludmFyaWFudChcbiAgICAgICAgICB0eXBlb2YgbG9jYXRpb24gIT09ICdzdHJpbmcnLFxuICAgICAgICAgICdZb3UgY2Fubm90IHVzZSByZXBsYWNlV2l0aCB3aXRoIGEgc3RhdGljIGxvY2F0aW9uJ1xuICAgICAgICApO1xuXG4gICAgICAgIGxvY2F0aW9uLnJlcGxhY2UodGhpcy5tYWtlUGF0aCh0bywgcGFyYW1zLCBxdWVyeSkpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBUcmFuc2l0aW9ucyB0byB0aGUgcHJldmlvdXMgVVJMIGlmIG9uZSBpcyBhdmFpbGFibGUuIFJldHVybnMgdHJ1ZSBpZiB0aGVcbiAgICAgICAqIHJvdXRlciB3YXMgYWJsZSB0byBnbyBiYWNrLCBmYWxzZSBvdGhlcndpc2UuXG4gICAgICAgKlxuICAgICAgICogTm90ZTogVGhlIHJvdXRlciBvbmx5IHRyYWNrcyBoaXN0b3J5IGVudHJpZXMgaW4geW91ciBhcHBsaWNhdGlvbiwgbm90IHRoZVxuICAgICAgICogY3VycmVudCBicm93c2VyIHNlc3Npb24sIHNvIHlvdSBjYW4gc2FmZWx5IGNhbGwgdGhpcyBmdW5jdGlvbiB3aXRob3V0IGd1YXJkaW5nXG4gICAgICAgKiBhZ2FpbnN0IHNlbmRpbmcgdGhlIHVzZXIgYmFjayB0byBzb21lIG90aGVyIHNpdGUuIEhvd2V2ZXIsIHdoZW4gdXNpbmdcbiAgICAgICAqIFJlZnJlc2hMb2NhdGlvbiAod2hpY2ggaXMgdGhlIGZhbGxiYWNrIGZvciBIaXN0b3J5TG9jYXRpb24gaW4gYnJvd3NlcnMgdGhhdFxuICAgICAgICogZG9uJ3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5KSB0aGlzIG1ldGhvZCB3aWxsICphbHdheXMqIHNlbmQgdGhlIGNsaWVudCBiYWNrXG4gICAgICAgKiBiZWNhdXNlIHdlIGNhbm5vdCByZWxpYWJseSB0cmFjayBoaXN0b3J5IGxlbmd0aC5cbiAgICAgICAqL1xuICAgICAgZ29CYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGludmFyaWFudChcbiAgICAgICAgICB0eXBlb2YgbG9jYXRpb24gIT09ICdzdHJpbmcnLFxuICAgICAgICAgICdZb3UgY2Fubm90IHVzZSBnb0JhY2sgd2l0aCBhIHN0YXRpYyBsb2NhdGlvbidcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoSGlzdG9yeS5sZW5ndGggPiAxIHx8IGxvY2F0aW9uID09PSBSZWZyZXNoTG9jYXRpb24pIHtcbiAgICAgICAgICBsb2NhdGlvbi5wb3AoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdhcm5pbmcoZmFsc2UsICdnb0JhY2soKSB3YXMgaWdub3JlZCBiZWNhdXNlIHRoZXJlIGlzIG5vIHJvdXRlciBoaXN0b3J5Jyk7XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBQZXJmb3JtcyBhIG1hdGNoIG9mIHRoZSBnaXZlbiBwYXRobmFtZSBhZ2FpbnN0IHRoaXMgcm91dGVyIGFuZCByZXR1cm5zIGFuIG9iamVjdFxuICAgICAgICogd2l0aCB0aGUgeyByb3V0ZXMsIHBhcmFtcyB9IHRoYXQgbWF0Y2guIFJldHVybnMgbnVsbCBpZiBubyBtYXRjaCBjYW4gYmUgbWFkZS5cbiAgICAgICAqL1xuICAgICAgbWF0Y2g6IGZ1bmN0aW9uIChwYXRobmFtZSkge1xuICAgICAgICByZXR1cm4gZmluZE1hdGNoKHBhdGhuYW1lLCByb3V0ZXMsIHRoaXMuZGVmYXVsdFJvdXRlLCB0aGlzLm5vdEZvdW5kUm91dGUpIHx8IG51bGw7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFBlcmZvcm1zIGEgdHJhbnNpdGlvbiB0byB0aGUgZ2l2ZW4gcGF0aCBhbmQgY2FsbHMgY2FsbGJhY2soZXJyb3IsIGFib3J0UmVhc29uKVxuICAgICAgICogd2hlbiB0aGUgdHJhbnNpdGlvbiBpcyBmaW5pc2hlZC4gSWYgYm90aCBhcmd1bWVudHMgYXJlIG51bGwgdGhlIHJvdXRlcidzIHN0YXRlXG4gICAgICAgKiB3YXMgdXBkYXRlZC4gT3RoZXJ3aXNlIHRoZSB0cmFuc2l0aW9uIGRpZCBub3QgY29tcGxldGUuXG4gICAgICAgKlxuICAgICAgICogSW4gYSB0cmFuc2l0aW9uLCBhIHJvdXRlciBmaXJzdCBkZXRlcm1pbmVzIHdoaWNoIHJvdXRlcyBhcmUgaW52b2x2ZWQgYnkgYmVnaW5uaW5nXG4gICAgICAgKiB3aXRoIHRoZSBjdXJyZW50IHJvdXRlLCB1cCB0aGUgcm91dGUgdHJlZSB0byB0aGUgZmlyc3QgcGFyZW50IHJvdXRlIHRoYXQgaXMgc2hhcmVkXG4gICAgICAgKiB3aXRoIHRoZSBkZXN0aW5hdGlvbiByb3V0ZSwgYW5kIGJhY2sgZG93biB0aGUgdHJlZSB0byB0aGUgZGVzdGluYXRpb24gcm91dGUuIFRoZVxuICAgICAgICogd2lsbFRyYW5zaXRpb25Gcm9tIGhvb2sgaXMgaW52b2tlZCBvbiBhbGwgcm91dGUgaGFuZGxlcnMgd2UncmUgdHJhbnNpdGlvbmluZyBhd2F5XG4gICAgICAgKiBmcm9tLCBpbiByZXZlcnNlIG5lc3Rpbmcgb3JkZXIuIExpa2V3aXNlLCB0aGUgd2lsbFRyYW5zaXRpb25UbyBob29rIGlzIGludm9rZWQgb25cbiAgICAgICAqIGFsbCByb3V0ZSBoYW5kbGVycyB3ZSdyZSB0cmFuc2l0aW9uaW5nIHRvLlxuICAgICAgICpcbiAgICAgICAqIEJvdGggd2lsbFRyYW5zaXRpb25Gcm9tIGFuZCB3aWxsVHJhbnNpdGlvblRvIGhvb2tzIG1heSBlaXRoZXIgYWJvcnQgb3IgcmVkaXJlY3QgdGhlXG4gICAgICAgKiB0cmFuc2l0aW9uLiBUbyByZXNvbHZlIGFzeW5jaHJvbm91c2x5LCB0aGV5IG1heSB1c2UgdHJhbnNpdGlvbi53YWl0KHByb21pc2UpLiBJZiBub1xuICAgICAgICogaG9va3Mgd2FpdCwgdGhlIHRyYW5zaXRpb24gaXMgZnVsbHkgc3luY2hyb25vdXMuXG4gICAgICAgKi9cbiAgICAgIGRpc3BhdGNoOiBmdW5jdGlvbiAocGF0aCwgYWN0aW9uLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAocGVuZGluZ1RyYW5zaXRpb24pIHtcbiAgICAgICAgICBwZW5kaW5nVHJhbnNpdGlvbi5hYm9ydChuZXcgQ2FuY2VsbGF0aW9uKTtcbiAgICAgICAgICBwZW5kaW5nVHJhbnNpdGlvbiA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcHJldlBhdGggPSBzdGF0ZS5wYXRoO1xuICAgICAgICBpZiAocHJldlBhdGggPT09IHBhdGgpXG4gICAgICAgICAgcmV0dXJuOyAvLyBOb3RoaW5nIHRvIGRvIVxuXG4gICAgICAgIC8vIFJlY29yZCB0aGUgc2Nyb2xsIHBvc2l0aW9uIGFzIGVhcmx5IGFzIHBvc3NpYmxlIHRvXG4gICAgICAgIC8vIGdldCBpdCBiZWZvcmUgYnJvd3NlcnMgdHJ5IHVwZGF0ZSBpdCBhdXRvbWF0aWNhbGx5LlxuICAgICAgICBpZiAocHJldlBhdGggJiYgYWN0aW9uICE9PSBMb2NhdGlvbkFjdGlvbnMuUkVQTEFDRSlcbiAgICAgICAgICB0aGlzLnJlY29yZFNjcm9sbFBvc2l0aW9uKHByZXZQYXRoKTtcblxuICAgICAgICB2YXIgcGF0aG5hbWUgPSBQYXRoLndpdGhvdXRRdWVyeShwYXRoKTtcbiAgICAgICAgdmFyIG1hdGNoID0gdGhpcy5tYXRjaChwYXRobmFtZSk7XG5cbiAgICAgICAgd2FybmluZyhcbiAgICAgICAgICBtYXRjaCAhPSBudWxsLFxuICAgICAgICAgICdObyByb3V0ZSBtYXRjaGVzIHBhdGggXCIlc1wiLiBNYWtlIHN1cmUgeW91IGhhdmUgPFJvdXRlIHBhdGg9XCIlc1wiPiBzb21ld2hlcmUgaW4geW91ciByb3V0ZXMnLFxuICAgICAgICAgIHBhdGgsIHBhdGhcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAobWF0Y2ggPT0gbnVsbClcbiAgICAgICAgICBtYXRjaCA9IHt9O1xuXG4gICAgICAgIHZhciBwcmV2Um91dGVzID0gc3RhdGUucm91dGVzIHx8IFtdO1xuICAgICAgICB2YXIgcHJldlBhcmFtcyA9IHN0YXRlLnBhcmFtcyB8fCB7fTtcbiAgICAgICAgdmFyIHByZXZRdWVyeSA9IHN0YXRlLnF1ZXJ5IHx8IHt9O1xuXG4gICAgICAgIHZhciBuZXh0Um91dGVzID0gbWF0Y2gucm91dGVzIHx8IFtdO1xuICAgICAgICB2YXIgbmV4dFBhcmFtcyA9IG1hdGNoLnBhcmFtcyB8fCB7fTtcbiAgICAgICAgdmFyIG5leHRRdWVyeSA9IFBhdGguZXh0cmFjdFF1ZXJ5KHBhdGgpIHx8IHt9O1xuXG4gICAgICAgIHZhciBmcm9tUm91dGVzLCB0b1JvdXRlcztcbiAgICAgICAgaWYgKHByZXZSb3V0ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgZnJvbVJvdXRlcyA9IHByZXZSb3V0ZXMuZmlsdGVyKGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgICAgICAgcmV0dXJuICFoYXNNYXRjaChuZXh0Um91dGVzLCByb3V0ZSwgcHJldlBhcmFtcywgbmV4dFBhcmFtcywgcHJldlF1ZXJ5LCBuZXh0UXVlcnkpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdG9Sb3V0ZXMgPSBuZXh0Um91dGVzLmZpbHRlcihmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgICAgICAgIHJldHVybiAhaGFzTWF0Y2gocHJldlJvdXRlcywgcm91dGUsIHByZXZQYXJhbXMsIG5leHRQYXJhbXMsIHByZXZRdWVyeSwgbmV4dFF1ZXJ5KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmcm9tUm91dGVzID0gW107XG4gICAgICAgICAgdG9Sb3V0ZXMgPSBuZXh0Um91dGVzO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRyYW5zaXRpb24gPSBuZXcgVHJhbnNpdGlvbihwYXRoLCB0aGlzLnJlcGxhY2VXaXRoLmJpbmQodGhpcywgcGF0aCkpO1xuICAgICAgICBwZW5kaW5nVHJhbnNpdGlvbiA9IHRyYW5zaXRpb247XG5cbiAgICAgICAgdHJhbnNpdGlvbi5mcm9tKGZyb21Sb3V0ZXMsIGNvbXBvbmVudHMsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIGlmIChlcnJvciB8fCB0cmFuc2l0aW9uLmlzQWJvcnRlZClcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKHJvdXRlciwgZXJyb3IsIHRyYW5zaXRpb24pO1xuXG4gICAgICAgICAgdHJhbnNpdGlvbi50byh0b1JvdXRlcywgbmV4dFBhcmFtcywgbmV4dFF1ZXJ5LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChlcnJvciB8fCB0cmFuc2l0aW9uLmlzQWJvcnRlZClcbiAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwocm91dGVyLCBlcnJvciwgdHJhbnNpdGlvbik7XG5cbiAgICAgICAgICAgIG5leHRTdGF0ZS5wYXRoID0gcGF0aDtcbiAgICAgICAgICAgIG5leHRTdGF0ZS5hY3Rpb24gPSBhY3Rpb247XG4gICAgICAgICAgICBuZXh0U3RhdGUucGF0aG5hbWUgPSBwYXRobmFtZTtcbiAgICAgICAgICAgIG5leHRTdGF0ZS5yb3V0ZXMgPSBuZXh0Um91dGVzO1xuICAgICAgICAgICAgbmV4dFN0YXRlLnBhcmFtcyA9IG5leHRQYXJhbXM7XG4gICAgICAgICAgICBuZXh0U3RhdGUucXVlcnkgPSBuZXh0UXVlcnk7XG5cbiAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwocm91dGVyLCBudWxsLCB0cmFuc2l0aW9uKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFN0YXJ0cyB0aGlzIHJvdXRlciBhbmQgY2FsbHMgY2FsbGJhY2socm91dGVyLCBzdGF0ZSkgd2hlbiB0aGUgcm91dGUgY2hhbmdlcy5cbiAgICAgICAqXG4gICAgICAgKiBJZiB0aGUgcm91dGVyJ3MgbG9jYXRpb24gaXMgc3RhdGljIChpLmUuIGEgVVJMIHBhdGggaW4gYSBzZXJ2ZXIgZW52aXJvbm1lbnQpXG4gICAgICAgKiB0aGUgY2FsbGJhY2sgaXMgY2FsbGVkIG9ubHkgb25jZS4gT3RoZXJ3aXNlLCB0aGUgbG9jYXRpb24gc2hvdWxkIGJlIG9uZSBvZiB0aGVcbiAgICAgICAqIFJvdXRlci4qTG9jYXRpb24gb2JqZWN0cyAoZS5nLiBSb3V0ZXIuSGFzaExvY2F0aW9uIG9yIFJvdXRlci5IaXN0b3J5TG9jYXRpb24pLlxuICAgICAgICovXG4gICAgICBydW46IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgZGlzcGF0Y2hIYW5kbGVyID0gZnVuY3Rpb24gKGVycm9yLCB0cmFuc2l0aW9uKSB7XG4gICAgICAgICAgcGVuZGluZ1RyYW5zaXRpb24gPSBudWxsO1xuXG4gICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICBvbkVycm9yLmNhbGwocm91dGVyLCBlcnJvcik7XG4gICAgICAgICAgfSBlbHNlIGlmICh0cmFuc2l0aW9uLmlzQWJvcnRlZCkge1xuICAgICAgICAgICAgb25BYm9ydC5jYWxsKHJvdXRlciwgdHJhbnNpdGlvbi5hYm9ydFJlYXNvbiwgbG9jYXRpb24pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWxsYmFjay5jYWxsKHJvdXRlciwgcm91dGVyLCBuZXh0U3RhdGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodHlwZW9mIGxvY2F0aW9uID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHJvdXRlci5kaXNwYXRjaChsb2NhdGlvbiwgbnVsbCwgZGlzcGF0Y2hIYW5kbGVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBMaXN0ZW4gZm9yIGNoYW5nZXMgdG8gdGhlIGxvY2F0aW9uLlxuICAgICAgICAgIHZhciBjaGFuZ2VMaXN0ZW5lciA9IGZ1bmN0aW9uIChjaGFuZ2UpIHtcbiAgICAgICAgICAgIHJvdXRlci5kaXNwYXRjaChjaGFuZ2UucGF0aCwgY2hhbmdlLnR5cGUsIGRpc3BhdGNoSGFuZGxlcik7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGlmIChsb2NhdGlvbi5hZGRDaGFuZ2VMaXN0ZW5lcilcbiAgICAgICAgICAgIGxvY2F0aW9uLmFkZENoYW5nZUxpc3RlbmVyKGNoYW5nZUxpc3RlbmVyKTtcblxuICAgICAgICAgIC8vIEJvb3RzdHJhcCB1c2luZyB0aGUgY3VycmVudCBwYXRoLlxuICAgICAgICAgIHJvdXRlci5kaXNwYXRjaChsb2NhdGlvbi5nZXRDdXJyZW50UGF0aCgpLCBudWxsLCBkaXNwYXRjaEhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICB0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG4gICAgICAgIGxvY2F0aW9uLnJlbW92ZUNoYW5nZUxpc3RlbmVyKHRoaXMuY2hhbmdlTGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgfSxcblxuICAgIHByb3BUeXBlczoge1xuICAgICAgY2hpbGRyZW46IFByb3BUeXBlcy5mYWxzeVxuICAgIH0sXG5cbiAgICBnZXRMb2NhdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGxvY2F0aW9uO1xuICAgIH0sXG5cbiAgICBnZXRTY3JvbGxCZWhhdmlvcjogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHNjcm9sbEJlaGF2aW9yO1xuICAgIH0sXG5cbiAgICBnZXRSb3V0ZUF0RGVwdGg6IGZ1bmN0aW9uIChkZXB0aCkge1xuICAgICAgdmFyIHJvdXRlcyA9IHRoaXMuc3RhdGUucm91dGVzO1xuICAgICAgcmV0dXJuIHJvdXRlcyAmJiByb3V0ZXNbZGVwdGhdO1xuICAgIH0sXG5cbiAgICBnZXRSb3V0ZUNvbXBvbmVudHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBjb21wb25lbnRzO1xuICAgIH0sXG5cbiAgICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHVwZGF0ZVN0YXRlKCk7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfSxcblxuICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHVwZGF0ZVN0YXRlKCk7XG4gICAgICB0aGlzLnNldFN0YXRlKHN0YXRlKTtcbiAgICB9LFxuXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcm91dGVyLnRlYXJkb3duKCk7XG4gICAgfSxcblxuICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0Um91dGVBdERlcHRoKDApID8gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZUhhbmRsZXIsIHRoaXMucHJvcHMpIDogbnVsbDtcbiAgICB9LFxuXG4gICAgY2hpbGRDb250ZXh0VHlwZXM6IHtcbiAgICAgIGdldFJvdXRlQXREZXB0aDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGdldFJvdXRlQ29tcG9uZW50czogUmVhY3QuUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIHJvdXRlSGFuZGxlcnM6IFJlYWN0LlByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkXG4gICAgfSxcblxuICAgIGdldENoaWxkQ29udGV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0Um91dGVDb21wb25lbnRzOiB0aGlzLmdldFJvdXRlQ29tcG9uZW50cyxcbiAgICAgICAgZ2V0Um91dGVBdERlcHRoOiB0aGlzLmdldFJvdXRlQXREZXB0aCxcbiAgICAgICAgcm91dGVIYW5kbGVyczogWyB0aGlzIF1cbiAgICAgIH07XG4gICAgfVxuXG4gIH0pO1xuXG4gIGlmIChvcHRpb25zLnJvdXRlcylcbiAgICByb3V0ZXIuYWRkUm91dGVzKG9wdGlvbnMucm91dGVzKTtcblxuICByZXR1cm4gcm91dGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVJvdXRlcjtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4uL2FjdGlvbnMvTG9jYXRpb25BY3Rpb25zXCI6MjIsXCIuLi9iZWhhdmlvcnMvSW1pdGF0ZUJyb3dzZXJCZWhhdmlvclwiOjIzLFwiLi4vY29tcG9uZW50cy9Sb3V0ZUhhbmRsZXJcIjozMCxcIi4uL2xvY2F0aW9ucy9IYXNoTG9jYXRpb25cIjozMixcIi4uL2xvY2F0aW9ucy9IaXN0b3J5TG9jYXRpb25cIjozMyxcIi4uL2xvY2F0aW9ucy9SZWZyZXNoTG9jYXRpb25cIjozNCxcIi4uL21peGlucy9OYXZpZ2F0aW9uQ29udGV4dFwiOjM3LFwiLi4vbWl4aW5zL1Njcm9sbGluZ1wiOjM5LFwiLi4vbWl4aW5zL1N0YXRlQ29udGV4dFwiOjQxLFwiLi9DYW5jZWxsYXRpb25cIjo0MixcIi4vSGlzdG9yeVwiOjQzLFwiLi9QYXRoXCI6NDQsXCIuL1Byb3BUeXBlc1wiOjQ2LFwiLi9SZWRpcmVjdFwiOjQ3LFwiLi9UcmFuc2l0aW9uXCI6NDgsXCIuL2NyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlblwiOjUwLFwiLi9zdXBwb3J0c0hpc3RvcnlcIjo1NCxcIl9wcm9jZXNzXCI6MTksXCJyZWFjdFwiOjIxNixcInJlYWN0L2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOjkwLFwicmVhY3QvbGliL2ludmFyaWFudFwiOjE5NixcInJlYWN0L2xpYi93YXJuaW5nXCI6MjE1fV0sNTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoganNoaW50IC1XMDg0ICovXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdyZWFjdC9saWIvd2FybmluZycpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9pbnZhcmlhbnQnKTtcbnZhciBEZWZhdWx0Um91dGUgPSByZXF1aXJlKCcuLi9jb21wb25lbnRzL0RlZmF1bHRSb3V0ZScpO1xudmFyIE5vdEZvdW5kUm91dGUgPSByZXF1aXJlKCcuLi9jb21wb25lbnRzL05vdEZvdW5kUm91dGUnKTtcbnZhciBSZWRpcmVjdCA9IHJlcXVpcmUoJy4uL2NvbXBvbmVudHMvUmVkaXJlY3QnKTtcbnZhciBSb3V0ZSA9IHJlcXVpcmUoJy4uL2NvbXBvbmVudHMvUm91dGUnKTtcbnZhciBQYXRoID0gcmVxdWlyZSgnLi9QYXRoJyk7XG5cbnZhciBDT05GSUdfRUxFTUVOVF9UWVBFUyA9IFtcbiAgRGVmYXVsdFJvdXRlLnR5cGUsXG4gIE5vdEZvdW5kUm91dGUudHlwZSxcbiAgUmVkaXJlY3QudHlwZSxcbiAgUm91dGUudHlwZVxuXTtcblxuZnVuY3Rpb24gY3JlYXRlUmVkaXJlY3RIYW5kbGVyKHRvLCBfcGFyYW1zLCBfcXVlcnkpIHtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICBzdGF0aWNzOiB7XG4gICAgICB3aWxsVHJhbnNpdGlvblRvOiBmdW5jdGlvbiAodHJhbnNpdGlvbiwgcGFyYW1zLCBxdWVyeSkge1xuICAgICAgICB0cmFuc2l0aW9uLnJlZGlyZWN0KHRvLCBfcGFyYW1zIHx8IHBhcmFtcywgX3F1ZXJ5IHx8IHF1ZXJ5KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjaGVja1Byb3BUeXBlcyhjb21wb25lbnROYW1lLCBwcm9wVHlwZXMsIHByb3BzKSB7XG4gIGZvciAodmFyIHByb3BOYW1lIGluIHByb3BUeXBlcykge1xuICAgIGlmIChwcm9wVHlwZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICB2YXIgZXJyb3IgPSBwcm9wVHlwZXNbcHJvcE5hbWVdKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSk7XG5cbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKVxuICAgICAgICB3YXJuaW5nKGZhbHNlLCBlcnJvci5tZXNzYWdlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlUm91dGUoZWxlbWVudCwgcGFyZW50Um91dGUsIG5hbWVkUm91dGVzKSB7XG4gIHZhciB0eXBlID0gZWxlbWVudC50eXBlO1xuICB2YXIgcHJvcHMgPSBlbGVtZW50LnByb3BzO1xuICB2YXIgY29tcG9uZW50TmFtZSA9ICh0eXBlICYmIHR5cGUuZGlzcGxheU5hbWUpIHx8ICdVbmtub3duQ29tcG9uZW50JztcblxuICBpbnZhcmlhbnQoXG4gICAgQ09ORklHX0VMRU1FTlRfVFlQRVMuaW5kZXhPZih0eXBlKSAhPT0gLTEsXG4gICAgJ1VucmVjb2duaXplZCByb3V0ZSBjb25maWd1cmF0aW9uIGVsZW1lbnQgXCI8JXM+XCInLFxuICAgIGNvbXBvbmVudE5hbWVcbiAgKTtcblxuICBpZiAodHlwZS5wcm9wVHlwZXMpXG4gICAgY2hlY2tQcm9wVHlwZXMoY29tcG9uZW50TmFtZSwgdHlwZS5wcm9wVHlwZXMsIHByb3BzKTtcblxuICB2YXIgcm91dGUgPSB7IG5hbWU6IHByb3BzLm5hbWUgfTtcblxuICBpZiAocHJvcHMuaWdub3JlU2Nyb2xsQmVoYXZpb3IpIHtcbiAgICByb3V0ZS5pZ25vcmVTY3JvbGxCZWhhdmlvciA9IHRydWU7XG4gIH1cblxuICBpZiAodHlwZSA9PT0gUmVkaXJlY3QudHlwZSkge1xuICAgIHJvdXRlLmhhbmRsZXIgPSBjcmVhdGVSZWRpcmVjdEhhbmRsZXIocHJvcHMudG8sIHByb3BzLnBhcmFtcywgcHJvcHMucXVlcnkpO1xuICAgIHByb3BzLnBhdGggPSBwcm9wcy5wYXRoIHx8IHByb3BzLmZyb20gfHwgJyonO1xuICB9IGVsc2Uge1xuICAgIHJvdXRlLmhhbmRsZXIgPSBwcm9wcy5oYW5kbGVyO1xuICB9XG5cbiAgdmFyIHBhcmVudFBhdGggPSAocGFyZW50Um91dGUgJiYgcGFyZW50Um91dGUucGF0aCkgfHwgJy8nO1xuXG4gIGlmICgocHJvcHMucGF0aCB8fCBwcm9wcy5uYW1lKSAmJiB0eXBlICE9PSBEZWZhdWx0Um91dGUudHlwZSAmJiB0eXBlICE9PSBOb3RGb3VuZFJvdXRlLnR5cGUpIHtcbiAgICB2YXIgcGF0aCA9IHByb3BzLnBhdGggfHwgcHJvcHMubmFtZTtcblxuICAgIC8vIFJlbGF0aXZlIHBhdGhzIGV4dGVuZCB0aGVpciBwYXJlbnQuXG4gICAgaWYgKCFQYXRoLmlzQWJzb2x1dGUocGF0aCkpXG4gICAgICBwYXRoID0gUGF0aC5qb2luKHBhcmVudFBhdGgsIHBhdGgpO1xuXG4gICAgcm91dGUucGF0aCA9IFBhdGgubm9ybWFsaXplKHBhdGgpO1xuICB9IGVsc2Uge1xuICAgIHJvdXRlLnBhdGggPSBwYXJlbnRQYXRoO1xuXG4gICAgaWYgKHR5cGUgPT09IE5vdEZvdW5kUm91dGUudHlwZSlcbiAgICAgIHJvdXRlLnBhdGggKz0gJyonO1xuICB9XG5cbiAgcm91dGUucGFyYW1OYW1lcyA9IFBhdGguZXh0cmFjdFBhcmFtTmFtZXMocm91dGUucGF0aCk7XG5cbiAgLy8gTWFrZSBzdXJlIHRoZSByb3V0ZSdzIHBhdGggaGFzIGFsbCBwYXJhbXMgaXRzIHBhcmVudCBuZWVkcy5cbiAgaWYgKHBhcmVudFJvdXRlICYmIEFycmF5LmlzQXJyYXkocGFyZW50Um91dGUucGFyYW1OYW1lcykpIHtcbiAgICBwYXJlbnRSb3V0ZS5wYXJhbU5hbWVzLmZvckVhY2goZnVuY3Rpb24gKHBhcmFtTmFtZSkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICByb3V0ZS5wYXJhbU5hbWVzLmluZGV4T2YocGFyYW1OYW1lKSAhPT0gLTEsXG4gICAgICAgICdUaGUgbmVzdGVkIHJvdXRlIHBhdGggXCIlc1wiIGlzIG1pc3NpbmcgdGhlIFwiJXNcIiBwYXJhbWV0ZXIgb2YgaXRzIHBhcmVudCBwYXRoIFwiJXNcIicsXG4gICAgICAgIHJvdXRlLnBhdGgsIHBhcmFtTmFtZSwgcGFyZW50Um91dGUucGF0aFxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIE1ha2Ugc3VyZSB0aGUgcm91dGUgY2FuIGJlIGxvb2tlZCB1cCBieSA8TGluaz5zLlxuICBpZiAocHJvcHMubmFtZSkge1xuICAgIGludmFyaWFudChcbiAgICAgIG5hbWVkUm91dGVzW3Byb3BzLm5hbWVdID09IG51bGwsXG4gICAgICAnWW91IGNhbm5vdCB1c2UgdGhlIG5hbWUgXCIlc1wiIGZvciBtb3JlIHRoYW4gb25lIHJvdXRlJyxcbiAgICAgIHByb3BzLm5hbWVcbiAgICApO1xuXG4gICAgbmFtZWRSb3V0ZXNbcHJvcHMubmFtZV0gPSByb3V0ZTtcbiAgfVxuXG4gIC8vIEhhbmRsZSA8Tm90Rm91bmRSb3V0ZT4uXG4gIGlmICh0eXBlID09PSBOb3RGb3VuZFJvdXRlLnR5cGUpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBwYXJlbnRSb3V0ZSxcbiAgICAgICc8Tm90Rm91bmRSb3V0ZT4gbXVzdCBoYXZlIGEgcGFyZW50IDxSb3V0ZT4nXG4gICAgKTtcblxuICAgIGludmFyaWFudChcbiAgICAgIHBhcmVudFJvdXRlLm5vdEZvdW5kUm91dGUgPT0gbnVsbCxcbiAgICAgICdZb3UgbWF5IG5vdCBoYXZlIG1vcmUgdGhhbiBvbmUgPE5vdEZvdW5kUm91dGU+IHBlciA8Um91dGU+J1xuICAgICk7XG5cbiAgICBwYXJlbnRSb3V0ZS5ub3RGb3VuZFJvdXRlID0gcm91dGU7XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIEhhbmRsZSA8RGVmYXVsdFJvdXRlPi5cbiAgaWYgKHR5cGUgPT09IERlZmF1bHRSb3V0ZS50eXBlKSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgcGFyZW50Um91dGUsXG4gICAgICAnPERlZmF1bHRSb3V0ZT4gbXVzdCBoYXZlIGEgcGFyZW50IDxSb3V0ZT4nXG4gICAgKTtcblxuICAgIGludmFyaWFudChcbiAgICAgIHBhcmVudFJvdXRlLmRlZmF1bHRSb3V0ZSA9PSBudWxsLFxuICAgICAgJ1lvdSBtYXkgbm90IGhhdmUgbW9yZSB0aGFuIG9uZSA8RGVmYXVsdFJvdXRlPiBwZXIgPFJvdXRlPidcbiAgICApO1xuXG4gICAgcGFyZW50Um91dGUuZGVmYXVsdFJvdXRlID0gcm91dGU7XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJvdXRlLmNoaWxkUm91dGVzID0gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKHByb3BzLmNoaWxkcmVuLCByb3V0ZSwgbmFtZWRSb3V0ZXMpO1xuXG4gIHJldHVybiByb3V0ZTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHJvdXRlIG9iamVjdHMgZnJvbSB0aGUgZ2l2ZW4gUmVhY3RDaGlsZHJlbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGNoaWxkcmVuLCBwYXJlbnRSb3V0ZSwgbmFtZWRSb3V0ZXMpIHtcbiAgdmFyIHJvdXRlcyA9IFtdO1xuXG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIC8vIEV4Y2x1ZGUgPERlZmF1bHRSb3V0ZT5zIGFuZCA8Tm90Rm91bmRSb3V0ZT5zLlxuICAgIGlmIChjaGlsZCA9IGNyZWF0ZVJvdXRlKGNoaWxkLCBwYXJlbnRSb3V0ZSwgbmFtZWRSb3V0ZXMpKVxuICAgICAgcm91dGVzLnB1c2goY2hpbGQpO1xuICB9KTtcblxuICByZXR1cm4gcm91dGVzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbjtcblxufSx7XCIuLi9jb21wb25lbnRzL0RlZmF1bHRSb3V0ZVwiOjI1LFwiLi4vY29tcG9uZW50cy9Ob3RGb3VuZFJvdXRlXCI6MjcsXCIuLi9jb21wb25lbnRzL1JlZGlyZWN0XCI6MjgsXCIuLi9jb21wb25lbnRzL1JvdXRlXCI6MjksXCIuL1BhdGhcIjo0NCxcInJlYWN0XCI6MjE2LFwicmVhY3QvbGliL2ludmFyaWFudFwiOjE5NixcInJlYWN0L2xpYi93YXJuaW5nXCI6MjE1fV0sNTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9pbnZhcmlhbnQnKTtcbnZhciBjYW5Vc2VET00gPSByZXF1aXJlKCdyZWFjdC9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKS5jYW5Vc2VET007XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb24gb2YgdGhlIHdpbmRvdyBhcyB7IHgsIHkgfS5cbiAqL1xuZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsUG9zaXRpb24oKSB7XG4gIGludmFyaWFudChcbiAgICBjYW5Vc2VET00sXG4gICAgJ0Nhbm5vdCBnZXQgY3VycmVudCBzY3JvbGwgcG9zaXRpb24gd2l0aG91dCBhIERPTSdcbiAgKTtcblxuICByZXR1cm4ge1xuICAgIHg6IHdpbmRvdy5wYWdlWE9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICB5OiB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcFxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFdpbmRvd1Njcm9sbFBvc2l0aW9uO1xuXG59LHtcInJlYWN0L2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOjkwLFwicmVhY3QvbGliL2ludmFyaWFudFwiOjE5Nn1dLDUyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbmZ1bmN0aW9uIHJldmVyc2VkQXJyYXkoYXJyYXkpIHtcbiAgcmV0dXJuIGFycmF5LnNsaWNlKDApLnJldmVyc2UoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXZlcnNlZEFycmF5O1xuXG59LHt9XSw1MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG52YXIgY3JlYXRlUm91dGVyID0gcmVxdWlyZSgnLi9jcmVhdGVSb3V0ZXInKTtcblxuLyoqXG4gKiBBIGhpZ2gtbGV2ZWwgY29udmVuaWVuY2UgbWV0aG9kIHRoYXQgY3JlYXRlcywgY29uZmlndXJlcywgYW5kXG4gKiBydW5zIGEgcm91dGVyIGluIG9uZSBzaG90LiBUaGUgbWV0aG9kIHNpZ25hdHVyZSBpczpcbiAqXG4gKiAgIFJvdXRlci5ydW4ocm91dGVzWywgbG9jYXRpb24gXSwgY2FsbGJhY2spO1xuICpcbiAqIFVzaW5nIGB3aW5kb3cubG9jYXRpb24uaGFzaGAgdG8gbWFuYWdlIHRoZSBVUkwsIHlvdSBjb3VsZCBkbzpcbiAqXG4gKiAgIFJvdXRlci5ydW4ocm91dGVzLCBmdW5jdGlvbiAoSGFuZGxlcikge1xuICogICAgIFJlYWN0LnJlbmRlcig8SGFuZGxlci8+LCBkb2N1bWVudC5ib2R5KTtcbiAqICAgfSk7XG4gKiBcbiAqIFVzaW5nIEhUTUw1IGhpc3RvcnkgYW5kIGEgY3VzdG9tIFwiY3Vyc29yXCIgcHJvcDpcbiAqIFxuICogICBSb3V0ZXIucnVuKHJvdXRlcywgUm91dGVyLkhpc3RvcnlMb2NhdGlvbiwgZnVuY3Rpb24gKEhhbmRsZXIpIHtcbiAqICAgICBSZWFjdC5yZW5kZXIoPEhhbmRsZXIgY3Vyc29yPXtjdXJzb3J9Lz4sIGRvY3VtZW50LmJvZHkpO1xuICogICB9KTtcbiAqXG4gKiBSZXR1cm5zIHRoZSBuZXdseSBjcmVhdGVkIHJvdXRlci5cbiAqXG4gKiBOb3RlOiBJZiB5b3UgbmVlZCB0byBzcGVjaWZ5IGZ1cnRoZXIgb3B0aW9ucyBmb3IgeW91ciByb3V0ZXIgc3VjaFxuICogYXMgZXJyb3IvYWJvcnQgaGFuZGxpbmcgb3IgY3VzdG9tIHNjcm9sbCBiZWhhdmlvciwgdXNlIFJvdXRlci5jcmVhdGVcbiAqIGluc3RlYWQuXG4gKlxuICogICB2YXIgcm91dGVyID0gUm91dGVyLmNyZWF0ZShvcHRpb25zKTtcbiAqICAgcm91dGVyLnJ1bihmdW5jdGlvbiAoSGFuZGxlcikge1xuICogICAgIC8vIC4uLlxuICogICB9KTtcbiAqL1xuZnVuY3Rpb24gcnVuUm91dGVyKHJvdXRlcywgbG9jYXRpb24sIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2YgbG9jYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IGxvY2F0aW9uO1xuICAgIGxvY2F0aW9uID0gbnVsbDtcbiAgfVxuXG4gIHZhciByb3V0ZXIgPSBjcmVhdGVSb3V0ZXIoe1xuICAgIHJvdXRlczogcm91dGVzLFxuICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICB9KTtcblxuICByb3V0ZXIucnVuKGNhbGxiYWNrKTtcblxuICByZXR1cm4gcm91dGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJ1blJvdXRlcjtcblxufSx7XCIuL2NyZWF0ZVJvdXRlclwiOjQ5fV0sNTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICAvKiEgdGFrZW4gZnJvbSBtb2Rlcm5penJcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuICAgKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yYWNrdC9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuICAgKi9cbiAgdmFyIHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8XG4gICAgICAodWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpKSAmJlxuICAgICAgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJlxuICAgICAgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmXG4gICAgICB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAod2luZG93Lmhpc3RvcnkgJiYgJ3B1c2hTdGF0ZScgaW4gd2luZG93Lmhpc3RvcnkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN1cHBvcnRzSGlzdG9yeTtcblxufSx7fV0sNTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYicpO1xuXG59LHtcIi4vbGliXCI6NTZ9XSw1NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyBMb2FkIG1vZHVsZXNcblxudmFyIFN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vc3RyaW5naWZ5Jyk7XG52YXIgUGFyc2UgPSByZXF1aXJlKCcuL3BhcnNlJyk7XG5cblxuLy8gRGVjbGFyZSBpbnRlcm5hbHNcblxudmFyIGludGVybmFscyA9IHt9O1xuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHN0cmluZ2lmeTogU3RyaW5naWZ5LFxuICAgIHBhcnNlOiBQYXJzZVxufTtcblxufSx7XCIuL3BhcnNlXCI6NTcsXCIuL3N0cmluZ2lmeVwiOjU4fV0sNTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8gTG9hZCBtb2R1bGVzXG5cbnZhciBVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuXG4vLyBEZWNsYXJlIGludGVybmFsc1xuXG52YXIgaW50ZXJuYWxzID0ge1xuICAgIGRlbGltaXRlcjogJyYnLFxuICAgIGRlcHRoOiA1LFxuICAgIGFycmF5TGltaXQ6IDIwLFxuICAgIHBhcmFtZXRlckxpbWl0OiAxMDAwXG59O1xuXG5cbmludGVybmFscy5wYXJzZVZhbHVlcyA9IGZ1bmN0aW9uIChzdHIsIG9wdGlvbnMpIHtcblxuICAgIHZhciBvYmogPSB7fTtcbiAgICB2YXIgcGFydHMgPSBzdHIuc3BsaXQob3B0aW9ucy5kZWxpbWl0ZXIsIG9wdGlvbnMucGFyYW1ldGVyTGltaXQgPT09IEluZmluaXR5ID8gdW5kZWZpbmVkIDogb3B0aW9ucy5wYXJhbWV0ZXJMaW1pdCk7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBwYXJ0cy5sZW5ndGg7IGkgPCBpbDsgKytpKSB7XG4gICAgICAgIHZhciBwYXJ0ID0gcGFydHNbaV07XG4gICAgICAgIHZhciBwb3MgPSBwYXJ0LmluZGV4T2YoJ109JykgPT09IC0xID8gcGFydC5pbmRleE9mKCc9JykgOiBwYXJ0LmluZGV4T2YoJ109JykgKyAxO1xuXG4gICAgICAgIGlmIChwb3MgPT09IC0xKSB7XG4gICAgICAgICAgICBvYmpbVXRpbHMuZGVjb2RlKHBhcnQpXSA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGtleSA9IFV0aWxzLmRlY29kZShwYXJ0LnNsaWNlKDAsIHBvcykpO1xuICAgICAgICAgICAgdmFyIHZhbCA9IFV0aWxzLmRlY29kZShwYXJ0LnNsaWNlKHBvcyArIDEpKTtcblxuICAgICAgICAgICAgaWYgKCFvYmpba2V5XSkge1xuICAgICAgICAgICAgICAgIG9ialtrZXldID0gdmFsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgb2JqW2tleV0gPSBbXS5jb25jYXQob2JqW2tleV0pLmNvbmNhdCh2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbn07XG5cblxuaW50ZXJuYWxzLnBhcnNlT2JqZWN0ID0gZnVuY3Rpb24gKGNoYWluLCB2YWwsIG9wdGlvbnMpIHtcblxuICAgIGlmICghY2hhaW4ubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuXG4gICAgdmFyIHJvb3QgPSBjaGFpbi5zaGlmdCgpO1xuXG4gICAgdmFyIG9iaiA9IHt9O1xuICAgIGlmIChyb290ID09PSAnW10nKSB7XG4gICAgICAgIG9iaiA9IFtdO1xuICAgICAgICBvYmogPSBvYmouY29uY2F0KGludGVybmFscy5wYXJzZU9iamVjdChjaGFpbiwgdmFsLCBvcHRpb25zKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgY2xlYW5Sb290ID0gcm9vdFswXSA9PT0gJ1snICYmIHJvb3Rbcm9vdC5sZW5ndGggLSAxXSA9PT0gJ10nID8gcm9vdC5zbGljZSgxLCByb290Lmxlbmd0aCAtIDEpIDogcm9vdDtcbiAgICAgICAgdmFyIGluZGV4ID0gcGFyc2VJbnQoY2xlYW5Sb290LCAxMCk7XG4gICAgICAgIGlmICghaXNOYU4oaW5kZXgpICYmXG4gICAgICAgICAgICByb290ICE9PSBjbGVhblJvb3QgJiZcbiAgICAgICAgICAgIGluZGV4IDw9IG9wdGlvbnMuYXJyYXlMaW1pdCkge1xuXG4gICAgICAgICAgICBvYmogPSBbXTtcbiAgICAgICAgICAgIG9ialtpbmRleF0gPSBpbnRlcm5hbHMucGFyc2VPYmplY3QoY2hhaW4sIHZhbCwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmpbY2xlYW5Sb290XSA9IGludGVybmFscy5wYXJzZU9iamVjdChjaGFpbiwgdmFsLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG59O1xuXG5cbmludGVybmFscy5wYXJzZUtleXMgPSBmdW5jdGlvbiAoa2V5LCB2YWwsIG9wdGlvbnMpIHtcblxuICAgIGlmICgha2V5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBUaGUgcmVnZXggY2h1bmtzXG5cbiAgICB2YXIgcGFyZW50ID0gL14oW15cXFtcXF1dKikvO1xuICAgIHZhciBjaGlsZCA9IC8oXFxbW15cXFtcXF1dKlxcXSkvZztcblxuICAgIC8vIEdldCB0aGUgcGFyZW50XG5cbiAgICB2YXIgc2VnbWVudCA9IHBhcmVudC5leGVjKGtleSk7XG5cbiAgICAvLyBEb24ndCBhbGxvdyB0aGVtIHRvIG92ZXJ3cml0ZSBvYmplY3QgcHJvdG90eXBlIHByb3BlcnRpZXNcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KHNlZ21lbnRbMV0pKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBTdGFzaCB0aGUgcGFyZW50IGlmIGl0IGV4aXN0c1xuXG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBpZiAoc2VnbWVudFsxXSkge1xuICAgICAgICBrZXlzLnB1c2goc2VnbWVudFsxXSk7XG4gICAgfVxuXG4gICAgLy8gTG9vcCB0aHJvdWdoIGNoaWxkcmVuIGFwcGVuZGluZyB0byB0aGUgYXJyYXkgdW50aWwgd2UgaGl0IGRlcHRoXG5cbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKChzZWdtZW50ID0gY2hpbGQuZXhlYyhrZXkpKSAhPT0gbnVsbCAmJiBpIDwgb3B0aW9ucy5kZXB0aCkge1xuXG4gICAgICAgICsraTtcbiAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KHNlZ21lbnRbMV0ucmVwbGFjZSgvXFxbfFxcXS9nLCAnJykpKSB7XG4gICAgICAgICAgICBrZXlzLnB1c2goc2VnbWVudFsxXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiB0aGVyZSdzIGEgcmVtYWluZGVyLCBqdXN0IGFkZCB3aGF0ZXZlciBpcyBsZWZ0XG5cbiAgICBpZiAoc2VnbWVudCkge1xuICAgICAgICBrZXlzLnB1c2goJ1snICsga2V5LnNsaWNlKHNlZ21lbnQuaW5kZXgpICsgJ10nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW50ZXJuYWxzLnBhcnNlT2JqZWN0KGtleXMsIHZhbCwgb3B0aW9ucyk7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0ciwgb3B0aW9ucykge1xuXG4gICAgaWYgKHN0ciA9PT0gJycgfHxcbiAgICAgICAgc3RyID09PSBudWxsIHx8XG4gICAgICAgIHR5cGVvZiBzdHIgPT09ICd1bmRlZmluZWQnKSB7XG5cbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIG9wdGlvbnMuZGVsaW1pdGVyID0gdHlwZW9mIG9wdGlvbnMuZGVsaW1pdGVyID09PSAnc3RyaW5nJyB8fCBVdGlscy5pc1JlZ0V4cChvcHRpb25zLmRlbGltaXRlcikgPyBvcHRpb25zLmRlbGltaXRlciA6IGludGVybmFscy5kZWxpbWl0ZXI7XG4gICAgb3B0aW9ucy5kZXB0aCA9IHR5cGVvZiBvcHRpb25zLmRlcHRoID09PSAnbnVtYmVyJyA/IG9wdGlvbnMuZGVwdGggOiBpbnRlcm5hbHMuZGVwdGg7XG4gICAgb3B0aW9ucy5hcnJheUxpbWl0ID0gdHlwZW9mIG9wdGlvbnMuYXJyYXlMaW1pdCA9PT0gJ251bWJlcicgPyBvcHRpb25zLmFycmF5TGltaXQgOiBpbnRlcm5hbHMuYXJyYXlMaW1pdDtcbiAgICBvcHRpb25zLnBhcmFtZXRlckxpbWl0ID0gdHlwZW9mIG9wdGlvbnMucGFyYW1ldGVyTGltaXQgPT09ICdudW1iZXInID8gb3B0aW9ucy5wYXJhbWV0ZXJMaW1pdCA6IGludGVybmFscy5wYXJhbWV0ZXJMaW1pdDtcblxuICAgIHZhciB0ZW1wT2JqID0gdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgPyBpbnRlcm5hbHMucGFyc2VWYWx1ZXMoc3RyLCBvcHRpb25zKSA6IHN0cjtcbiAgICB2YXIgb2JqID0ge307XG5cbiAgICAvLyBJdGVyYXRlIG92ZXIgdGhlIGtleXMgYW5kIHNldHVwIHRoZSBuZXcgb2JqZWN0XG5cbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHRlbXBPYmopO1xuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGtleXMubGVuZ3RoOyBpIDwgaWw7ICsraSkge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgdmFyIG5ld09iaiA9IGludGVybmFscy5wYXJzZUtleXMoa2V5LCB0ZW1wT2JqW2tleV0sIG9wdGlvbnMpO1xuICAgICAgICBvYmogPSBVdGlscy5tZXJnZShvYmosIG5ld09iaik7XG4gICAgfVxuXG4gICAgcmV0dXJuIFV0aWxzLmNvbXBhY3Qob2JqKTtcbn07XG5cbn0se1wiLi91dGlsc1wiOjU5fV0sNTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8gTG9hZCBtb2R1bGVzXG5cbnZhciBVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuXG4vLyBEZWNsYXJlIGludGVybmFsc1xuXG52YXIgaW50ZXJuYWxzID0ge1xuICAgIGRlbGltaXRlcjogJyYnXG59O1xuXG5cbmludGVybmFscy5zdHJpbmdpZnkgPSBmdW5jdGlvbiAob2JqLCBwcmVmaXgpIHtcblxuICAgIGlmIChVdGlscy5pc0J1ZmZlcihvYmopKSB7XG4gICAgICAgIG9iaiA9IG9iai50b1N0cmluZygpO1xuICAgIH1cbiAgICBlbHNlIGlmIChvYmogaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIG9iaiA9IG9iai50b0lTT1N0cmluZygpO1xuICAgIH1cbiAgICBlbHNlIGlmIChvYmogPT09IG51bGwpIHtcbiAgICAgICAgb2JqID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnIHx8XG4gICAgICAgIHR5cGVvZiBvYmogPT09ICdudW1iZXInIHx8XG4gICAgICAgIHR5cGVvZiBvYmogPT09ICdib29sZWFuJykge1xuXG4gICAgICAgIHJldHVybiBbZW5jb2RlVVJJQ29tcG9uZW50KHByZWZpeCkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQob2JqKV07XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIHZhbHVlcyA9IHZhbHVlcy5jb25jYXQoaW50ZXJuYWxzLnN0cmluZ2lmeShvYmpba2V5XSwgcHJlZml4ICsgJ1snICsga2V5ICsgJ10nKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVzO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmosIG9wdGlvbnMpIHtcblxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHZhciBkZWxpbWl0ZXIgPSB0eXBlb2Ygb3B0aW9ucy5kZWxpbWl0ZXIgPT09ICd1bmRlZmluZWQnID8gaW50ZXJuYWxzLmRlbGltaXRlciA6IG9wdGlvbnMuZGVsaW1pdGVyO1xuXG4gICAgdmFyIGtleXMgPSBbXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoaW50ZXJuYWxzLnN0cmluZ2lmeShvYmpba2V5XSwga2V5KSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ga2V5cy5qb2luKGRlbGltaXRlcik7XG59O1xuXG59LHtcIi4vdXRpbHNcIjo1OX1dLDU5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAoQnVmZmVyKXtcbi8vIExvYWQgbW9kdWxlc1xuXG5cbi8vIERlY2xhcmUgaW50ZXJuYWxzXG5cbnZhciBpbnRlcm5hbHMgPSB7fTtcblxuXG5leHBvcnRzLmFycmF5VG9PYmplY3QgPSBmdW5jdGlvbiAoc291cmNlKSB7XG5cbiAgICB2YXIgb2JqID0ge307XG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gc291cmNlLmxlbmd0aDsgaSA8IGlsOyArK2kpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2VbaV0gIT09ICd1bmRlZmluZWQnKSB7XG5cbiAgICAgICAgICAgIG9ialtpXSA9IHNvdXJjZVtpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG59O1xuXG5cbmV4cG9ydHMubWVyZ2UgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblxuICAgIGlmICghc291cmNlKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBzb3VyY2UubGVuZ3RoOyBpIDwgaWw7ICsraSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2VbaV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXRbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtpXSA9IGV4cG9ydHMubWVyZ2UodGFyZ2V0W2ldLCBzb3VyY2VbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W2ldID0gc291cmNlW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSkge1xuICAgICAgICBpZiAodHlwZW9mIHNvdXJjZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRhcmdldC5wdXNoKHNvdXJjZSk7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0ID0gZXhwb3J0cy5hcnJheVRvT2JqZWN0KHRhcmdldCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gICAgZm9yICh2YXIgayA9IDAsIGtsID0ga2V5cy5sZW5ndGg7IGsgPCBrbDsgKytrKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW2tdO1xuICAgICAgICB2YXIgdmFsdWUgPSBzb3VyY2Vba2V5XTtcblxuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcblxuICAgICAgICAgICAgaWYgKCF0YXJnZXRba2V5XSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IGV4cG9ydHMubWVyZ2UodGFyZ2V0W2tleV0sIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xufTtcblxuXG5leHBvcnRzLmRlY29kZSA9IGZ1bmN0aW9uIChzdHIpIHtcblxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc3RyLnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxufTtcblxuXG5leHBvcnRzLmNvbXBhY3QgPSBmdW5jdGlvbiAob2JqLCByZWZzKSB7XG5cbiAgICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHxcbiAgICAgICAgb2JqID09PSBudWxsKSB7XG5cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG5cbiAgICByZWZzID0gcmVmcyB8fCBbXTtcbiAgICB2YXIgbG9va3VwID0gcmVmcy5pbmRleE9mKG9iaik7XG4gICAgaWYgKGxvb2t1cCAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIHJlZnNbbG9va3VwXTtcbiAgICB9XG5cbiAgICByZWZzLnB1c2gob2JqKTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgICAgdmFyIGNvbXBhY3RlZCA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmpbaV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgY29tcGFjdGVkLnB1c2gob2JqW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb21wYWN0ZWQ7XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGtleXMubGVuZ3RoOyBpIDwgaWw7ICsraSkge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgb2JqW2tleV0gPSBleHBvcnRzLmNvbXBhY3Qob2JqW2tleV0sIHJlZnMpO1xuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG59O1xuXG5cbmV4cG9ydHMuaXNSZWdFeHAgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBSZWdFeHBdJztcbn07XG5cblxuZXhwb3J0cy5pc0J1ZmZlciA9IGZ1bmN0aW9uIChvYmopIHtcblxuICAgIGlmICh0eXBlb2YgQnVmZmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufTtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxufSx7XCJidWZmZXJcIjoxNX1dLDYwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKiBAbGljZW5zZSBNSVQgTGljZW5zZSAoYykgY29weXJpZ2h0IDIwMTAtMjAxNCBvcmlnaW5hbCBhdXRob3Igb3IgYXV0aG9ycyAqL1xuLyoqIEBhdXRob3IgQnJpYW4gQ2F2YWxpZXIgKi9cbi8qKiBAYXV0aG9yIEpvaG4gSGFubiAqL1xuXG4oZnVuY3Rpb24oZGVmaW5lKSB7ICd1c2Ugc3RyaWN0JztcbmRlZmluZShmdW5jdGlvbiAocmVxdWlyZSkge1xuXG5cdHZhciBtYWtlUHJvbWlzZSA9IHJlcXVpcmUoJy4vbWFrZVByb21pc2UnKTtcblx0dmFyIFNjaGVkdWxlciA9IHJlcXVpcmUoJy4vU2NoZWR1bGVyJyk7XG5cdHZhciBhc3luYyA9IHJlcXVpcmUoJy4vYXN5bmMnKTtcblxuXHRyZXR1cm4gbWFrZVByb21pc2Uoe1xuXHRcdHNjaGVkdWxlcjogbmV3IFNjaGVkdWxlcihhc3luYylcblx0fSk7XG5cbn0pO1xufSkodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lIDogZnVuY3Rpb24gKGZhY3RvcnkpIHsgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUpOyB9KTtcblxufSx7XCIuL1NjaGVkdWxlclwiOjYyLFwiLi9hc3luY1wiOjYzLFwiLi9tYWtlUHJvbWlzZVwiOjY0fV0sNjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqIEBsaWNlbnNlIE1JVCBMaWNlbnNlIChjKSBjb3B5cmlnaHQgMjAxMC0yMDE0IG9yaWdpbmFsIGF1dGhvciBvciBhdXRob3JzICovXG4vKiogQGF1dGhvciBCcmlhbiBDYXZhbGllciAqL1xuLyoqIEBhdXRob3IgSm9obiBIYW5uICovXG5cbihmdW5jdGlvbihkZWZpbmUpIHsgJ3VzZSBzdHJpY3QnO1xuZGVmaW5lKGZ1bmN0aW9uKCkge1xuXHQvKipcblx0ICogQ2lyY3VsYXIgcXVldWVcblx0ICogQHBhcmFtIHtudW1iZXJ9IGNhcGFjaXR5UG93MiBwb3dlciBvZiAyIHRvIHdoaWNoIHRoaXMgcXVldWUncyBjYXBhY2l0eVxuXHQgKiAgd2lsbCBiZSBzZXQgaW5pdGlhbGx5LiBlZyB3aGVuIGNhcGFjaXR5UG93MiA9PSAzLCBxdWV1ZSBjYXBhY2l0eVxuXHQgKiAgd2lsbCBiZSA4LlxuXHQgKiBAY29uc3RydWN0b3Jcblx0ICovXG5cdGZ1bmN0aW9uIFF1ZXVlKGNhcGFjaXR5UG93Mikge1xuXHRcdHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IHRoaXMubGVuZ3RoID0gMDtcblx0XHR0aGlzLmJ1ZmZlciA9IG5ldyBBcnJheSgxIDw8IGNhcGFjaXR5UG93Mik7XG5cdH1cblxuXHRRdWV1ZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uKHgpIHtcblx0XHRpZih0aGlzLmxlbmd0aCA9PT0gdGhpcy5idWZmZXIubGVuZ3RoKSB7XG5cdFx0XHR0aGlzLl9lbnN1cmVDYXBhY2l0eSh0aGlzLmxlbmd0aCAqIDIpO1xuXHRcdH1cblxuXHRcdHRoaXMuYnVmZmVyW3RoaXMudGFpbF0gPSB4O1xuXHRcdHRoaXMudGFpbCA9ICh0aGlzLnRhaWwgKyAxKSAmICh0aGlzLmJ1ZmZlci5sZW5ndGggLSAxKTtcblx0XHQrK3RoaXMubGVuZ3RoO1xuXHRcdHJldHVybiB0aGlzLmxlbmd0aDtcblx0fTtcblxuXHRRdWV1ZS5wcm90b3R5cGUuc2hpZnQgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgeCA9IHRoaXMuYnVmZmVyW3RoaXMuaGVhZF07XG5cdFx0dGhpcy5idWZmZXJbdGhpcy5oZWFkXSA9IHZvaWQgMDtcblx0XHR0aGlzLmhlYWQgPSAodGhpcy5oZWFkICsgMSkgJiAodGhpcy5idWZmZXIubGVuZ3RoIC0gMSk7XG5cdFx0LS10aGlzLmxlbmd0aDtcblx0XHRyZXR1cm4geDtcblx0fTtcblxuXHRRdWV1ZS5wcm90b3R5cGUuX2Vuc3VyZUNhcGFjaXR5ID0gZnVuY3Rpb24oY2FwYWNpdHkpIHtcblx0XHR2YXIgaGVhZCA9IHRoaXMuaGVhZDtcblx0XHR2YXIgYnVmZmVyID0gdGhpcy5idWZmZXI7XG5cdFx0dmFyIG5ld0J1ZmZlciA9IG5ldyBBcnJheShjYXBhY2l0eSk7XG5cdFx0dmFyIGkgPSAwO1xuXHRcdHZhciBsZW47XG5cblx0XHRpZihoZWFkID09PSAwKSB7XG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aDtcblx0XHRcdGZvcig7IGk8bGVuOyArK2kpIHtcblx0XHRcdFx0bmV3QnVmZmVyW2ldID0gYnVmZmVyW2ldO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjYXBhY2l0eSA9IGJ1ZmZlci5sZW5ndGg7XG5cdFx0XHRsZW4gPSB0aGlzLnRhaWw7XG5cdFx0XHRmb3IoOyBoZWFkPGNhcGFjaXR5OyArK2ksICsraGVhZCkge1xuXHRcdFx0XHRuZXdCdWZmZXJbaV0gPSBidWZmZXJbaGVhZF07XG5cdFx0XHR9XG5cblx0XHRcdGZvcihoZWFkPTA7IGhlYWQ8bGVuOyArK2ksICsraGVhZCkge1xuXHRcdFx0XHRuZXdCdWZmZXJbaV0gPSBidWZmZXJbaGVhZF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy5idWZmZXIgPSBuZXdCdWZmZXI7XG5cdFx0dGhpcy5oZWFkID0gMDtcblx0XHR0aGlzLnRhaWwgPSB0aGlzLmxlbmd0aDtcblx0fTtcblxuXHRyZXR1cm4gUXVldWU7XG5cbn0pO1xufSh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUgOiBmdW5jdGlvbihmYWN0b3J5KSB7IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpOyB9KSk7XG5cbn0se31dLDYyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKiBAbGljZW5zZSBNSVQgTGljZW5zZSAoYykgY29weXJpZ2h0IDIwMTAtMjAxNCBvcmlnaW5hbCBhdXRob3Igb3IgYXV0aG9ycyAqL1xuLyoqIEBhdXRob3IgQnJpYW4gQ2F2YWxpZXIgKi9cbi8qKiBAYXV0aG9yIEpvaG4gSGFubiAqL1xuXG4oZnVuY3Rpb24oZGVmaW5lKSB7ICd1c2Ugc3RyaWN0JztcbmRlZmluZShmdW5jdGlvbihyZXF1aXJlKSB7XG5cblx0dmFyIFF1ZXVlID0gcmVxdWlyZSgnLi9RdWV1ZScpO1xuXG5cdC8vIENyZWRpdCB0byBUd2lzb2wgKGh0dHBzOi8vZ2l0aHViLmNvbS9Ud2lzb2wpIGZvciBzdWdnZXN0aW5nXG5cdC8vIHRoaXMgdHlwZSBvZiBleHRlbnNpYmxlIHF1ZXVlICsgdHJhbXBvbGluZSBhcHByb2FjaCBmb3IgbmV4dC10aWNrIGNvbmZsYXRpb24uXG5cblx0LyoqXG5cdCAqIEFzeW5jIHRhc2sgc2NoZWR1bGVyXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IGFzeW5jIGZ1bmN0aW9uIHRvIHNjaGVkdWxlIGEgc2luZ2xlIGFzeW5jIGZ1bmN0aW9uXG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKi9cblx0ZnVuY3Rpb24gU2NoZWR1bGVyKGFzeW5jKSB7XG5cdFx0dGhpcy5fYXN5bmMgPSBhc3luYztcblx0XHR0aGlzLl9xdWV1ZSA9IG5ldyBRdWV1ZSgxNSk7XG5cdFx0dGhpcy5fYWZ0ZXJRdWV1ZSA9IG5ldyBRdWV1ZSg1KTtcblx0XHR0aGlzLl9ydW5uaW5nID0gZmFsc2U7XG5cblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0dGhpcy5kcmFpbiA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0c2VsZi5fZHJhaW4oKTtcblx0XHR9O1xuXHR9XG5cblx0LyoqXG5cdCAqIEVucXVldWUgYSB0YXNrXG5cdCAqIEBwYXJhbSB7eyBydW46ZnVuY3Rpb24gfX0gdGFza1xuXHQgKi9cblx0U2NoZWR1bGVyLnByb3RvdHlwZS5lbnF1ZXVlID0gZnVuY3Rpb24odGFzaykge1xuXHRcdHRoaXMuX2FkZCh0aGlzLl9xdWV1ZSwgdGFzayk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEVucXVldWUgYSB0YXNrIHRvIHJ1biBhZnRlciB0aGUgbWFpbiB0YXNrIHF1ZXVlXG5cdCAqIEBwYXJhbSB7eyBydW46ZnVuY3Rpb24gfX0gdGFza1xuXHQgKi9cblx0U2NoZWR1bGVyLnByb3RvdHlwZS5hZnRlclF1ZXVlID0gZnVuY3Rpb24odGFzaykge1xuXHRcdHRoaXMuX2FkZCh0aGlzLl9hZnRlclF1ZXVlLCB0YXNrKTtcblx0fTtcblxuXHQvKipcblx0ICogRHJhaW4gdGhlIGhhbmRsZXIgcXVldWUgZW50aXJlbHksIGFuZCB0aGVuIHRoZSBhZnRlciBxdWV1ZVxuXHQgKi9cblx0U2NoZWR1bGVyLnByb3RvdHlwZS5fZHJhaW4gPSBmdW5jdGlvbigpIHtcblx0XHRydW5RdWV1ZSh0aGlzLl9xdWV1ZSk7XG5cdFx0dGhpcy5fcnVubmluZyA9IGZhbHNlO1xuXHRcdHJ1blF1ZXVlKHRoaXMuX2FmdGVyUXVldWUpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBBZGQgYSB0YXNrIHRvIHRoZSBxLCBhbmQgc2NoZWR1bGUgZHJhaW4gaWYgbm90IGFscmVhZHkgc2NoZWR1bGVkXG5cdCAqIEBwYXJhbSB7UXVldWV9IHF1ZXVlXG5cdCAqIEBwYXJhbSB7e3J1bjpmdW5jdGlvbn19IHRhc2tcblx0ICogQHByaXZhdGVcblx0ICovXG5cdFNjaGVkdWxlci5wcm90b3R5cGUuX2FkZCA9IGZ1bmN0aW9uKHF1ZXVlLCB0YXNrKSB7XG5cdFx0cXVldWUucHVzaCh0YXNrKTtcblx0XHRpZighdGhpcy5fcnVubmluZykge1xuXHRcdFx0dGhpcy5fcnVubmluZyA9IHRydWU7XG5cdFx0XHR0aGlzLl9hc3luYyh0aGlzLmRyYWluKTtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIFJ1biBhbGwgdGhlIHRhc2tzIGluIHRoZSBxXG5cdCAqIEBwYXJhbSBxdWV1ZVxuXHQgKi9cblx0ZnVuY3Rpb24gcnVuUXVldWUocXVldWUpIHtcblx0XHR3aGlsZShxdWV1ZS5sZW5ndGggPiAwKSB7XG5cdFx0XHRxdWV1ZS5zaGlmdCgpLnJ1bigpO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBTY2hlZHVsZXI7XG5cbn0pO1xufSh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUgOiBmdW5jdGlvbihmYWN0b3J5KSB7IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKTsgfSkpO1xuXG59LHtcIi4vUXVldWVcIjo2MX1dLDYzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKiogQGxpY2Vuc2UgTUlUIExpY2Vuc2UgKGMpIGNvcHlyaWdodCAyMDEwLTIwMTQgb3JpZ2luYWwgYXV0aG9yIG9yIGF1dGhvcnMgKi9cbi8qKiBAYXV0aG9yIEJyaWFuIENhdmFsaWVyICovXG4vKiogQGF1dGhvciBKb2huIEhhbm4gKi9cblxuKGZ1bmN0aW9uKGRlZmluZSkgeyAndXNlIHN0cmljdCc7XG5kZWZpbmUoZnVuY3Rpb24ocmVxdWlyZSkge1xuXG5cdC8vIFNuaWZmIFwiYmVzdFwiIGFzeW5jIHNjaGVkdWxpbmcgb3B0aW9uXG5cdC8vIFByZWZlciBwcm9jZXNzLm5leHRUaWNrIG9yIE11dGF0aW9uT2JzZXJ2ZXIsIHRoZW4gY2hlY2sgZm9yXG5cdC8vIHZlcnR4IGFuZCBmaW5hbGx5IGZhbGwgYmFjayB0byBzZXRUaW1lb3V0XG5cblx0Lypqc2hpbnQgbWF4Y29tcGxleGl0eTo2Ki9cblx0LypnbG9iYWwgcHJvY2Vzcyxkb2N1bWVudCxzZXRUaW1lb3V0LE11dGF0aW9uT2JzZXJ2ZXIsV2ViS2l0TXV0YXRpb25PYnNlcnZlciovXG5cdHZhciBuZXh0VGljaywgTXV0YXRpb25PYnM7XG5cblx0aWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzICE9PSBudWxsICYmXG5cdFx0dHlwZW9mIHByb2Nlc3MubmV4dFRpY2sgPT09ICdmdW5jdGlvbicpIHtcblx0XHRuZXh0VGljayA9IGZ1bmN0aW9uKGYpIHtcblx0XHRcdHByb2Nlc3MubmV4dFRpY2soZik7XG5cdFx0fTtcblxuXHR9IGVsc2UgaWYgKE11dGF0aW9uT2JzID1cblx0XHQodHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgPT09ICdmdW5jdGlvbicgJiYgTXV0YXRpb25PYnNlcnZlcikgfHxcblx0XHQodHlwZW9mIFdlYktpdE11dGF0aW9uT2JzZXJ2ZXIgPT09ICdmdW5jdGlvbicgJiYgV2ViS2l0TXV0YXRpb25PYnNlcnZlcikpIHtcblx0XHRuZXh0VGljayA9IChmdW5jdGlvbiAoZG9jdW1lbnQsIE11dGF0aW9uT2JzZXJ2ZXIpIHtcblx0XHRcdHZhciBzY2hlZHVsZWQ7XG5cdFx0XHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0XHRcdHZhciBvID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIocnVuKTtcblx0XHRcdG8ub2JzZXJ2ZShlbCwgeyBhdHRyaWJ1dGVzOiB0cnVlIH0pO1xuXG5cdFx0XHRmdW5jdGlvbiBydW4oKSB7XG5cdFx0XHRcdHZhciBmID0gc2NoZWR1bGVkO1xuXHRcdFx0XHRzY2hlZHVsZWQgPSB2b2lkIDA7XG5cdFx0XHRcdGYoKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChmKSB7XG5cdFx0XHRcdHNjaGVkdWxlZCA9IGY7XG5cdFx0XHRcdGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAneCcpO1xuXHRcdFx0fTtcblx0XHR9KGRvY3VtZW50LCBNdXRhdGlvbk9icykpO1xuXG5cdH0gZWxzZSB7XG5cdFx0bmV4dFRpY2sgPSAoZnVuY3Rpb24oY2pzUmVxdWlyZSkge1xuXHRcdFx0dmFyIHZlcnR4O1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Ly8gdmVydC54IDEueCB8fCAyLnhcblx0XHRcdFx0dmVydHggPSBjanNSZXF1aXJlKCd2ZXJ0eCcpO1xuXHRcdFx0fSBjYXRjaCAoaWdub3JlKSB7fVxuXG5cdFx0XHRpZiAodmVydHgpIHtcblx0XHRcdFx0aWYgKHR5cGVvZiB2ZXJ0eC5ydW5Pbkxvb3AgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0XHRyZXR1cm4gdmVydHgucnVuT25Mb29wO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0eXBlb2YgdmVydHgucnVuT25Db250ZXh0ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZlcnR4LnJ1bk9uQ29udGV4dDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBjYXB0dXJlIHNldFRpbWVvdXQgdG8gYXZvaWQgYmVpbmcgY2F1Z2h0IGJ5IGZha2UgdGltZXJzXG5cdFx0XHQvLyB1c2VkIGluIHRpbWUgYmFzZWQgdGVzdHNcblx0XHRcdHZhciBjYXB0dXJlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRcdGNhcHR1cmVkU2V0VGltZW91dCh0LCAwKTtcblx0XHRcdH07XG5cdFx0fShyZXF1aXJlKSk7XG5cdH1cblxuXHRyZXR1cm4gbmV4dFRpY2s7XG59KTtcbn0odHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lIDogZnVuY3Rpb24oZmFjdG9yeSkgeyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSk7IH0pKTtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIl9wcm9jZXNzXCI6MTl9XSw2NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKiogQGxpY2Vuc2UgTUlUIExpY2Vuc2UgKGMpIGNvcHlyaWdodCAyMDEwLTIwMTQgb3JpZ2luYWwgYXV0aG9yIG9yIGF1dGhvcnMgKi9cbi8qKiBAYXV0aG9yIEJyaWFuIENhdmFsaWVyICovXG4vKiogQGF1dGhvciBKb2huIEhhbm4gKi9cblxuKGZ1bmN0aW9uKGRlZmluZSkgeyAndXNlIHN0cmljdCc7XG5kZWZpbmUoZnVuY3Rpb24oKSB7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIG1ha2VQcm9taXNlKGVudmlyb25tZW50KSB7XG5cblx0XHR2YXIgdGFza3MgPSBlbnZpcm9ubWVudC5zY2hlZHVsZXI7XG5cblx0XHR2YXIgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZSB8fFxuXHRcdFx0ZnVuY3Rpb24ocHJvdG8pIHtcblx0XHRcdFx0ZnVuY3Rpb24gQ2hpbGQoKSB7fVxuXHRcdFx0XHRDaGlsZC5wcm90b3R5cGUgPSBwcm90bztcblx0XHRcdFx0cmV0dXJuIG5ldyBDaGlsZCgpO1xuXHRcdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIENyZWF0ZSBhIHByb21pc2Ugd2hvc2UgZmF0ZSBpcyBkZXRlcm1pbmVkIGJ5IHJlc29sdmVyXG5cdFx0ICogQGNvbnN0cnVjdG9yXG5cdFx0ICogQHJldHVybnMge1Byb21pc2V9IHByb21pc2Vcblx0XHQgKiBAbmFtZSBQcm9taXNlXG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gUHJvbWlzZShyZXNvbHZlciwgaGFuZGxlcikge1xuXHRcdFx0dGhpcy5faGFuZGxlciA9IHJlc29sdmVyID09PSBIYW5kbGVyID8gaGFuZGxlciA6IGluaXQocmVzb2x2ZXIpO1xuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIFJ1biB0aGUgc3VwcGxpZWQgcmVzb2x2ZXJcblx0XHQgKiBAcGFyYW0gcmVzb2x2ZXJcblx0XHQgKiBAcmV0dXJucyB7UGVuZGluZ31cblx0XHQgKi9cblx0XHRmdW5jdGlvbiBpbml0KHJlc29sdmVyKSB7XG5cdFx0XHR2YXIgaGFuZGxlciA9IG5ldyBQZW5kaW5nKCk7XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHJlc29sdmVyKHByb21pc2VSZXNvbHZlLCBwcm9taXNlUmVqZWN0LCBwcm9taXNlTm90aWZ5KTtcblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0cHJvbWlzZVJlamVjdChlKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGhhbmRsZXI7XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogVHJhbnNpdGlvbiBmcm9tIHByZS1yZXNvbHV0aW9uIHN0YXRlIHRvIHBvc3QtcmVzb2x1dGlvbiBzdGF0ZSwgbm90aWZ5aW5nXG5cdFx0XHQgKiBhbGwgbGlzdGVuZXJzIG9mIHRoZSB1bHRpbWF0ZSBmdWxmaWxsbWVudCBvciByZWplY3Rpb25cblx0XHRcdCAqIEBwYXJhbSB7Kn0geCByZXNvbHV0aW9uIHZhbHVlXG5cdFx0XHQgKi9cblx0XHRcdGZ1bmN0aW9uIHByb21pc2VSZXNvbHZlICh4KSB7XG5cdFx0XHRcdGhhbmRsZXIucmVzb2x2ZSh4KTtcblx0XHRcdH1cblx0XHRcdC8qKlxuXHRcdFx0ICogUmVqZWN0IHRoaXMgcHJvbWlzZSB3aXRoIHJlYXNvbiwgd2hpY2ggd2lsbCBiZSB1c2VkIHZlcmJhdGltXG5cdFx0XHQgKiBAcGFyYW0ge0Vycm9yfCp9IHJlYXNvbiByZWplY3Rpb24gcmVhc29uLCBzdHJvbmdseSBzdWdnZXN0ZWRcblx0XHRcdCAqICAgdG8gYmUgYW4gRXJyb3IgdHlwZVxuXHRcdFx0ICovXG5cdFx0XHRmdW5jdGlvbiBwcm9taXNlUmVqZWN0IChyZWFzb24pIHtcblx0XHRcdFx0aGFuZGxlci5yZWplY3QocmVhc29uKTtcblx0XHRcdH1cblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBJc3N1ZSBhIHByb2dyZXNzIGV2ZW50LCBub3RpZnlpbmcgYWxsIHByb2dyZXNzIGxpc3RlbmVyc1xuXHRcdFx0ICogQHBhcmFtIHsqfSB4IHByb2dyZXNzIGV2ZW50IHBheWxvYWQgdG8gcGFzcyB0byBhbGwgbGlzdGVuZXJzXG5cdFx0XHQgKi9cblx0XHRcdGZ1bmN0aW9uIHByb21pc2VOb3RpZnkgKHgpIHtcblx0XHRcdFx0aGFuZGxlci5ub3RpZnkoeCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ3JlYXRpb25cblxuXHRcdFByb21pc2UucmVzb2x2ZSA9IHJlc29sdmU7XG5cdFx0UHJvbWlzZS5yZWplY3QgPSByZWplY3Q7XG5cdFx0UHJvbWlzZS5uZXZlciA9IG5ldmVyO1xuXG5cdFx0UHJvbWlzZS5fZGVmZXIgPSBkZWZlcjtcblx0XHRQcm9taXNlLl9oYW5kbGVyID0gZ2V0SGFuZGxlcjtcblxuXHRcdC8qKlxuXHRcdCAqIFJldHVybnMgYSB0cnVzdGVkIHByb21pc2UuIElmIHggaXMgYWxyZWFkeSBhIHRydXN0ZWQgcHJvbWlzZSwgaXQgaXNcblx0XHQgKiByZXR1cm5lZCwgb3RoZXJ3aXNlIHJldHVybnMgYSBuZXcgdHJ1c3RlZCBQcm9taXNlIHdoaWNoIGZvbGxvd3MgeC5cblx0XHQgKiBAcGFyYW0gIHsqfSB4XG5cdFx0ICogQHJldHVybiB7UHJvbWlzZX0gcHJvbWlzZVxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuXHRcdFx0cmV0dXJuIGlzUHJvbWlzZSh4KSA/IHhcblx0XHRcdFx0OiBuZXcgUHJvbWlzZShIYW5kbGVyLCBuZXcgQXN5bmMoZ2V0SGFuZGxlcih4KSkpO1xuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIFJldHVybiBhIHJlamVjdCBwcm9taXNlIHdpdGggeCBhcyBpdHMgcmVhc29uICh4IGlzIHVzZWQgdmVyYmF0aW0pXG5cdFx0ICogQHBhcmFtIHsqfSB4XG5cdFx0ICogQHJldHVybnMge1Byb21pc2V9IHJlamVjdGVkIHByb21pc2Vcblx0XHQgKi9cblx0XHRmdW5jdGlvbiByZWplY3QoeCkge1xuXHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKEhhbmRsZXIsIG5ldyBBc3luYyhuZXcgUmVqZWN0ZWQoeCkpKTtcblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm4gYSBwcm9taXNlIHRoYXQgcmVtYWlucyBwZW5kaW5nIGZvcmV2ZXJcblx0XHQgKiBAcmV0dXJucyB7UHJvbWlzZX0gZm9yZXZlci1wZW5kaW5nIHByb21pc2UuXG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gbmV2ZXIoKSB7XG5cdFx0XHRyZXR1cm4gZm9yZXZlclBlbmRpbmdQcm9taXNlOyAvLyBTaG91bGQgYmUgZnJvemVuXG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogQ3JlYXRlcyBhbiBpbnRlcm5hbCB7cHJvbWlzZSwgcmVzb2x2ZXJ9IHBhaXJcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEByZXR1cm5zIHtQcm9taXNlfVxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIGRlZmVyKCkge1xuXHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKEhhbmRsZXIsIG5ldyBQZW5kaW5nKCkpO1xuXHRcdH1cblxuXHRcdC8vIFRyYW5zZm9ybWF0aW9uIGFuZCBmbG93IGNvbnRyb2xcblxuXHRcdC8qKlxuXHRcdCAqIFRyYW5zZm9ybSB0aGlzIHByb21pc2UncyBmdWxmaWxsbWVudCB2YWx1ZSwgcmV0dXJuaW5nIGEgbmV3IFByb21pc2Vcblx0XHQgKiBmb3IgdGhlIHRyYW5zZm9ybWVkIHJlc3VsdC4gIElmIHRoZSBwcm9taXNlIGNhbm5vdCBiZSBmdWxmaWxsZWQsIG9uUmVqZWN0ZWRcblx0XHQgKiBpcyBjYWxsZWQgd2l0aCB0aGUgcmVhc29uLiAgb25Qcm9ncmVzcyAqbWF5KiBiZSBjYWxsZWQgd2l0aCB1cGRhdGVzIHRvd2FyZFxuXHRcdCAqIHRoaXMgcHJvbWlzZSdzIGZ1bGZpbGxtZW50LlxuXHRcdCAqIEBwYXJhbSB7ZnVuY3Rpb249fSBvbkZ1bGZpbGxlZCBmdWxmaWxsbWVudCBoYW5kbGVyXG5cdFx0ICogQHBhcmFtIHtmdW5jdGlvbj19IG9uUmVqZWN0ZWQgcmVqZWN0aW9uIGhhbmRsZXJcblx0XHQgKiBAZGVwcmVjYXRlZCBAcGFyYW0ge2Z1bmN0aW9uPX0gb25Qcm9ncmVzcyBwcm9ncmVzcyBoYW5kbGVyXG5cdFx0ICogQHJldHVybiB7UHJvbWlzZX0gbmV3IHByb21pc2Vcblx0XHQgKi9cblx0XHRQcm9taXNlLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLl9oYW5kbGVyO1xuXHRcdFx0dmFyIHN0YXRlID0gcGFyZW50LmpvaW4oKS5zdGF0ZSgpO1xuXG5cdFx0XHRpZiAoKHR5cGVvZiBvbkZ1bGZpbGxlZCAhPT0gJ2Z1bmN0aW9uJyAmJiBzdGF0ZSA+IDApIHx8XG5cdFx0XHRcdCh0eXBlb2Ygb25SZWplY3RlZCAhPT0gJ2Z1bmN0aW9uJyAmJiBzdGF0ZSA8IDApKSB7XG5cdFx0XHRcdC8vIFNob3J0IGNpcmN1aXQ6IHZhbHVlIHdpbGwgbm90IGNoYW5nZSwgc2ltcGx5IHNoYXJlIGhhbmRsZXJcblx0XHRcdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKEhhbmRsZXIsIHBhcmVudCk7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBwID0gdGhpcy5fYmVnZXQoKTtcblx0XHRcdHZhciBjaGlsZCA9IHAuX2hhbmRsZXI7XG5cblx0XHRcdHBhcmVudC5jaGFpbihjaGlsZCwgcGFyZW50LnJlY2VpdmVyLCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCxcblx0XHRcdFx0XHRhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHZvaWQgMCk7XG5cblx0XHRcdHJldHVybiBwO1xuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBJZiB0aGlzIHByb21pc2UgY2Fubm90IGJlIGZ1bGZpbGxlZCBkdWUgdG8gYW4gZXJyb3IsIGNhbGwgb25SZWplY3RlZCB0b1xuXHRcdCAqIGhhbmRsZSB0aGUgZXJyb3IuIFNob3J0Y3V0IGZvciAudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpXG5cdFx0ICogQHBhcmFtIHtmdW5jdGlvbj99IG9uUmVqZWN0ZWRcblx0XHQgKiBAcmV0dXJuIHtQcm9taXNlfVxuXHRcdCAqL1xuXHRcdFByb21pc2UucHJvdG90eXBlWydjYXRjaCddID0gZnVuY3Rpb24ob25SZWplY3RlZCkge1xuXHRcdFx0cmV0dXJuIHRoaXMudGhlbih2b2lkIDAsIG9uUmVqZWN0ZWQpO1xuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBDcmVhdGVzIGEgbmV3LCBwZW5kaW5nIHByb21pc2Ugb2YgdGhlIHNhbWUgdHlwZSBhcyB0aGlzIHByb21pc2Vcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEByZXR1cm5zIHtQcm9taXNlfVxuXHRcdCAqL1xuXHRcdFByb21pc2UucHJvdG90eXBlLl9iZWdldCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMuX2hhbmRsZXI7XG5cdFx0XHR2YXIgY2hpbGQgPSBuZXcgUGVuZGluZyhwYXJlbnQucmVjZWl2ZXIsIHBhcmVudC5qb2luKCkuY29udGV4dCk7XG5cdFx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoSGFuZGxlciwgY2hpbGQpO1xuXHRcdH07XG5cblx0XHQvLyBBcnJheSBjb21iaW5hdG9yc1xuXG5cdFx0UHJvbWlzZS5hbGwgPSBhbGw7XG5cdFx0UHJvbWlzZS5yYWNlID0gcmFjZTtcblxuXHRcdC8qKlxuXHRcdCAqIFJldHVybiBhIHByb21pc2UgdGhhdCB3aWxsIGZ1bGZpbGwgd2hlbiBhbGwgcHJvbWlzZXMgaW4gdGhlXG5cdFx0ICogaW5wdXQgYXJyYXkgaGF2ZSBmdWxmaWxsZWQsIG9yIHdpbGwgcmVqZWN0IHdoZW4gb25lIG9mIHRoZVxuXHRcdCAqIHByb21pc2VzIHJlamVjdHMuXG5cdFx0ICogQHBhcmFtIHthcnJheX0gcHJvbWlzZXMgYXJyYXkgb2YgcHJvbWlzZXNcblx0XHQgKiBAcmV0dXJucyB7UHJvbWlzZX0gcHJvbWlzZSBmb3IgYXJyYXkgb2YgZnVsZmlsbG1lbnQgdmFsdWVzXG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG5cdFx0XHQvKmpzaGludCBtYXhjb21wbGV4aXR5OjgqL1xuXHRcdFx0dmFyIHJlc29sdmVyID0gbmV3IFBlbmRpbmcoKTtcblx0XHRcdHZhciBwZW5kaW5nID0gcHJvbWlzZXMubGVuZ3RoID4+PiAwO1xuXHRcdFx0dmFyIHJlc3VsdHMgPSBuZXcgQXJyYXkocGVuZGluZyk7XG5cblx0XHRcdHZhciBpLCBoLCB4LCBzO1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IHByb21pc2VzLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdHggPSBwcm9taXNlc1tpXTtcblxuXHRcdFx0XHRpZiAoeCA9PT0gdm9pZCAwICYmICEoaSBpbiBwcm9taXNlcykpIHtcblx0XHRcdFx0XHQtLXBlbmRpbmc7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAobWF5YmVUaGVuYWJsZSh4KSkge1xuXHRcdFx0XHRcdGggPSBnZXRIYW5kbGVyTWF5YmVUaGVuYWJsZSh4KTtcblxuXHRcdFx0XHRcdHMgPSBoLnN0YXRlKCk7XG5cdFx0XHRcdFx0aWYgKHMgPT09IDApIHtcblx0XHRcdFx0XHRcdGguZm9sZChzZXR0bGVBdCwgaSwgcmVzdWx0cywgcmVzb2x2ZXIpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAocyA+IDApIHtcblx0XHRcdFx0XHRcdHJlc3VsdHNbaV0gPSBoLnZhbHVlO1xuXHRcdFx0XHRcdFx0LS1wZW5kaW5nO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR1bnJlcG9ydFJlbWFpbmluZyhwcm9taXNlcywgaSsxLCBoKTtcblx0XHRcdFx0XHRcdHJlc29sdmVyLmJlY29tZShoKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJlc3VsdHNbaV0gPSB4O1xuXHRcdFx0XHRcdC0tcGVuZGluZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZihwZW5kaW5nID09PSAwKSB7XG5cdFx0XHRcdHJlc29sdmVyLmJlY29tZShuZXcgRnVsZmlsbGVkKHJlc3VsdHMpKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKEhhbmRsZXIsIHJlc29sdmVyKTtcblxuXHRcdFx0ZnVuY3Rpb24gc2V0dGxlQXQoaSwgeCwgcmVzb2x2ZXIpIHtcblx0XHRcdFx0Lypqc2hpbnQgdmFsaWR0aGlzOnRydWUqL1xuXHRcdFx0XHR0aGlzW2ldID0geDtcblx0XHRcdFx0aWYoLS1wZW5kaW5nID09PSAwKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZXIuYmVjb21lKG5ldyBGdWxmaWxsZWQodGhpcykpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gdW5yZXBvcnRSZW1haW5pbmcocHJvbWlzZXMsIHN0YXJ0LCByZWplY3RlZEhhbmRsZXIpIHtcblx0XHRcdHZhciBpLCBoLCB4O1xuXHRcdFx0Zm9yKGk9c3RhcnQ7IGk8cHJvbWlzZXMubGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0eCA9IHByb21pc2VzW2ldO1xuXHRcdFx0XHRpZihtYXliZVRoZW5hYmxlKHgpKSB7XG5cdFx0XHRcdFx0aCA9IGdldEhhbmRsZXJNYXliZVRoZW5hYmxlKHgpO1xuXG5cdFx0XHRcdFx0aWYoaCAhPT0gcmVqZWN0ZWRIYW5kbGVyKSB7XG5cdFx0XHRcdFx0XHRoLnZpc2l0KGgsIHZvaWQgMCwgaC5fdW5yZXBvcnQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIEZ1bGZpbGwtcmVqZWN0IGNvbXBldGl0aXZlIHJhY2UuIFJldHVybiBhIHByb21pc2UgdGhhdCB3aWxsIHNldHRsZVxuXHRcdCAqIHRvIHRoZSBzYW1lIHN0YXRlIGFzIHRoZSBlYXJsaWVzdCBpbnB1dCBwcm9taXNlIHRvIHNldHRsZS5cblx0XHQgKlxuXHRcdCAqIFdBUk5JTkc6IFRoZSBFUzYgUHJvbWlzZSBzcGVjIHJlcXVpcmVzIHRoYXQgcmFjZSgpaW5nIGFuIGVtcHR5IGFycmF5XG5cdFx0ICogbXVzdCByZXR1cm4gYSBwcm9taXNlIHRoYXQgaXMgcGVuZGluZyBmb3JldmVyLiAgVGhpcyBpbXBsZW1lbnRhdGlvblxuXHRcdCAqIHJldHVybnMgYSBzaW5nbGV0b24gZm9yZXZlci1wZW5kaW5nIHByb21pc2UsIHRoZSBzYW1lIHNpbmdsZXRvbiB0aGF0IGlzXG5cdFx0ICogcmV0dXJuZWQgYnkgUHJvbWlzZS5uZXZlcigpLCB0aHVzIGNhbiBiZSBjaGVja2VkIHdpdGggPT09XG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge2FycmF5fSBwcm9taXNlcyBhcnJheSBvZiBwcm9taXNlcyB0byByYWNlXG5cdFx0ICogQHJldHVybnMge1Byb21pc2V9IGlmIGlucHV0IGlzIG5vbi1lbXB0eSwgYSBwcm9taXNlIHRoYXQgd2lsbCBzZXR0bGVcblx0XHQgKiB0byB0aGUgc2FtZSBvdXRjb21lIGFzIHRoZSBlYXJsaWVzdCBpbnB1dCBwcm9taXNlIHRvIHNldHRsZS4gaWYgZW1wdHlcblx0XHQgKiBpcyBlbXB0eSwgcmV0dXJucyBhIHByb21pc2UgdGhhdCB3aWxsIG5ldmVyIHNldHRsZS5cblx0XHQgKi9cblx0XHRmdW5jdGlvbiByYWNlKHByb21pc2VzKSB7XG5cdFx0XHQvLyBTaWdoLCByYWNlKFtdKSBpcyB1bnRlc3RhYmxlIHVubGVzcyB3ZSByZXR1cm4gKnNvbWV0aGluZypcblx0XHRcdC8vIHRoYXQgaXMgcmVjb2duaXphYmxlIHdpdGhvdXQgY2FsbGluZyAudGhlbigpIG9uIGl0LlxuXHRcdFx0aWYoT2JqZWN0KHByb21pc2VzKSA9PT0gcHJvbWlzZXMgJiYgcHJvbWlzZXMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdHJldHVybiBuZXZlcigpO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgaCA9IG5ldyBQZW5kaW5nKCk7XG5cdFx0XHR2YXIgaSwgeDtcblx0XHRcdGZvcihpPTA7IGk8cHJvbWlzZXMubGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0eCA9IHByb21pc2VzW2ldO1xuXHRcdFx0XHRpZiAoeCAhPT0gdm9pZCAwICYmIGkgaW4gcHJvbWlzZXMpIHtcblx0XHRcdFx0XHRnZXRIYW5kbGVyKHgpLnZpc2l0KGgsIGgucmVzb2x2ZSwgaC5yZWplY3QpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbmV3IFByb21pc2UoSGFuZGxlciwgaCk7XG5cdFx0fVxuXG5cdFx0Ly8gUHJvbWlzZSBpbnRlcm5hbHNcblx0XHQvLyBCZWxvdyB0aGlzLCBldmVyeXRoaW5nIGlzIEBwcml2YXRlXG5cblx0XHQvKipcblx0XHQgKiBHZXQgYW4gYXBwcm9wcmlhdGUgaGFuZGxlciBmb3IgeCwgd2l0aG91dCBjaGVja2luZyBmb3IgY3ljbGVzXG5cdFx0ICogQHBhcmFtIHsqfSB4XG5cdFx0ICogQHJldHVybnMge29iamVjdH0gaGFuZGxlclxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIGdldEhhbmRsZXIoeCkge1xuXHRcdFx0aWYoaXNQcm9taXNlKHgpKSB7XG5cdFx0XHRcdHJldHVybiB4Ll9oYW5kbGVyLmpvaW4oKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXliZVRoZW5hYmxlKHgpID8gZ2V0SGFuZGxlclVudHJ1c3RlZCh4KSA6IG5ldyBGdWxmaWxsZWQoeCk7XG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogR2V0IGEgaGFuZGxlciBmb3IgdGhlbmFibGUgeC5cblx0XHQgKiBOT1RFOiBZb3UgbXVzdCBvbmx5IGNhbGwgdGhpcyBpZiBtYXliZVRoZW5hYmxlKHgpID09IHRydWVcblx0XHQgKiBAcGFyYW0ge29iamVjdHxmdW5jdGlvbnxQcm9taXNlfSB4XG5cdFx0ICogQHJldHVybnMge29iamVjdH0gaGFuZGxlclxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIGdldEhhbmRsZXJNYXliZVRoZW5hYmxlKHgpIHtcblx0XHRcdHJldHVybiBpc1Byb21pc2UoeCkgPyB4Ll9oYW5kbGVyLmpvaW4oKSA6IGdldEhhbmRsZXJVbnRydXN0ZWQoeCk7XG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogR2V0IGEgaGFuZGxlciBmb3IgcG90ZW50aWFsbHkgdW50cnVzdGVkIHRoZW5hYmxlIHhcblx0XHQgKiBAcGFyYW0geyp9IHhcblx0XHQgKiBAcmV0dXJucyB7b2JqZWN0fSBoYW5kbGVyXG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gZ2V0SGFuZGxlclVudHJ1c3RlZCh4KSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHR2YXIgdW50cnVzdGVkVGhlbiA9IHgudGhlbjtcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiB1bnRydXN0ZWRUaGVuID09PSAnZnVuY3Rpb24nXG5cdFx0XHRcdFx0PyBuZXcgVGhlbmFibGUodW50cnVzdGVkVGhlbiwgeClcblx0XHRcdFx0XHQ6IG5ldyBGdWxmaWxsZWQoeCk7XG5cdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0cmV0dXJuIG5ldyBSZWplY3RlZChlKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBIYW5kbGVyIGZvciBhIHByb21pc2UgdGhhdCBpcyBwZW5kaW5nIGZvcmV2ZXJcblx0XHQgKiBAY29uc3RydWN0b3Jcblx0XHQgKi9cblx0XHRmdW5jdGlvbiBIYW5kbGVyKCkge31cblxuXHRcdEhhbmRsZXIucHJvdG90eXBlLndoZW5cblx0XHRcdD0gSGFuZGxlci5wcm90b3R5cGUuYmVjb21lXG5cdFx0XHQ9IEhhbmRsZXIucHJvdG90eXBlLm5vdGlmeVxuXHRcdFx0PSBIYW5kbGVyLnByb3RvdHlwZS5mYWlsXG5cdFx0XHQ9IEhhbmRsZXIucHJvdG90eXBlLl91bnJlcG9ydFxuXHRcdFx0PSBIYW5kbGVyLnByb3RvdHlwZS5fcmVwb3J0XG5cdFx0XHQ9IG5vb3A7XG5cblx0XHRIYW5kbGVyLnByb3RvdHlwZS5fc3RhdGUgPSAwO1xuXG5cdFx0SGFuZGxlci5wcm90b3R5cGUuc3RhdGUgPSBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLl9zdGF0ZTtcblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmVjdXJzaXZlbHkgY29sbGFwc2UgaGFuZGxlciBjaGFpbiB0byBmaW5kIHRoZSBoYW5kbGVyXG5cdFx0ICogbmVhcmVzdCB0byB0aGUgZnVsbHkgcmVzb2x2ZWQgdmFsdWUuXG5cdFx0ICogQHJldHVybnMge29iamVjdH0gaGFuZGxlciBuZWFyZXN0IHRoZSBmdWxseSByZXNvbHZlZCB2YWx1ZVxuXHRcdCAqL1xuXHRcdEhhbmRsZXIucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBoID0gdGhpcztcblx0XHRcdHdoaWxlKGguaGFuZGxlciAhPT0gdm9pZCAwKSB7XG5cdFx0XHRcdGggPSBoLmhhbmRsZXI7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gaDtcblx0XHR9O1xuXG5cdFx0SGFuZGxlci5wcm90b3R5cGUuY2hhaW4gPSBmdW5jdGlvbih0bywgcmVjZWl2ZXIsIGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIHByb2dyZXNzKSB7XG5cdFx0XHR0aGlzLndoZW4oe1xuXHRcdFx0XHRyZXNvbHZlcjogdG8sXG5cdFx0XHRcdHJlY2VpdmVyOiByZWNlaXZlcixcblx0XHRcdFx0ZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG5cdFx0XHRcdHJlamVjdGVkOiByZWplY3RlZCxcblx0XHRcdFx0cHJvZ3Jlc3M6IHByb2dyZXNzXG5cdFx0XHR9KTtcblx0XHR9O1xuXG5cdFx0SGFuZGxlci5wcm90b3R5cGUudmlzaXQgPSBmdW5jdGlvbihyZWNlaXZlciwgZnVsZmlsbGVkLCByZWplY3RlZCwgcHJvZ3Jlc3MpIHtcblx0XHRcdHRoaXMuY2hhaW4oZmFpbElmUmVqZWN0ZWQsIHJlY2VpdmVyLCBmdWxmaWxsZWQsIHJlamVjdGVkLCBwcm9ncmVzcyk7XG5cdFx0fTtcblxuXHRcdEhhbmRsZXIucHJvdG90eXBlLmZvbGQgPSBmdW5jdGlvbihmLCB6LCBjLCB0bykge1xuXHRcdFx0dGhpcy52aXNpdCh0bywgZnVuY3Rpb24oeCkge1xuXHRcdFx0XHRmLmNhbGwoYywgeiwgeCwgdGhpcyk7XG5cdFx0XHR9LCB0by5yZWplY3QsIHRvLm5vdGlmeSk7XG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIEhhbmRsZXIgdGhhdCBpbnZva2VzIGZhaWwoKSBvbiBhbnkgaGFuZGxlciBpdCBiZWNvbWVzXG5cdFx0ICogQGNvbnN0cnVjdG9yXG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gRmFpbElmUmVqZWN0ZWQoKSB7fVxuXG5cdFx0aW5oZXJpdChIYW5kbGVyLCBGYWlsSWZSZWplY3RlZCk7XG5cblx0XHRGYWlsSWZSZWplY3RlZC5wcm90b3R5cGUuYmVjb21lID0gZnVuY3Rpb24oaCkge1xuXHRcdFx0aC5mYWlsKCk7XG5cdFx0fTtcblxuXHRcdHZhciBmYWlsSWZSZWplY3RlZCA9IG5ldyBGYWlsSWZSZWplY3RlZCgpO1xuXG5cdFx0LyoqXG5cdFx0ICogSGFuZGxlciB0aGF0IG1hbmFnZXMgYSBxdWV1ZSBvZiBjb25zdW1lcnMgd2FpdGluZyBvbiBhIHBlbmRpbmcgcHJvbWlzZVxuXHRcdCAqIEBjb25zdHJ1Y3RvclxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIFBlbmRpbmcocmVjZWl2ZXIsIGluaGVyaXRlZENvbnRleHQpIHtcblx0XHRcdFByb21pc2UuY3JlYXRlQ29udGV4dCh0aGlzLCBpbmhlcml0ZWRDb250ZXh0KTtcblxuXHRcdFx0dGhpcy5jb25zdW1lcnMgPSB2b2lkIDA7XG5cdFx0XHR0aGlzLnJlY2VpdmVyID0gcmVjZWl2ZXI7XG5cdFx0XHR0aGlzLmhhbmRsZXIgPSB2b2lkIDA7XG5cdFx0XHR0aGlzLnJlc29sdmVkID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aW5oZXJpdChIYW5kbGVyLCBQZW5kaW5nKTtcblxuXHRcdFBlbmRpbmcucHJvdG90eXBlLl9zdGF0ZSA9IDA7XG5cblx0XHRQZW5kaW5nLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24oeCkge1xuXHRcdFx0dGhpcy5iZWNvbWUoZ2V0SGFuZGxlcih4KSk7XG5cdFx0fTtcblxuXHRcdFBlbmRpbmcucHJvdG90eXBlLnJlamVjdCA9IGZ1bmN0aW9uKHgpIHtcblx0XHRcdGlmKHRoaXMucmVzb2x2ZWQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmJlY29tZShuZXcgUmVqZWN0ZWQoeCkpO1xuXHRcdH07XG5cblx0XHRQZW5kaW5nLnByb3RvdHlwZS5qb2luID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIXRoaXMucmVzb2x2ZWQpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBoID0gdGhpcztcblxuXHRcdFx0d2hpbGUgKGguaGFuZGxlciAhPT0gdm9pZCAwKSB7XG5cdFx0XHRcdGggPSBoLmhhbmRsZXI7XG5cdFx0XHRcdGlmIChoID09PSB0aGlzKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuaGFuZGxlciA9IGN5Y2xlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGg7XG5cdFx0fTtcblxuXHRcdFBlbmRpbmcucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHEgPSB0aGlzLmNvbnN1bWVycztcblx0XHRcdHZhciBoYW5kbGVyID0gdGhpcy5qb2luKCk7XG5cdFx0XHR0aGlzLmNvbnN1bWVycyA9IHZvaWQgMDtcblxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBxLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdGhhbmRsZXIud2hlbihxW2ldKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0UGVuZGluZy5wcm90b3R5cGUuYmVjb21lID0gZnVuY3Rpb24oaGFuZGxlcikge1xuXHRcdFx0aWYodGhpcy5yZXNvbHZlZCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMucmVzb2x2ZWQgPSB0cnVlO1xuXHRcdFx0dGhpcy5oYW5kbGVyID0gaGFuZGxlcjtcblx0XHRcdGlmKHRoaXMuY29uc3VtZXJzICE9PSB2b2lkIDApIHtcblx0XHRcdFx0dGFza3MuZW5xdWV1ZSh0aGlzKTtcblx0XHRcdH1cblxuXHRcdFx0aWYodGhpcy5jb250ZXh0ICE9PSB2b2lkIDApIHtcblx0XHRcdFx0aGFuZGxlci5fcmVwb3J0KHRoaXMuY29udGV4dCk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdFBlbmRpbmcucHJvdG90eXBlLndoZW4gPSBmdW5jdGlvbihjb250aW51YXRpb24pIHtcblx0XHRcdGlmKHRoaXMucmVzb2x2ZWQpIHtcblx0XHRcdFx0dGFza3MuZW5xdWV1ZShuZXcgQ29udGludWF0aW9uVGFzayhjb250aW51YXRpb24sIHRoaXMuaGFuZGxlcikpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYodGhpcy5jb25zdW1lcnMgPT09IHZvaWQgMCkge1xuXHRcdFx0XHRcdHRoaXMuY29uc3VtZXJzID0gW2NvbnRpbnVhdGlvbl07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5jb25zdW1lcnMucHVzaChjb250aW51YXRpb24pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdFBlbmRpbmcucHJvdG90eXBlLm5vdGlmeSA9IGZ1bmN0aW9uKHgpIHtcblx0XHRcdGlmKCF0aGlzLnJlc29sdmVkKSB7XG5cdFx0XHRcdHRhc2tzLmVucXVldWUobmV3IFByb2dyZXNzVGFzayh4LCB0aGlzKSk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdFBlbmRpbmcucHJvdG90eXBlLmZhaWwgPSBmdW5jdGlvbihjb250ZXh0KSB7XG5cdFx0XHR2YXIgYyA9IHR5cGVvZiBjb250ZXh0ID09PSAndW5kZWZpbmVkJyA/IHRoaXMuY29udGV4dCA6IGNvbnRleHQ7XG5cdFx0XHR0aGlzLnJlc29sdmVkICYmIHRoaXMuaGFuZGxlci5qb2luKCkuZmFpbChjKTtcblx0XHR9O1xuXG5cdFx0UGVuZGluZy5wcm90b3R5cGUuX3JlcG9ydCA9IGZ1bmN0aW9uKGNvbnRleHQpIHtcblx0XHRcdHRoaXMucmVzb2x2ZWQgJiYgdGhpcy5oYW5kbGVyLmpvaW4oKS5fcmVwb3J0KGNvbnRleHQpO1xuXHRcdH07XG5cblx0XHRQZW5kaW5nLnByb3RvdHlwZS5fdW5yZXBvcnQgPSBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMucmVzb2x2ZWQgJiYgdGhpcy5oYW5kbGVyLmpvaW4oKS5fdW5yZXBvcnQoKTtcblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogV3JhcCBhbm90aGVyIGhhbmRsZXIgYW5kIGZvcmNlIGl0IGludG8gYSBmdXR1cmUgc3RhY2tcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gaGFuZGxlclxuXHRcdCAqIEBjb25zdHJ1Y3RvclxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIEFzeW5jKGhhbmRsZXIpIHtcblx0XHRcdHRoaXMuaGFuZGxlciA9IGhhbmRsZXI7XG5cdFx0fVxuXG5cdFx0aW5oZXJpdChIYW5kbGVyLCBBc3luYyk7XG5cblx0XHRBc3luYy5wcm90b3R5cGUud2hlbiA9IGZ1bmN0aW9uKGNvbnRpbnVhdGlvbikge1xuXHRcdFx0dGFza3MuZW5xdWV1ZShuZXcgQ29udGludWF0aW9uVGFzayhjb250aW51YXRpb24sIHRoaXMpKTtcblx0XHR9O1xuXG5cdFx0QXN5bmMucHJvdG90eXBlLl9yZXBvcnQgPSBmdW5jdGlvbihjb250ZXh0KSB7XG5cdFx0XHR0aGlzLmpvaW4oKS5fcmVwb3J0KGNvbnRleHQpO1xuXHRcdH07XG5cblx0XHRBc3luYy5wcm90b3R5cGUuX3VucmVwb3J0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLmpvaW4oKS5fdW5yZXBvcnQoKTtcblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogSGFuZGxlciB0aGF0IHdyYXBzIGFuIHVudHJ1c3RlZCB0aGVuYWJsZSBhbmQgYXNzaW1pbGF0ZXMgaXQgaW4gYSBmdXR1cmUgc3RhY2tcblx0XHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSB0aGVuXG5cdFx0ICogQHBhcmFtIHt7dGhlbjogZnVuY3Rpb259fSB0aGVuYWJsZVxuXHRcdCAqIEBjb25zdHJ1Y3RvclxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIFRoZW5hYmxlKHRoZW4sIHRoZW5hYmxlKSB7XG5cdFx0XHRQZW5kaW5nLmNhbGwodGhpcyk7XG5cdFx0XHR0YXNrcy5lbnF1ZXVlKG5ldyBBc3NpbWlsYXRlVGFzayh0aGVuLCB0aGVuYWJsZSwgdGhpcykpO1xuXHRcdH1cblxuXHRcdGluaGVyaXQoUGVuZGluZywgVGhlbmFibGUpO1xuXG5cdFx0LyoqXG5cdFx0ICogSGFuZGxlciBmb3IgYSBmdWxmaWxsZWQgcHJvbWlzZVxuXHRcdCAqIEBwYXJhbSB7Kn0geCBmdWxmaWxsbWVudCB2YWx1ZVxuXHRcdCAqIEBjb25zdHJ1Y3RvclxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIEZ1bGZpbGxlZCh4KSB7XG5cdFx0XHRQcm9taXNlLmNyZWF0ZUNvbnRleHQodGhpcyk7XG5cdFx0XHR0aGlzLnZhbHVlID0geDtcblx0XHR9XG5cblx0XHRpbmhlcml0KEhhbmRsZXIsIEZ1bGZpbGxlZCk7XG5cblx0XHRGdWxmaWxsZWQucHJvdG90eXBlLl9zdGF0ZSA9IDE7XG5cblx0XHRGdWxmaWxsZWQucHJvdG90eXBlLmZvbGQgPSBmdW5jdGlvbihmLCB6LCBjLCB0bykge1xuXHRcdFx0cnVuQ29udGludWF0aW9uMyhmLCB6LCB0aGlzLCBjLCB0byk7XG5cdFx0fTtcblxuXHRcdEZ1bGZpbGxlZC5wcm90b3R5cGUud2hlbiA9IGZ1bmN0aW9uKGNvbnQpIHtcblx0XHRcdHJ1bkNvbnRpbnVhdGlvbjEoY29udC5mdWxmaWxsZWQsIHRoaXMsIGNvbnQucmVjZWl2ZXIsIGNvbnQucmVzb2x2ZXIpO1xuXHRcdH07XG5cblx0XHR2YXIgZXJyb3JJZCA9IDA7XG5cblx0XHQvKipcblx0XHQgKiBIYW5kbGVyIGZvciBhIHJlamVjdGVkIHByb21pc2Vcblx0XHQgKiBAcGFyYW0geyp9IHggcmVqZWN0aW9uIHJlYXNvblxuXHRcdCAqIEBjb25zdHJ1Y3RvclxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIFJlamVjdGVkKHgpIHtcblx0XHRcdFByb21pc2UuY3JlYXRlQ29udGV4dCh0aGlzKTtcblxuXHRcdFx0dGhpcy5pZCA9ICsrZXJyb3JJZDtcblx0XHRcdHRoaXMudmFsdWUgPSB4O1xuXHRcdFx0dGhpcy5oYW5kbGVkID0gZmFsc2U7XG5cdFx0XHR0aGlzLnJlcG9ydGVkID0gZmFsc2U7XG5cblx0XHRcdHRoaXMuX3JlcG9ydCgpO1xuXHRcdH1cblxuXHRcdGluaGVyaXQoSGFuZGxlciwgUmVqZWN0ZWQpO1xuXG5cdFx0UmVqZWN0ZWQucHJvdG90eXBlLl9zdGF0ZSA9IC0xO1xuXG5cdFx0UmVqZWN0ZWQucHJvdG90eXBlLmZvbGQgPSBmdW5jdGlvbihmLCB6LCBjLCB0bykge1xuXHRcdFx0dG8uYmVjb21lKHRoaXMpO1xuXHRcdH07XG5cblx0XHRSZWplY3RlZC5wcm90b3R5cGUud2hlbiA9IGZ1bmN0aW9uKGNvbnQpIHtcblx0XHRcdGlmKHR5cGVvZiBjb250LnJlamVjdGVkID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdHRoaXMuX3VucmVwb3J0KCk7XG5cdFx0XHR9XG5cdFx0XHRydW5Db250aW51YXRpb24xKGNvbnQucmVqZWN0ZWQsIHRoaXMsIGNvbnQucmVjZWl2ZXIsIGNvbnQucmVzb2x2ZXIpO1xuXHRcdH07XG5cblx0XHRSZWplY3RlZC5wcm90b3R5cGUuX3JlcG9ydCA9IGZ1bmN0aW9uKGNvbnRleHQpIHtcblx0XHRcdHRhc2tzLmFmdGVyUXVldWUobmV3IFJlcG9ydFRhc2sodGhpcywgY29udGV4dCkpO1xuXHRcdH07XG5cblx0XHRSZWplY3RlZC5wcm90b3R5cGUuX3VucmVwb3J0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLmhhbmRsZWQgPSB0cnVlO1xuXHRcdFx0dGFza3MuYWZ0ZXJRdWV1ZShuZXcgVW5yZXBvcnRUYXNrKHRoaXMpKTtcblx0XHR9O1xuXG5cdFx0UmVqZWN0ZWQucHJvdG90eXBlLmZhaWwgPSBmdW5jdGlvbihjb250ZXh0KSB7XG5cdFx0XHRQcm9taXNlLm9uRmF0YWxSZWplY3Rpb24odGhpcywgY29udGV4dCA9PT0gdm9pZCAwID8gdGhpcy5jb250ZXh0IDogY29udGV4dCk7XG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIFJlcG9ydFRhc2socmVqZWN0aW9uLCBjb250ZXh0KSB7XG5cdFx0XHR0aGlzLnJlamVjdGlvbiA9IHJlamVjdGlvbjtcblx0XHRcdHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG5cdFx0fVxuXG5cdFx0UmVwb3J0VGFzay5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZighdGhpcy5yZWplY3Rpb24uaGFuZGxlZCkge1xuXHRcdFx0XHR0aGlzLnJlamVjdGlvbi5yZXBvcnRlZCA9IHRydWU7XG5cdFx0XHRcdFByb21pc2Uub25Qb3RlbnRpYWxseVVuaGFuZGxlZFJlamVjdGlvbih0aGlzLnJlamVjdGlvbiwgdGhpcy5jb250ZXh0KTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gVW5yZXBvcnRUYXNrKHJlamVjdGlvbikge1xuXHRcdFx0dGhpcy5yZWplY3Rpb24gPSByZWplY3Rpb247XG5cdFx0fVxuXG5cdFx0VW5yZXBvcnRUYXNrLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmKHRoaXMucmVqZWN0aW9uLnJlcG9ydGVkKSB7XG5cdFx0XHRcdFByb21pc2Uub25Qb3RlbnRpYWxseVVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZWQodGhpcy5yZWplY3Rpb24pO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHQvLyBVbmhhbmRsZWQgcmVqZWN0aW9uIGhvb2tzXG5cdFx0Ly8gQnkgZGVmYXVsdCwgZXZlcnl0aGluZyBpcyBhIG5vb3BcblxuXHRcdC8vIFRPRE86IEJldHRlciBuYW1lczogXCJhbm5vdGF0ZVwiP1xuXHRcdFByb21pc2UuY3JlYXRlQ29udGV4dFxuXHRcdFx0PSBQcm9taXNlLmVudGVyQ29udGV4dFxuXHRcdFx0PSBQcm9taXNlLmV4aXRDb250ZXh0XG5cdFx0XHQ9IFByb21pc2Uub25Qb3RlbnRpYWxseVVuaGFuZGxlZFJlamVjdGlvblxuXHRcdFx0PSBQcm9taXNlLm9uUG90ZW50aWFsbHlVbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVkXG5cdFx0XHQ9IFByb21pc2Uub25GYXRhbFJlamVjdGlvblxuXHRcdFx0PSBub29wO1xuXG5cdFx0Ly8gRXJyb3JzIGFuZCBzaW5nbGV0b25zXG5cblx0XHR2YXIgZm9yZXZlclBlbmRpbmdIYW5kbGVyID0gbmV3IEhhbmRsZXIoKTtcblx0XHR2YXIgZm9yZXZlclBlbmRpbmdQcm9taXNlID0gbmV3IFByb21pc2UoSGFuZGxlciwgZm9yZXZlclBlbmRpbmdIYW5kbGVyKTtcblxuXHRcdGZ1bmN0aW9uIGN5Y2xlKCkge1xuXHRcdFx0cmV0dXJuIG5ldyBSZWplY3RlZChuZXcgVHlwZUVycm9yKCdQcm9taXNlIGN5Y2xlJykpO1xuXHRcdH1cblxuXHRcdC8vIFRhc2sgcnVubmVyc1xuXG5cdFx0LyoqXG5cdFx0ICogUnVuIGEgc2luZ2xlIGNvbnN1bWVyXG5cdFx0ICogQGNvbnN0cnVjdG9yXG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gQ29udGludWF0aW9uVGFzayhjb250aW51YXRpb24sIGhhbmRsZXIpIHtcblx0XHRcdHRoaXMuY29udGludWF0aW9uID0gY29udGludWF0aW9uO1xuXHRcdFx0dGhpcy5oYW5kbGVyID0gaGFuZGxlcjtcblx0XHR9XG5cblx0XHRDb250aW51YXRpb25UYXNrLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuaGFuZGxlci5qb2luKCkud2hlbih0aGlzLmNvbnRpbnVhdGlvbik7XG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIFJ1biBhIHF1ZXVlIG9mIHByb2dyZXNzIGhhbmRsZXJzXG5cdFx0ICogQGNvbnN0cnVjdG9yXG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gUHJvZ3Jlc3NUYXNrKHZhbHVlLCBoYW5kbGVyKSB7XG5cdFx0XHR0aGlzLmhhbmRsZXIgPSBoYW5kbGVyO1xuXHRcdFx0dGhpcy52YWx1ZSA9IHZhbHVlO1xuXHRcdH1cblxuXHRcdFByb2dyZXNzVGFzay5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgcSA9IHRoaXMuaGFuZGxlci5jb25zdW1lcnM7XG5cdFx0XHRpZihxID09PSB2b2lkIDApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKHZhciBjLCBpID0gMDsgaSA8IHEubGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0YyA9IHFbaV07XG5cdFx0XHRcdHJ1bk5vdGlmeShjLnByb2dyZXNzLCB0aGlzLnZhbHVlLCB0aGlzLmhhbmRsZXIsIGMucmVjZWl2ZXIsIGMucmVzb2x2ZXIpO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBBc3NpbWlsYXRlIGEgdGhlbmFibGUsIHNlbmRpbmcgaXQncyB2YWx1ZSB0byByZXNvbHZlclxuXHRcdCAqIEBwYXJhbSB7ZnVuY3Rpb259IHRoZW5cblx0XHQgKiBAcGFyYW0ge29iamVjdHxmdW5jdGlvbn0gdGhlbmFibGVcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gcmVzb2x2ZXJcblx0XHQgKiBAY29uc3RydWN0b3Jcblx0XHQgKi9cblx0XHRmdW5jdGlvbiBBc3NpbWlsYXRlVGFzayh0aGVuLCB0aGVuYWJsZSwgcmVzb2x2ZXIpIHtcblx0XHRcdHRoaXMuX3RoZW4gPSB0aGVuO1xuXHRcdFx0dGhpcy50aGVuYWJsZSA9IHRoZW5hYmxlO1xuXHRcdFx0dGhpcy5yZXNvbHZlciA9IHJlc29sdmVyO1xuXHRcdH1cblxuXHRcdEFzc2ltaWxhdGVUYXNrLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBoID0gdGhpcy5yZXNvbHZlcjtcblx0XHRcdHRyeUFzc2ltaWxhdGUodGhpcy5fdGhlbiwgdGhpcy50aGVuYWJsZSwgX3Jlc29sdmUsIF9yZWplY3QsIF9ub3RpZnkpO1xuXG5cdFx0XHRmdW5jdGlvbiBfcmVzb2x2ZSh4KSB7IGgucmVzb2x2ZSh4KTsgfVxuXHRcdFx0ZnVuY3Rpb24gX3JlamVjdCh4KSAgeyBoLnJlamVjdCh4KTsgfVxuXHRcdFx0ZnVuY3Rpb24gX25vdGlmeSh4KSAgeyBoLm5vdGlmeSh4KTsgfVxuXHRcdH07XG5cblx0XHRmdW5jdGlvbiB0cnlBc3NpbWlsYXRlKHRoZW4sIHRoZW5hYmxlLCByZXNvbHZlLCByZWplY3QsIG5vdGlmeSkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dGhlbi5jYWxsKHRoZW5hYmxlLCByZXNvbHZlLCByZWplY3QsIG5vdGlmeSk7XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdHJlamVjdChlKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPdGhlciBoZWxwZXJzXG5cblx0XHQvKipcblx0XHQgKiBAcGFyYW0geyp9IHhcblx0XHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZmYgeCBpcyBhIHRydXN0ZWQgUHJvbWlzZVxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIGlzUHJvbWlzZSh4KSB7XG5cdFx0XHRyZXR1cm4geCBpbnN0YW5jZW9mIFByb21pc2U7XG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogVGVzdCBqdXN0IGVub3VnaCB0byBydWxlIG91dCBwcmltaXRpdmVzLCBpbiBvcmRlciB0byB0YWtlIGZhc3RlclxuXHRcdCAqIHBhdGhzIGluIHNvbWUgY29kZVxuXHRcdCAqIEBwYXJhbSB7Kn0geFxuXHRcdCAqIEByZXR1cm5zIHtib29sZWFufSBmYWxzZSBpZmYgeCBpcyBndWFyYW50ZWVkICpub3QqIHRvIGJlIGEgdGhlbmFibGVcblx0XHQgKi9cblx0XHRmdW5jdGlvbiBtYXliZVRoZW5hYmxlKHgpIHtcblx0XHRcdHJldHVybiAodHlwZW9mIHggPT09ICdvYmplY3QnIHx8IHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nKSAmJiB4ICE9PSBudWxsO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHJ1bkNvbnRpbnVhdGlvbjEoZiwgaCwgcmVjZWl2ZXIsIG5leHQpIHtcblx0XHRcdGlmKHR5cGVvZiBmICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdHJldHVybiBuZXh0LmJlY29tZShoKTtcblx0XHRcdH1cblxuXHRcdFx0UHJvbWlzZS5lbnRlckNvbnRleHQoaCk7XG5cdFx0XHR0cnlDYXRjaFJlamVjdChmLCBoLnZhbHVlLCByZWNlaXZlciwgbmV4dCk7XG5cdFx0XHRQcm9taXNlLmV4aXRDb250ZXh0KCk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gcnVuQ29udGludWF0aW9uMyhmLCB4LCBoLCByZWNlaXZlciwgbmV4dCkge1xuXHRcdFx0aWYodHlwZW9mIGYgIT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0cmV0dXJuIG5leHQuYmVjb21lKGgpO1xuXHRcdFx0fVxuXG5cdFx0XHRQcm9taXNlLmVudGVyQ29udGV4dChoKTtcblx0XHRcdHRyeUNhdGNoUmVqZWN0MyhmLCB4LCBoLnZhbHVlLCByZWNlaXZlciwgbmV4dCk7XG5cdFx0XHRQcm9taXNlLmV4aXRDb250ZXh0KCk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gcnVuTm90aWZ5KGYsIHgsIGgsIHJlY2VpdmVyLCBuZXh0KSB7XG5cdFx0XHRpZih0eXBlb2YgZiAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRyZXR1cm4gbmV4dC5ub3RpZnkoeCk7XG5cdFx0XHR9XG5cblx0XHRcdFByb21pc2UuZW50ZXJDb250ZXh0KGgpO1xuXHRcdFx0dHJ5Q2F0Y2hSZXR1cm4oZiwgeCwgcmVjZWl2ZXIsIG5leHQpO1xuXHRcdFx0UHJvbWlzZS5leGl0Q29udGV4dCgpO1xuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIFJldHVybiBmLmNhbGwodGhpc0FyZywgeCksIG9yIGlmIGl0IHRocm93cyByZXR1cm4gYSByZWplY3RlZCBwcm9taXNlIGZvclxuXHRcdCAqIHRoZSB0aHJvd24gZXhjZXB0aW9uXG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gdHJ5Q2F0Y2hSZWplY3QoZiwgeCwgdGhpc0FyZywgbmV4dCkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0bmV4dC5iZWNvbWUoZ2V0SGFuZGxlcihmLmNhbGwodGhpc0FyZywgeCkpKTtcblx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRuZXh0LmJlY29tZShuZXcgUmVqZWN0ZWQoZSkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIFNhbWUgYXMgYWJvdmUsIGJ1dCBpbmNsdWRlcyB0aGUgZXh0cmEgYXJndW1lbnQgcGFyYW1ldGVyLlxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIHRyeUNhdGNoUmVqZWN0MyhmLCB4LCB5LCB0aGlzQXJnLCBuZXh0KSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRmLmNhbGwodGhpc0FyZywgeCwgeSwgbmV4dCk7XG5cdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0bmV4dC5iZWNvbWUobmV3IFJlamVjdGVkKGUpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm4gZi5jYWxsKHRoaXNBcmcsIHgpLCBvciBpZiBpdCB0aHJvd3MsICpyZXR1cm4qIHRoZSBleGNlcHRpb25cblx0XHQgKi9cblx0XHRmdW5jdGlvbiB0cnlDYXRjaFJldHVybihmLCB4LCB0aGlzQXJnLCBuZXh0KSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRuZXh0Lm5vdGlmeShmLmNhbGwodGhpc0FyZywgeCkpO1xuXHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdG5leHQubm90aWZ5KGUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGluaGVyaXQoUGFyZW50LCBDaGlsZCkge1xuXHRcdFx0Q2hpbGQucHJvdG90eXBlID0gb2JqZWN0Q3JlYXRlKFBhcmVudC5wcm90b3R5cGUpO1xuXHRcdFx0Q2hpbGQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ2hpbGQ7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gbm9vcCgpIHt9XG5cblx0XHRyZXR1cm4gUHJvbWlzZTtcblx0fTtcbn0pO1xufSh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUgOiBmdW5jdGlvbihmYWN0b3J5KSB7IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpOyB9KSk7XG5cbn0se31dLDY1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgXyA9IHJlcXVpcmUoXCJ1bmRlcnNjb3JlXCIpLFxuICAgIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpLFxuICAgIElucHV0ID0gcmVxdWlyZShcInJlYWN0LWlucHV0LWF1dG9zaXplXCIpLFxuICAgIGNsYXNzZXMgPSByZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSxcbiAgICBWYWx1ZSA9IHJlcXVpcmUoXCIuL1ZhbHVlXCIpO1xuXG52YXIgcmVxdWVzdElkID0gMDtcblxudmFyIFNlbGVjdCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblxuICBkaXNwbGF5TmFtZTogXCJTZWxlY3RcIixcblxuICBwcm9wVHlwZXM6IHtcbiAgICB2YWx1ZTogUmVhY3QuUHJvcFR5cGVzLmFueSwgLy8gaW5pdGlhbCBmaWVsZCB2YWx1ZVxuICAgIG11bHRpOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCwgLy8gbXVsdGktdmFsdWUgaW5wdXRcbiAgICBvcHRpb25zOiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXksIC8vIGFycmF5IG9mIG9wdGlvbnNcbiAgICBkZWxpbWl0ZXI6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsIC8vIGRlbGltaXRlciB0byB1c2UgdG8gam9pbiBtdWx0aXBsZSB2YWx1ZXNcbiAgICBhc3luY09wdGlvbnM6IFJlYWN0LlByb3BUeXBlcy5mdW5jLCAvLyBmdW5jdGlvbiB0byBjYWxsIHRvIGdldCBvcHRpb25zXG4gICAgYXV0b2xvYWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sLCAvLyB3aGV0aGVyIHRvIGF1dG8tbG9hZCB0aGUgZGVmYXVsdCBhc3luYyBvcHRpb25zIHNldFxuICAgIHBsYWNlaG9sZGVyOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLCAvLyBmaWVsZCBwbGFjZWhvbGRlciwgZGlzcGxheWVkIHdoZW4gdGhlcmUncyBubyB2YWx1ZVxuICAgIG5vUmVzdWx0c1RleHQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsIC8vIHBsYWNlaG9sZGVyIGRpc3BsYXllZCB3aGVuIHRoZXJlIGFyZSBubyBtYXRjaGluZyBzZWFyY2ggcmVzdWx0c1xuICAgIGNsZWFyYWJsZTogUmVhY3QuUHJvcFR5cGVzLmJvb2wsIC8vIHNob3VsZCBpdCBiZSBwb3NzaWJsZSB0byByZXNldCB2YWx1ZVxuICAgIGNsZWFyVmFsdWVUZXh0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLCAvLyB0aXRsZSBmb3IgdGhlIFwiY2xlYXJcIiBjb250cm9sXG4gICAgY2xlYXJBbGxUZXh0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLCAvLyB0aXRsZSBmb3IgdGhlIFwiY2xlYXJcIiBjb250cm9sIHdoZW4gbXVsdGk6IHRydWVcbiAgICBzZWFyY2hQcm9tcHRUZXh0OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLCAvLyBsYWJlbCB0byBwcm9tcHQgZm9yIHNlYXJjaCBpbnB1dFxuICAgIG5hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsIC8vIGZpZWxkIG5hbWUsIGZvciBoaWRkZW4gPGlucHV0IC8+IHRhZ1xuICAgIG9uQ2hhbmdlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYywgLy8gb25DaGFuZ2UgaGFuZGxlcjogZnVuY3Rpb24obmV3VmFsdWUpIHt9XG4gICAgY2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLCAvLyBjbGFzc05hbWUgZm9yIHRoZSBvdXRlciBlbGVtZW50XG4gICAgZmlsdGVyT3B0aW9uOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYywgLy8gbWV0aG9kIHRvIGZpbHRlciBhIHNpbmdsZSBvcHRpb246IGZ1bmN0aW9uKG9wdGlvbiwgZmlsdGVyU3RyaW5nKVxuICAgIGZpbHRlck9wdGlvbnM6IFJlYWN0LlByb3BUeXBlcy5mdW5jLCAvLyBtZXRob2QgdG8gZmlsdGVyIHRoZSBvcHRpb25zIGFycmF5OiBmdW5jdGlvbihbb3B0aW9uc10sIGZpbHRlclN0cmluZywgW3ZhbHVlc10pXG4gICAgbWF0Y2hQb3M6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsIC8vIChhbnl8c3RhcnQpIG1hdGNoIHRoZSBzdGFydCBvciBlbnRpcmUgc3RyaW5nIHdoZW4gZmlsdGVyaW5nXG4gICAgbWF0Y2hQcm9wOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nIC8vIChhbnl8bGFiZWx8dmFsdWUpIHdoaWNoIG9wdGlvbiBwcm9wZXJ0eSB0byBmaWx0ZXIgb25cbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgIG9wdGlvbnM6IFtdLFxuICAgICAgZGVsaW1pdGVyOiBcIixcIixcbiAgICAgIGFzeW5jT3B0aW9uczogdW5kZWZpbmVkLFxuICAgICAgYXV0b2xvYWQ6IHRydWUsXG4gICAgICBwbGFjZWhvbGRlcjogXCJTZWxlY3QuLi5cIixcbiAgICAgIG5vUmVzdWx0c1RleHQ6IFwiTm8gcmVzdWx0cyBmb3VuZFwiLFxuICAgICAgY2xlYXJhYmxlOiB0cnVlLFxuICAgICAgY2xlYXJWYWx1ZVRleHQ6IFwiQ2xlYXIgdmFsdWVcIixcbiAgICAgIGNsZWFyQWxsVGV4dDogXCJDbGVhciBhbGxcIixcbiAgICAgIHNlYXJjaFByb21wdFRleHQ6IFwiVHlwZSB0byBzZWFyY2hcIixcbiAgICAgIG5hbWU6IHVuZGVmaW5lZCxcbiAgICAgIG9uQ2hhbmdlOiB1bmRlZmluZWQsXG4gICAgICBjbGFzc05hbWU6IHVuZGVmaW5lZCxcbiAgICAgIG1hdGNoUG9zOiBcImFueVwiLFxuICAgICAgbWF0Y2hQcm9wOiBcImFueVwiXG4gICAgfTtcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLypcbiAgICAgICAqIHNldCBieSBnZXRTdGF0ZUZyb21WYWx1ZSBvbiBjb21wb25lbnRXaWxsTW91bnQ6XG4gICAgICAgKiAtIHZhbHVlXG4gICAgICAgKiAtIHZhbHVlc1xuICAgICAgICogLSBmaWx0ZXJlZE9wdGlvbnNcbiAgICAgICAqIC0gaW5wdXRWYWx1ZVxuICAgICAgICogLSBwbGFjZWhvbGRlclxuICAgICAgICogLSBmb2N1c2VkT3B0aW9uXG4gICAgICAqL1xuICAgICAgb3B0aW9uczogdGhpcy5wcm9wcy5vcHRpb25zLFxuICAgICAgaXNGb2N1c2VkOiBmYWxzZSxcbiAgICAgIGlzT3BlbjogZmFsc2UsXG4gICAgICBpc0xvYWRpbmc6IGZhbHNlXG4gICAgfTtcbiAgfSxcblxuICBjb21wb25lbnRXaWxsTW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9vcHRpb25zQ2FjaGUgPSB7fTtcbiAgICB0aGlzLl9vcHRpb25zRmlsdGVyU3RyaW5nID0gXCJcIjtcbiAgICB0aGlzLnNldFN0YXRlKHRoaXMuZ2V0U3RhdGVGcm9tVmFsdWUodGhpcy5wcm9wcy52YWx1ZSkpO1xuXG4gICAgaWYgKHRoaXMucHJvcHMuYXN5bmNPcHRpb25zICYmIHRoaXMucHJvcHMuYXV0b2xvYWQpIHtcbiAgICAgIHRoaXMuYXV0b2xvYWRBc3luY09wdGlvbnMoKTtcbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5fYmx1clRpbWVvdXQpO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLl9mb2N1c1RpbWVvdXQpO1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uIChuZXdQcm9wcykge1xuICAgIGlmIChuZXdQcm9wcy52YWx1ZSAhPT0gdGhpcy5zdGF0ZS52YWx1ZSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh0aGlzLmdldFN0YXRlRnJvbVZhbHVlKG5ld1Byb3BzLnZhbHVlLCBuZXdQcm9wcy5vcHRpb25zKSk7XG4gICAgfVxuICAgIGlmIChKU09OLnN0cmluZ2lmeShuZXdQcm9wcy5vcHRpb25zKSAhPT0gSlNPTi5zdHJpbmdpZnkodGhpcy5wcm9wcy5vcHRpb25zKSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIG9wdGlvbnM6IG5ld1Byb3BzLm9wdGlvbnMsXG4gICAgICAgIGZpbHRlcmVkT3B0aW9uczogdGhpcy5maWx0ZXJPcHRpb25zKG5ld1Byb3BzLm9wdGlvbnMpXG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX2ZvY3VzQWZ0ZXJVcGRhdGUpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9ibHVyVGltZW91dCk7XG4gICAgICB0aGlzLl9mb2N1c1RpbWVvdXQgPSBzZXRUaW1lb3V0KChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucmVmcy5pbnB1dC5mb2N1cygpO1xuICAgICAgICB0aGlzLl9mb2N1c0FmdGVyVXBkYXRlID0gZmFsc2U7XG4gICAgICB9KS5iaW5kKHRoaXMpLCA1MCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2ZvY3VzZWRPcHRpb25SZXZlYWwpIHtcbiAgICAgIGlmICh0aGlzLnJlZnMuZm9jdXNlZCAmJiB0aGlzLnJlZnMubWVudSkge1xuICAgICAgICB2YXIgZm9jdXNlZERPTSA9IHRoaXMucmVmcy5mb2N1c2VkLmdldERPTU5vZGUoKTtcbiAgICAgICAgdmFyIG1lbnVET00gPSB0aGlzLnJlZnMubWVudS5nZXRET01Ob2RlKCk7XG4gICAgICAgIHZhciBmb2N1c2VkUmVjdCA9IGZvY3VzZWRET00uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHZhciBtZW51UmVjdCA9IG1lbnVET00uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgaWYgKGZvY3VzZWRSZWN0LmJvdHRvbSA+IG1lbnVSZWN0LmJvdHRvbSB8fCBmb2N1c2VkUmVjdC50b3AgPCBtZW51UmVjdC50b3ApIHtcbiAgICAgICAgICBtZW51RE9NLnNjcm9sbFRvcCA9IGZvY3VzZWRET00ub2Zmc2V0VG9wICsgZm9jdXNlZERPTS5jbGllbnRIZWlnaHQgLSBtZW51RE9NLm9mZnNldEhlaWdodDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9mb2N1c2VkT3B0aW9uUmV2ZWFsID0gZmFsc2U7XG4gICAgfVxuICB9LFxuXG4gIGdldFN0YXRlRnJvbVZhbHVlOiBmdW5jdGlvbiAodmFsdWUsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSB0aGlzLnN0YXRlLm9wdGlvbnM7XG4gICAgfVxuXG4gICAgLy8gcmVzZXQgaW50ZXJuYWwgZmlsdGVyIHN0cmluZ1xuICAgIHRoaXMuX29wdGlvbnNGaWx0ZXJTdHJpbmcgPSBcIlwiO1xuXG4gICAgdmFyIHZhbHVlcyA9IHRoaXMuaW5pdFZhbHVlc0FycmF5KHZhbHVlLCBvcHRpb25zKSxcbiAgICAgICAgZmlsdGVyZWRPcHRpb25zID0gdGhpcy5maWx0ZXJPcHRpb25zKG9wdGlvbnMsIHZhbHVlcyk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlcy5tYXAoZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgcmV0dXJuIHYudmFsdWU7XG4gICAgICB9KS5qb2luKHRoaXMucHJvcHMuZGVsaW1pdGVyKSxcbiAgICAgIHZhbHVlczogdmFsdWVzLFxuICAgICAgaW5wdXRWYWx1ZTogXCJcIixcbiAgICAgIGZpbHRlcmVkT3B0aW9uczogZmlsdGVyZWRPcHRpb25zLFxuICAgICAgcGxhY2Vob2xkZXI6ICF0aGlzLnByb3BzLm11bHRpICYmIHZhbHVlcy5sZW5ndGggPyB2YWx1ZXNbMF0ubGFiZWwgOiB0aGlzLnByb3BzLnBsYWNlaG9sZGVyLFxuICAgICAgZm9jdXNlZE9wdGlvbjogIXRoaXMucHJvcHMubXVsdGkgJiYgdmFsdWVzLmxlbmd0aCA/IHZhbHVlc1swXSA6IGZpbHRlcmVkT3B0aW9uc1swXVxuICAgIH07XG4gIH0sXG5cbiAgaW5pdFZhbHVlc0FycmF5OiBmdW5jdGlvbiAodmFsdWVzLCBvcHRpb25zKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlcykpIHtcbiAgICAgIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgdmFsdWVzKSB7XG4gICAgICAgIHZhbHVlcyA9IHZhbHVlcy5zcGxpdCh0aGlzLnByb3BzLmRlbGltaXRlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZXMgPSB2YWx1ZXMgPyBbdmFsdWVzXSA6IFtdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZXMubWFwKChmdW5jdGlvbiAodmFsKSB7XG4gICAgICByZXR1cm4gXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHZhbCA/IHZhbCA9IF8uZmluZFdoZXJlKG9wdGlvbnMsIHsgdmFsdWU6IHZhbCB9KSB8fCB7IHZhbHVlOiB2YWwsIGxhYmVsOiB2YWwgfSA6IHZhbDtcbiAgICB9KS5iaW5kKHRoaXMpKTtcbiAgfSxcblxuICBzZXRWYWx1ZTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdGhpcy5fZm9jdXNBZnRlclVwZGF0ZSA9IHRydWU7XG4gICAgdmFyIG5ld1N0YXRlID0gdGhpcy5nZXRTdGF0ZUZyb21WYWx1ZSh2YWx1ZSk7XG4gICAgbmV3U3RhdGUuaXNPcGVuID0gZmFsc2U7XG4gICAgdGhpcy5maXJlQ2hhbmdlRXZlbnQobmV3U3RhdGUpO1xuICAgIHRoaXMuc2V0U3RhdGUobmV3U3RhdGUpO1xuICB9LFxuXG4gIHNlbGVjdFZhbHVlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMubXVsdGkpIHtcbiAgICAgIHRoaXMuc2V0VmFsdWUodmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMuYWRkVmFsdWUodmFsdWUpO1xuICAgIH1cbiAgfSxcblxuICBhZGRWYWx1ZTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRWYWx1ZSh0aGlzLnN0YXRlLnZhbHVlcy5jb25jYXQodmFsdWUpKTtcbiAgfSxcblxuICBwb3BWYWx1ZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuc2V0VmFsdWUoXy5pbml0aWFsKHRoaXMuc3RhdGUudmFsdWVzKSk7XG4gIH0sXG5cbiAgcmVtb3ZlVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuc2V0VmFsdWUoXy53aXRob3V0KHRoaXMuc3RhdGUudmFsdWVzLCB2YWx1ZSkpO1xuICB9LFxuXG4gIGNsZWFyVmFsdWU6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIGlmIHRoZSBldmVudCB3YXMgdHJpZ2dlcmVkIGJ5IGEgbW91c2Vkb3duIGFuZCBub3QgdGhlIHByaW1hcnlcbiAgICAvLyBidXR0b24sIGlnbm9yZSBpdC5cbiAgICBpZiAoZXZlbnQgJiYgZXZlbnQudHlwZSA9PSBcIm1vdXNlZG93blwiICYmIGV2ZW50LmJ1dHRvbiAhPT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnNldFZhbHVlKG51bGwpO1xuICB9LFxuXG4gIHJlc2V0VmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnNldFZhbHVlKHRoaXMuc3RhdGUudmFsdWUpO1xuICB9LFxuXG4gIGZpcmVDaGFuZ2VFdmVudDogZnVuY3Rpb24gKG5ld1N0YXRlKSB7XG4gICAgaWYgKG5ld1N0YXRlLnZhbHVlICE9PSB0aGlzLnN0YXRlLnZhbHVlICYmIHRoaXMucHJvcHMub25DaGFuZ2UpIHtcbiAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UobmV3U3RhdGUudmFsdWUsIG5ld1N0YXRlLnZhbHVlcyk7XG4gICAgfVxuICB9LFxuXG4gIGhhbmRsZU1vdXNlRG93bjogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgLy8gaWYgdGhlIGV2ZW50IHdhcyB0cmlnZ2VyZWQgYnkgYSBtb3VzZWRvd24gYW5kIG5vdCB0aGUgcHJpbWFyeVxuICAgIC8vIGJ1dHRvbiwgaWdub3JlIGl0LlxuICAgIGlmIChldmVudC50eXBlID09IFwibW91c2Vkb3duXCIgJiYgZXZlbnQuYnV0dG9uICE9PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHRoaXMuc3RhdGUuaXNGb2N1c2VkKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaXNPcGVuOiB0cnVlXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fb3BlbkFmdGVyRm9jdXMgPSB0cnVlO1xuICAgICAgdGhpcy5yZWZzLmlucHV0LmZvY3VzKCk7XG4gICAgfVxuICB9LFxuXG4gIGhhbmRsZUlucHV0Rm9jdXM6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzRm9jdXNlZDogdHJ1ZSxcbiAgICAgIGlzT3BlbjogdGhpcy5zdGF0ZS5pc09wZW4gfHwgdGhpcy5fb3BlbkFmdGVyRm9jdXNcbiAgICB9KTtcbiAgICB0aGlzLl9vcGVuQWZ0ZXJGb2N1cyA9IGZhbHNlO1xuICB9LFxuXG4gIGhhbmRsZUlucHV0Qmx1cjogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdGhpcy5fYmx1clRpbWVvdXQgPSBzZXRUaW1lb3V0KChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGhpcy5fZm9jdXNBZnRlclVwZGF0ZSkgcmV0dXJuO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGlzT3BlbjogZmFsc2UsXG4gICAgICAgIGlzRm9jdXNlZDogZmFsc2VcbiAgICAgIH0pO1xuICAgIH0pLmJpbmQodGhpcyksIDUwKTtcbiAgfSxcblxuICBoYW5kbGVLZXlEb3duOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcblxuICAgICAgY2FzZSA4OlxuICAgICAgICAvLyBiYWNrc3BhY2VcbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmlucHV0VmFsdWUpIHtcbiAgICAgICAgICB0aGlzLnBvcFZhbHVlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5OlxuICAgICAgICAvLyB0YWJcbiAgICAgICAgaWYgKGV2ZW50LnNoaWZ0S2V5IHx8ICF0aGlzLnN0YXRlLmlzT3BlbiB8fCAhdGhpcy5zdGF0ZS5mb2N1c2VkT3B0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2VsZWN0Rm9jdXNlZE9wdGlvbigpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAxMzpcbiAgICAgICAgLy8gZW50ZXJcbiAgICAgICAgdGhpcy5zZWxlY3RGb2N1c2VkT3B0aW9uKCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDI3OlxuICAgICAgICAvLyBlc2NhcGVcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuaXNPcGVuKSB7XG4gICAgICAgICAgdGhpcy5yZXNldFZhbHVlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5jbGVhclZhbHVlKCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgMzg6XG4gICAgICAgIC8vIHVwXG4gICAgICAgIHRoaXMuZm9jdXNQcmV2aW91c09wdGlvbigpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA0MDpcbiAgICAgICAgLy8gZG93blxuICAgICAgICB0aGlzLmZvY3VzTmV4dE9wdGlvbigpO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH0sXG5cbiAgaGFuZGxlSW5wdXRDaGFuZ2U6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIGFzc2lnbiBhbiBpbnRlcm5hbCB2YXJpYWJsZSBiZWNhdXNlIHdlIG5lZWQgdG8gdXNlXG4gICAgLy8gdGhlIGxhdGVzdCB2YWx1ZSBiZWZvcmUgc2V0U3RhdGUoKSBoYXMgY29tcGxldGVkLlxuICAgIHRoaXMuX29wdGlvbnNGaWx0ZXJTdHJpbmcgPSBldmVudC50YXJnZXQudmFsdWU7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5hc3luY09wdGlvbnMpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpc0xvYWRpbmc6IHRydWUsXG4gICAgICAgIGlucHV0VmFsdWU6IGV2ZW50LnRhcmdldC52YWx1ZVxuICAgICAgfSk7XG4gICAgICB0aGlzLmxvYWRBc3luY09wdGlvbnMoZXZlbnQudGFyZ2V0LnZhbHVlLCB7XG4gICAgICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgICAgIGlzT3BlbjogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBmaWx0ZXJlZE9wdGlvbnMgPSB0aGlzLmZpbHRlck9wdGlvbnModGhpcy5zdGF0ZS5vcHRpb25zKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpc09wZW46IHRydWUsXG4gICAgICAgIGlucHV0VmFsdWU6IGV2ZW50LnRhcmdldC52YWx1ZSxcbiAgICAgICAgZmlsdGVyZWRPcHRpb25zOiBmaWx0ZXJlZE9wdGlvbnMsXG4gICAgICAgIGZvY3VzZWRPcHRpb246IF8uY29udGFpbnMoZmlsdGVyZWRPcHRpb25zLCB0aGlzLnN0YXRlLmZvY3VzZWRPcHRpb24pID8gdGhpcy5zdGF0ZS5mb2N1c2VkT3B0aW9uIDogZmlsdGVyZWRPcHRpb25zWzBdXG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgYXV0b2xvYWRBc3luY09wdGlvbnM6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmxvYWRBc3luY09wdGlvbnMoXCJcIiwge30sIGZ1bmN0aW9uICgpIHt9KTtcbiAgfSxcblxuICBsb2FkQXN5bmNPcHRpb25zOiBmdW5jdGlvbiAoaW5wdXQsIHN0YXRlKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjYWNoZUtleSA9IGlucHV0LnNsaWNlKDAsIGkpO1xuICAgICAgaWYgKHRoaXMuX29wdGlvbnNDYWNoZVtjYWNoZUtleV0gJiYgKGlucHV0ID09PSBjYWNoZUtleSB8fCB0aGlzLl9vcHRpb25zQ2FjaGVbY2FjaGVLZXldLmNvbXBsZXRlKSkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuX29wdGlvbnNDYWNoZVtjYWNoZUtleV0ub3B0aW9ucztcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShfLmV4dGVuZCh7XG4gICAgICAgICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICAgICAgICBmaWx0ZXJlZE9wdGlvbnM6IHRoaXMuZmlsdGVyT3B0aW9ucyhvcHRpb25zKVxuICAgICAgICB9LCBzdGF0ZSkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHRoaXNSZXF1ZXN0SWQgPSB0aGlzLl9jdXJyZW50UmVxdWVzdElkID0gcmVxdWVzdElkKys7XG5cbiAgICB0aGlzLnByb3BzLmFzeW5jT3B0aW9ucyhpbnB1dCwgKGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcbiAgICAgIHRoaXMuX29wdGlvbnNDYWNoZVtpbnB1dF0gPSBkYXRhO1xuXG4gICAgICBpZiAodGhpc1JlcXVlc3RJZCAhPT0gdGhpcy5fY3VycmVudFJlcXVlc3RJZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0U3RhdGUoXy5leHRlbmQoe1xuICAgICAgICBvcHRpb25zOiBkYXRhLm9wdGlvbnMsXG4gICAgICAgIGZpbHRlcmVkT3B0aW9uczogdGhpcy5maWx0ZXJPcHRpb25zKGRhdGEub3B0aW9ucylcbiAgICAgIH0sIHN0YXRlKSk7XG4gICAgfSkuYmluZCh0aGlzKSk7XG4gIH0sXG5cbiAgZmlsdGVyT3B0aW9uczogZnVuY3Rpb24gKG9wdGlvbnMsIHZhbHVlcykge1xuICAgIHZhciBmaWx0ZXJWYWx1ZSA9IHRoaXMuX29wdGlvbnNGaWx0ZXJTdHJpbmc7XG4gICAgdmFyIGV4Y2x1ZGUgPSAodmFsdWVzIHx8IHRoaXMuc3RhdGUudmFsdWVzKS5tYXAoZnVuY3Rpb24gKGkpIHtcbiAgICAgIHJldHVybiBpLnZhbHVlO1xuICAgIH0pO1xuICAgIGlmICh0aGlzLnByb3BzLmZpbHRlck9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmZpbHRlck9wdGlvbnMuY2FsbCh0aGlzLCBvcHRpb25zLCBmaWx0ZXJWYWx1ZSwgZXhjbHVkZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBmaWx0ZXJPcHRpb24gPSBmdW5jdGlvbiAob3ApIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMubXVsdGkgJiYgXy5jb250YWlucyhleGNsdWRlLCBvcC52YWx1ZSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuZmlsdGVyT3B0aW9uKSByZXR1cm4gdGhpcy5wcm9wcy5maWx0ZXJPcHRpb24uY2FsbCh0aGlzLCBvcCwgZmlsdGVyVmFsdWUpO1xuICAgICAgICByZXR1cm4gIWZpbHRlclZhbHVlIHx8IHRoaXMucHJvcHMubWF0Y2hQb3MgPT09IFwic3RhcnRcIiA/IHRoaXMucHJvcHMubWF0Y2hQcm9wICE9PSBcImxhYmVsXCIgJiYgb3AudmFsdWUudG9Mb3dlckNhc2UoKS5zdWJzdHIoMCwgZmlsdGVyVmFsdWUubGVuZ3RoKSA9PT0gZmlsdGVyVmFsdWUgfHwgdGhpcy5wcm9wcy5tYXRjaFByb3AgIT09IFwidmFsdWVcIiAmJiBvcC5sYWJlbC50b0xvd2VyQ2FzZSgpLnN1YnN0cigwLCBmaWx0ZXJWYWx1ZS5sZW5ndGgpID09PSBmaWx0ZXJWYWx1ZSA6IHRoaXMucHJvcHMubWF0Y2hQcm9wICE9PSBcImxhYmVsXCIgJiYgb3AudmFsdWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKGZpbHRlclZhbHVlLnRvTG93ZXJDYXNlKCkpID49IDAgfHwgdGhpcy5wcm9wcy5tYXRjaFByb3AgIT09IFwidmFsdWVcIiAmJiBvcC5sYWJlbC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoZmlsdGVyVmFsdWUudG9Mb3dlckNhc2UoKSkgPj0gMDtcbiAgICAgIH07XG4gICAgICByZXR1cm4gXy5maWx0ZXIob3B0aW9ucywgZmlsdGVyT3B0aW9uLCB0aGlzKTtcbiAgICB9XG4gIH0sXG5cbiAgc2VsZWN0Rm9jdXNlZE9wdGlvbjogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnNlbGVjdFZhbHVlKHRoaXMuc3RhdGUuZm9jdXNlZE9wdGlvbik7XG4gIH0sXG5cbiAgZm9jdXNPcHRpb246IGZ1bmN0aW9uIChvcCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZm9jdXNlZE9wdGlvbjogb3BcbiAgICB9KTtcbiAgfSxcblxuICBmb2N1c05leHRPcHRpb246IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZvY3VzQWRqYWNlbnRPcHRpb24oXCJuZXh0XCIpO1xuICB9LFxuXG4gIGZvY3VzUHJldmlvdXNPcHRpb246IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZvY3VzQWRqYWNlbnRPcHRpb24oXCJwcmV2aW91c1wiKTtcbiAgfSxcblxuICBmb2N1c0FkamFjZW50T3B0aW9uOiBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhpcy5fZm9jdXNlZE9wdGlvblJldmVhbCA9IHRydWU7XG5cbiAgICB2YXIgb3BzID0gdGhpcy5zdGF0ZS5maWx0ZXJlZE9wdGlvbnM7XG5cbiAgICBpZiAoIXRoaXMuc3RhdGUuaXNPcGVuKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaXNPcGVuOiB0cnVlLFxuICAgICAgICBpbnB1dFZhbHVlOiBcIlwiLFxuICAgICAgICBmb2N1c2VkT3B0aW9uOiB0aGlzLnN0YXRlLmZvY3VzZWRPcHRpb24gfHwgb3BzW2RpciA9PT0gXCJuZXh0XCIgPyAwIDogb3BzLmxlbmd0aCAtIDFdXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIW9wcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZm9jdXNlZEluZGV4ID0gLTE7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRoaXMuc3RhdGUuZm9jdXNlZE9wdGlvbiA9PT0gb3BzW2ldKSB7XG4gICAgICAgIGZvY3VzZWRJbmRleCA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBmb2N1c2VkT3B0aW9uID0gb3BzWzBdO1xuXG4gICAgaWYgKGRpciA9PT0gXCJuZXh0XCIgJiYgZm9jdXNlZEluZGV4ID4gLTEgJiYgZm9jdXNlZEluZGV4IDwgb3BzLmxlbmd0aCAtIDEpIHtcbiAgICAgIGZvY3VzZWRPcHRpb24gPSBvcHNbZm9jdXNlZEluZGV4ICsgMV07XG4gICAgfSBlbHNlIGlmIChkaXIgPT09IFwicHJldmlvdXNcIikge1xuICAgICAgaWYgKGZvY3VzZWRJbmRleCA+IDApIHtcbiAgICAgICAgZm9jdXNlZE9wdGlvbiA9IG9wc1tmb2N1c2VkSW5kZXggLSAxXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvY3VzZWRPcHRpb24gPSBvcHNbb3BzLmxlbmd0aCAtIDFdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZm9jdXNlZE9wdGlvbjogZm9jdXNlZE9wdGlvblxuICAgIH0pO1xuICB9LFxuXG4gIHVuZm9jdXNPcHRpb246IGZ1bmN0aW9uIChvcCkge1xuICAgIGlmICh0aGlzLnN0YXRlLmZvY3VzZWRPcHRpb24gPT09IG9wKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZm9jdXNlZE9wdGlvbjogbnVsbFxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIGJ1aWxkTWVudTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBmb2N1c2VkVmFsdWUgPSB0aGlzLnN0YXRlLmZvY3VzZWRPcHRpb24gPyB0aGlzLnN0YXRlLmZvY3VzZWRPcHRpb24udmFsdWUgOiBudWxsO1xuXG4gICAgdmFyIG9wcyA9IF8ubWFwKHRoaXMuc3RhdGUuZmlsdGVyZWRPcHRpb25zLCBmdW5jdGlvbiAob3ApIHtcbiAgICAgIHZhciBpc0ZvY3VzZWQgPSBmb2N1c2VkVmFsdWUgPT09IG9wLnZhbHVlO1xuXG4gICAgICB2YXIgb3B0aW9uQ2xhc3MgPSBjbGFzc2VzKHtcbiAgICAgICAgXCJTZWxlY3Qtb3B0aW9uXCI6IHRydWUsXG4gICAgICAgIFwiaXMtZm9jdXNlZFwiOiBpc0ZvY3VzZWRcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgcmVmID0gaXNGb2N1c2VkID8gXCJmb2N1c2VkXCIgOiBudWxsO1xuXG4gICAgICB2YXIgbW91c2VFbnRlciA9IHRoaXMuZm9jdXNPcHRpb24uYmluZCh0aGlzLCBvcCksXG4gICAgICAgICAgbW91c2VMZWF2ZSA9IHRoaXMudW5mb2N1c09wdGlvbi5iaW5kKHRoaXMsIG9wKSxcbiAgICAgICAgICBtb3VzZURvd24gPSB0aGlzLnNlbGVjdFZhbHVlLmJpbmQodGhpcywgb3ApO1xuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAgeyByZWY6IHJlZiwga2V5OiBcIm9wdGlvbi1cIiArIG9wLnZhbHVlLCBjbGFzc05hbWU6IG9wdGlvbkNsYXNzLCBvbk1vdXNlRW50ZXI6IG1vdXNlRW50ZXIsIG9uTW91c2VMZWF2ZTogbW91c2VMZWF2ZSwgb25Nb3VzZURvd246IG1vdXNlRG93biwgb25DbGljazogbW91c2VEb3duIH0sXG4gICAgICAgIG9wLmxhYmVsXG4gICAgICApO1xuICAgIH0sIHRoaXMpO1xuXG4gICAgcmV0dXJuIG9wcy5sZW5ndGggPyBvcHMgOiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgXCJkaXZcIixcbiAgICAgIHsgY2xhc3NOYW1lOiBcIlNlbGVjdC1ub3Jlc3VsdHNcIiB9LFxuICAgICAgdGhpcy5wcm9wcy5hc3luY09wdGlvbnMgJiYgIXRoaXMuc3RhdGUuaW5wdXRWYWx1ZSA/IHRoaXMucHJvcHMuc2VhcmNoUHJvbXB0VGV4dCA6IHRoaXMucHJvcHMubm9SZXN1bHRzVGV4dFxuICAgICk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGVjdENsYXNzID0gY2xhc3NlcyhcIlNlbGVjdFwiLCB0aGlzLnByb3BzLmNsYXNzTmFtZSwge1xuICAgICAgXCJpcy1tdWx0aVwiOiB0aGlzLnByb3BzLm11bHRpLFxuICAgICAgXCJpcy1vcGVuXCI6IHRoaXMuc3RhdGUuaXNPcGVuLFxuICAgICAgXCJpcy1mb2N1c2VkXCI6IHRoaXMuc3RhdGUuaXNGb2N1c2VkLFxuICAgICAgXCJpcy1sb2FkaW5nXCI6IHRoaXMuc3RhdGUuaXNMb2FkaW5nLFxuICAgICAgXCJoYXMtdmFsdWVcIjogdGhpcy5zdGF0ZS52YWx1ZVxuICAgIH0pO1xuXG4gICAgdmFyIHZhbHVlID0gW107XG5cbiAgICBpZiAodGhpcy5wcm9wcy5tdWx0aSkge1xuICAgICAgdGhpcy5zdGF0ZS52YWx1ZXMuZm9yRWFjaChmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIHZhciBwcm9wcyA9IF8uZXh0ZW5kKHtcbiAgICAgICAgICBrZXk6IHZhbC52YWx1ZSxcbiAgICAgICAgICBvblJlbW92ZTogdGhpcy5yZW1vdmVWYWx1ZS5iaW5kKHRoaXMsIHZhbClcbiAgICAgICAgfSwgdmFsKTtcbiAgICAgICAgdmFsdWUucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFZhbHVlLCBwcm9wcykpO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnN0YXRlLmlucHV0VmFsdWUgJiYgKCF0aGlzLnByb3BzLm11bHRpIHx8ICF2YWx1ZS5sZW5ndGgpKSB7XG4gICAgICB2YWx1ZS5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHsgY2xhc3NOYW1lOiBcIlNlbGVjdC1wbGFjZWhvbGRlclwiLCBrZXk6IFwicGxhY2Vob2xkZXJcIiB9LFxuICAgICAgICB0aGlzLnN0YXRlLnBsYWNlaG9sZGVyXG4gICAgICApKTtcbiAgICB9XG5cbiAgICB2YXIgbG9hZGluZyA9IHRoaXMuc3RhdGUuaXNMb2FkaW5nID8gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBjbGFzc05hbWU6IFwiU2VsZWN0LWxvYWRpbmdcIiwgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIiB9KSA6IG51bGw7XG4gICAgdmFyIGNsZWFyID0gdGhpcy5wcm9wcy5jbGVhcmFibGUgJiYgdGhpcy5zdGF0ZS52YWx1ZSA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBcIlNlbGVjdC1jbGVhclwiLCB0aXRsZTogdGhpcy5wcm9wcy5tdWx0aSA/IHRoaXMucHJvcHMuY2xlYXJBbGxUZXh0IDogdGhpcy5wcm9wcy5jbGVhclZhbHVlVGV4dCwgXCJhcmlhLWxhYmVsXCI6IHRoaXMucHJvcHMubXVsdGkgPyB0aGlzLnByb3BzLmNsZWFyQWxsVGV4dCA6IHRoaXMucHJvcHMuY2xlYXJWYWx1ZVRleHQsIG9uTW91c2VEb3duOiB0aGlzLmNsZWFyVmFsdWUsIG9uQ2xpY2s6IHRoaXMuY2xlYXJWYWx1ZSwgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHsgX19odG1sOiBcIiZ0aW1lcztcIiB9IH0pIDogbnVsbDtcbiAgICB2YXIgbWVudSA9IHRoaXMuc3RhdGUuaXNPcGVuID8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IHJlZjogXCJtZW51XCIsIG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZU1vdXNlRG93biwgY2xhc3NOYW1lOiBcIlNlbGVjdC1tZW51XCIgfSxcbiAgICAgIHRoaXMuYnVpbGRNZW51KClcbiAgICApIDogbnVsbDtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgXCJkaXZcIixcbiAgICAgIHsgcmVmOiBcIndyYXBwZXJcIiwgY2xhc3NOYW1lOiBzZWxlY3RDbGFzcyB9LFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImlucHV0XCIsIHsgdHlwZTogXCJoaWRkZW5cIiwgcmVmOiBcInZhbHVlXCIsIG5hbWU6IHRoaXMucHJvcHMubmFtZSwgdmFsdWU6IHRoaXMuc3RhdGUudmFsdWUgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBcImRpdlwiLFxuICAgICAgICB7IGNsYXNzTmFtZTogXCJTZWxlY3QtY29udHJvbFwiLCByZWY6IFwiY29udHJvbFwiLCBvbktleURvd246IHRoaXMuaGFuZGxlS2V5RG93biwgb25Nb3VzZURvd246IHRoaXMuaGFuZGxlTW91c2VEb3duLCBvblRvdWNoRW5kOiB0aGlzLmhhbmRsZU1vdXNlRG93biB9LFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dCwgeyBjbGFzc05hbWU6IFwiU2VsZWN0LWlucHV0XCIsIHRhYkluZGV4OiB0aGlzLnByb3BzLnRhYkluZGV4LCByZWY6IFwiaW5wdXRcIiwgdmFsdWU6IHRoaXMuc3RhdGUuaW5wdXRWYWx1ZSwgb25Gb2N1czogdGhpcy5oYW5kbGVJbnB1dEZvY3VzLCBvbkJsdXI6IHRoaXMuaGFuZGxlSW5wdXRCbHVyLCBvbkNoYW5nZTogdGhpcy5oYW5kbGVJbnB1dENoYW5nZSwgbWluV2lkdGg6IFwiNVwiIH0pLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogXCJTZWxlY3QtYXJyb3dcIiB9KSxcbiAgICAgICAgbG9hZGluZyxcbiAgICAgICAgY2xlYXJcbiAgICAgICksXG4gICAgICBtZW51XG4gICAgKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBTZWxlY3Q7XG59LHtcIi4vVmFsdWVcIjo2NixcImNsYXNzbmFtZXNcIjo2NyxcInJlYWN0XCI6MjE2LFwicmVhY3QtaW5wdXQtYXV0b3NpemVcIjo2OCxcInVuZGVyc2NvcmVcIjo2OX1dLDY2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgXyA9IHJlcXVpcmUoXCJ1bmRlcnNjb3JlXCIpLFxuICAgIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpLFxuICAgIGNsYXNzZXMgPSByZXF1aXJlKFwiY2xhc3NuYW1lc1wiKTtcblxudmFyIE9wdGlvbiA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblxuICBkaXNwbGF5TmFtZTogXCJWYWx1ZVwiLFxuXG4gIHByb3BUeXBlczoge1xuICAgIGxhYmVsOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWRcbiAgfSxcblxuICBibG9ja0V2ZW50OiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IGNsYXNzTmFtZTogXCJTZWxlY3QtaXRlbVwiIH0sXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBcInNwYW5cIixcbiAgICAgICAgeyBjbGFzc05hbWU6IFwiU2VsZWN0LWl0ZW0taWNvblwiLCBvbk1vdXNlRG93bjogdGhpcy5ibG9ja0V2ZW50LCBvbkNsaWNrOiB0aGlzLnByb3BzLm9uUmVtb3ZlLCBvblRvdWNoRW5kOiB0aGlzLnByb3BzLm9uUmVtb3ZlIH0sXG4gICAgICAgIFwiw5dcIlxuICAgICAgKSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwic3BhblwiLFxuICAgICAgICB7IGNsYXNzTmFtZTogXCJTZWxlY3QtaXRlbS1sYWJlbFwiIH0sXG4gICAgICAgIHRoaXMucHJvcHMubGFiZWxcbiAgICAgIClcbiAgICApO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9wdGlvbjtcbn0se1wiY2xhc3NuYW1lc1wiOjY3LFwicmVhY3RcIjoyMTYsXCJ1bmRlcnNjb3JlXCI6Njl9XSw2NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5mdW5jdGlvbiBjbGFzc05hbWVzKCkge1xuXHR2YXIgYXJncyA9IGFyZ3VtZW50cztcblx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgYXJnID0gYXJnc1tpXTtcblx0XHRpZiAoYXJnID09IG51bGwpIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIGFyZykge1xuXHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0fSBlbHNlIGlmICgnb2JqZWN0JyA9PT0gdHlwZW9mIGFyZykge1xuXHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRpZiAoIWFyZy5oYXNPd25Qcm9wZXJ0eShrZXkpIHx8ICFhcmdba2V5XSkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblxufSx7fV0sNjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxudmFyIHNpemVyU3R5bGUgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGhlaWdodDogMCwgd2lkdGg6IDAsIG92ZXJmbG93OiBcInNjcm9sbFwiLCB3aGl0ZVNwYWNlOiBcIm5vd3JhcFwiIH07XG5cbnZhciBBdXRvc2l6ZUlucHV0ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXG4gIGRpc3BsYXlOYW1lOiBcIkF1dG9zaXplSW5wdXRcIixcblxuICBwcm9wVHlwZXM6IHtcbiAgICB2YWx1ZTogUmVhY3QuUHJvcFR5cGVzLmFueSwgLy8gZmllbGQgdmFsdWVcbiAgICBkZWZhdWx0VmFsdWU6IFJlYWN0LlByb3BUeXBlcy5hbnksIC8vIGRlZmF1bHQgZmllbGQgdmFsdWVcbiAgICBvbkNoYW5nZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsIC8vIG9uQ2hhbmdlIGhhbmRsZXI6IGZ1bmN0aW9uKG5ld1ZhbHVlKSB7fVxuICAgIHN0eWxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LCAvLyBjc3Mgc3R5bGVzIGZvciB0aGUgb3V0ZXIgZWxlbWVudFxuICAgIGNsYXNzTmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZywgLy8gY2xhc3NOYW1lIGZvciB0aGUgb3V0ZXIgZWxlbWVudFxuICAgIGlucHV0U3R5bGU6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsIC8vIGNzcyBzdHlsZXMgZm9yIHRoZSBpbnB1dCBlbGVtZW50XG4gICAgaW5wdXRDbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcgLy8gY2xhc3NOYW1lIGZvciB0aGUgaW5wdXQgZWxlbWVudFxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBtaW5XaWR0aDogMVxuICAgIH07XG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlucHV0V2lkdGg6IHRoaXMucHJvcHMubWluV2lkdGhcbiAgICB9O1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5jb3B5SW5wdXRTdHlsZXMoKTtcbiAgICB0aGlzLnVwZGF0ZUlucHV0V2lkdGgoKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnVwZGF0ZUlucHV0V2lkdGgoKTtcbiAgfSxcblxuICBjb3B5SW5wdXRTdHlsZXM6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuaXNNb3VudGVkKCkgfHwgIXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBpbnB1dFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5yZWZzLmlucHV0LmdldERPTU5vZGUoKSk7XG4gICAgdmFyIHdpZHRoTm9kZSA9IHRoaXMucmVmcy5zaXplci5nZXRET01Ob2RlKCk7XG4gICAgd2lkdGhOb2RlLnN0eWxlLmZvbnRTaXplID0gaW5wdXRTdHlsZS5mb250U2l6ZTtcbiAgICB3aWR0aE5vZGUuc3R5bGUuZm9udEZhbWlseSA9IGlucHV0U3R5bGUuZm9udEZhbWlseTtcbiAgfSxcblxuICB1cGRhdGVJbnB1dFdpZHRoOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLmlzTW91bnRlZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBuZXdJbnB1dFdpZHRoID0gdGhpcy5yZWZzLnNpemVyLmdldERPTU5vZGUoKS5zY3JvbGxXaWR0aCArIDI7XG4gICAgaWYgKG5ld0lucHV0V2lkdGggPCB0aGlzLnByb3BzLm1pbldpZHRoKSB7XG4gICAgICBuZXdJbnB1dFdpZHRoID0gdGhpcy5wcm9wcy5taW5XaWR0aDtcbiAgICB9XG4gICAgaWYgKG5ld0lucHV0V2lkdGggIT09IHRoaXMuc3RhdGUuaW5wdXRXaWR0aCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGlucHV0V2lkdGg6IG5ld0lucHV0V2lkdGhcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICBnZXRJbnB1dDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnJlZnMuaW5wdXQ7XG4gIH0sXG5cbiAgZm9jdXM6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnJlZnMuaW5wdXQuZ2V0RE9NTm9kZSgpLmZvY3VzKCk7XG4gIH0sXG5cbiAgc2VsZWN0OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5yZWZzLmlucHV0LmdldERPTU5vZGUoKS5zZWxlY3QoKTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbmJzcFZhbHVlID0gKHRoaXMucHJvcHMudmFsdWUgfHwgXCJcIikucmVwbGFjZSgvIC9nLCBcIiZuYnNwO1wiKTtcblxuICAgIHZhciB3cmFwcGVyU3R5bGUgPSB0aGlzLnByb3BzLnN0eWxlIHx8IHt9O1xuICAgIHdyYXBwZXJTdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblxuICAgIHZhciBpbnB1dFN0eWxlID0gdGhpcy5wcm9wcy5pbnB1dFN0eWxlIHx8IHt9O1xuICAgIGlucHV0U3R5bGUud2lkdGggPSB0aGlzLnN0YXRlLmlucHV0V2lkdGg7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IGNsYXNzTmFtZTogdGhpcy5wcm9wcy5jbGFzc05hbWUsIHN0eWxlOiB3cmFwcGVyU3R5bGUgfSxcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCBSZWFjdC5fX3NwcmVhZCh7fSwgdGhpcy5wcm9wcywgeyByZWY6IFwiaW5wdXRcIiwgY2xhc3NOYW1lOiB0aGlzLnByb3BzLmlucHV0Q2xhc3NOYW1lLCBzdHlsZTogaW5wdXRTdHlsZSB9KSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgcmVmOiBcInNpemVyXCIsIHN0eWxlOiBzaXplclN0eWxlLCBkYW5nZXJvdXNseVNldElubmVySFRNTDogeyBfX2h0bWw6IG5ic3BWYWx1ZSB9IH0pXG4gICAgKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBdXRvc2l6ZUlucHV0O1xufSx7XCJyZWFjdFwiOjIxNn1dLDY5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8vICAgICBVbmRlcnNjb3JlLmpzIDEuNy4wXG4vLyAgICAgaHR0cDovL3VuZGVyc2NvcmVqcy5vcmdcbi8vICAgICAoYykgMjAwOS0yMDE0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4vLyAgICAgVW5kZXJzY29yZSBtYXkgYmUgZnJlZWx5IGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cblxuKGZ1bmN0aW9uKCkge1xuXG4gIC8vIEJhc2VsaW5lIHNldHVwXG4gIC8vIC0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gRXN0YWJsaXNoIHRoZSByb290IG9iamVjdCwgYHdpbmRvd2AgaW4gdGhlIGJyb3dzZXIsIG9yIGBleHBvcnRzYCBvbiB0aGUgc2VydmVyLlxuICB2YXIgcm9vdCA9IHRoaXM7XG5cbiAgLy8gU2F2ZSB0aGUgcHJldmlvdXMgdmFsdWUgb2YgdGhlIGBfYCB2YXJpYWJsZS5cbiAgdmFyIHByZXZpb3VzVW5kZXJzY29yZSA9IHJvb3QuXztcblxuICAvLyBTYXZlIGJ5dGVzIGluIHRoZSBtaW5pZmllZCAoYnV0IG5vdCBnemlwcGVkKSB2ZXJzaW9uOlxuICB2YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSwgT2JqUHJvdG8gPSBPYmplY3QucHJvdG90eXBlLCBGdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbiAgLy8gQ3JlYXRlIHF1aWNrIHJlZmVyZW5jZSB2YXJpYWJsZXMgZm9yIHNwZWVkIGFjY2VzcyB0byBjb3JlIHByb3RvdHlwZXMuXG4gIHZhclxuICAgIHB1c2ggICAgICAgICAgICAgPSBBcnJheVByb3RvLnB1c2gsXG4gICAgc2xpY2UgICAgICAgICAgICA9IEFycmF5UHJvdG8uc2xpY2UsXG4gICAgY29uY2F0ICAgICAgICAgICA9IEFycmF5UHJvdG8uY29uY2F0LFxuICAgIHRvU3RyaW5nICAgICAgICAgPSBPYmpQcm90by50b1N0cmluZyxcbiAgICBoYXNPd25Qcm9wZXJ0eSAgID0gT2JqUHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbiAgLy8gQWxsICoqRUNNQVNjcmlwdCA1KiogbmF0aXZlIGZ1bmN0aW9uIGltcGxlbWVudGF0aW9ucyB0aGF0IHdlIGhvcGUgdG8gdXNlXG4gIC8vIGFyZSBkZWNsYXJlZCBoZXJlLlxuICB2YXJcbiAgICBuYXRpdmVJc0FycmF5ICAgICAgPSBBcnJheS5pc0FycmF5LFxuICAgIG5hdGl2ZUtleXMgICAgICAgICA9IE9iamVjdC5rZXlzLFxuICAgIG5hdGl2ZUJpbmQgICAgICAgICA9IEZ1bmNQcm90by5iaW5kO1xuXG4gIC8vIENyZWF0ZSBhIHNhZmUgcmVmZXJlbmNlIHRvIHRoZSBVbmRlcnNjb3JlIG9iamVjdCBmb3IgdXNlIGJlbG93LlxuICB2YXIgXyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmIChvYmogaW5zdGFuY2VvZiBfKSByZXR1cm4gb2JqO1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBfKSkgcmV0dXJuIG5ldyBfKG9iaik7XG4gICAgdGhpcy5fd3JhcHBlZCA9IG9iajtcbiAgfTtcblxuICAvLyBFeHBvcnQgdGhlIFVuZGVyc2NvcmUgb2JqZWN0IGZvciAqKk5vZGUuanMqKiwgd2l0aFxuICAvLyBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eSBmb3IgdGhlIG9sZCBgcmVxdWlyZSgpYCBBUEkuIElmIHdlJ3JlIGluXG4gIC8vIHRoZSBicm93c2VyLCBhZGQgYF9gIGFzIGEgZ2xvYmFsIG9iamVjdC5cbiAgaWYgKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gXztcbiAgICB9XG4gICAgZXhwb3J0cy5fID0gXztcbiAgfSBlbHNlIHtcbiAgICByb290Ll8gPSBfO1xuICB9XG5cbiAgLy8gQ3VycmVudCB2ZXJzaW9uLlxuICBfLlZFUlNJT04gPSAnMS43LjAnO1xuXG4gIC8vIEludGVybmFsIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBlZmZpY2llbnQgKGZvciBjdXJyZW50IGVuZ2luZXMpIHZlcnNpb25cbiAgLy8gb2YgdGhlIHBhc3NlZC1pbiBjYWxsYmFjaywgdG8gYmUgcmVwZWF0ZWRseSBhcHBsaWVkIGluIG90aGVyIFVuZGVyc2NvcmVcbiAgLy8gZnVuY3Rpb25zLlxuICB2YXIgY3JlYXRlQ2FsbGJhY2sgPSBmdW5jdGlvbihmdW5jLCBjb250ZXh0LCBhcmdDb3VudCkge1xuICAgIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHJldHVybiBmdW5jO1xuICAgIHN3aXRjaCAoYXJnQ291bnQgPT0gbnVsbCA/IDMgOiBhcmdDb3VudCkge1xuICAgICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCB2YWx1ZSk7XG4gICAgICB9O1xuICAgICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmNhbGwoY29udGV4dCwgdmFsdWUsIG90aGVyKTtcbiAgICAgIH07XG4gICAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgfTtcbiAgICAgIGNhc2UgNDogcmV0dXJuIGZ1bmN0aW9uKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCBhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBBIG1vc3RseS1pbnRlcm5hbCBmdW5jdGlvbiB0byBnZW5lcmF0ZSBjYWxsYmFja3MgdGhhdCBjYW4gYmUgYXBwbGllZFxuICAvLyB0byBlYWNoIGVsZW1lbnQgaW4gYSBjb2xsZWN0aW9uLCByZXR1cm5pbmcgdGhlIGRlc2lyZWQgcmVzdWx0IOKAlCBlaXRoZXJcbiAgLy8gaWRlbnRpdHksIGFuIGFyYml0cmFyeSBjYWxsYmFjaywgYSBwcm9wZXJ0eSBtYXRjaGVyLCBvciBhIHByb3BlcnR5IGFjY2Vzc29yLlxuICBfLml0ZXJhdGVlID0gZnVuY3Rpb24odmFsdWUsIGNvbnRleHQsIGFyZ0NvdW50KSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiBfLmlkZW50aXR5O1xuICAgIGlmIChfLmlzRnVuY3Rpb24odmFsdWUpKSByZXR1cm4gY3JlYXRlQ2FsbGJhY2sodmFsdWUsIGNvbnRleHQsIGFyZ0NvdW50KTtcbiAgICBpZiAoXy5pc09iamVjdCh2YWx1ZSkpIHJldHVybiBfLm1hdGNoZXModmFsdWUpO1xuICAgIHJldHVybiBfLnByb3BlcnR5KHZhbHVlKTtcbiAgfTtcblxuICAvLyBDb2xsZWN0aW9uIEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIFRoZSBjb3JuZXJzdG9uZSwgYW4gYGVhY2hgIGltcGxlbWVudGF0aW9uLCBha2EgYGZvckVhY2hgLlxuICAvLyBIYW5kbGVzIHJhdyBvYmplY3RzIGluIGFkZGl0aW9uIHRvIGFycmF5LWxpa2VzLiBUcmVhdHMgYWxsXG4gIC8vIHNwYXJzZSBhcnJheS1saWtlcyBhcyBpZiB0aGV5IHdlcmUgZGVuc2UuXG4gIF8uZWFjaCA9IF8uZm9yRWFjaCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiBvYmo7XG4gICAgaXRlcmF0ZWUgPSBjcmVhdGVDYWxsYmFjayhpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgdmFyIGksIGxlbmd0aCA9IG9iai5sZW5ndGg7XG4gICAgaWYgKGxlbmd0aCA9PT0gK2xlbmd0aCkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGl0ZXJhdGVlKG9ialtpXSwgaSwgb2JqKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGtleXMgPSBfLmtleXMob2JqKTtcbiAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaXRlcmF0ZWUob2JqW2tleXNbaV1dLCBrZXlzW2ldLCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgcmVzdWx0cyBvZiBhcHBseWluZyB0aGUgaXRlcmF0ZWUgdG8gZWFjaCBlbGVtZW50LlxuICBfLm1hcCA9IF8uY29sbGVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiBbXTtcbiAgICBpdGVyYXRlZSA9IF8uaXRlcmF0ZWUoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gb2JqLmxlbmd0aCAhPT0gK29iai5sZW5ndGggJiYgXy5rZXlzKG9iaiksXG4gICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoLFxuICAgICAgICByZXN1bHRzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgY3VycmVudEtleTtcbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICByZXN1bHRzW2luZGV4XSA9IGl0ZXJhdGVlKG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgdmFyIHJlZHVjZUVycm9yID0gJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnO1xuXG4gIC8vICoqUmVkdWNlKiogYnVpbGRzIHVwIGEgc2luZ2xlIHJlc3VsdCBmcm9tIGEgbGlzdCBvZiB2YWx1ZXMsIGFrYSBgaW5qZWN0YCxcbiAgLy8gb3IgYGZvbGRsYC5cbiAgXy5yZWR1Y2UgPSBfLmZvbGRsID0gXy5pbmplY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBtZW1vLCBjb250ZXh0KSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSBvYmogPSBbXTtcbiAgICBpdGVyYXRlZSA9IGNyZWF0ZUNhbGxiYWNrKGl0ZXJhdGVlLCBjb250ZXh0LCA0KTtcbiAgICB2YXIga2V5cyA9IG9iai5sZW5ndGggIT09ICtvYmoubGVuZ3RoICYmIF8ua2V5cyhvYmopLFxuICAgICAgICBsZW5ndGggPSAoa2V5cyB8fCBvYmopLmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSAwLCBjdXJyZW50S2V5O1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykge1xuICAgICAgaWYgKCFsZW5ndGgpIHRocm93IG5ldyBUeXBlRXJyb3IocmVkdWNlRXJyb3IpO1xuICAgICAgbWVtbyA9IG9ialtrZXlzID8ga2V5c1tpbmRleCsrXSA6IGluZGV4KytdO1xuICAgIH1cbiAgICBmb3IgKDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGN1cnJlbnRLZXkgPSBrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleDtcbiAgICAgIG1lbW8gPSBpdGVyYXRlZShtZW1vLCBvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaik7XG4gICAgfVxuICAgIHJldHVybiBtZW1vO1xuICB9O1xuXG4gIC8vIFRoZSByaWdodC1hc3NvY2lhdGl2ZSB2ZXJzaW9uIG9mIHJlZHVjZSwgYWxzbyBrbm93biBhcyBgZm9sZHJgLlxuICBfLnJlZHVjZVJpZ2h0ID0gXy5mb2xkciA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIG1lbW8sIGNvbnRleHQpIHtcbiAgICBpZiAob2JqID09IG51bGwpIG9iaiA9IFtdO1xuICAgIGl0ZXJhdGVlID0gY3JlYXRlQ2FsbGJhY2soaXRlcmF0ZWUsIGNvbnRleHQsIDQpO1xuICAgIHZhciBrZXlzID0gb2JqLmxlbmd0aCAhPT0gKyBvYmoubGVuZ3RoICYmIF8ua2V5cyhvYmopLFxuICAgICAgICBpbmRleCA9IChrZXlzIHx8IG9iaikubGVuZ3RoLFxuICAgICAgICBjdXJyZW50S2V5O1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykge1xuICAgICAgaWYgKCFpbmRleCkgdGhyb3cgbmV3IFR5cGVFcnJvcihyZWR1Y2VFcnJvcik7XG4gICAgICBtZW1vID0gb2JqW2tleXMgPyBrZXlzWy0taW5kZXhdIDogLS1pbmRleF07XG4gICAgfVxuICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICBtZW1vID0gaXRlcmF0ZWUobWVtbywgb2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopO1xuICAgIH1cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIGZpcnN0IHZhbHVlIHdoaWNoIHBhc3NlcyBhIHRydXRoIHRlc3QuIEFsaWFzZWQgYXMgYGRldGVjdGAuXG4gIF8uZmluZCA9IF8uZGV0ZWN0ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0O1xuICAgIHByZWRpY2F0ZSA9IF8uaXRlcmF0ZWUocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICBfLnNvbWUob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBsaXN0KSkge1xuICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyB0aGF0IHBhc3MgYSB0cnV0aCB0ZXN0LlxuICAvLyBBbGlhc2VkIGFzIGBzZWxlY3RgLlxuICBfLmZpbHRlciA9IF8uc2VsZWN0ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHJlc3VsdHM7XG4gICAgcHJlZGljYXRlID0gXy5pdGVyYXRlZShwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIF8uZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGxpc3QpKSByZXN1bHRzLnB1c2godmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGZvciB3aGljaCBhIHRydXRoIHRlc3QgZmFpbHMuXG4gIF8ucmVqZWN0ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gXy5maWx0ZXIob2JqLCBfLm5lZ2F0ZShfLml0ZXJhdGVlKHByZWRpY2F0ZSkpLCBjb250ZXh0KTtcbiAgfTtcblxuICAvLyBEZXRlcm1pbmUgd2hldGhlciBhbGwgb2YgdGhlIGVsZW1lbnRzIG1hdGNoIGEgdHJ1dGggdGVzdC5cbiAgLy8gQWxpYXNlZCBhcyBgYWxsYC5cbiAgXy5ldmVyeSA9IF8uYWxsID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiB0cnVlO1xuICAgIHByZWRpY2F0ZSA9IF8uaXRlcmF0ZWUocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICB2YXIga2V5cyA9IG9iai5sZW5ndGggIT09ICtvYmoubGVuZ3RoICYmIF8ua2V5cyhvYmopLFxuICAgICAgICBsZW5ndGggPSAoa2V5cyB8fCBvYmopLmxlbmd0aCxcbiAgICAgICAgaW5kZXgsIGN1cnJlbnRLZXk7XG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICBpZiAoIXByZWRpY2F0ZShvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaikpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLy8gRGV0ZXJtaW5lIGlmIGF0IGxlYXN0IG9uZSBlbGVtZW50IGluIHRoZSBvYmplY3QgbWF0Y2hlcyBhIHRydXRoIHRlc3QuXG4gIC8vIEFsaWFzZWQgYXMgYGFueWAuXG4gIF8uc29tZSA9IF8uYW55ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgICBwcmVkaWNhdGUgPSBfLml0ZXJhdGVlKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgdmFyIGtleXMgPSBvYmoubGVuZ3RoICE9PSArb2JqLmxlbmd0aCAmJiBfLmtleXMob2JqKSxcbiAgICAgICAgbGVuZ3RoID0gKGtleXMgfHwgb2JqKS5sZW5ndGgsXG4gICAgICAgIGluZGV4LCBjdXJyZW50S2V5O1xuICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgY3VycmVudEtleSA9IGtleXMgPyBrZXlzW2luZGV4XSA6IGluZGV4O1xuICAgICAgaWYgKHByZWRpY2F0ZShvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaikpIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgLy8gRGV0ZXJtaW5lIGlmIHRoZSBhcnJheSBvciBvYmplY3QgY29udGFpbnMgYSBnaXZlbiB2YWx1ZSAodXNpbmcgYD09PWApLlxuICAvLyBBbGlhc2VkIGFzIGBpbmNsdWRlYC5cbiAgXy5jb250YWlucyA9IF8uaW5jbHVkZSA9IGZ1bmN0aW9uKG9iaiwgdGFyZ2V0KSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKG9iai5sZW5ndGggIT09ICtvYmoubGVuZ3RoKSBvYmogPSBfLnZhbHVlcyhvYmopO1xuICAgIHJldHVybiBfLmluZGV4T2Yob2JqLCB0YXJnZXQpID49IDA7XG4gIH07XG5cbiAgLy8gSW52b2tlIGEgbWV0aG9kICh3aXRoIGFyZ3VtZW50cykgb24gZXZlcnkgaXRlbSBpbiBhIGNvbGxlY3Rpb24uXG4gIF8uaW52b2tlID0gZnVuY3Rpb24ob2JqLCBtZXRob2QpIHtcbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgICB2YXIgaXNGdW5jID0gXy5pc0Z1bmN0aW9uKG1ldGhvZCk7XG4gICAgcmV0dXJuIF8ubWFwKG9iaiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiAoaXNGdW5jID8gbWV0aG9kIDogdmFsdWVbbWV0aG9kXSkuYXBwbHkodmFsdWUsIGFyZ3MpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIENvbnZlbmllbmNlIHZlcnNpb24gb2YgYSBjb21tb24gdXNlIGNhc2Ugb2YgYG1hcGA6IGZldGNoaW5nIGEgcHJvcGVydHkuXG4gIF8ucGx1Y2sgPSBmdW5jdGlvbihvYmosIGtleSkge1xuICAgIHJldHVybiBfLm1hcChvYmosIF8ucHJvcGVydHkoa2V5KSk7XG4gIH07XG5cbiAgLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgZmlsdGVyYDogc2VsZWN0aW5nIG9ubHkgb2JqZWN0c1xuICAvLyBjb250YWluaW5nIHNwZWNpZmljIGBrZXk6dmFsdWVgIHBhaXJzLlxuICBfLndoZXJlID0gZnVuY3Rpb24ob2JqLCBhdHRycykge1xuICAgIHJldHVybiBfLmZpbHRlcihvYmosIF8ubWF0Y2hlcyhhdHRycykpO1xuICB9O1xuXG4gIC8vIENvbnZlbmllbmNlIHZlcnNpb24gb2YgYSBjb21tb24gdXNlIGNhc2Ugb2YgYGZpbmRgOiBnZXR0aW5nIHRoZSBmaXJzdCBvYmplY3RcbiAgLy8gY29udGFpbmluZyBzcGVjaWZpYyBga2V5OnZhbHVlYCBwYWlycy5cbiAgXy5maW5kV2hlcmUgPSBmdW5jdGlvbihvYmosIGF0dHJzKSB7XG4gICAgcmV0dXJuIF8uZmluZChvYmosIF8ubWF0Y2hlcyhhdHRycykpO1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgbWF4aW11bSBlbGVtZW50IChvciBlbGVtZW50LWJhc2VkIGNvbXB1dGF0aW9uKS5cbiAgXy5tYXggPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgdmFyIHJlc3VsdCA9IC1JbmZpbml0eSwgbGFzdENvbXB1dGVkID0gLUluZmluaXR5LFxuICAgICAgICB2YWx1ZSwgY29tcHV0ZWQ7XG4gICAgaWYgKGl0ZXJhdGVlID09IG51bGwgJiYgb2JqICE9IG51bGwpIHtcbiAgICAgIG9iaiA9IG9iai5sZW5ndGggPT09ICtvYmoubGVuZ3RoID8gb2JqIDogXy52YWx1ZXMob2JqKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsdWUgPSBvYmpbaV07XG4gICAgICAgIGlmICh2YWx1ZSA+IHJlc3VsdCkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZXJhdGVlID0gXy5pdGVyYXRlZShpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgICBfLmVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSh2YWx1ZSwgaW5kZXgsIGxpc3QpO1xuICAgICAgICBpZiAoY29tcHV0ZWQgPiBsYXN0Q29tcHV0ZWQgfHwgY29tcHV0ZWQgPT09IC1JbmZpbml0eSAmJiByZXN1bHQgPT09IC1JbmZpbml0eSkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGxhc3RDb21wdXRlZCA9IGNvbXB1dGVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIG1pbmltdW0gZWxlbWVudCAob3IgZWxlbWVudC1iYXNlZCBjb21wdXRhdGlvbikuXG4gIF8ubWluID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHQgPSBJbmZpbml0eSwgbGFzdENvbXB1dGVkID0gSW5maW5pdHksXG4gICAgICAgIHZhbHVlLCBjb21wdXRlZDtcbiAgICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCAmJiBvYmogIT0gbnVsbCkge1xuICAgICAgb2JqID0gb2JqLmxlbmd0aCA9PT0gK29iai5sZW5ndGggPyBvYmogOiBfLnZhbHVlcyhvYmopO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IG9iai5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICB2YWx1ZSA9IG9ialtpXTtcbiAgICAgICAgaWYgKHZhbHVlIDwgcmVzdWx0KSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaXRlcmF0ZWUgPSBfLml0ZXJhdGVlKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICAgIF8uZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKHZhbHVlLCBpbmRleCwgbGlzdCk7XG4gICAgICAgIGlmIChjb21wdXRlZCA8IGxhc3RDb21wdXRlZCB8fCBjb21wdXRlZCA9PT0gSW5maW5pdHkgJiYgcmVzdWx0ID09PSBJbmZpbml0eSkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGxhc3RDb21wdXRlZCA9IGNvbXB1dGVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBTaHVmZmxlIGEgY29sbGVjdGlvbiwgdXNpbmcgdGhlIG1vZGVybiB2ZXJzaW9uIG9mIHRoZVxuICAvLyBbRmlzaGVyLVlhdGVzIHNodWZmbGVdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmlzaGVy4oCTWWF0ZXNfc2h1ZmZsZSkuXG4gIF8uc2h1ZmZsZSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBzZXQgPSBvYmogJiYgb2JqLmxlbmd0aCA9PT0gK29iai5sZW5ndGggPyBvYmogOiBfLnZhbHVlcyhvYmopO1xuICAgIHZhciBsZW5ndGggPSBzZXQubGVuZ3RoO1xuICAgIHZhciBzaHVmZmxlZCA9IEFycmF5KGxlbmd0aCk7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwLCByYW5kOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgcmFuZCA9IF8ucmFuZG9tKDAsIGluZGV4KTtcbiAgICAgIGlmIChyYW5kICE9PSBpbmRleCkgc2h1ZmZsZWRbaW5kZXhdID0gc2h1ZmZsZWRbcmFuZF07XG4gICAgICBzaHVmZmxlZFtyYW5kXSA9IHNldFtpbmRleF07XG4gICAgfVxuICAgIHJldHVybiBzaHVmZmxlZDtcbiAgfTtcblxuICAvLyBTYW1wbGUgKipuKiogcmFuZG9tIHZhbHVlcyBmcm9tIGEgY29sbGVjdGlvbi5cbiAgLy8gSWYgKipuKiogaXMgbm90IHNwZWNpZmllZCwgcmV0dXJucyBhIHNpbmdsZSByYW5kb20gZWxlbWVudC5cbiAgLy8gVGhlIGludGVybmFsIGBndWFyZGAgYXJndW1lbnQgYWxsb3dzIGl0IHRvIHdvcmsgd2l0aCBgbWFwYC5cbiAgXy5zYW1wbGUgPSBmdW5jdGlvbihvYmosIG4sIGd1YXJkKSB7XG4gICAgaWYgKG4gPT0gbnVsbCB8fCBndWFyZCkge1xuICAgICAgaWYgKG9iai5sZW5ndGggIT09ICtvYmoubGVuZ3RoKSBvYmogPSBfLnZhbHVlcyhvYmopO1xuICAgICAgcmV0dXJuIG9ialtfLnJhbmRvbShvYmoubGVuZ3RoIC0gMSldO1xuICAgIH1cbiAgICByZXR1cm4gXy5zaHVmZmxlKG9iaikuc2xpY2UoMCwgTWF0aC5tYXgoMCwgbikpO1xuICB9O1xuXG4gIC8vIFNvcnQgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbiBwcm9kdWNlZCBieSBhbiBpdGVyYXRlZS5cbiAgXy5zb3J0QnkgPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0ZWUgPSBfLml0ZXJhdGVlKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICByZXR1cm4gXy5wbHVjayhfLm1hcChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgIGNyaXRlcmlhOiBpdGVyYXRlZSh2YWx1ZSwgaW5kZXgsIGxpc3QpXG4gICAgICB9O1xuICAgIH0pLnNvcnQoZnVuY3Rpb24obGVmdCwgcmlnaHQpIHtcbiAgICAgIHZhciBhID0gbGVmdC5jcml0ZXJpYTtcbiAgICAgIHZhciBiID0gcmlnaHQuY3JpdGVyaWE7XG4gICAgICBpZiAoYSAhPT0gYikge1xuICAgICAgICBpZiAoYSA+IGIgfHwgYSA9PT0gdm9pZCAwKSByZXR1cm4gMTtcbiAgICAgICAgaWYgKGEgPCBiIHx8IGIgPT09IHZvaWQgMCkgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxlZnQuaW5kZXggLSByaWdodC5pbmRleDtcbiAgICB9KSwgJ3ZhbHVlJyk7XG4gIH07XG5cbiAgLy8gQW4gaW50ZXJuYWwgZnVuY3Rpb24gdXNlZCBmb3IgYWdncmVnYXRlIFwiZ3JvdXAgYnlcIiBvcGVyYXRpb25zLlxuICB2YXIgZ3JvdXAgPSBmdW5jdGlvbihiZWhhdmlvcikge1xuICAgIHJldHVybiBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpdGVyYXRlZSA9IF8uaXRlcmF0ZWUoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4KSB7XG4gICAgICAgIHZhciBrZXkgPSBpdGVyYXRlZSh2YWx1ZSwgaW5kZXgsIG9iaik7XG4gICAgICAgIGJlaGF2aW9yKHJlc3VsdCwgdmFsdWUsIGtleSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfTtcblxuICAvLyBHcm91cHMgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbi4gUGFzcyBlaXRoZXIgYSBzdHJpbmcgYXR0cmlidXRlXG4gIC8vIHRvIGdyb3VwIGJ5LCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgY3JpdGVyaW9uLlxuICBfLmdyb3VwQnkgPSBncm91cChmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICBpZiAoXy5oYXMocmVzdWx0LCBrZXkpKSByZXN1bHRba2V5XS5wdXNoKHZhbHVlKTsgZWxzZSByZXN1bHRba2V5XSA9IFt2YWx1ZV07XG4gIH0pO1xuXG4gIC8vIEluZGV4ZXMgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbiwgc2ltaWxhciB0byBgZ3JvdXBCeWAsIGJ1dCBmb3JcbiAgLy8gd2hlbiB5b3Uga25vdyB0aGF0IHlvdXIgaW5kZXggdmFsdWVzIHdpbGwgYmUgdW5pcXVlLlxuICBfLmluZGV4QnkgPSBncm91cChmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICB9KTtcblxuICAvLyBDb3VudHMgaW5zdGFuY2VzIG9mIGFuIG9iamVjdCB0aGF0IGdyb3VwIGJ5IGEgY2VydGFpbiBjcml0ZXJpb24uIFBhc3NcbiAgLy8gZWl0aGVyIGEgc3RyaW5nIGF0dHJpYnV0ZSB0byBjb3VudCBieSwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlXG4gIC8vIGNyaXRlcmlvbi5cbiAgXy5jb3VudEJ5ID0gZ3JvdXAoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgaWYgKF8uaGFzKHJlc3VsdCwga2V5KSkgcmVzdWx0W2tleV0rKzsgZWxzZSByZXN1bHRba2V5XSA9IDE7XG4gIH0pO1xuXG4gIC8vIFVzZSBhIGNvbXBhcmF0b3IgZnVuY3Rpb24gdG8gZmlndXJlIG91dCB0aGUgc21hbGxlc3QgaW5kZXggYXQgd2hpY2hcbiAgLy8gYW4gb2JqZWN0IHNob3VsZCBiZSBpbnNlcnRlZCBzbyBhcyB0byBtYWludGFpbiBvcmRlci4gVXNlcyBiaW5hcnkgc2VhcmNoLlxuICBfLnNvcnRlZEluZGV4ID0gZnVuY3Rpb24oYXJyYXksIG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpdGVyYXRlZSA9IF8uaXRlcmF0ZWUoaXRlcmF0ZWUsIGNvbnRleHQsIDEpO1xuICAgIHZhciB2YWx1ZSA9IGl0ZXJhdGVlKG9iaik7XG4gICAgdmFyIGxvdyA9IDAsIGhpZ2ggPSBhcnJheS5sZW5ndGg7XG4gICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgIHZhciBtaWQgPSBsb3cgKyBoaWdoID4+PiAxO1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W21pZF0pIDwgdmFsdWUpIGxvdyA9IG1pZCArIDE7IGVsc2UgaGlnaCA9IG1pZDtcbiAgICB9XG4gICAgcmV0dXJuIGxvdztcbiAgfTtcblxuICAvLyBTYWZlbHkgY3JlYXRlIGEgcmVhbCwgbGl2ZSBhcnJheSBmcm9tIGFueXRoaW5nIGl0ZXJhYmxlLlxuICBfLnRvQXJyYXkgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIW9iaikgcmV0dXJuIFtdO1xuICAgIGlmIChfLmlzQXJyYXkob2JqKSkgcmV0dXJuIHNsaWNlLmNhbGwob2JqKTtcbiAgICBpZiAob2JqLmxlbmd0aCA9PT0gK29iai5sZW5ndGgpIHJldHVybiBfLm1hcChvYmosIF8uaWRlbnRpdHkpO1xuICAgIHJldHVybiBfLnZhbHVlcyhvYmopO1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIGluIGFuIG9iamVjdC5cbiAgXy5zaXplID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gMDtcbiAgICByZXR1cm4gb2JqLmxlbmd0aCA9PT0gK29iai5sZW5ndGggPyBvYmoubGVuZ3RoIDogXy5rZXlzKG9iaikubGVuZ3RoO1xuICB9O1xuXG4gIC8vIFNwbGl0IGEgY29sbGVjdGlvbiBpbnRvIHR3byBhcnJheXM6IG9uZSB3aG9zZSBlbGVtZW50cyBhbGwgc2F0aXNmeSB0aGUgZ2l2ZW5cbiAgLy8gcHJlZGljYXRlLCBhbmQgb25lIHdob3NlIGVsZW1lbnRzIGFsbCBkbyBub3Qgc2F0aXNmeSB0aGUgcHJlZGljYXRlLlxuICBfLnBhcnRpdGlvbiA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgcHJlZGljYXRlID0gXy5pdGVyYXRlZShwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHZhciBwYXNzID0gW10sIGZhaWwgPSBbXTtcbiAgICBfLmVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmopIHtcbiAgICAgIChwcmVkaWNhdGUodmFsdWUsIGtleSwgb2JqKSA/IHBhc3MgOiBmYWlsKS5wdXNoKHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW3Bhc3MsIGZhaWxdO1xuICB9O1xuXG4gIC8vIEFycmF5IEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS1cblxuICAvLyBHZXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gdGhlIGZpcnN0IE5cbiAgLy8gdmFsdWVzIGluIHRoZSBhcnJheS4gQWxpYXNlZCBhcyBgaGVhZGAgYW5kIGB0YWtlYC4gVGhlICoqZ3VhcmQqKiBjaGVja1xuICAvLyBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBfLm1hcGAuXG4gIF8uZmlyc3QgPSBfLmhlYWQgPSBfLnRha2UgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDtcbiAgICBpZiAobiA9PSBudWxsIHx8IGd1YXJkKSByZXR1cm4gYXJyYXlbMF07XG4gICAgaWYgKG4gPCAwKSByZXR1cm4gW107XG4gICAgcmV0dXJuIHNsaWNlLmNhbGwoYXJyYXksIDAsIG4pO1xuICB9O1xuXG4gIC8vIFJldHVybnMgZXZlcnl0aGluZyBidXQgdGhlIGxhc3QgZW50cnkgb2YgdGhlIGFycmF5LiBFc3BlY2lhbGx5IHVzZWZ1bCBvblxuICAvLyB0aGUgYXJndW1lbnRzIG9iamVjdC4gUGFzc2luZyAqKm4qKiB3aWxsIHJldHVybiBhbGwgdGhlIHZhbHVlcyBpblxuICAvLyB0aGUgYXJyYXksIGV4Y2x1ZGluZyB0aGUgbGFzdCBOLiBUaGUgKipndWFyZCoqIGNoZWNrIGFsbG93cyBpdCB0byB3b3JrIHdpdGhcbiAgLy8gYF8ubWFwYC5cbiAgXy5pbml0aWFsID0gZnVuY3Rpb24oYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgcmV0dXJuIHNsaWNlLmNhbGwoYXJyYXksIDAsIE1hdGgubWF4KDAsIGFycmF5Lmxlbmd0aCAtIChuID09IG51bGwgfHwgZ3VhcmQgPyAxIDogbikpKTtcbiAgfTtcblxuICAvLyBHZXQgdGhlIGxhc3QgZWxlbWVudCBvZiBhbiBhcnJheS4gUGFzc2luZyAqKm4qKiB3aWxsIHJldHVybiB0aGUgbGFzdCBOXG4gIC8vIHZhbHVlcyBpbiB0aGUgYXJyYXkuIFRoZSAqKmd1YXJkKiogY2hlY2sgYWxsb3dzIGl0IHRvIHdvcmsgd2l0aCBgXy5tYXBgLlxuICBfLmxhc3QgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDtcbiAgICBpZiAobiA9PSBudWxsIHx8IGd1YXJkKSByZXR1cm4gYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuIHNsaWNlLmNhbGwoYXJyYXksIE1hdGgubWF4KGFycmF5Lmxlbmd0aCAtIG4sIDApKTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGV2ZXJ5dGhpbmcgYnV0IHRoZSBmaXJzdCBlbnRyeSBvZiB0aGUgYXJyYXkuIEFsaWFzZWQgYXMgYHRhaWxgIGFuZCBgZHJvcGAuXG4gIC8vIEVzcGVjaWFsbHkgdXNlZnVsIG9uIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBQYXNzaW5nIGFuICoqbioqIHdpbGwgcmV0dXJuXG4gIC8vIHRoZSByZXN0IE4gdmFsdWVzIGluIHRoZSBhcnJheS4gVGhlICoqZ3VhcmQqKlxuICAvLyBjaGVjayBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBfLm1hcGAuXG4gIF8ucmVzdCA9IF8udGFpbCA9IF8uZHJvcCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCBuID09IG51bGwgfHwgZ3VhcmQgPyAxIDogbik7XG4gIH07XG5cbiAgLy8gVHJpbSBvdXQgYWxsIGZhbHN5IHZhbHVlcyBmcm9tIGFuIGFycmF5LlxuICBfLmNvbXBhY3QgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHJldHVybiBfLmZpbHRlcihhcnJheSwgXy5pZGVudGl0eSk7XG4gIH07XG5cbiAgLy8gSW50ZXJuYWwgaW1wbGVtZW50YXRpb24gb2YgYSByZWN1cnNpdmUgYGZsYXR0ZW5gIGZ1bmN0aW9uLlxuICB2YXIgZmxhdHRlbiA9IGZ1bmN0aW9uKGlucHV0LCBzaGFsbG93LCBzdHJpY3QsIG91dHB1dCkge1xuICAgIGlmIChzaGFsbG93ICYmIF8uZXZlcnkoaW5wdXQsIF8uaXNBcnJheSkpIHtcbiAgICAgIHJldHVybiBjb25jYXQuYXBwbHkob3V0cHV0LCBpbnB1dCk7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBpbnB1dC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHZhbHVlID0gaW5wdXRbaV07XG4gICAgICBpZiAoIV8uaXNBcnJheSh2YWx1ZSkgJiYgIV8uaXNBcmd1bWVudHModmFsdWUpKSB7XG4gICAgICAgIGlmICghc3RyaWN0KSBvdXRwdXQucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHNoYWxsb3cpIHtcbiAgICAgICAgcHVzaC5hcHBseShvdXRwdXQsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZsYXR0ZW4odmFsdWUsIHNoYWxsb3csIHN0cmljdCwgb3V0cHV0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfTtcblxuICAvLyBGbGF0dGVuIG91dCBhbiBhcnJheSwgZWl0aGVyIHJlY3Vyc2l2ZWx5IChieSBkZWZhdWx0KSwgb3IganVzdCBvbmUgbGV2ZWwuXG4gIF8uZmxhdHRlbiA9IGZ1bmN0aW9uKGFycmF5LCBzaGFsbG93KSB7XG4gICAgcmV0dXJuIGZsYXR0ZW4oYXJyYXksIHNoYWxsb3csIGZhbHNlLCBbXSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgdmVyc2lvbiBvZiB0aGUgYXJyYXkgdGhhdCBkb2VzIG5vdCBjb250YWluIHRoZSBzcGVjaWZpZWQgdmFsdWUocykuXG4gIF8ud2l0aG91dCA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgcmV0dXJuIF8uZGlmZmVyZW5jZShhcnJheSwgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgfTtcblxuICAvLyBQcm9kdWNlIGEgZHVwbGljYXRlLWZyZWUgdmVyc2lvbiBvZiB0aGUgYXJyYXkuIElmIHRoZSBhcnJheSBoYXMgYWxyZWFkeVxuICAvLyBiZWVuIHNvcnRlZCwgeW91IGhhdmUgdGhlIG9wdGlvbiBvZiB1c2luZyBhIGZhc3RlciBhbGdvcml0aG0uXG4gIC8vIEFsaWFzZWQgYXMgYHVuaXF1ZWAuXG4gIF8udW5pcSA9IF8udW5pcXVlID0gZnVuY3Rpb24oYXJyYXksIGlzU29ydGVkLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIGlmIChhcnJheSA9PSBudWxsKSByZXR1cm4gW107XG4gICAgaWYgKCFfLmlzQm9vbGVhbihpc1NvcnRlZCkpIHtcbiAgICAgIGNvbnRleHQgPSBpdGVyYXRlZTtcbiAgICAgIGl0ZXJhdGVlID0gaXNTb3J0ZWQ7XG4gICAgICBpc1NvcnRlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAoaXRlcmF0ZWUgIT0gbnVsbCkgaXRlcmF0ZWUgPSBfLml0ZXJhdGVlKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIHNlZW4gPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2ldO1xuICAgICAgaWYgKGlzU29ydGVkKSB7XG4gICAgICAgIGlmICghaSB8fCBzZWVuICE9PSB2YWx1ZSkgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICBzZWVuID0gdmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciBjb21wdXRlZCA9IGl0ZXJhdGVlKHZhbHVlLCBpLCBhcnJheSk7XG4gICAgICAgIGlmIChfLmluZGV4T2Yoc2VlbiwgY29tcHV0ZWQpIDwgMCkge1xuICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKF8uaW5kZXhPZihyZXN1bHQsIHZhbHVlKSA8IDApIHtcbiAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFByb2R1Y2UgYW4gYXJyYXkgdGhhdCBjb250YWlucyB0aGUgdW5pb246IGVhY2ggZGlzdGluY3QgZWxlbWVudCBmcm9tIGFsbCBvZlxuICAvLyB0aGUgcGFzc2VkLWluIGFycmF5cy5cbiAgXy51bmlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfLnVuaXEoZmxhdHRlbihhcmd1bWVudHMsIHRydWUsIHRydWUsIFtdKSk7XG4gIH07XG5cbiAgLy8gUHJvZHVjZSBhbiBhcnJheSB0aGF0IGNvbnRhaW5zIGV2ZXJ5IGl0ZW0gc2hhcmVkIGJldHdlZW4gYWxsIHRoZVxuICAvLyBwYXNzZWQtaW4gYXJyYXlzLlxuICBfLmludGVyc2VjdGlvbiA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgaWYgKGFycmF5ID09IG51bGwpIHJldHVybiBbXTtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGFyZ3NMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSBhcnJheVtpXTtcbiAgICAgIGlmIChfLmNvbnRhaW5zKHJlc3VsdCwgaXRlbSkpIGNvbnRpbnVlO1xuICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCBhcmdzTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKCFfLmNvbnRhaW5zKGFyZ3VtZW50c1tqXSwgaXRlbSkpIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKGogPT09IGFyZ3NMZW5ndGgpIHJlc3VsdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFRha2UgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBvbmUgYXJyYXkgYW5kIGEgbnVtYmVyIG9mIG90aGVyIGFycmF5cy5cbiAgLy8gT25seSB0aGUgZWxlbWVudHMgcHJlc2VudCBpbiBqdXN0IHRoZSBmaXJzdCBhcnJheSB3aWxsIHJlbWFpbi5cbiAgXy5kaWZmZXJlbmNlID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICB2YXIgcmVzdCA9IGZsYXR0ZW4oc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLCB0cnVlLCB0cnVlLCBbXSk7XG4gICAgcmV0dXJuIF8uZmlsdGVyKGFycmF5LCBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICByZXR1cm4gIV8uY29udGFpbnMocmVzdCwgdmFsdWUpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIFppcCB0b2dldGhlciBtdWx0aXBsZSBsaXN0cyBpbnRvIGEgc2luZ2xlIGFycmF5IC0tIGVsZW1lbnRzIHRoYXQgc2hhcmVcbiAgLy8gYW4gaW5kZXggZ28gdG9nZXRoZXIuXG4gIF8uemlwID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIFtdO1xuICAgIHZhciBsZW5ndGggPSBfLm1heChhcmd1bWVudHMsICdsZW5ndGgnKS5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdHMgPSBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3VsdHNbaV0gPSBfLnBsdWNrKGFyZ3VtZW50cywgaSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vIENvbnZlcnRzIGxpc3RzIGludG8gb2JqZWN0cy4gUGFzcyBlaXRoZXIgYSBzaW5nbGUgYXJyYXkgb2YgYFtrZXksIHZhbHVlXWBcbiAgLy8gcGFpcnMsIG9yIHR3byBwYXJhbGxlbCBhcnJheXMgb2YgdGhlIHNhbWUgbGVuZ3RoIC0tIG9uZSBvZiBrZXlzLCBhbmQgb25lIG9mXG4gIC8vIHRoZSBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgXy5vYmplY3QgPSBmdW5jdGlvbihsaXN0LCB2YWx1ZXMpIHtcbiAgICBpZiAobGlzdCA9PSBudWxsKSByZXR1cm4ge307XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBsaXN0Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodmFsdWVzKSB7XG4gICAgICAgIHJlc3VsdFtsaXN0W2ldXSA9IHZhbHVlc1tpXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdFtsaXN0W2ldWzBdXSA9IGxpc3RbaV1bMV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBwb3NpdGlvbiBvZiB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBhbiBpdGVtIGluIGFuIGFycmF5LFxuICAvLyBvciAtMSBpZiB0aGUgaXRlbSBpcyBub3QgaW5jbHVkZWQgaW4gdGhlIGFycmF5LlxuICAvLyBJZiB0aGUgYXJyYXkgaXMgbGFyZ2UgYW5kIGFscmVhZHkgaW4gc29ydCBvcmRlciwgcGFzcyBgdHJ1ZWBcbiAgLy8gZm9yICoqaXNTb3J0ZWQqKiB0byB1c2UgYmluYXJ5IHNlYXJjaC5cbiAgXy5pbmRleE9mID0gZnVuY3Rpb24oYXJyYXksIGl0ZW0sIGlzU29ydGVkKSB7XG4gICAgaWYgKGFycmF5ID09IG51bGwpIHJldHVybiAtMTtcbiAgICB2YXIgaSA9IDAsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICBpZiAoaXNTb3J0ZWQpIHtcbiAgICAgIGlmICh0eXBlb2YgaXNTb3J0ZWQgPT0gJ251bWJlcicpIHtcbiAgICAgICAgaSA9IGlzU29ydGVkIDwgMCA/IE1hdGgubWF4KDAsIGxlbmd0aCArIGlzU29ydGVkKSA6IGlzU29ydGVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaSA9IF8uc29ydGVkSW5kZXgoYXJyYXksIGl0ZW0pO1xuICAgICAgICByZXR1cm4gYXJyYXlbaV0gPT09IGl0ZW0gPyBpIDogLTE7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIGlmIChhcnJheVtpXSA9PT0gaXRlbSkgcmV0dXJuIGk7XG4gICAgcmV0dXJuIC0xO1xuICB9O1xuXG4gIF8ubGFzdEluZGV4T2YgPSBmdW5jdGlvbihhcnJheSwgaXRlbSwgZnJvbSkge1xuICAgIGlmIChhcnJheSA9PSBudWxsKSByZXR1cm4gLTE7XG4gICAgdmFyIGlkeCA9IGFycmF5Lmxlbmd0aDtcbiAgICBpZiAodHlwZW9mIGZyb20gPT0gJ251bWJlcicpIHtcbiAgICAgIGlkeCA9IGZyb20gPCAwID8gaWR4ICsgZnJvbSArIDEgOiBNYXRoLm1pbihpZHgsIGZyb20gKyAxKTtcbiAgICB9XG4gICAgd2hpbGUgKC0taWR4ID49IDApIGlmIChhcnJheVtpZHhdID09PSBpdGVtKSByZXR1cm4gaWR4O1xuICAgIHJldHVybiAtMTtcbiAgfTtcblxuICAvLyBHZW5lcmF0ZSBhbiBpbnRlZ2VyIEFycmF5IGNvbnRhaW5pbmcgYW4gYXJpdGhtZXRpYyBwcm9ncmVzc2lvbi4gQSBwb3J0IG9mXG4gIC8vIHRoZSBuYXRpdmUgUHl0aG9uIGByYW5nZSgpYCBmdW5jdGlvbi4gU2VlXG4gIC8vIFt0aGUgUHl0aG9uIGRvY3VtZW50YXRpb25dKGh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvbGlicmFyeS9mdW5jdGlvbnMuaHRtbCNyYW5nZSkuXG4gIF8ucmFuZ2UgPSBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDw9IDEpIHtcbiAgICAgIHN0b3AgPSBzdGFydCB8fCAwO1xuICAgICAgc3RhcnQgPSAwO1xuICAgIH1cbiAgICBzdGVwID0gc3RlcCB8fCAxO1xuXG4gICAgdmFyIGxlbmd0aCA9IE1hdGgubWF4KE1hdGguY2VpbCgoc3RvcCAtIHN0YXJ0KSAvIHN0ZXApLCAwKTtcbiAgICB2YXIgcmFuZ2UgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgbGVuZ3RoOyBpZHgrKywgc3RhcnQgKz0gc3RlcCkge1xuICAgICAgcmFuZ2VbaWR4XSA9IHN0YXJ0O1xuICAgIH1cblxuICAgIHJldHVybiByYW5nZTtcbiAgfTtcblxuICAvLyBGdW5jdGlvbiAoYWhlbSkgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIFJldXNhYmxlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIGZvciBwcm90b3R5cGUgc2V0dGluZy5cbiAgdmFyIEN0b3IgPSBmdW5jdGlvbigpe307XG5cbiAgLy8gQ3JlYXRlIGEgZnVuY3Rpb24gYm91bmQgdG8gYSBnaXZlbiBvYmplY3QgKGFzc2lnbmluZyBgdGhpc2AsIGFuZCBhcmd1bWVudHMsXG4gIC8vIG9wdGlvbmFsbHkpLiBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgRnVuY3Rpb24uYmluZGAgaWZcbiAgLy8gYXZhaWxhYmxlLlxuICBfLmJpbmQgPSBmdW5jdGlvbihmdW5jLCBjb250ZXh0KSB7XG4gICAgdmFyIGFyZ3MsIGJvdW5kO1xuICAgIGlmIChuYXRpdmVCaW5kICYmIGZ1bmMuYmluZCA9PT0gbmF0aXZlQmluZCkgcmV0dXJuIG5hdGl2ZUJpbmQuYXBwbHkoZnVuYywgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgICBpZiAoIV8uaXNGdW5jdGlvbihmdW5jKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQmluZCBtdXN0IGJlIGNhbGxlZCBvbiBhIGZ1bmN0aW9uJyk7XG4gICAgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgICBib3VuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIGJvdW5kKSkgcmV0dXJuIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gICAgICBDdG9yLnByb3RvdHlwZSA9IGZ1bmMucHJvdG90eXBlO1xuICAgICAgdmFyIHNlbGYgPSBuZXcgQ3RvcjtcbiAgICAgIEN0b3IucHJvdG90eXBlID0gbnVsbDtcbiAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHNlbGYsIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICAgICAgaWYgKF8uaXNPYmplY3QocmVzdWx0KSkgcmV0dXJuIHJlc3VsdDtcbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH07XG4gICAgcmV0dXJuIGJvdW5kO1xuICB9O1xuXG4gIC8vIFBhcnRpYWxseSBhcHBseSBhIGZ1bmN0aW9uIGJ5IGNyZWF0aW5nIGEgdmVyc2lvbiB0aGF0IGhhcyBoYWQgc29tZSBvZiBpdHNcbiAgLy8gYXJndW1lbnRzIHByZS1maWxsZWQsIHdpdGhvdXQgY2hhbmdpbmcgaXRzIGR5bmFtaWMgYHRoaXNgIGNvbnRleHQuIF8gYWN0c1xuICAvLyBhcyBhIHBsYWNlaG9sZGVyLCBhbGxvd2luZyBhbnkgY29tYmluYXRpb24gb2YgYXJndW1lbnRzIHRvIGJlIHByZS1maWxsZWQuXG4gIF8ucGFydGlhbCA9IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICB2YXIgYm91bmRBcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwb3NpdGlvbiA9IDA7XG4gICAgICB2YXIgYXJncyA9IGJvdW5kQXJncy5zbGljZSgpO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGFyZ3MubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGFyZ3NbaV0gPT09IF8pIGFyZ3NbaV0gPSBhcmd1bWVudHNbcG9zaXRpb24rK107XG4gICAgICB9XG4gICAgICB3aGlsZSAocG9zaXRpb24gPCBhcmd1bWVudHMubGVuZ3RoKSBhcmdzLnB1c2goYXJndW1lbnRzW3Bvc2l0aW9uKytdKTtcbiAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gQmluZCBhIG51bWJlciBvZiBhbiBvYmplY3QncyBtZXRob2RzIHRvIHRoYXQgb2JqZWN0LiBSZW1haW5pbmcgYXJndW1lbnRzXG4gIC8vIGFyZSB0aGUgbWV0aG9kIG5hbWVzIHRvIGJlIGJvdW5kLiBVc2VmdWwgZm9yIGVuc3VyaW5nIHRoYXQgYWxsIGNhbGxiYWNrc1xuICAvLyBkZWZpbmVkIG9uIGFuIG9iamVjdCBiZWxvbmcgdG8gaXQuXG4gIF8uYmluZEFsbCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBpLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLCBrZXk7XG4gICAgaWYgKGxlbmd0aCA8PSAxKSB0aHJvdyBuZXcgRXJyb3IoJ2JpbmRBbGwgbXVzdCBiZSBwYXNzZWQgZnVuY3Rpb24gbmFtZXMnKTtcbiAgICBmb3IgKGkgPSAxOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIG9ialtrZXldID0gXy5iaW5kKG9ialtrZXldLCBvYmopO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9O1xuXG4gIC8vIE1lbW9pemUgYW4gZXhwZW5zaXZlIGZ1bmN0aW9uIGJ5IHN0b3JpbmcgaXRzIHJlc3VsdHMuXG4gIF8ubWVtb2l6ZSA9IGZ1bmN0aW9uKGZ1bmMsIGhhc2hlcikge1xuICAgIHZhciBtZW1vaXplID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgICB2YXIgY2FjaGUgPSBtZW1vaXplLmNhY2hlO1xuICAgICAgdmFyIGFkZHJlc3MgPSBoYXNoZXIgPyBoYXNoZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IGtleTtcbiAgICAgIGlmICghXy5oYXMoY2FjaGUsIGFkZHJlc3MpKSBjYWNoZVthZGRyZXNzXSA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiBjYWNoZVthZGRyZXNzXTtcbiAgICB9O1xuICAgIG1lbW9pemUuY2FjaGUgPSB7fTtcbiAgICByZXR1cm4gbWVtb2l6ZTtcbiAgfTtcblxuICAvLyBEZWxheXMgYSBmdW5jdGlvbiBmb3IgdGhlIGdpdmVuIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIGFuZCB0aGVuIGNhbGxzXG4gIC8vIGl0IHdpdGggdGhlIGFyZ3VtZW50cyBzdXBwbGllZC5cbiAgXy5kZWxheSA9IGZ1bmN0aW9uKGZ1bmMsIHdhaXQpIHtcbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfSwgd2FpdCk7XG4gIH07XG5cbiAgLy8gRGVmZXJzIGEgZnVuY3Rpb24sIHNjaGVkdWxpbmcgaXQgdG8gcnVuIGFmdGVyIHRoZSBjdXJyZW50IGNhbGwgc3RhY2sgaGFzXG4gIC8vIGNsZWFyZWQuXG4gIF8uZGVmZXIgPSBmdW5jdGlvbihmdW5jKSB7XG4gICAgcmV0dXJuIF8uZGVsYXkuYXBwbHkoXywgW2Z1bmMsIDFdLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpKTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIHdoZW4gaW52b2tlZCwgd2lsbCBvbmx5IGJlIHRyaWdnZXJlZCBhdCBtb3N0IG9uY2VcbiAgLy8gZHVyaW5nIGEgZ2l2ZW4gd2luZG93IG9mIHRpbWUuIE5vcm1hbGx5LCB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHdpbGwgcnVuXG4gIC8vIGFzIG11Y2ggYXMgaXQgY2FuLCB3aXRob3V0IGV2ZXIgZ29pbmcgbW9yZSB0aGFuIG9uY2UgcGVyIGB3YWl0YCBkdXJhdGlvbjtcbiAgLy8gYnV0IGlmIHlvdSdkIGxpa2UgdG8gZGlzYWJsZSB0aGUgZXhlY3V0aW9uIG9uIHRoZSBsZWFkaW5nIGVkZ2UsIHBhc3NcbiAgLy8gYHtsZWFkaW5nOiBmYWxzZX1gLiBUbyBkaXNhYmxlIGV4ZWN1dGlvbiBvbiB0aGUgdHJhaWxpbmcgZWRnZSwgZGl0dG8uXG4gIF8udGhyb3R0bGUgPSBmdW5jdGlvbihmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgdmFyIGNvbnRleHQsIGFyZ3MsIHJlc3VsdDtcbiAgICB2YXIgdGltZW91dCA9IG51bGw7XG4gICAgdmFyIHByZXZpb3VzID0gMDtcbiAgICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTtcbiAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHByZXZpb3VzID0gb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSA/IDAgOiBfLm5vdygpO1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgaWYgKCF0aW1lb3V0KSBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbm93ID0gXy5ub3coKTtcbiAgICAgIGlmICghcHJldmlvdXMgJiYgb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSkgcHJldmlvdXMgPSBub3c7XG4gICAgICB2YXIgcmVtYWluaW5nID0gd2FpdCAtIChub3cgLSBwcmV2aW91cyk7XG4gICAgICBjb250ZXh0ID0gdGhpcztcbiAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICBpZiAocmVtYWluaW5nIDw9IDAgfHwgcmVtYWluaW5nID4gd2FpdCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICBwcmV2aW91cyA9IG5vdztcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgaWYgKCF0aW1lb3V0KSBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKCF0aW1lb3V0ICYmIG9wdGlvbnMudHJhaWxpbmcgIT09IGZhbHNlKSB7XG4gICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCByZW1haW5pbmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgYXMgbG9uZyBhcyBpdCBjb250aW51ZXMgdG8gYmUgaW52b2tlZCwgd2lsbCBub3RcbiAgLy8gYmUgdHJpZ2dlcmVkLiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgaXQgc3RvcHMgYmVpbmcgY2FsbGVkIGZvclxuICAvLyBOIG1pbGxpc2Vjb25kcy4gSWYgYGltbWVkaWF0ZWAgaXMgcGFzc2VkLCB0cmlnZ2VyIHRoZSBmdW5jdGlvbiBvbiB0aGVcbiAgLy8gbGVhZGluZyBlZGdlLCBpbnN0ZWFkIG9mIHRoZSB0cmFpbGluZy5cbiAgXy5kZWJvdW5jZSA9IGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGltbWVkaWF0ZSkge1xuICAgIHZhciB0aW1lb3V0LCBhcmdzLCBjb250ZXh0LCB0aW1lc3RhbXAsIHJlc3VsdDtcblxuICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGxhc3QgPSBfLm5vdygpIC0gdGltZXN0YW1wO1xuXG4gICAgICBpZiAobGFzdCA8IHdhaXQgJiYgbGFzdCA+IDApIHtcbiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQgLSBsYXN0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICBpZiAoIWltbWVkaWF0ZSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgaWYgKCF0aW1lb3V0KSBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgY29udGV4dCA9IHRoaXM7XG4gICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgdGltZXN0YW1wID0gXy5ub3coKTtcbiAgICAgIHZhciBjYWxsTm93ID0gaW1tZWRpYXRlICYmICF0aW1lb3V0O1xuICAgICAgaWYgKCF0aW1lb3V0KSB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gICAgICBpZiAoY2FsbE5vdykge1xuICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIHRoZSBmaXJzdCBmdW5jdGlvbiBwYXNzZWQgYXMgYW4gYXJndW1lbnQgdG8gdGhlIHNlY29uZCxcbiAgLy8gYWxsb3dpbmcgeW91IHRvIGFkanVzdCBhcmd1bWVudHMsIHJ1biBjb2RlIGJlZm9yZSBhbmQgYWZ0ZXIsIGFuZFxuICAvLyBjb25kaXRpb25hbGx5IGV4ZWN1dGUgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uLlxuICBfLndyYXAgPSBmdW5jdGlvbihmdW5jLCB3cmFwcGVyKSB7XG4gICAgcmV0dXJuIF8ucGFydGlhbCh3cmFwcGVyLCBmdW5jKTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgbmVnYXRlZCB2ZXJzaW9uIG9mIHRoZSBwYXNzZWQtaW4gcHJlZGljYXRlLlxuICBfLm5lZ2F0ZSA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAhcHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBpcyB0aGUgY29tcG9zaXRpb24gb2YgYSBsaXN0IG9mIGZ1bmN0aW9ucywgZWFjaFxuICAvLyBjb25zdW1pbmcgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZnVuY3Rpb24gdGhhdCBmb2xsb3dzLlxuICBfLmNvbXBvc2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICB2YXIgc3RhcnQgPSBhcmdzLmxlbmd0aCAtIDE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGkgPSBzdGFydDtcbiAgICAgIHZhciByZXN1bHQgPSBhcmdzW3N0YXJ0XS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgd2hpbGUgKGktLSkgcmVzdWx0ID0gYXJnc1tpXS5jYWxsKHRoaXMsIHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBvbmx5IGJlIGV4ZWN1dGVkIGFmdGVyIGJlaW5nIGNhbGxlZCBOIHRpbWVzLlxuICBfLmFmdGVyID0gZnVuY3Rpb24odGltZXMsIGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoLS10aW1lcyA8IDEpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgb25seSBiZSBleGVjdXRlZCBiZWZvcmUgYmVpbmcgY2FsbGVkIE4gdGltZXMuXG4gIF8uYmVmb3JlID0gZnVuY3Rpb24odGltZXMsIGZ1bmMpIHtcbiAgICB2YXIgbWVtbztcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoLS10aW1lcyA+IDApIHtcbiAgICAgICAgbWVtbyA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZ1bmMgPSBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIGF0IG1vc3Qgb25lIHRpbWUsIG5vIG1hdHRlciBob3dcbiAgLy8gb2Z0ZW4geW91IGNhbGwgaXQuIFVzZWZ1bCBmb3IgbGF6eSBpbml0aWFsaXphdGlvbi5cbiAgXy5vbmNlID0gXy5wYXJ0aWFsKF8uYmVmb3JlLCAyKTtcblxuICAvLyBPYmplY3QgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBSZXRyaWV2ZSB0aGUgbmFtZXMgb2YgYW4gb2JqZWN0J3MgcHJvcGVydGllcy5cbiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYE9iamVjdC5rZXlzYFxuICBfLmtleXMgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIV8uaXNPYmplY3Qob2JqKSkgcmV0dXJuIFtdO1xuICAgIGlmIChuYXRpdmVLZXlzKSByZXR1cm4gbmF0aXZlS2V5cyhvYmopO1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikgaWYgKF8uaGFzKG9iaiwga2V5KSkga2V5cy5wdXNoKGtleSk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH07XG5cbiAgLy8gUmV0cmlldmUgdGhlIHZhbHVlcyBvZiBhbiBvYmplY3QncyBwcm9wZXJ0aWVzLlxuICBfLnZhbHVlcyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciB2YWx1ZXMgPSBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlc1tpXSA9IG9ialtrZXlzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfTtcblxuICAvLyBDb252ZXJ0IGFuIG9iamVjdCBpbnRvIGEgbGlzdCBvZiBgW2tleSwgdmFsdWVdYCBwYWlycy5cbiAgXy5wYWlycyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBwYWlycyA9IEFycmF5KGxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgcGFpcnNbaV0gPSBba2V5c1tpXSwgb2JqW2tleXNbaV1dXTtcbiAgICB9XG4gICAgcmV0dXJuIHBhaXJzO1xuICB9O1xuXG4gIC8vIEludmVydCB0aGUga2V5cyBhbmQgdmFsdWVzIG9mIGFuIG9iamVjdC4gVGhlIHZhbHVlcyBtdXN0IGJlIHNlcmlhbGl6YWJsZS5cbiAgXy5pbnZlcnQgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIGtleXMgPSBfLmtleXMob2JqKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0W29ialtrZXlzW2ldXV0gPSBrZXlzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFJldHVybiBhIHNvcnRlZCBsaXN0IG9mIHRoZSBmdW5jdGlvbiBuYW1lcyBhdmFpbGFibGUgb24gdGhlIG9iamVjdC5cbiAgLy8gQWxpYXNlZCBhcyBgbWV0aG9kc2BcbiAgXy5mdW5jdGlvbnMgPSBfLm1ldGhvZHMgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgbmFtZXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoXy5pc0Z1bmN0aW9uKG9ialtrZXldKSkgbmFtZXMucHVzaChrZXkpO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZXMuc29ydCgpO1xuICB9O1xuXG4gIC8vIEV4dGVuZCBhIGdpdmVuIG9iamVjdCB3aXRoIGFsbCB0aGUgcHJvcGVydGllcyBpbiBwYXNzZWQtaW4gb2JqZWN0KHMpLlxuICBfLmV4dGVuZCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmICghXy5pc09iamVjdChvYmopKSByZXR1cm4gb2JqO1xuICAgIHZhciBzb3VyY2UsIHByb3A7XG4gICAgZm9yICh2YXIgaSA9IDEsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yIChwcm9wIGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIHByb3ApKSB7XG4gICAgICAgICAgICBvYmpbcHJvcF0gPSBzb3VyY2VbcHJvcF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSBjb3B5IG9mIHRoZSBvYmplY3Qgb25seSBjb250YWluaW5nIHRoZSB3aGl0ZWxpc3RlZCBwcm9wZXJ0aWVzLlxuICBfLnBpY2sgPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9LCBrZXk7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0O1xuICAgIGlmIChfLmlzRnVuY3Rpb24oaXRlcmF0ZWUpKSB7XG4gICAgICBpdGVyYXRlZSA9IGNyZWF0ZUNhbGxiYWNrKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICAgIGZvciAoa2V5IGluIG9iaikge1xuICAgICAgICB2YXIgdmFsdWUgPSBvYmpba2V5XTtcbiAgICAgICAgaWYgKGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iaikpIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBrZXlzID0gY29uY2F0LmFwcGx5KFtdLCBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuICAgICAgb2JqID0gbmV3IE9iamVjdChvYmopO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmopIHJlc3VsdFtrZXldID0gb2JqW2tleV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgIC8vIFJldHVybiBhIGNvcHkgb2YgdGhlIG9iamVjdCB3aXRob3V0IHRoZSBibGFja2xpc3RlZCBwcm9wZXJ0aWVzLlxuICBfLm9taXQgPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaWYgKF8uaXNGdW5jdGlvbihpdGVyYXRlZSkpIHtcbiAgICAgIGl0ZXJhdGVlID0gXy5uZWdhdGUoaXRlcmF0ZWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIga2V5cyA9IF8ubWFwKGNvbmNhdC5hcHBseShbXSwgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKSwgU3RyaW5nKTtcbiAgICAgIGl0ZXJhdGVlID0gZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICByZXR1cm4gIV8uY29udGFpbnMoa2V5cywga2V5KTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBfLnBpY2sob2JqLCBpdGVyYXRlZSwgY29udGV4dCk7XG4gIH07XG5cbiAgLy8gRmlsbCBpbiBhIGdpdmVuIG9iamVjdCB3aXRoIGRlZmF1bHQgcHJvcGVydGllcy5cbiAgXy5kZWZhdWx0cyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmICghXy5pc09iamVjdChvYmopKSByZXR1cm4gb2JqO1xuICAgIGZvciAodmFyIGkgPSAxLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkge1xuICAgICAgICBpZiAob2JqW3Byb3BdID09PSB2b2lkIDApIG9ialtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcblxuICAvLyBDcmVhdGUgYSAoc2hhbGxvdy1jbG9uZWQpIGR1cGxpY2F0ZSBvZiBhbiBvYmplY3QuXG4gIF8uY2xvbmUgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIV8uaXNPYmplY3Qob2JqKSkgcmV0dXJuIG9iajtcbiAgICByZXR1cm4gXy5pc0FycmF5KG9iaikgPyBvYmouc2xpY2UoKSA6IF8uZXh0ZW5kKHt9LCBvYmopO1xuICB9O1xuXG4gIC8vIEludm9rZXMgaW50ZXJjZXB0b3Igd2l0aCB0aGUgb2JqLCBhbmQgdGhlbiByZXR1cm5zIG9iai5cbiAgLy8gVGhlIHByaW1hcnkgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byBcInRhcCBpbnRvXCIgYSBtZXRob2QgY2hhaW4sIGluXG4gIC8vIG9yZGVyIHRvIHBlcmZvcm0gb3BlcmF0aW9ucyBvbiBpbnRlcm1lZGlhdGUgcmVzdWx0cyB3aXRoaW4gdGhlIGNoYWluLlxuICBfLnRhcCA9IGZ1bmN0aW9uKG9iaiwgaW50ZXJjZXB0b3IpIHtcbiAgICBpbnRlcmNlcHRvcihvYmopO1xuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gSW50ZXJuYWwgcmVjdXJzaXZlIGNvbXBhcmlzb24gZnVuY3Rpb24gZm9yIGBpc0VxdWFsYC5cbiAgdmFyIGVxID0gZnVuY3Rpb24oYSwgYiwgYVN0YWNrLCBiU3RhY2spIHtcbiAgICAvLyBJZGVudGljYWwgb2JqZWN0cyBhcmUgZXF1YWwuIGAwID09PSAtMGAsIGJ1dCB0aGV5IGFyZW4ndCBpZGVudGljYWwuXG4gICAgLy8gU2VlIHRoZSBbSGFybW9ueSBgZWdhbGAgcHJvcG9zYWxdKGh0dHA6Ly93aWtpLmVjbWFzY3JpcHQub3JnL2Rva3UucGhwP2lkPWhhcm1vbnk6ZWdhbCkuXG4gICAgaWYgKGEgPT09IGIpIHJldHVybiBhICE9PSAwIHx8IDEgLyBhID09PSAxIC8gYjtcbiAgICAvLyBBIHN0cmljdCBjb21wYXJpc29uIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIGBudWxsID09IHVuZGVmaW5lZGAuXG4gICAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBhID09PSBiO1xuICAgIC8vIFVud3JhcCBhbnkgd3JhcHBlZCBvYmplY3RzLlxuICAgIGlmIChhIGluc3RhbmNlb2YgXykgYSA9IGEuX3dyYXBwZWQ7XG4gICAgaWYgKGIgaW5zdGFuY2VvZiBfKSBiID0gYi5fd3JhcHBlZDtcbiAgICAvLyBDb21wYXJlIGBbW0NsYXNzXV1gIG5hbWVzLlxuICAgIHZhciBjbGFzc05hbWUgPSB0b1N0cmluZy5jYWxsKGEpO1xuICAgIGlmIChjbGFzc05hbWUgIT09IHRvU3RyaW5nLmNhbGwoYikpIHJldHVybiBmYWxzZTtcbiAgICBzd2l0Y2ggKGNsYXNzTmFtZSkge1xuICAgICAgLy8gU3RyaW5ncywgbnVtYmVycywgcmVndWxhciBleHByZXNzaW9ucywgZGF0ZXMsIGFuZCBib29sZWFucyBhcmUgY29tcGFyZWQgYnkgdmFsdWUuXG4gICAgICBjYXNlICdbb2JqZWN0IFJlZ0V4cF0nOlxuICAgICAgLy8gUmVnRXhwcyBhcmUgY29lcmNlZCB0byBzdHJpbmdzIGZvciBjb21wYXJpc29uIChOb3RlOiAnJyArIC9hL2kgPT09ICcvYS9pJylcbiAgICAgIGNhc2UgJ1tvYmplY3QgU3RyaW5nXSc6XG4gICAgICAgIC8vIFByaW1pdGl2ZXMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgb2JqZWN0IHdyYXBwZXJzIGFyZSBlcXVpdmFsZW50OyB0aHVzLCBgXCI1XCJgIGlzXG4gICAgICAgIC8vIGVxdWl2YWxlbnQgdG8gYG5ldyBTdHJpbmcoXCI1XCIpYC5cbiAgICAgICAgcmV0dXJuICcnICsgYSA9PT0gJycgKyBiO1xuICAgICAgY2FzZSAnW29iamVjdCBOdW1iZXJdJzpcbiAgICAgICAgLy8gYE5hTmBzIGFyZSBlcXVpdmFsZW50LCBidXQgbm9uLXJlZmxleGl2ZS5cbiAgICAgICAgLy8gT2JqZWN0KE5hTikgaXMgZXF1aXZhbGVudCB0byBOYU5cbiAgICAgICAgaWYgKCthICE9PSArYSkgcmV0dXJuICtiICE9PSArYjtcbiAgICAgICAgLy8gQW4gYGVnYWxgIGNvbXBhcmlzb24gaXMgcGVyZm9ybWVkIGZvciBvdGhlciBudW1lcmljIHZhbHVlcy5cbiAgICAgICAgcmV0dXJuICthID09PSAwID8gMSAvICthID09PSAxIC8gYiA6ICthID09PSArYjtcbiAgICAgIGNhc2UgJ1tvYmplY3QgRGF0ZV0nOlxuICAgICAgY2FzZSAnW29iamVjdCBCb29sZWFuXSc6XG4gICAgICAgIC8vIENvZXJjZSBkYXRlcyBhbmQgYm9vbGVhbnMgdG8gbnVtZXJpYyBwcmltaXRpdmUgdmFsdWVzLiBEYXRlcyBhcmUgY29tcGFyZWQgYnkgdGhlaXJcbiAgICAgICAgLy8gbWlsbGlzZWNvbmQgcmVwcmVzZW50YXRpb25zLiBOb3RlIHRoYXQgaW52YWxpZCBkYXRlcyB3aXRoIG1pbGxpc2Vjb25kIHJlcHJlc2VudGF0aW9uc1xuICAgICAgICAvLyBvZiBgTmFOYCBhcmUgbm90IGVxdWl2YWxlbnQuXG4gICAgICAgIHJldHVybiArYSA9PT0gK2I7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYSAhPSAnb2JqZWN0JyB8fCB0eXBlb2YgYiAhPSAnb2JqZWN0JykgcmV0dXJuIGZhbHNlO1xuICAgIC8vIEFzc3VtZSBlcXVhbGl0eSBmb3IgY3ljbGljIHN0cnVjdHVyZXMuIFRoZSBhbGdvcml0aG0gZm9yIGRldGVjdGluZyBjeWNsaWNcbiAgICAvLyBzdHJ1Y3R1cmVzIGlzIGFkYXB0ZWQgZnJvbSBFUyA1LjEgc2VjdGlvbiAxNS4xMi4zLCBhYnN0cmFjdCBvcGVyYXRpb24gYEpPYC5cbiAgICB2YXIgbGVuZ3RoID0gYVN0YWNrLmxlbmd0aDtcbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIC8vIExpbmVhciBzZWFyY2guIFBlcmZvcm1hbmNlIGlzIGludmVyc2VseSBwcm9wb3J0aW9uYWwgdG8gdGhlIG51bWJlciBvZlxuICAgICAgLy8gdW5pcXVlIG5lc3RlZCBzdHJ1Y3R1cmVzLlxuICAgICAgaWYgKGFTdGFja1tsZW5ndGhdID09PSBhKSByZXR1cm4gYlN0YWNrW2xlbmd0aF0gPT09IGI7XG4gICAgfVxuICAgIC8vIE9iamVjdHMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1aXZhbGVudCwgYnV0IGBPYmplY3Rgc1xuICAgIC8vIGZyb20gZGlmZmVyZW50IGZyYW1lcyBhcmUuXG4gICAgdmFyIGFDdG9yID0gYS5jb25zdHJ1Y3RvciwgYkN0b3IgPSBiLmNvbnN0cnVjdG9yO1xuICAgIGlmIChcbiAgICAgIGFDdG9yICE9PSBiQ3RvciAmJlxuICAgICAgLy8gSGFuZGxlIE9iamVjdC5jcmVhdGUoeCkgY2FzZXNcbiAgICAgICdjb25zdHJ1Y3RvcicgaW4gYSAmJiAnY29uc3RydWN0b3InIGluIGIgJiZcbiAgICAgICEoXy5pc0Z1bmN0aW9uKGFDdG9yKSAmJiBhQ3RvciBpbnN0YW5jZW9mIGFDdG9yICYmXG4gICAgICAgIF8uaXNGdW5jdGlvbihiQ3RvcikgJiYgYkN0b3IgaW5zdGFuY2VvZiBiQ3RvcilcbiAgICApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gQWRkIHRoZSBmaXJzdCBvYmplY3QgdG8gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgIGFTdGFjay5wdXNoKGEpO1xuICAgIGJTdGFjay5wdXNoKGIpO1xuICAgIHZhciBzaXplLCByZXN1bHQ7XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIGFuZCBhcnJheXMuXG4gICAgaWYgKGNsYXNzTmFtZSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgLy8gQ29tcGFyZSBhcnJheSBsZW5ndGhzIHRvIGRldGVybWluZSBpZiBhIGRlZXAgY29tcGFyaXNvbiBpcyBuZWNlc3NhcnkuXG4gICAgICBzaXplID0gYS5sZW5ndGg7XG4gICAgICByZXN1bHQgPSBzaXplID09PSBiLmxlbmd0aDtcbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgLy8gRGVlcCBjb21wYXJlIHRoZSBjb250ZW50cywgaWdub3Jpbmcgbm9uLW51bWVyaWMgcHJvcGVydGllcy5cbiAgICAgICAgd2hpbGUgKHNpemUtLSkge1xuICAgICAgICAgIGlmICghKHJlc3VsdCA9IGVxKGFbc2l6ZV0sIGJbc2l6ZV0sIGFTdGFjaywgYlN0YWNrKSkpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIERlZXAgY29tcGFyZSBvYmplY3RzLlxuICAgICAgdmFyIGtleXMgPSBfLmtleXMoYSksIGtleTtcbiAgICAgIHNpemUgPSBrZXlzLmxlbmd0aDtcbiAgICAgIC8vIEVuc3VyZSB0aGF0IGJvdGggb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIG51bWJlciBvZiBwcm9wZXJ0aWVzIGJlZm9yZSBjb21wYXJpbmcgZGVlcCBlcXVhbGl0eS5cbiAgICAgIHJlc3VsdCA9IF8ua2V5cyhiKS5sZW5ndGggPT09IHNpemU7XG4gICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIHdoaWxlIChzaXplLS0pIHtcbiAgICAgICAgICAvLyBEZWVwIGNvbXBhcmUgZWFjaCBtZW1iZXJcbiAgICAgICAgICBrZXkgPSBrZXlzW3NpemVdO1xuICAgICAgICAgIGlmICghKHJlc3VsdCA9IF8uaGFzKGIsIGtleSkgJiYgZXEoYVtrZXldLCBiW2tleV0sIGFTdGFjaywgYlN0YWNrKSkpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFJlbW92ZSB0aGUgZmlyc3Qgb2JqZWN0IGZyb20gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgIGFTdGFjay5wb3AoKTtcbiAgICBiU3RhY2sucG9wKCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBQZXJmb3JtIGEgZGVlcCBjb21wYXJpc29uIHRvIGNoZWNrIGlmIHR3byBvYmplY3RzIGFyZSBlcXVhbC5cbiAgXy5pc0VxdWFsID0gZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBlcShhLCBiLCBbXSwgW10pO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gYXJyYXksIHN0cmluZywgb3Igb2JqZWN0IGVtcHR5P1xuICAvLyBBbiBcImVtcHR5XCIgb2JqZWN0IGhhcyBubyBlbnVtZXJhYmxlIG93bi1wcm9wZXJ0aWVzLlxuICBfLmlzRW1wdHkgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiB0cnVlO1xuICAgIGlmIChfLmlzQXJyYXkob2JqKSB8fCBfLmlzU3RyaW5nKG9iaikgfHwgXy5pc0FyZ3VtZW50cyhvYmopKSByZXR1cm4gb2JqLmxlbmd0aCA9PT0gMDtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSBpZiAoXy5oYXMob2JqLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIERPTSBlbGVtZW50P1xuICBfLmlzRWxlbWVudCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiAhIShvYmogJiYgb2JqLm5vZGVUeXBlID09PSAxKTtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGFuIGFycmF5P1xuICAvLyBEZWxlZ2F0ZXMgdG8gRUNNQTUncyBuYXRpdmUgQXJyYXkuaXNBcnJheVxuICBfLmlzQXJyYXkgPSBuYXRpdmVJc0FycmF5IHx8IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YXJpYWJsZSBhbiBvYmplY3Q/XG4gIF8uaXNPYmplY3QgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiBvYmo7XG4gICAgcmV0dXJuIHR5cGUgPT09ICdmdW5jdGlvbicgfHwgdHlwZSA9PT0gJ29iamVjdCcgJiYgISFvYmo7XG4gIH07XG5cbiAgLy8gQWRkIHNvbWUgaXNUeXBlIG1ldGhvZHM6IGlzQXJndW1lbnRzLCBpc0Z1bmN0aW9uLCBpc1N0cmluZywgaXNOdW1iZXIsIGlzRGF0ZSwgaXNSZWdFeHAuXG4gIF8uZWFjaChbJ0FyZ3VtZW50cycsICdGdW5jdGlvbicsICdTdHJpbmcnLCAnTnVtYmVyJywgJ0RhdGUnLCAnUmVnRXhwJ10sIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBfWydpcycgKyBuYW1lXSA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgJyArIG5hbWUgKyAnXSc7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gRGVmaW5lIGEgZmFsbGJhY2sgdmVyc2lvbiBvZiB0aGUgbWV0aG9kIGluIGJyb3dzZXJzIChhaGVtLCBJRSksIHdoZXJlXG4gIC8vIHRoZXJlIGlzbid0IGFueSBpbnNwZWN0YWJsZSBcIkFyZ3VtZW50c1wiIHR5cGUuXG4gIGlmICghXy5pc0FyZ3VtZW50cyhhcmd1bWVudHMpKSB7XG4gICAgXy5pc0FyZ3VtZW50cyA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIF8uaGFzKG9iaiwgJ2NhbGxlZScpO1xuICAgIH07XG4gIH1cblxuICAvLyBPcHRpbWl6ZSBgaXNGdW5jdGlvbmAgaWYgYXBwcm9wcmlhdGUuIFdvcmsgYXJvdW5kIGFuIElFIDExIGJ1Zy5cbiAgaWYgKHR5cGVvZiAvLi8gIT09ICdmdW5jdGlvbicpIHtcbiAgICBfLmlzRnVuY3Rpb24gPSBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09ICdmdW5jdGlvbicgfHwgZmFsc2U7XG4gICAgfTtcbiAgfVxuXG4gIC8vIElzIGEgZ2l2ZW4gb2JqZWN0IGEgZmluaXRlIG51bWJlcj9cbiAgXy5pc0Zpbml0ZSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBpc0Zpbml0ZShvYmopICYmICFpc05hTihwYXJzZUZsb2F0KG9iaikpO1xuICB9O1xuXG4gIC8vIElzIHRoZSBnaXZlbiB2YWx1ZSBgTmFOYD8gKE5hTiBpcyB0aGUgb25seSBudW1iZXIgd2hpY2ggZG9lcyBub3QgZXF1YWwgaXRzZWxmKS5cbiAgXy5pc05hTiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBfLmlzTnVtYmVyKG9iaikgJiYgb2JqICE9PSArb2JqO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYSBib29sZWFuP1xuICBfLmlzQm9vbGVhbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogPT09IHRydWUgfHwgb2JqID09PSBmYWxzZSB8fCB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEJvb2xlYW5dJztcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGVxdWFsIHRvIG51bGw/XG4gIF8uaXNOdWxsID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA9PT0gbnVsbDtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhcmlhYmxlIHVuZGVmaW5lZD9cbiAgXy5pc1VuZGVmaW5lZCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogPT09IHZvaWQgMDtcbiAgfTtcblxuICAvLyBTaG9ydGN1dCBmdW5jdGlvbiBmb3IgY2hlY2tpbmcgaWYgYW4gb2JqZWN0IGhhcyBhIGdpdmVuIHByb3BlcnR5IGRpcmVjdGx5XG4gIC8vIG9uIGl0c2VsZiAoaW4gb3RoZXIgd29yZHMsIG5vdCBvbiBhIHByb3RvdHlwZSkuXG4gIF8uaGFzID0gZnVuY3Rpb24ob2JqLCBrZXkpIHtcbiAgICByZXR1cm4gb2JqICE9IG51bGwgJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG4gIH07XG5cbiAgLy8gVXRpbGl0eSBGdW5jdGlvbnNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBSdW4gVW5kZXJzY29yZS5qcyBpbiAqbm9Db25mbGljdCogbW9kZSwgcmV0dXJuaW5nIHRoZSBgX2AgdmFyaWFibGUgdG8gaXRzXG4gIC8vIHByZXZpb3VzIG93bmVyLiBSZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoZSBVbmRlcnNjb3JlIG9iamVjdC5cbiAgXy5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgcm9vdC5fID0gcHJldmlvdXNVbmRlcnNjb3JlO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIEtlZXAgdGhlIGlkZW50aXR5IGZ1bmN0aW9uIGFyb3VuZCBmb3IgZGVmYXVsdCBpdGVyYXRlZXMuXG4gIF8uaWRlbnRpdHkgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICBfLmNvbnN0YW50ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgfTtcblxuICBfLm5vb3AgPSBmdW5jdGlvbigpe307XG5cbiAgXy5wcm9wZXJ0eSA9IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmpba2V5XTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBwcmVkaWNhdGUgZm9yIGNoZWNraW5nIHdoZXRoZXIgYW4gb2JqZWN0IGhhcyBhIGdpdmVuIHNldCBvZiBga2V5OnZhbHVlYCBwYWlycy5cbiAgXy5tYXRjaGVzID0gZnVuY3Rpb24oYXR0cnMpIHtcbiAgICB2YXIgcGFpcnMgPSBfLnBhaXJzKGF0dHJzKSwgbGVuZ3RoID0gcGFpcnMubGVuZ3RoO1xuICAgIHJldHVybiBmdW5jdGlvbihvYmopIHtcbiAgICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuICFsZW5ndGg7XG4gICAgICBvYmogPSBuZXcgT2JqZWN0KG9iaik7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwYWlyID0gcGFpcnNbaV0sIGtleSA9IHBhaXJbMF07XG4gICAgICAgIGlmIChwYWlyWzFdICE9PSBvYmpba2V5XSB8fCAhKGtleSBpbiBvYmopKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJ1biBhIGZ1bmN0aW9uICoqbioqIHRpbWVzLlxuICBfLnRpbWVzID0gZnVuY3Rpb24obiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICB2YXIgYWNjdW0gPSBBcnJheShNYXRoLm1heCgwLCBuKSk7XG4gICAgaXRlcmF0ZWUgPSBjcmVhdGVDYWxsYmFjayhpdGVyYXRlZSwgY29udGV4dCwgMSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIGFjY3VtW2ldID0gaXRlcmF0ZWUoaSk7XG4gICAgcmV0dXJuIGFjY3VtO1xuICB9O1xuXG4gIC8vIFJldHVybiBhIHJhbmRvbSBpbnRlZ2VyIGJldHdlZW4gbWluIGFuZCBtYXggKGluY2x1c2l2ZSkuXG4gIF8ucmFuZG9tID0gZnVuY3Rpb24obWluLCBtYXgpIHtcbiAgICBpZiAobWF4ID09IG51bGwpIHtcbiAgICAgIG1heCA9IG1pbjtcbiAgICAgIG1pbiA9IDA7XG4gICAgfVxuICAgIHJldHVybiBtaW4gKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpO1xuICB9O1xuXG4gIC8vIEEgKHBvc3NpYmx5IGZhc3Rlcikgd2F5IHRvIGdldCB0aGUgY3VycmVudCB0aW1lc3RhbXAgYXMgYW4gaW50ZWdlci5cbiAgXy5ub3cgPSBEYXRlLm5vdyB8fCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIH07XG5cbiAgIC8vIExpc3Qgb2YgSFRNTCBlbnRpdGllcyBmb3IgZXNjYXBpbmcuXG4gIHZhciBlc2NhcGVNYXAgPSB7XG4gICAgJyYnOiAnJmFtcDsnLFxuICAgICc8JzogJyZsdDsnLFxuICAgICc+JzogJyZndDsnLFxuICAgICdcIic6ICcmcXVvdDsnLFxuICAgIFwiJ1wiOiAnJiN4Mjc7JyxcbiAgICAnYCc6ICcmI3g2MDsnXG4gIH07XG4gIHZhciB1bmVzY2FwZU1hcCA9IF8uaW52ZXJ0KGVzY2FwZU1hcCk7XG5cbiAgLy8gRnVuY3Rpb25zIGZvciBlc2NhcGluZyBhbmQgdW5lc2NhcGluZyBzdHJpbmdzIHRvL2Zyb20gSFRNTCBpbnRlcnBvbGF0aW9uLlxuICB2YXIgY3JlYXRlRXNjYXBlciA9IGZ1bmN0aW9uKG1hcCkge1xuICAgIHZhciBlc2NhcGVyID0gZnVuY3Rpb24obWF0Y2gpIHtcbiAgICAgIHJldHVybiBtYXBbbWF0Y2hdO1xuICAgIH07XG4gICAgLy8gUmVnZXhlcyBmb3IgaWRlbnRpZnlpbmcgYSBrZXkgdGhhdCBuZWVkcyB0byBiZSBlc2NhcGVkXG4gICAgdmFyIHNvdXJjZSA9ICcoPzonICsgXy5rZXlzKG1hcCkuam9pbignfCcpICsgJyknO1xuICAgIHZhciB0ZXN0UmVnZXhwID0gUmVnRXhwKHNvdXJjZSk7XG4gICAgdmFyIHJlcGxhY2VSZWdleHAgPSBSZWdFeHAoc291cmNlLCAnZycpO1xuICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHN0cmluZyA9PSBudWxsID8gJycgOiAnJyArIHN0cmluZztcbiAgICAgIHJldHVybiB0ZXN0UmVnZXhwLnRlc3Qoc3RyaW5nKSA/IHN0cmluZy5yZXBsYWNlKHJlcGxhY2VSZWdleHAsIGVzY2FwZXIpIDogc3RyaW5nO1xuICAgIH07XG4gIH07XG4gIF8uZXNjYXBlID0gY3JlYXRlRXNjYXBlcihlc2NhcGVNYXApO1xuICBfLnVuZXNjYXBlID0gY3JlYXRlRXNjYXBlcih1bmVzY2FwZU1hcCk7XG5cbiAgLy8gSWYgdGhlIHZhbHVlIG9mIHRoZSBuYW1lZCBgcHJvcGVydHlgIGlzIGEgZnVuY3Rpb24gdGhlbiBpbnZva2UgaXQgd2l0aCB0aGVcbiAgLy8gYG9iamVjdGAgYXMgY29udGV4dDsgb3RoZXJ3aXNlLCByZXR1cm4gaXQuXG4gIF8ucmVzdWx0ID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkge1xuICAgIGlmIChvYmplY3QgPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDtcbiAgICB2YXIgdmFsdWUgPSBvYmplY3RbcHJvcGVydHldO1xuICAgIHJldHVybiBfLmlzRnVuY3Rpb24odmFsdWUpID8gb2JqZWN0W3Byb3BlcnR5XSgpIDogdmFsdWU7XG4gIH07XG5cbiAgLy8gR2VuZXJhdGUgYSB1bmlxdWUgaW50ZWdlciBpZCAodW5pcXVlIHdpdGhpbiB0aGUgZW50aXJlIGNsaWVudCBzZXNzaW9uKS5cbiAgLy8gVXNlZnVsIGZvciB0ZW1wb3JhcnkgRE9NIGlkcy5cbiAgdmFyIGlkQ291bnRlciA9IDA7XG4gIF8udW5pcXVlSWQgPSBmdW5jdGlvbihwcmVmaXgpIHtcbiAgICB2YXIgaWQgPSArK2lkQ291bnRlciArICcnO1xuICAgIHJldHVybiBwcmVmaXggPyBwcmVmaXggKyBpZCA6IGlkO1xuICB9O1xuXG4gIC8vIEJ5IGRlZmF1bHQsIFVuZGVyc2NvcmUgdXNlcyBFUkItc3R5bGUgdGVtcGxhdGUgZGVsaW1pdGVycywgY2hhbmdlIHRoZVxuICAvLyBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlIGFsdGVybmF0aXZlIGRlbGltaXRlcnMuXG4gIF8udGVtcGxhdGVTZXR0aW5ncyA9IHtcbiAgICBldmFsdWF0ZSAgICA6IC88JShbXFxzXFxTXSs/KSU+L2csXG4gICAgaW50ZXJwb2xhdGUgOiAvPCU9KFtcXHNcXFNdKz8pJT4vZyxcbiAgICBlc2NhcGUgICAgICA6IC88JS0oW1xcc1xcU10rPyklPi9nXG4gIH07XG5cbiAgLy8gV2hlbiBjdXN0b21pemluZyBgdGVtcGxhdGVTZXR0aW5nc2AsIGlmIHlvdSBkb24ndCB3YW50IHRvIGRlZmluZSBhblxuICAvLyBpbnRlcnBvbGF0aW9uLCBldmFsdWF0aW9uIG9yIGVzY2FwaW5nIHJlZ2V4LCB3ZSBuZWVkIG9uZSB0aGF0IGlzXG4gIC8vIGd1YXJhbnRlZWQgbm90IHRvIG1hdGNoLlxuICB2YXIgbm9NYXRjaCA9IC8oLileLztcblxuICAvLyBDZXJ0YWluIGNoYXJhY3RlcnMgbmVlZCB0byBiZSBlc2NhcGVkIHNvIHRoYXQgdGhleSBjYW4gYmUgcHV0IGludG8gYVxuICAvLyBzdHJpbmcgbGl0ZXJhbC5cbiAgdmFyIGVzY2FwZXMgPSB7XG4gICAgXCInXCI6ICAgICAgXCInXCIsXG4gICAgJ1xcXFwnOiAgICAgJ1xcXFwnLFxuICAgICdcXHInOiAgICAgJ3InLFxuICAgICdcXG4nOiAgICAgJ24nLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICB2YXIgZXNjYXBlciA9IC9cXFxcfCd8XFxyfFxcbnxcXHUyMDI4fFxcdTIwMjkvZztcblxuICB2YXIgZXNjYXBlQ2hhciA9IGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgcmV0dXJuICdcXFxcJyArIGVzY2FwZXNbbWF0Y2hdO1xuICB9O1xuXG4gIC8vIEphdmFTY3JpcHQgbWljcm8tdGVtcGxhdGluZywgc2ltaWxhciB0byBKb2huIFJlc2lnJ3MgaW1wbGVtZW50YXRpb24uXG4gIC8vIFVuZGVyc2NvcmUgdGVtcGxhdGluZyBoYW5kbGVzIGFyYml0cmFyeSBkZWxpbWl0ZXJzLCBwcmVzZXJ2ZXMgd2hpdGVzcGFjZSxcbiAgLy8gYW5kIGNvcnJlY3RseSBlc2NhcGVzIHF1b3RlcyB3aXRoaW4gaW50ZXJwb2xhdGVkIGNvZGUuXG4gIC8vIE5COiBgb2xkU2V0dGluZ3NgIG9ubHkgZXhpc3RzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cbiAgXy50ZW1wbGF0ZSA9IGZ1bmN0aW9uKHRleHQsIHNldHRpbmdzLCBvbGRTZXR0aW5ncykge1xuICAgIGlmICghc2V0dGluZ3MgJiYgb2xkU2V0dGluZ3MpIHNldHRpbmdzID0gb2xkU2V0dGluZ3M7XG4gICAgc2V0dGluZ3MgPSBfLmRlZmF1bHRzKHt9LCBzZXR0aW5ncywgXy50ZW1wbGF0ZVNldHRpbmdzKTtcblxuICAgIC8vIENvbWJpbmUgZGVsaW1pdGVycyBpbnRvIG9uZSByZWd1bGFyIGV4cHJlc3Npb24gdmlhIGFsdGVybmF0aW9uLlxuICAgIHZhciBtYXRjaGVyID0gUmVnRXhwKFtcbiAgICAgIChzZXR0aW5ncy5lc2NhcGUgfHwgbm9NYXRjaCkuc291cmNlLFxuICAgICAgKHNldHRpbmdzLmludGVycG9sYXRlIHx8IG5vTWF0Y2gpLnNvdXJjZSxcbiAgICAgIChzZXR0aW5ncy5ldmFsdWF0ZSB8fCBub01hdGNoKS5zb3VyY2VcbiAgICBdLmpvaW4oJ3wnKSArICd8JCcsICdnJyk7XG5cbiAgICAvLyBDb21waWxlIHRoZSB0ZW1wbGF0ZSBzb3VyY2UsIGVzY2FwaW5nIHN0cmluZyBsaXRlcmFscyBhcHByb3ByaWF0ZWx5LlxuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHNvdXJjZSA9IFwiX19wKz0nXCI7XG4gICAgdGV4dC5yZXBsYWNlKG1hdGNoZXIsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGUsIGludGVycG9sYXRlLCBldmFsdWF0ZSwgb2Zmc2V0KSB7XG4gICAgICBzb3VyY2UgKz0gdGV4dC5zbGljZShpbmRleCwgb2Zmc2V0KS5yZXBsYWNlKGVzY2FwZXIsIGVzY2FwZUNoYXIpO1xuICAgICAgaW5kZXggPSBvZmZzZXQgKyBtYXRjaC5sZW5ndGg7XG5cbiAgICAgIGlmIChlc2NhcGUpIHtcbiAgICAgICAgc291cmNlICs9IFwiJytcXG4oKF9fdD0oXCIgKyBlc2NhcGUgKyBcIikpPT1udWxsPycnOl8uZXNjYXBlKF9fdCkpK1xcbidcIjtcbiAgICAgIH0gZWxzZSBpZiAoaW50ZXJwb2xhdGUpIHtcbiAgICAgICAgc291cmNlICs9IFwiJytcXG4oKF9fdD0oXCIgKyBpbnRlcnBvbGF0ZSArIFwiKSk9PW51bGw/Jyc6X190KStcXG4nXCI7XG4gICAgICB9IGVsc2UgaWYgKGV2YWx1YXRlKSB7XG4gICAgICAgIHNvdXJjZSArPSBcIic7XFxuXCIgKyBldmFsdWF0ZSArIFwiXFxuX19wKz0nXCI7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkb2JlIFZNcyBuZWVkIHRoZSBtYXRjaCByZXR1cm5lZCB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IG9mZmVzdC5cbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcbiAgICBzb3VyY2UgKz0gXCInO1xcblwiO1xuXG4gICAgLy8gSWYgYSB2YXJpYWJsZSBpcyBub3Qgc3BlY2lmaWVkLCBwbGFjZSBkYXRhIHZhbHVlcyBpbiBsb2NhbCBzY29wZS5cbiAgICBpZiAoIXNldHRpbmdzLnZhcmlhYmxlKSBzb3VyY2UgPSAnd2l0aChvYmp8fHt9KXtcXG4nICsgc291cmNlICsgJ31cXG4nO1xuXG4gICAgc291cmNlID0gXCJ2YXIgX190LF9fcD0nJyxfX2o9QXJyYXkucHJvdG90eXBlLmpvaW4sXCIgK1xuICAgICAgXCJwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9O1xcblwiICtcbiAgICAgIHNvdXJjZSArICdyZXR1cm4gX19wO1xcbic7XG5cbiAgICB0cnkge1xuICAgICAgdmFyIHJlbmRlciA9IG5ldyBGdW5jdGlvbihzZXR0aW5ncy52YXJpYWJsZSB8fCAnb2JqJywgJ18nLCBzb3VyY2UpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGUuc291cmNlID0gc291cmNlO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG5cbiAgICB2YXIgdGVtcGxhdGUgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gcmVuZGVyLmNhbGwodGhpcywgZGF0YSwgXyk7XG4gICAgfTtcblxuICAgIC8vIFByb3ZpZGUgdGhlIGNvbXBpbGVkIHNvdXJjZSBhcyBhIGNvbnZlbmllbmNlIGZvciBwcmVjb21waWxhdGlvbi5cbiAgICB2YXIgYXJndW1lbnQgPSBzZXR0aW5ncy52YXJpYWJsZSB8fCAnb2JqJztcbiAgICB0ZW1wbGF0ZS5zb3VyY2UgPSAnZnVuY3Rpb24oJyArIGFyZ3VtZW50ICsgJyl7XFxuJyArIHNvdXJjZSArICd9JztcblxuICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgfTtcblxuICAvLyBBZGQgYSBcImNoYWluXCIgZnVuY3Rpb24uIFN0YXJ0IGNoYWluaW5nIGEgd3JhcHBlZCBVbmRlcnNjb3JlIG9iamVjdC5cbiAgXy5jaGFpbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBpbnN0YW5jZSA9IF8ob2JqKTtcbiAgICBpbnN0YW5jZS5fY2hhaW4gPSB0cnVlO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfTtcblxuICAvLyBPT1BcbiAgLy8gLS0tLS0tLS0tLS0tLS0tXG4gIC8vIElmIFVuZGVyc2NvcmUgaXMgY2FsbGVkIGFzIGEgZnVuY3Rpb24sIGl0IHJldHVybnMgYSB3cmFwcGVkIG9iamVjdCB0aGF0XG4gIC8vIGNhbiBiZSB1c2VkIE9PLXN0eWxlLiBUaGlzIHdyYXBwZXIgaG9sZHMgYWx0ZXJlZCB2ZXJzaW9ucyBvZiBhbGwgdGhlXG4gIC8vIHVuZGVyc2NvcmUgZnVuY3Rpb25zLiBXcmFwcGVkIG9iamVjdHMgbWF5IGJlIGNoYWluZWQuXG5cbiAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNvbnRpbnVlIGNoYWluaW5nIGludGVybWVkaWF0ZSByZXN1bHRzLlxuICB2YXIgcmVzdWx0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NoYWluID8gXyhvYmopLmNoYWluKCkgOiBvYmo7XG4gIH07XG5cbiAgLy8gQWRkIHlvdXIgb3duIGN1c3RvbSBmdW5jdGlvbnMgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0LlxuICBfLm1peGluID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgXy5lYWNoKF8uZnVuY3Rpb25zKG9iaiksIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gX1tuYW1lXSA9IG9ialtuYW1lXTtcbiAgICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gW3RoaXMuX3dyYXBwZWRdO1xuICAgICAgICBwdXNoLmFwcGx5KGFyZ3MsIGFyZ3VtZW50cyk7XG4gICAgICAgIHJldHVybiByZXN1bHQuY2FsbCh0aGlzLCBmdW5jLmFwcGx5KF8sIGFyZ3MpKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gQWRkIGFsbCBvZiB0aGUgVW5kZXJzY29yZSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIgb2JqZWN0LlxuICBfLm1peGluKF8pO1xuXG4gIC8vIEFkZCBhbGwgbXV0YXRvciBBcnJheSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIuXG4gIF8uZWFjaChbJ3BvcCcsICdwdXNoJywgJ3JldmVyc2UnLCAnc2hpZnQnLCAnc29ydCcsICdzcGxpY2UnLCAndW5zaGlmdCddLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIG1ldGhvZCA9IEFycmF5UHJvdG9bbmFtZV07XG4gICAgXy5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvYmogPSB0aGlzLl93cmFwcGVkO1xuICAgICAgbWV0aG9kLmFwcGx5KG9iaiwgYXJndW1lbnRzKTtcbiAgICAgIGlmICgobmFtZSA9PT0gJ3NoaWZ0JyB8fCBuYW1lID09PSAnc3BsaWNlJykgJiYgb2JqLmxlbmd0aCA9PT0gMCkgZGVsZXRlIG9ialswXTtcbiAgICAgIHJldHVybiByZXN1bHQuY2FsbCh0aGlzLCBvYmopO1xuICAgIH07XG4gIH0pO1xuXG4gIC8vIEFkZCBhbGwgYWNjZXNzb3IgQXJyYXkgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyLlxuICBfLmVhY2goWydjb25jYXQnLCAnam9pbicsICdzbGljZSddLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIG1ldGhvZCA9IEFycmF5UHJvdG9bbmFtZV07XG4gICAgXy5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByZXN1bHQuY2FsbCh0aGlzLCBtZXRob2QuYXBwbHkodGhpcy5fd3JhcHBlZCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gRXh0cmFjdHMgdGhlIHJlc3VsdCBmcm9tIGEgd3JhcHBlZCBhbmQgY2hhaW5lZCBvYmplY3QuXG4gIF8ucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyYXBwZWQ7XG4gIH07XG5cbiAgLy8gQU1EIHJlZ2lzdHJhdGlvbiBoYXBwZW5zIGF0IHRoZSBlbmQgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBBTUQgbG9hZGVyc1xuICAvLyB0aGF0IG1heSBub3QgZW5mb3JjZSBuZXh0LXR1cm4gc2VtYW50aWNzIG9uIG1vZHVsZXMuIEV2ZW4gdGhvdWdoIGdlbmVyYWxcbiAgLy8gcHJhY3RpY2UgZm9yIEFNRCByZWdpc3RyYXRpb24gaXMgdG8gYmUgYW5vbnltb3VzLCB1bmRlcnNjb3JlIHJlZ2lzdGVyc1xuICAvLyBhcyBhIG5hbWVkIG1vZHVsZSBiZWNhdXNlLCBsaWtlIGpRdWVyeSwgaXQgaXMgYSBiYXNlIGxpYnJhcnkgdGhhdCBpc1xuICAvLyBwb3B1bGFyIGVub3VnaCB0byBiZSBidW5kbGVkIGluIGEgdGhpcmQgcGFydHkgbGliLCBidXQgbm90IGJlIHBhcnQgb2ZcbiAgLy8gYW4gQU1EIGxvYWQgcmVxdWVzdC4gVGhvc2UgY2FzZXMgY291bGQgZ2VuZXJhdGUgYW4gZXJyb3Igd2hlbiBhblxuICAvLyBhbm9ueW1vdXMgZGVmaW5lKCkgaXMgY2FsbGVkIG91dHNpZGUgb2YgYSBsb2FkZXIgcmVxdWVzdC5cbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZSgndW5kZXJzY29yZScsIFtdLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBfO1xuICAgIH0pO1xuICB9XG59LmNhbGwodGhpcykpO1xuXG59LHt9XSw3MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgQXV0b0ZvY3VzTWl4aW5cbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBmb2N1c05vZGUgPSByZXF1aXJlKFwiLi9mb2N1c05vZGVcIik7XG5cbnZhciBBdXRvRm9jdXNNaXhpbiA9IHtcbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLnByb3BzLmF1dG9Gb2N1cykge1xuICAgICAgZm9jdXNOb2RlKHRoaXMuZ2V0RE9NTm9kZSgpKTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXV0b0ZvY3VzTWl4aW47XG5cbn0se1wiLi9mb2N1c05vZGVcIjoxODF9XSw3MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgQmVmb3JlSW5wdXRFdmVudFBsdWdpblxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZShcIi4vRXZlbnRDb25zdGFudHNcIik7XG52YXIgRXZlbnRQcm9wYWdhdG9ycyA9IHJlcXVpcmUoXCIuL0V2ZW50UHJvcGFnYXRvcnNcIik7XG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKTtcbnZhciBTeW50aGV0aWNJbnB1dEV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljSW5wdXRFdmVudFwiKTtcblxudmFyIGtleU9mID0gcmVxdWlyZShcIi4va2V5T2ZcIik7XG5cbnZhciBjYW5Vc2VUZXh0SW5wdXRFdmVudCA9IChcbiAgRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmXG4gICdUZXh0RXZlbnQnIGluIHdpbmRvdyAmJlxuICAhKCdkb2N1bWVudE1vZGUnIGluIGRvY3VtZW50IHx8IGlzUHJlc3RvKCkpXG4pO1xuXG4vKipcbiAqIE9wZXJhIDw9IDEyIGluY2x1ZGVzIFRleHRFdmVudCBpbiB3aW5kb3csIGJ1dCBkb2VzIG5vdCBmaXJlXG4gKiB0ZXh0IGlucHV0IGV2ZW50cy4gUmVseSBvbiBrZXlwcmVzcyBpbnN0ZWFkLlxuICovXG5mdW5jdGlvbiBpc1ByZXN0bygpIHtcbiAgdmFyIG9wZXJhID0gd2luZG93Lm9wZXJhO1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiBvcGVyYSA9PT0gJ29iamVjdCcgJiZcbiAgICB0eXBlb2Ygb3BlcmEudmVyc2lvbiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHBhcnNlSW50KG9wZXJhLnZlcnNpb24oKSwgMTApIDw9IDEyXG4gICk7XG59XG5cbnZhciBTUEFDRUJBUl9DT0RFID0gMzI7XG52YXIgU1BBQ0VCQVJfQ0hBUiA9IFN0cmluZy5mcm9tQ2hhckNvZGUoU1BBQ0VCQVJfQ09ERSk7XG5cbnZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcblxuLy8gRXZlbnRzIGFuZCB0aGVpciBjb3JyZXNwb25kaW5nIHByb3BlcnR5IG5hbWVzLlxudmFyIGV2ZW50VHlwZXMgPSB7XG4gIGJlZm9yZUlucHV0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkJlZm9yZUlucHV0OiBudWxsfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQmVmb3JlSW5wdXRDYXB0dXJlOiBudWxsfSlcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW1xuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvbkVuZCxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5UHJlc3MsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcFRleHRJbnB1dCxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wUGFzdGVcbiAgICBdXG4gIH1cbn07XG5cbi8vIFRyYWNrIGNoYXJhY3RlcnMgaW5zZXJ0ZWQgdmlhIGtleXByZXNzIGFuZCBjb21wb3NpdGlvbiBldmVudHMuXG52YXIgZmFsbGJhY2tDaGFycyA9IG51bGw7XG5cbi8vIFRyYWNrIHdoZXRoZXIgd2UndmUgZXZlciBoYW5kbGVkIGEga2V5cHJlc3Mgb24gdGhlIHNwYWNlIGtleS5cbnZhciBoYXNTcGFjZUtleXByZXNzID0gZmFsc2U7XG5cbi8qKlxuICogUmV0dXJuIHdoZXRoZXIgYSBuYXRpdmUga2V5cHJlc3MgZXZlbnQgaXMgYXNzdW1lZCB0byBiZSBhIGNvbW1hbmQuXG4gKiBUaGlzIGlzIHJlcXVpcmVkIGJlY2F1c2UgRmlyZWZveCBmaXJlcyBga2V5cHJlc3NgIGV2ZW50cyBmb3Iga2V5IGNvbW1hbmRzXG4gKiAoY3V0LCBjb3B5LCBzZWxlY3QtYWxsLCBldGMuKSBldmVuIHRob3VnaCBubyBjaGFyYWN0ZXIgaXMgaW5zZXJ0ZWQuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5cHJlc3NDb21tYW5kKG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiAoXG4gICAgKG5hdGl2ZUV2ZW50LmN0cmxLZXkgfHwgbmF0aXZlRXZlbnQuYWx0S2V5IHx8IG5hdGl2ZUV2ZW50Lm1ldGFLZXkpICYmXG4gICAgLy8gY3RybEtleSAmJiBhbHRLZXkgaXMgZXF1aXZhbGVudCB0byBBbHRHciwgYW5kIGlzIG5vdCBhIGNvbW1hbmQuXG4gICAgIShuYXRpdmVFdmVudC5jdHJsS2V5ICYmIG5hdGl2ZUV2ZW50LmFsdEtleSlcbiAgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYW4gYG9uQmVmb3JlSW5wdXRgIGV2ZW50IHRvIG1hdGNoXG4gKiBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDEzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDEzMTEwNS8jZXZlbnRzLWlucHV0ZXZlbnRzLlxuICpcbiAqIFRoaXMgZXZlbnQgcGx1Z2luIGlzIGJhc2VkIG9uIHRoZSBuYXRpdmUgYHRleHRJbnB1dGAgZXZlbnRcbiAqIGF2YWlsYWJsZSBpbiBDaHJvbWUsIFNhZmFyaSwgT3BlcmEsIGFuZCBJRS4gVGhpcyBldmVudCBmaXJlcyBhZnRlclxuICogYG9uS2V5UHJlc3NgIGFuZCBgb25Db21wb3NpdGlvbkVuZGAsIGJ1dCBiZWZvcmUgYG9uSW5wdXRgLlxuICpcbiAqIGBiZWZvcmVJbnB1dGAgaXMgc3BlYydkIGJ1dCBub3QgaW1wbGVtZW50ZWQgaW4gYW55IGJyb3dzZXJzLCBhbmRcbiAqIHRoZSBgaW5wdXRgIGV2ZW50IGRvZXMgbm90IHByb3ZpZGUgYW55IHVzZWZ1bCBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGhhc1xuICogYWN0dWFsbHkgYmVlbiBhZGRlZCwgY29udHJhcnkgdG8gdGhlIHNwZWMuIFRodXMsIGB0ZXh0SW5wdXRgIGlzIHRoZSBiZXN0XG4gKiBhdmFpbGFibGUgZXZlbnQgdG8gaWRlbnRpZnkgdGhlIGNoYXJhY3RlcnMgdGhhdCBoYXZlIGFjdHVhbGx5IGJlZW4gaW5zZXJ0ZWRcbiAqIGludG8gdGhlIHRhcmdldCBub2RlLlxuICovXG52YXIgQmVmb3JlSW5wdXRFdmVudFBsdWdpbiA9IHtcblxuICBldmVudFR5cGVzOiBldmVudFR5cGVzLFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVGFyZ2V0SUQgSUQgb2YgYHRvcExldmVsVGFyZ2V0YC5cbiAgICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICAgKiBAcmV0dXJuIHsqfSBBbiBhY2N1bXVsYXRpb24gb2Ygc3ludGhldGljIGV2ZW50cy5cbiAgICogQHNlZSB7RXZlbnRQbHVnaW5IdWIuZXh0cmFjdEV2ZW50c31cbiAgICovXG4gIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uKFxuICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgICB0b3BMZXZlbFRhcmdldElELFxuICAgICAgbmF0aXZlRXZlbnQpIHtcblxuICAgIHZhciBjaGFycztcblxuICAgIGlmIChjYW5Vc2VUZXh0SW5wdXRFdmVudCkge1xuICAgICAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzOlxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIElmIG5hdGl2ZSBgdGV4dElucHV0YCBldmVudHMgYXJlIGF2YWlsYWJsZSwgb3VyIGdvYWwgaXMgdG8gbWFrZVxuICAgICAgICAgICAqIHVzZSBvZiB0aGVtLiBIb3dldmVyLCB0aGVyZSBpcyBhIHNwZWNpYWwgY2FzZTogdGhlIHNwYWNlYmFyIGtleS5cbiAgICAgICAgICAgKiBJbiBXZWJraXQsIHByZXZlbnRpbmcgZGVmYXVsdCBvbiBhIHNwYWNlYmFyIGB0ZXh0SW5wdXRgIGV2ZW50XG4gICAgICAgICAgICogY2FuY2VscyBjaGFyYWN0ZXIgaW5zZXJ0aW9uLCBidXQgaXQgKmFsc28qIGNhdXNlcyB0aGUgYnJvd3NlclxuICAgICAgICAgICAqIHRvIGZhbGwgYmFjayB0byBpdHMgZGVmYXVsdCBzcGFjZWJhciBiZWhhdmlvciBvZiBzY3JvbGxpbmcgdGhlXG4gICAgICAgICAgICogcGFnZS5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIFRyYWNraW5nIGF0OlxuICAgICAgICAgICAqIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNTUxMDNcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIFRvIGF2b2lkIHRoaXMgaXNzdWUsIHVzZSB0aGUga2V5cHJlc3MgZXZlbnQgYXMgaWYgbm8gYHRleHRJbnB1dGBcbiAgICAgICAgICAgKiBldmVudCBpcyBhdmFpbGFibGUuXG4gICAgICAgICAgICovXG4gICAgICAgICAgdmFyIHdoaWNoID0gbmF0aXZlRXZlbnQud2hpY2g7XG4gICAgICAgICAgaWYgKHdoaWNoICE9PSBTUEFDRUJBUl9DT0RFKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaGFzU3BhY2VLZXlwcmVzcyA9IHRydWU7XG4gICAgICAgICAgY2hhcnMgPSBTUEFDRUJBUl9DSEFSO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BUZXh0SW5wdXQ6XG4gICAgICAgICAgLy8gUmVjb3JkIHRoZSBjaGFyYWN0ZXJzIHRvIGJlIGFkZGVkIHRvIHRoZSBET00uXG4gICAgICAgICAgY2hhcnMgPSBuYXRpdmVFdmVudC5kYXRhO1xuXG4gICAgICAgICAgLy8gSWYgaXQncyBhIHNwYWNlYmFyIGNoYXJhY3RlciwgYXNzdW1lIHRoYXQgd2UgaGF2ZSBhbHJlYWR5IGhhbmRsZWRcbiAgICAgICAgICAvLyBpdCBhdCB0aGUga2V5cHJlc3MgbGV2ZWwgYW5kIGJhaWwgaW1tZWRpYXRlbHkuIEFuZHJvaWQgQ2hyb21lXG4gICAgICAgICAgLy8gZG9lc24ndCBnaXZlIHVzIGtleWNvZGVzLCBzbyB3ZSBuZWVkIHRvIGJsYWNrbGlzdCBpdC5cbiAgICAgICAgICBpZiAoY2hhcnMgPT09IFNQQUNFQkFSX0NIQVIgJiYgaGFzU3BhY2VLZXlwcmVzcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIE90aGVyd2lzZSwgY2Fycnkgb24uXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAvLyBGb3Igb3RoZXIgbmF0aXZlIGV2ZW50IHR5cGVzLCBkbyBub3RoaW5nLlxuICAgICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFBhc3RlOlxuICAgICAgICAgIC8vIElmIGEgcGFzdGUgZXZlbnQgb2NjdXJzIGFmdGVyIGEga2V5cHJlc3MsIHRocm93IG91dCB0aGUgaW5wdXRcbiAgICAgICAgICAvLyBjaGFycy4gUGFzdGUgZXZlbnRzIHNob3VsZCBub3QgbGVhZCB0byBCZWZvcmVJbnB1dCBldmVudHMuXG4gICAgICAgICAgZmFsbGJhY2tDaGFycyA9IG51bGw7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzczpcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBBcyBvZiB2MjcsIEZpcmVmb3ggbWF5IGZpcmUga2V5cHJlc3MgZXZlbnRzIGV2ZW4gd2hlbiBubyBjaGFyYWN0ZXJcbiAgICAgICAgICAgKiB3aWxsIGJlIGluc2VydGVkLiBBIGZldyBwb3NzaWJpbGl0aWVzOlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogLSBgd2hpY2hgIGlzIGAwYC4gQXJyb3cga2V5cywgRXNjIGtleSwgZXRjLlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogLSBgd2hpY2hgIGlzIHRoZSBwcmVzc2VkIGtleSBjb2RlLCBidXQgbm8gY2hhciBpcyBhdmFpbGFibGUuXG4gICAgICAgICAgICogICBFeDogJ0FsdEdyICsgZGAgaW4gUG9saXNoLiBUaGVyZSBpcyBubyBtb2RpZmllZCBjaGFyYWN0ZXIgZm9yXG4gICAgICAgICAgICogICB0aGlzIGtleSBjb21iaW5hdGlvbiBhbmQgbm8gY2hhcmFjdGVyIGlzIGluc2VydGVkIGludG8gdGhlXG4gICAgICAgICAgICogICBkb2N1bWVudCwgYnV0IEZGIGZpcmVzIHRoZSBrZXlwcmVzcyBmb3IgY2hhciBjb2RlIGAxMDBgIGFueXdheS5cbiAgICAgICAgICAgKiAgIE5vIGBpbnB1dGAgZXZlbnQgd2lsbCBvY2N1ci5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIC0gYHdoaWNoYCBpcyB0aGUgcHJlc3NlZCBrZXkgY29kZSwgYnV0IGEgY29tbWFuZCBjb21iaW5hdGlvbiBpc1xuICAgICAgICAgICAqICAgYmVpbmcgdXNlZC4gRXg6IGBDbWQrQ2AuIE5vIGNoYXJhY3RlciBpcyBpbnNlcnRlZCwgYW5kIG5vXG4gICAgICAgICAgICogICBgaW5wdXRgIGV2ZW50IHdpbGwgb2NjdXIuXG4gICAgICAgICAgICovXG4gICAgICAgICAgaWYgKG5hdGl2ZUV2ZW50LndoaWNoICYmICFpc0tleXByZXNzQ29tbWFuZChuYXRpdmVFdmVudCkpIHtcbiAgICAgICAgICAgIGZhbGxiYWNrQ2hhcnMgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKG5hdGl2ZUV2ZW50LndoaWNoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvbkVuZDpcbiAgICAgICAgICBmYWxsYmFja0NoYXJzID0gbmF0aXZlRXZlbnQuZGF0YTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgLy8gSWYgbm8gY2hhbmdlcyBoYXZlIG9jY3VycmVkIHRvIHRoZSBmYWxsYmFjayBzdHJpbmcsIG5vIHJlbGV2YW50XG4gICAgICAvLyBldmVudCBoYXMgZmlyZWQgYW5kIHdlJ3JlIGRvbmUuXG4gICAgICBpZiAoZmFsbGJhY2tDaGFycyA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNoYXJzID0gZmFsbGJhY2tDaGFycztcbiAgICB9XG5cbiAgICAvLyBJZiBubyBjaGFyYWN0ZXJzIGFyZSBiZWluZyBpbnNlcnRlZCwgbm8gQmVmb3JlSW5wdXQgZXZlbnQgc2hvdWxkXG4gICAgLy8gYmUgZmlyZWQuXG4gICAgaWYgKCFjaGFycykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBldmVudCA9IFN5bnRoZXRpY0lucHV0RXZlbnQuZ2V0UG9vbGVkKFxuICAgICAgZXZlbnRUeXBlcy5iZWZvcmVJbnB1dCxcbiAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG4gICAgICBuYXRpdmVFdmVudFxuICAgICk7XG5cbiAgICBldmVudC5kYXRhID0gY2hhcnM7XG4gICAgZmFsbGJhY2tDaGFycyA9IG51bGw7XG4gICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcbiAgICByZXR1cm4gZXZlbnQ7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQmVmb3JlSW5wdXRFdmVudFBsdWdpbjtcblxufSx7XCIuL0V2ZW50Q29uc3RhbnRzXCI6ODQsXCIuL0V2ZW50UHJvcGFnYXRvcnNcIjo4OSxcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIjo5MCxcIi4vU3ludGhldGljSW5wdXRFdmVudFwiOjE1OCxcIi4va2V5T2ZcIjoyMDN9XSw3MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgQ1NTUHJvcGVydHlcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDU1MgcHJvcGVydGllcyB3aGljaCBhY2NlcHQgbnVtYmVycyBidXQgYXJlIG5vdCBpbiB1bml0cyBvZiBcInB4XCIuXG4gKi9cbnZhciBpc1VuaXRsZXNzTnVtYmVyID0ge1xuICBjb2x1bW5Db3VudDogdHJ1ZSxcbiAgZmxleDogdHJ1ZSxcbiAgZmxleEdyb3c6IHRydWUsXG4gIGZsZXhTaHJpbms6IHRydWUsXG4gIGZvbnRXZWlnaHQ6IHRydWUsXG4gIGxpbmVDbGFtcDogdHJ1ZSxcbiAgbGluZUhlaWdodDogdHJ1ZSxcbiAgb3BhY2l0eTogdHJ1ZSxcbiAgb3JkZXI6IHRydWUsXG4gIG9ycGhhbnM6IHRydWUsXG4gIHdpZG93czogdHJ1ZSxcbiAgekluZGV4OiB0cnVlLFxuICB6b29tOiB0cnVlLFxuXG4gIC8vIFNWRy1yZWxhdGVkIHByb3BlcnRpZXNcbiAgZmlsbE9wYWNpdHk6IHRydWUsXG4gIHN0cm9rZU9wYWNpdHk6IHRydWVcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHByZWZpeCB2ZW5kb3Itc3BlY2lmaWMgcHJlZml4LCBlZzogV2Via2l0XG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IHN0eWxlIG5hbWUsIGVnOiB0cmFuc2l0aW9uRHVyYXRpb25cbiAqIEByZXR1cm4ge3N0cmluZ30gc3R5bGUgbmFtZSBwcmVmaXhlZCB3aXRoIGBwcmVmaXhgLCBwcm9wZXJseSBjYW1lbENhc2VkLCBlZzpcbiAqIFdlYmtpdFRyYW5zaXRpb25EdXJhdGlvblxuICovXG5mdW5jdGlvbiBwcmVmaXhLZXkocHJlZml4LCBrZXkpIHtcbiAgcmV0dXJuIHByZWZpeCArIGtleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGtleS5zdWJzdHJpbmcoMSk7XG59XG5cbi8qKlxuICogU3VwcG9ydCBzdHlsZSBuYW1lcyB0aGF0IG1heSBjb21lIHBhc3NlZCBpbiBwcmVmaXhlZCBieSBhZGRpbmcgcGVybXV0YXRpb25zXG4gKiBvZiB2ZW5kb3IgcHJlZml4ZXMuXG4gKi9cbnZhciBwcmVmaXhlcyA9IFsnV2Via2l0JywgJ21zJywgJ01veicsICdPJ107XG5cbi8vIFVzaW5nIE9iamVjdC5rZXlzIGhlcmUsIG9yIGVsc2UgdGhlIHZhbmlsbGEgZm9yLWluIGxvb3AgbWFrZXMgSUU4IGdvIGludG8gYW5cbi8vIGluZmluaXRlIGxvb3AsIGJlY2F1c2UgaXQgaXRlcmF0ZXMgb3ZlciB0aGUgbmV3bHkgYWRkZWQgcHJvcHMgdG9vLlxuT2JqZWN0LmtleXMoaXNVbml0bGVzc051bWJlcikuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gIHByZWZpeGVzLmZvckVhY2goZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgaXNVbml0bGVzc051bWJlcltwcmVmaXhLZXkocHJlZml4LCBwcm9wKV0gPSBpc1VuaXRsZXNzTnVtYmVyW3Byb3BdO1xuICB9KTtcbn0pO1xuXG4vKipcbiAqIE1vc3Qgc3R5bGUgcHJvcGVydGllcyBjYW4gYmUgdW5zZXQgYnkgZG9pbmcgLnN0eWxlW3Byb3BdID0gJycgYnV0IElFOFxuICogZG9lc24ndCBsaWtlIGRvaW5nIHRoYXQgd2l0aCBzaG9ydGhhbmQgcHJvcGVydGllcyBzbyBmb3IgdGhlIHByb3BlcnRpZXMgdGhhdFxuICogSUU4IGJyZWFrcyBvbiwgd2hpY2ggYXJlIGxpc3RlZCBoZXJlLCB3ZSBpbnN0ZWFkIHVuc2V0IGVhY2ggb2YgdGhlXG4gKiBpbmRpdmlkdWFsIHByb3BlcnRpZXMuIFNlZSBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM4NS5cbiAqIFRoZSA0LXZhbHVlICdjbG9jaycgcHJvcGVydGllcyBsaWtlIG1hcmdpbiwgcGFkZGluZywgYm9yZGVyLXdpZHRoIHNlZW0gdG9cbiAqIGJlaGF2ZSB3aXRob3V0IGFueSBwcm9ibGVtcy4gQ3VyaW91c2x5LCBsaXN0LXN0eWxlIHdvcmtzIHRvbyB3aXRob3V0IGFueVxuICogc3BlY2lhbCBwcm9kZGluZy5cbiAqL1xudmFyIHNob3J0aGFuZFByb3BlcnR5RXhwYW5zaW9ucyA9IHtcbiAgYmFja2dyb3VuZDoge1xuICAgIGJhY2tncm91bmRJbWFnZTogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kUG9zaXRpb246IHRydWUsXG4gICAgYmFja2dyb3VuZFJlcGVhdDogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRydWVcbiAgfSxcbiAgYm9yZGVyOiB7XG4gICAgYm9yZGVyV2lkdGg6IHRydWUsXG4gICAgYm9yZGVyU3R5bGU6IHRydWUsXG4gICAgYm9yZGVyQ29sb3I6IHRydWVcbiAgfSxcbiAgYm9yZGVyQm90dG9tOiB7XG4gICAgYm9yZGVyQm90dG9tV2lkdGg6IHRydWUsXG4gICAgYm9yZGVyQm90dG9tU3R5bGU6IHRydWUsXG4gICAgYm9yZGVyQm90dG9tQ29sb3I6IHRydWVcbiAgfSxcbiAgYm9yZGVyTGVmdDoge1xuICAgIGJvcmRlckxlZnRXaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJMZWZ0U3R5bGU6IHRydWUsXG4gICAgYm9yZGVyTGVmdENvbG9yOiB0cnVlXG4gIH0sXG4gIGJvcmRlclJpZ2h0OiB7XG4gICAgYm9yZGVyUmlnaHRXaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJSaWdodFN0eWxlOiB0cnVlLFxuICAgIGJvcmRlclJpZ2h0Q29sb3I6IHRydWVcbiAgfSxcbiAgYm9yZGVyVG9wOiB7XG4gICAgYm9yZGVyVG9wV2lkdGg6IHRydWUsXG4gICAgYm9yZGVyVG9wU3R5bGU6IHRydWUsXG4gICAgYm9yZGVyVG9wQ29sb3I6IHRydWVcbiAgfSxcbiAgZm9udDoge1xuICAgIGZvbnRTdHlsZTogdHJ1ZSxcbiAgICBmb250VmFyaWFudDogdHJ1ZSxcbiAgICBmb250V2VpZ2h0OiB0cnVlLFxuICAgIGZvbnRTaXplOiB0cnVlLFxuICAgIGxpbmVIZWlnaHQ6IHRydWUsXG4gICAgZm9udEZhbWlseTogdHJ1ZVxuICB9XG59O1xuXG52YXIgQ1NTUHJvcGVydHkgPSB7XG4gIGlzVW5pdGxlc3NOdW1iZXI6IGlzVW5pdGxlc3NOdW1iZXIsXG4gIHNob3J0aGFuZFByb3BlcnR5RXhwYW5zaW9uczogc2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENTU1Byb3BlcnR5O1xuXG59LHt9XSw3MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIENTU1Byb3BlcnR5T3BlcmF0aW9uc1xuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIENTU1Byb3BlcnR5ID0gcmVxdWlyZShcIi4vQ1NTUHJvcGVydHlcIik7XG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKTtcblxudmFyIGNhbWVsaXplU3R5bGVOYW1lID0gcmVxdWlyZShcIi4vY2FtZWxpemVTdHlsZU5hbWVcIik7XG52YXIgZGFuZ2Vyb3VzU3R5bGVWYWx1ZSA9IHJlcXVpcmUoXCIuL2Rhbmdlcm91c1N0eWxlVmFsdWVcIik7XG52YXIgaHlwaGVuYXRlU3R5bGVOYW1lID0gcmVxdWlyZShcIi4vaHlwaGVuYXRlU3R5bGVOYW1lXCIpO1xudmFyIG1lbW9pemVTdHJpbmdPbmx5ID0gcmVxdWlyZShcIi4vbWVtb2l6ZVN0cmluZ09ubHlcIik7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbnZhciBwcm9jZXNzU3R5bGVOYW1lID0gbWVtb2l6ZVN0cmluZ09ubHkoZnVuY3Rpb24oc3R5bGVOYW1lKSB7XG4gIHJldHVybiBoeXBoZW5hdGVTdHlsZU5hbWUoc3R5bGVOYW1lKTtcbn0pO1xuXG52YXIgc3R5bGVGbG9hdEFjY2Vzc29yID0gJ2Nzc0Zsb2F0JztcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgLy8gSUU4IG9ubHkgc3VwcG9ydHMgYWNjZXNzaW5nIGNzc0Zsb2F0IChzdGFuZGFyZCkgYXMgc3R5bGVGbG9hdFxuICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLmNzc0Zsb2F0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdHlsZUZsb2F0QWNjZXNzb3IgPSAnc3R5bGVGbG9hdCc7XG4gIH1cbn1cblxuaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICB2YXIgd2FybmVkU3R5bGVOYW1lcyA9IHt9O1xuXG4gIHZhciB3YXJuSHlwaGVuYXRlZFN0eWxlTmFtZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBpZiAod2FybmVkU3R5bGVOYW1lcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiB3YXJuZWRTdHlsZU5hbWVzW25hbWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmVkU3R5bGVOYW1lc1tuYW1lXSA9IHRydWU7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICBmYWxzZSxcbiAgICAgICdVbnN1cHBvcnRlZCBzdHlsZSBwcm9wZXJ0eSAnICsgbmFtZSArICcuIERpZCB5b3UgbWVhbiAnICtcbiAgICAgIGNhbWVsaXplU3R5bGVOYW1lKG5hbWUpICsgJz8nXG4gICAgKSA6IG51bGwpO1xuICB9O1xufVxuXG4vKipcbiAqIE9wZXJhdGlvbnMgZm9yIGRlYWxpbmcgd2l0aCBDU1MgcHJvcGVydGllcy5cbiAqL1xudmFyIENTU1Byb3BlcnR5T3BlcmF0aW9ucyA9IHtcblxuICAvKipcbiAgICogU2VyaWFsaXplcyBhIG1hcHBpbmcgb2Ygc3R5bGUgcHJvcGVydGllcyBmb3IgdXNlIGFzIGlubGluZSBzdHlsZXM6XG4gICAqXG4gICAqICAgPiBjcmVhdGVNYXJrdXBGb3JTdHlsZXMoe3dpZHRoOiAnMjAwcHgnLCBoZWlnaHQ6IDB9KVxuICAgKiAgIFwid2lkdGg6MjAwcHg7aGVpZ2h0OjA7XCJcbiAgICpcbiAgICogVW5kZWZpbmVkIHZhbHVlcyBhcmUgaWdub3JlZCBzbyB0aGF0IGRlY2xhcmF0aXZlIHByb2dyYW1taW5nIGlzIGVhc2llci5cbiAgICogVGhlIHJlc3VsdCBzaG91bGQgYmUgSFRNTC1lc2NhcGVkIGJlZm9yZSBpbnNlcnRpb24gaW50byB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gc3R5bGVzXG4gICAqIEByZXR1cm4gez9zdHJpbmd9XG4gICAqL1xuICBjcmVhdGVNYXJrdXBGb3JTdHlsZXM6IGZ1bmN0aW9uKHN0eWxlcykge1xuICAgIHZhciBzZXJpYWxpemVkID0gJyc7XG4gICAgZm9yICh2YXIgc3R5bGVOYW1lIGluIHN0eWxlcykge1xuICAgICAgaWYgKCFzdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgaWYgKHN0eWxlTmFtZS5pbmRleE9mKCctJykgPiAtMSkge1xuICAgICAgICAgIHdhcm5IeXBoZW5hdGVkU3R5bGVOYW1lKHN0eWxlTmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBzdHlsZVZhbHVlID0gc3R5bGVzW3N0eWxlTmFtZV07XG4gICAgICBpZiAoc3R5bGVWYWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHNlcmlhbGl6ZWQgKz0gcHJvY2Vzc1N0eWxlTmFtZShzdHlsZU5hbWUpICsgJzonO1xuICAgICAgICBzZXJpYWxpemVkICs9IGRhbmdlcm91c1N0eWxlVmFsdWUoc3R5bGVOYW1lLCBzdHlsZVZhbHVlKSArICc7JztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNlcmlhbGl6ZWQgfHwgbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogU2V0cyB0aGUgdmFsdWUgZm9yIG11bHRpcGxlIHN0eWxlcyBvbiBhIG5vZGUuICBJZiBhIHZhbHVlIGlzIHNwZWNpZmllZCBhc1xuICAgKiAnJyAoZW1wdHkgc3RyaW5nKSwgdGhlIGNvcnJlc3BvbmRpbmcgc3R5bGUgcHJvcGVydHkgd2lsbCBiZSB1bnNldC5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBzdHlsZXNcbiAgICovXG4gIHNldFZhbHVlRm9yU3R5bGVzOiBmdW5jdGlvbihub2RlLCBzdHlsZXMpIHtcbiAgICB2YXIgc3R5bGUgPSBub2RlLnN0eWxlO1xuICAgIGZvciAodmFyIHN0eWxlTmFtZSBpbiBzdHlsZXMpIHtcbiAgICAgIGlmICghc3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgIGlmIChzdHlsZU5hbWUuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAgICAgICB3YXJuSHlwaGVuYXRlZFN0eWxlTmFtZShzdHlsZU5hbWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgc3R5bGVWYWx1ZSA9IGRhbmdlcm91c1N0eWxlVmFsdWUoc3R5bGVOYW1lLCBzdHlsZXNbc3R5bGVOYW1lXSk7XG4gICAgICBpZiAoc3R5bGVOYW1lID09PSAnZmxvYXQnKSB7XG4gICAgICAgIHN0eWxlTmFtZSA9IHN0eWxlRmxvYXRBY2Nlc3NvcjtcbiAgICAgIH1cbiAgICAgIGlmIChzdHlsZVZhbHVlKSB7XG4gICAgICAgIHN0eWxlW3N0eWxlTmFtZV0gPSBzdHlsZVZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGV4cGFuc2lvbiA9IENTU1Byb3BlcnR5LnNob3J0aGFuZFByb3BlcnR5RXhwYW5zaW9uc1tzdHlsZU5hbWVdO1xuICAgICAgICBpZiAoZXhwYW5zaW9uKSB7XG4gICAgICAgICAgLy8gU2hvcnRoYW5kIHByb3BlcnR5IHRoYXQgSUU4IHdvbid0IGxpa2UgdW5zZXR0aW5nLCBzbyB1bnNldCBlYWNoXG4gICAgICAgICAgLy8gY29tcG9uZW50IHRvIHBsYWNhdGUgaXRcbiAgICAgICAgICBmb3IgKHZhciBpbmRpdmlkdWFsU3R5bGVOYW1lIGluIGV4cGFuc2lvbikge1xuICAgICAgICAgICAgc3R5bGVbaW5kaXZpZHVhbFN0eWxlTmFtZV0gPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3R5bGVbc3R5bGVOYW1lXSA9ICcnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ1NTUHJvcGVydHlPcGVyYXRpb25zO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9DU1NQcm9wZXJ0eVwiOjcyLFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOjkwLFwiLi9jYW1lbGl6ZVN0eWxlTmFtZVwiOjE2OSxcIi4vZGFuZ2Vyb3VzU3R5bGVWYWx1ZVwiOjE3NSxcIi4vaHlwaGVuYXRlU3R5bGVOYW1lXCI6MTk0LFwiLi9tZW1vaXplU3RyaW5nT25seVwiOjIwNSxcIi4vd2FybmluZ1wiOjIxNSxcIl9wcm9jZXNzXCI6MTl9XSw3NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIENhbGxiYWNrUXVldWVcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZShcIi4vUG9vbGVkQ2xhc3NcIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHBzZXVkby1ldmVudCBtb2R1bGUgdG8gaGVscCBrZWVwIHRyYWNrIG9mIGNvbXBvbmVudHMgd2FpdGluZyB0b1xuICogYmUgbm90aWZpZWQgd2hlbiB0aGVpciBET00gcmVwcmVzZW50YXRpb25zIGFyZSBhdmFpbGFibGUgZm9yIHVzZS5cbiAqXG4gKiBUaGlzIGltcGxlbWVudHMgYFBvb2xlZENsYXNzYCwgc28geW91IHNob3VsZCBuZXZlciBuZWVkIHRvIGluc3RhbnRpYXRlIHRoaXMuXG4gKiBJbnN0ZWFkLCB1c2UgYENhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKClgLlxuICpcbiAqIEBjbGFzcyBSZWFjdE1vdW50UmVhZHlcbiAqIEBpbXBsZW1lbnRzIFBvb2xlZENsYXNzXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gQ2FsbGJhY2tRdWV1ZSgpIHtcbiAgdGhpcy5fY2FsbGJhY2tzID0gbnVsbDtcbiAgdGhpcy5fY29udGV4dHMgPSBudWxsO1xufVxuXG5hc3NpZ24oQ2FsbGJhY2tRdWV1ZS5wcm90b3R5cGUsIHtcblxuICAvKipcbiAgICogRW5xdWV1ZXMgYSBjYWxsYmFjayB0byBiZSBpbnZva2VkIHdoZW4gYG5vdGlmeUFsbGAgaXMgaW52b2tlZC5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgSW52b2tlZCB3aGVuIGBub3RpZnlBbGxgIGlzIGludm9rZWQuXG4gICAqIEBwYXJhbSB7P29iamVjdH0gY29udGV4dCBDb250ZXh0IHRvIGNhbGwgYGNhbGxiYWNrYCB3aXRoLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWU6IGZ1bmN0aW9uKGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gICAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IFtdO1xuICAgIHRoaXMuX2NvbnRleHRzID0gdGhpcy5fY29udGV4dHMgfHwgW107XG4gICAgdGhpcy5fY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIHRoaXMuX2NvbnRleHRzLnB1c2goY29udGV4dCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEludm9rZXMgYWxsIGVucXVldWVkIGNhbGxiYWNrcyBhbmQgY2xlYXJzIHRoZSBxdWV1ZS4gVGhpcyBpcyBpbnZva2VkIGFmdGVyXG4gICAqIHRoZSBET00gcmVwcmVzZW50YXRpb24gb2YgYSBjb21wb25lbnQgaGFzIGJlZW4gY3JlYXRlZCBvciB1cGRhdGVkLlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIG5vdGlmeUFsbDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcztcbiAgICB2YXIgY29udGV4dHMgPSB0aGlzLl9jb250ZXh0cztcbiAgICBpZiAoY2FsbGJhY2tzKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICBjYWxsYmFja3MubGVuZ3RoID09PSBjb250ZXh0cy5sZW5ndGgsXG4gICAgICAgIFwiTWlzbWF0Y2hlZCBsaXN0IG9mIGNvbnRleHRzIGluIGNhbGxiYWNrIHF1ZXVlXCJcbiAgICAgICkgOiBpbnZhcmlhbnQoY2FsbGJhY2tzLmxlbmd0aCA9PT0gY29udGV4dHMubGVuZ3RoKSk7XG4gICAgICB0aGlzLl9jYWxsYmFja3MgPSBudWxsO1xuICAgICAgdGhpcy5fY29udGV4dHMgPSBudWxsO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNhbGxiYWNrc1tpXS5jYWxsKGNvbnRleHRzW2ldKTtcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrcy5sZW5ndGggPSAwO1xuICAgICAgY29udGV4dHMubGVuZ3RoID0gMDtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlc2V0cyB0aGUgaW50ZXJuYWwgcXVldWUuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2NhbGxiYWNrcyA9IG51bGw7XG4gICAgdGhpcy5fY29udGV4dHMgPSBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBgUG9vbGVkQ2xhc3NgIGxvb2tzIGZvciB0aGlzLlxuICAgKi9cbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZXNldCgpO1xuICB9XG5cbn0pO1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oQ2FsbGJhY2tRdWV1ZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FsbGJhY2tRdWV1ZTtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vT2JqZWN0LmFzc2lnblwiOjk1LFwiLi9Qb29sZWRDbGFzc1wiOjk2LFwiLi9pbnZhcmlhbnRcIjoxOTYsXCJfcHJvY2Vzc1wiOjE5fV0sNzU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIENoYW5nZUV2ZW50UGx1Z2luXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoXCIuL0V2ZW50Q29uc3RhbnRzXCIpO1xudmFyIEV2ZW50UGx1Z2luSHViID0gcmVxdWlyZShcIi4vRXZlbnRQbHVnaW5IdWJcIik7XG52YXIgRXZlbnRQcm9wYWdhdG9ycyA9IHJlcXVpcmUoXCIuL0V2ZW50UHJvcGFnYXRvcnNcIik7XG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZXNcIik7XG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNFdmVudFwiKTtcblxudmFyIGlzRXZlbnRTdXBwb3J0ZWQgPSByZXF1aXJlKFwiLi9pc0V2ZW50U3VwcG9ydGVkXCIpO1xudmFyIGlzVGV4dElucHV0RWxlbWVudCA9IHJlcXVpcmUoXCIuL2lzVGV4dElucHV0RWxlbWVudFwiKTtcbnZhciBrZXlPZiA9IHJlcXVpcmUoXCIuL2tleU9mXCIpO1xuXG52YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG5cbnZhciBldmVudFR5cGVzID0ge1xuICBjaGFuZ2U6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uQ2hhbmdlOiBudWxsfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQ2hhbmdlQ2FwdHVyZTogbnVsbH0pXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IFtcbiAgICAgIHRvcExldmVsVHlwZXMudG9wQmx1cixcbiAgICAgIHRvcExldmVsVHlwZXMudG9wQ2hhbmdlLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BDbGljayxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wRm9jdXMsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcElucHV0LFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcCxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wU2VsZWN0aW9uQ2hhbmdlXG4gICAgXVxuICB9XG59O1xuXG4vKipcbiAqIEZvciBJRSBzaGltc1xuICovXG52YXIgYWN0aXZlRWxlbWVudCA9IG51bGw7XG52YXIgYWN0aXZlRWxlbWVudElEID0gbnVsbDtcbnZhciBhY3RpdmVFbGVtZW50VmFsdWUgPSBudWxsO1xudmFyIGFjdGl2ZUVsZW1lbnRWYWx1ZVByb3AgPSBudWxsO1xuXG4vKipcbiAqIFNFQ1RJT046IGhhbmRsZSBgY2hhbmdlYCBldmVudFxuICovXG5mdW5jdGlvbiBzaG91bGRVc2VDaGFuZ2VFdmVudChlbGVtKSB7XG4gIHJldHVybiAoXG4gICAgZWxlbS5ub2RlTmFtZSA9PT0gJ1NFTEVDVCcgfHxcbiAgICAoZWxlbS5ub2RlTmFtZSA9PT0gJ0lOUFVUJyAmJiBlbGVtLnR5cGUgPT09ICdmaWxlJylcbiAgKTtcbn1cblxudmFyIGRvZXNDaGFuZ2VFdmVudEJ1YmJsZSA9IGZhbHNlO1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICAvLyBTZWUgYGhhbmRsZUNoYW5nZWAgY29tbWVudCBiZWxvd1xuICBkb2VzQ2hhbmdlRXZlbnRCdWJibGUgPSBpc0V2ZW50U3VwcG9ydGVkKCdjaGFuZ2UnKSAmJiAoXG4gICAgISgnZG9jdW1lbnRNb2RlJyBpbiBkb2N1bWVudCkgfHwgZG9jdW1lbnQuZG9jdW1lbnRNb2RlID4gOFxuICApO1xufVxuXG5mdW5jdGlvbiBtYW51YWxEaXNwYXRjaENoYW5nZUV2ZW50KG5hdGl2ZUV2ZW50KSB7XG4gIHZhciBldmVudCA9IFN5bnRoZXRpY0V2ZW50LmdldFBvb2xlZChcbiAgICBldmVudFR5cGVzLmNoYW5nZSxcbiAgICBhY3RpdmVFbGVtZW50SUQsXG4gICAgbmF0aXZlRXZlbnRcbiAgKTtcbiAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcblxuICAvLyBJZiBjaGFuZ2UgYW5kIHByb3BlcnR5Y2hhbmdlIGJ1YmJsZWQsIHdlJ2QganVzdCBiaW5kIHRvIGl0IGxpa2UgYWxsIHRoZVxuICAvLyBvdGhlciBldmVudHMgYW5kIGhhdmUgaXQgZ28gdGhyb3VnaCBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuIFNpbmNlIGl0XG4gIC8vIGRvZXNuJ3QsIHdlIG1hbnVhbGx5IGxpc3RlbiBmb3IgdGhlIGV2ZW50cyBhbmQgc28gd2UgaGF2ZSB0byBlbnF1ZXVlIGFuZFxuICAvLyBwcm9jZXNzIHRoZSBhYnN0cmFjdCBldmVudCBtYW51YWxseS5cbiAgLy9cbiAgLy8gQmF0Y2hpbmcgaXMgbmVjZXNzYXJ5IGhlcmUgaW4gb3JkZXIgdG8gZW5zdXJlIHRoYXQgYWxsIGV2ZW50IGhhbmRsZXJzIHJ1blxuICAvLyBiZWZvcmUgdGhlIG5leHQgcmVyZW5kZXIgKGluY2x1ZGluZyBldmVudCBoYW5kbGVycyBhdHRhY2hlZCB0byBhbmNlc3RvclxuICAvLyBlbGVtZW50cyBpbnN0ZWFkIG9mIGRpcmVjdGx5IG9uIHRoZSBpbnB1dCkuIFdpdGhvdXQgdGhpcywgY29udHJvbGxlZFxuICAvLyBjb21wb25lbnRzIGRvbid0IHdvcmsgcHJvcGVybHkgaW4gY29uanVuY3Rpb24gd2l0aCBldmVudCBidWJibGluZyBiZWNhdXNlXG4gIC8vIHRoZSBjb21wb25lbnQgaXMgcmVyZW5kZXJlZCBhbmQgdGhlIHZhbHVlIHJldmVydGVkIGJlZm9yZSBhbGwgdGhlIGV2ZW50XG4gIC8vIGhhbmRsZXJzIGNhbiBydW4uIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzcwOC5cbiAgUmVhY3RVcGRhdGVzLmJhdGNoZWRVcGRhdGVzKHJ1bkV2ZW50SW5CYXRjaCwgZXZlbnQpO1xufVxuXG5mdW5jdGlvbiBydW5FdmVudEluQmF0Y2goZXZlbnQpIHtcbiAgRXZlbnRQbHVnaW5IdWIuZW5xdWV1ZUV2ZW50cyhldmVudCk7XG4gIEV2ZW50UGx1Z2luSHViLnByb2Nlc3NFdmVudFF1ZXVlKCk7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0V2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCh0YXJnZXQsIHRhcmdldElEKSB7XG4gIGFjdGl2ZUVsZW1lbnQgPSB0YXJnZXQ7XG4gIGFjdGl2ZUVsZW1lbnRJRCA9IHRhcmdldElEO1xuICBhY3RpdmVFbGVtZW50LmF0dGFjaEV2ZW50KCdvbmNoYW5nZScsIG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQpO1xufVxuXG5mdW5jdGlvbiBzdG9wV2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCgpIHtcbiAgaWYgKCFhY3RpdmVFbGVtZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGFjdGl2ZUVsZW1lbnQuZGV0YWNoRXZlbnQoJ29uY2hhbmdlJywgbWFudWFsRGlzcGF0Y2hDaGFuZ2VFdmVudCk7XG4gIGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xuICBhY3RpdmVFbGVtZW50SUQgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXRUYXJnZXRJREZvckNoYW5nZUV2ZW50KFxuICAgIHRvcExldmVsVHlwZSxcbiAgICB0b3BMZXZlbFRhcmdldCxcbiAgICB0b3BMZXZlbFRhcmdldElEKSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wQ2hhbmdlKSB7XG4gICAgcmV0dXJuIHRvcExldmVsVGFyZ2V0SUQ7XG4gIH1cbn1cbmZ1bmN0aW9uIGhhbmRsZUV2ZW50c0ZvckNoYW5nZUV2ZW50SUU4KFxuICAgIHRvcExldmVsVHlwZSxcbiAgICB0b3BMZXZlbFRhcmdldCxcbiAgICB0b3BMZXZlbFRhcmdldElEKSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wRm9jdXMpIHtcbiAgICAvLyBzdG9wV2F0Y2hpbmcoKSBzaG91bGQgYmUgYSBub29wIGhlcmUgYnV0IHdlIGNhbGwgaXQganVzdCBpbiBjYXNlIHdlXG4gICAgLy8gbWlzc2VkIGEgYmx1ciBldmVudCBzb21laG93LlxuICAgIHN0b3BXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KCk7XG4gICAgc3RhcnRXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElEKTtcbiAgfSBlbHNlIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wQmx1cikge1xuICAgIHN0b3BXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KCk7XG4gIH1cbn1cblxuXG4vKipcbiAqIFNFQ1RJT046IGhhbmRsZSBgaW5wdXRgIGV2ZW50XG4gKi9cbnZhciBpc0lucHV0RXZlbnRTdXBwb3J0ZWQgPSBmYWxzZTtcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgLy8gSUU5IGNsYWltcyB0byBzdXBwb3J0IHRoZSBpbnB1dCBldmVudCBidXQgZmFpbHMgdG8gdHJpZ2dlciBpdCB3aGVuXG4gIC8vIGRlbGV0aW5nIHRleHQsIHNvIHdlIGlnbm9yZSBpdHMgaW5wdXQgZXZlbnRzXG4gIGlzSW5wdXRFdmVudFN1cHBvcnRlZCA9IGlzRXZlbnRTdXBwb3J0ZWQoJ2lucHV0JykgJiYgKFxuICAgICEoJ2RvY3VtZW50TW9kZScgaW4gZG9jdW1lbnQpIHx8IGRvY3VtZW50LmRvY3VtZW50TW9kZSA+IDlcbiAgKTtcbn1cblxuLyoqXG4gKiAoRm9yIG9sZCBJRS4pIFJlcGxhY2VtZW50IGdldHRlci9zZXR0ZXIgZm9yIHRoZSBgdmFsdWVgIHByb3BlcnR5IHRoYXQgZ2V0c1xuICogc2V0IG9uIHRoZSBhY3RpdmUgZWxlbWVudC5cbiAqL1xudmFyIG5ld1ZhbHVlUHJvcCA9ICB7XG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGFjdGl2ZUVsZW1lbnRWYWx1ZVByb3AuZ2V0LmNhbGwodGhpcyk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24odmFsKSB7XG4gICAgLy8gQ2FzdCB0byBhIHN0cmluZyBzbyB3ZSBjYW4gZG8gZXF1YWxpdHkgY2hlY2tzLlxuICAgIGFjdGl2ZUVsZW1lbnRWYWx1ZSA9ICcnICsgdmFsO1xuICAgIGFjdGl2ZUVsZW1lbnRWYWx1ZVByb3Auc2V0LmNhbGwodGhpcywgdmFsKTtcbiAgfVxufTtcblxuLyoqXG4gKiAoRm9yIG9sZCBJRS4pIFN0YXJ0cyB0cmFja2luZyBwcm9wZXJ0eWNoYW5nZSBldmVudHMgb24gdGhlIHBhc3NlZC1pbiBlbGVtZW50XG4gKiBhbmQgb3ZlcnJpZGUgdGhlIHZhbHVlIHByb3BlcnR5IHNvIHRoYXQgd2UgY2FuIGRpc3Rpbmd1aXNoIHVzZXIgZXZlbnRzIGZyb21cbiAqIHZhbHVlIGNoYW5nZXMgaW4gSlMuXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0V2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSh0YXJnZXQsIHRhcmdldElEKSB7XG4gIGFjdGl2ZUVsZW1lbnQgPSB0YXJnZXQ7XG4gIGFjdGl2ZUVsZW1lbnRJRCA9IHRhcmdldElEO1xuICBhY3RpdmVFbGVtZW50VmFsdWUgPSB0YXJnZXQudmFsdWU7XG4gIGFjdGl2ZUVsZW1lbnRWYWx1ZVByb3AgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFxuICAgIHRhcmdldC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsXG4gICAgJ3ZhbHVlJ1xuICApO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhY3RpdmVFbGVtZW50LCAndmFsdWUnLCBuZXdWYWx1ZVByb3ApO1xuICBhY3RpdmVFbGVtZW50LmF0dGFjaEV2ZW50KCdvbnByb3BlcnR5Y2hhbmdlJywgaGFuZGxlUHJvcGVydHlDaGFuZ2UpO1xufVxuXG4vKipcbiAqIChGb3Igb2xkIElFLikgUmVtb3ZlcyB0aGUgZXZlbnQgbGlzdGVuZXJzIGZyb20gdGhlIGN1cnJlbnRseS10cmFja2VkIGVsZW1lbnQsXG4gKiBpZiBhbnkgZXhpc3RzLlxuICovXG5mdW5jdGlvbiBzdG9wV2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSgpIHtcbiAgaWYgKCFhY3RpdmVFbGVtZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gZGVsZXRlIHJlc3RvcmVzIHRoZSBvcmlnaW5hbCBwcm9wZXJ0eSBkZWZpbml0aW9uXG4gIGRlbGV0ZSBhY3RpdmVFbGVtZW50LnZhbHVlO1xuICBhY3RpdmVFbGVtZW50LmRldGFjaEV2ZW50KCdvbnByb3BlcnR5Y2hhbmdlJywgaGFuZGxlUHJvcGVydHlDaGFuZ2UpO1xuXG4gIGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xuICBhY3RpdmVFbGVtZW50SUQgPSBudWxsO1xuICBhY3RpdmVFbGVtZW50VmFsdWUgPSBudWxsO1xuICBhY3RpdmVFbGVtZW50VmFsdWVQcm9wID0gbnVsbDtcbn1cblxuLyoqXG4gKiAoRm9yIG9sZCBJRS4pIEhhbmRsZXMgYSBwcm9wZXJ0eWNoYW5nZSBldmVudCwgc2VuZGluZyBhIGBjaGFuZ2VgIGV2ZW50IGlmXG4gKiB0aGUgdmFsdWUgb2YgdGhlIGFjdGl2ZSBlbGVtZW50IGhhcyBjaGFuZ2VkLlxuICovXG5mdW5jdGlvbiBoYW5kbGVQcm9wZXJ0eUNoYW5nZShuYXRpdmVFdmVudCkge1xuICBpZiAobmF0aXZlRXZlbnQucHJvcGVydHlOYW1lICE9PSAndmFsdWUnKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciB2YWx1ZSA9IG5hdGl2ZUV2ZW50LnNyY0VsZW1lbnQudmFsdWU7XG4gIGlmICh2YWx1ZSA9PT0gYWN0aXZlRWxlbWVudFZhbHVlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGFjdGl2ZUVsZW1lbnRWYWx1ZSA9IHZhbHVlO1xuXG4gIG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQobmF0aXZlRXZlbnQpO1xufVxuXG4vKipcbiAqIElmIGEgYGNoYW5nZWAgZXZlbnQgc2hvdWxkIGJlIGZpcmVkLCByZXR1cm5zIHRoZSB0YXJnZXQncyBJRC5cbiAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0SURGb3JJbnB1dEV2ZW50KFxuICAgIHRvcExldmVsVHlwZSxcbiAgICB0b3BMZXZlbFRhcmdldCxcbiAgICB0b3BMZXZlbFRhcmdldElEKSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wSW5wdXQpIHtcbiAgICAvLyBJbiBtb2Rlcm4gYnJvd3NlcnMgKGkuZS4sIG5vdCBJRTggb3IgSUU5KSwgdGhlIGlucHV0IGV2ZW50IGlzIGV4YWN0bHlcbiAgICAvLyB3aGF0IHdlIHdhbnQgc28gZmFsbCB0aHJvdWdoIGhlcmUgYW5kIHRyaWdnZXIgYW4gYWJzdHJhY3QgZXZlbnRcbiAgICByZXR1cm4gdG9wTGV2ZWxUYXJnZXRJRDtcbiAgfVxufVxuXG4vLyBGb3IgSUU4IGFuZCBJRTkuXG5mdW5jdGlvbiBoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50SUUoXG4gICAgdG9wTGV2ZWxUeXBlLFxuICAgIHRvcExldmVsVGFyZ2V0LFxuICAgIHRvcExldmVsVGFyZ2V0SUQpIHtcbiAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BGb2N1cykge1xuICAgIC8vIEluIElFOCwgd2UgY2FuIGNhcHR1cmUgYWxtb3N0IGFsbCAudmFsdWUgY2hhbmdlcyBieSBhZGRpbmcgYVxuICAgIC8vIHByb3BlcnR5Y2hhbmdlIGhhbmRsZXIgYW5kIGxvb2tpbmcgZm9yIGV2ZW50cyB3aXRoIHByb3BlcnR5TmFtZVxuICAgIC8vIGVxdWFsIHRvICd2YWx1ZSdcbiAgICAvLyBJbiBJRTksIHByb3BlcnR5Y2hhbmdlIGZpcmVzIGZvciBtb3N0IGlucHV0IGV2ZW50cyBidXQgaXMgYnVnZ3kgYW5kXG4gICAgLy8gZG9lc24ndCBmaXJlIHdoZW4gdGV4dCBpcyBkZWxldGVkLCBidXQgY29udmVuaWVudGx5LCBzZWxlY3Rpb25jaGFuZ2VcbiAgICAvLyBhcHBlYXJzIHRvIGZpcmUgaW4gYWxsIG9mIHRoZSByZW1haW5pbmcgY2FzZXMgc28gd2UgY2F0Y2ggdGhvc2UgYW5kXG4gICAgLy8gZm9yd2FyZCB0aGUgZXZlbnQgaWYgdGhlIHZhbHVlIGhhcyBjaGFuZ2VkXG4gICAgLy8gSW4gZWl0aGVyIGNhc2UsIHdlIGRvbid0IHdhbnQgdG8gY2FsbCB0aGUgZXZlbnQgaGFuZGxlciBpZiB0aGUgdmFsdWVcbiAgICAvLyBpcyBjaGFuZ2VkIGZyb20gSlMgc28gd2UgcmVkZWZpbmUgYSBzZXR0ZXIgZm9yIGAudmFsdWVgIHRoYXQgdXBkYXRlc1xuICAgIC8vIG91ciBhY3RpdmVFbGVtZW50VmFsdWUgdmFyaWFibGUsIGFsbG93aW5nIHVzIHRvIGlnbm9yZSB0aG9zZSBjaGFuZ2VzXG4gICAgLy9cbiAgICAvLyBzdG9wV2F0Y2hpbmcoKSBzaG91bGQgYmUgYSBub29wIGhlcmUgYnV0IHdlIGNhbGwgaXQganVzdCBpbiBjYXNlIHdlXG4gICAgLy8gbWlzc2VkIGEgYmx1ciBldmVudCBzb21laG93LlxuICAgIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCk7XG4gICAgc3RhcnRXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKHRvcExldmVsVGFyZ2V0LCB0b3BMZXZlbFRhcmdldElEKTtcbiAgfSBlbHNlIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wQmx1cikge1xuICAgIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCk7XG4gIH1cbn1cblxuLy8gRm9yIElFOCBhbmQgSUU5LlxuZnVuY3Rpb24gZ2V0VGFyZ2V0SURGb3JJbnB1dEV2ZW50SUUoXG4gICAgdG9wTGV2ZWxUeXBlLFxuICAgIHRvcExldmVsVGFyZ2V0LFxuICAgIHRvcExldmVsVGFyZ2V0SUQpIHtcbiAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BTZWxlY3Rpb25DaGFuZ2UgfHxcbiAgICAgIHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BLZXlVcCB8fFxuICAgICAgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcEtleURvd24pIHtcbiAgICAvLyBPbiB0aGUgc2VsZWN0aW9uY2hhbmdlIGV2ZW50LCB0aGUgdGFyZ2V0IGlzIGp1c3QgZG9jdW1lbnQgd2hpY2ggaXNuJ3RcbiAgICAvLyBoZWxwZnVsIGZvciB1cyBzbyBqdXN0IGNoZWNrIGFjdGl2ZUVsZW1lbnQgaW5zdGVhZC5cbiAgICAvL1xuICAgIC8vIDk5JSBvZiB0aGUgdGltZSwga2V5ZG93biBhbmQga2V5dXAgYXJlbid0IG5lY2Vzc2FyeS4gSUU4IGZhaWxzIHRvIGZpcmVcbiAgICAvLyBwcm9wZXJ0eWNoYW5nZSBvbiB0aGUgZmlyc3QgaW5wdXQgZXZlbnQgYWZ0ZXIgc2V0dGluZyBgdmFsdWVgIGZyb20gYVxuICAgIC8vIHNjcmlwdCBhbmQgZmlyZXMgb25seSBrZXlkb3duLCBrZXlwcmVzcywga2V5dXAuIENhdGNoaW5nIGtleXVwIHVzdWFsbHlcbiAgICAvLyBnZXRzIGl0IGFuZCBjYXRjaGluZyBrZXlkb3duIGxldHMgdXMgZmlyZSBhbiBldmVudCBmb3IgdGhlIGZpcnN0XG4gICAgLy8ga2V5c3Ryb2tlIGlmIHVzZXIgZG9lcyBhIGtleSByZXBlYXQgKGl0J2xsIGJlIGEgbGl0dGxlIGRlbGF5ZWQ6IHJpZ2h0XG4gICAgLy8gYmVmb3JlIHRoZSBzZWNvbmQga2V5c3Ryb2tlKS4gT3RoZXIgaW5wdXQgbWV0aG9kcyAoZS5nLiwgcGFzdGUpIHNlZW0gdG9cbiAgICAvLyBmaXJlIHNlbGVjdGlvbmNoYW5nZSBub3JtYWxseS5cbiAgICBpZiAoYWN0aXZlRWxlbWVudCAmJiBhY3RpdmVFbGVtZW50LnZhbHVlICE9PSBhY3RpdmVFbGVtZW50VmFsdWUpIHtcbiAgICAgIGFjdGl2ZUVsZW1lbnRWYWx1ZSA9IGFjdGl2ZUVsZW1lbnQudmFsdWU7XG4gICAgICByZXR1cm4gYWN0aXZlRWxlbWVudElEO1xuICAgIH1cbiAgfVxufVxuXG5cbi8qKlxuICogU0VDVElPTjogaGFuZGxlIGBjbGlja2AgZXZlbnRcbiAqL1xuZnVuY3Rpb24gc2hvdWxkVXNlQ2xpY2tFdmVudChlbGVtKSB7XG4gIC8vIFVzZSB0aGUgYGNsaWNrYCBldmVudCB0byBkZXRlY3QgY2hhbmdlcyB0byBjaGVja2JveCBhbmQgcmFkaW8gaW5wdXRzLlxuICAvLyBUaGlzIGFwcHJvYWNoIHdvcmtzIGFjcm9zcyBhbGwgYnJvd3NlcnMsIHdoZXJlYXMgYGNoYW5nZWAgZG9lcyBub3QgZmlyZVxuICAvLyB1bnRpbCBgYmx1cmAgaW4gSUU4LlxuICByZXR1cm4gKFxuICAgIGVsZW0ubm9kZU5hbWUgPT09ICdJTlBVVCcgJiZcbiAgICAoZWxlbS50eXBlID09PSAnY2hlY2tib3gnIHx8IGVsZW0udHlwZSA9PT0gJ3JhZGlvJylcbiAgKTtcbn1cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0SURGb3JDbGlja0V2ZW50KFxuICAgIHRvcExldmVsVHlwZSxcbiAgICB0b3BMZXZlbFRhcmdldCxcbiAgICB0b3BMZXZlbFRhcmdldElEKSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wQ2xpY2spIHtcbiAgICByZXR1cm4gdG9wTGV2ZWxUYXJnZXRJRDtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgcGx1Z2luIGNyZWF0ZXMgYW4gYG9uQ2hhbmdlYCBldmVudCB0aGF0IG5vcm1hbGl6ZXMgY2hhbmdlIGV2ZW50c1xuICogYWNyb3NzIGZvcm0gZWxlbWVudHMuIFRoaXMgZXZlbnQgZmlyZXMgYXQgYSB0aW1lIHdoZW4gaXQncyBwb3NzaWJsZSB0b1xuICogY2hhbmdlIHRoZSBlbGVtZW50J3MgdmFsdWUgd2l0aG91dCBzZWVpbmcgYSBmbGlja2VyLlxuICpcbiAqIFN1cHBvcnRlZCBlbGVtZW50cyBhcmU6XG4gKiAtIGlucHV0IChzZWUgYGlzVGV4dElucHV0RWxlbWVudGApXG4gKiAtIHRleHRhcmVhXG4gKiAtIHNlbGVjdFxuICovXG52YXIgQ2hhbmdlRXZlbnRQbHVnaW4gPSB7XG5cbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAgICogQHJldHVybiB7Kn0gQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHN9XG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbihcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgIG5hdGl2ZUV2ZW50KSB7XG5cbiAgICB2YXIgZ2V0VGFyZ2V0SURGdW5jLCBoYW5kbGVFdmVudEZ1bmM7XG4gICAgaWYgKHNob3VsZFVzZUNoYW5nZUV2ZW50KHRvcExldmVsVGFyZ2V0KSkge1xuICAgICAgaWYgKGRvZXNDaGFuZ2VFdmVudEJ1YmJsZSkge1xuICAgICAgICBnZXRUYXJnZXRJREZ1bmMgPSBnZXRUYXJnZXRJREZvckNoYW5nZUV2ZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFuZGxlRXZlbnRGdW5jID0gaGFuZGxlRXZlbnRzRm9yQ2hhbmdlRXZlbnRJRTg7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1RleHRJbnB1dEVsZW1lbnQodG9wTGV2ZWxUYXJnZXQpKSB7XG4gICAgICBpZiAoaXNJbnB1dEV2ZW50U3VwcG9ydGVkKSB7XG4gICAgICAgIGdldFRhcmdldElERnVuYyA9IGdldFRhcmdldElERm9ySW5wdXRFdmVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdldFRhcmdldElERnVuYyA9IGdldFRhcmdldElERm9ySW5wdXRFdmVudElFO1xuICAgICAgICBoYW5kbGVFdmVudEZ1bmMgPSBoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50SUU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzaG91bGRVc2VDbGlja0V2ZW50KHRvcExldmVsVGFyZ2V0KSkge1xuICAgICAgZ2V0VGFyZ2V0SURGdW5jID0gZ2V0VGFyZ2V0SURGb3JDbGlja0V2ZW50O1xuICAgIH1cblxuICAgIGlmIChnZXRUYXJnZXRJREZ1bmMpIHtcbiAgICAgIHZhciB0YXJnZXRJRCA9IGdldFRhcmdldElERnVuYyhcbiAgICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgICAgdG9wTGV2ZWxUYXJnZXRJRFxuICAgICAgKTtcbiAgICAgIGlmICh0YXJnZXRJRCkge1xuICAgICAgICB2YXIgZXZlbnQgPSBTeW50aGV0aWNFdmVudC5nZXRQb29sZWQoXG4gICAgICAgICAgZXZlbnRUeXBlcy5jaGFuZ2UsXG4gICAgICAgICAgdGFyZ2V0SUQsXG4gICAgICAgICAgbmF0aXZlRXZlbnRcbiAgICAgICAgKTtcbiAgICAgICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcbiAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChoYW5kbGVFdmVudEZ1bmMpIHtcbiAgICAgIGhhbmRsZUV2ZW50RnVuYyhcbiAgICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgICAgdG9wTGV2ZWxUYXJnZXRJRFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDaGFuZ2VFdmVudFBsdWdpbjtcblxufSx7XCIuL0V2ZW50Q29uc3RhbnRzXCI6ODQsXCIuL0V2ZW50UGx1Z2luSHViXCI6ODYsXCIuL0V2ZW50UHJvcGFnYXRvcnNcIjo4OSxcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIjo5MCxcIi4vUmVhY3RVcGRhdGVzXCI6MTQ4LFwiLi9TeW50aGV0aWNFdmVudFwiOjE1NixcIi4vaXNFdmVudFN1cHBvcnRlZFwiOjE5NyxcIi4vaXNUZXh0SW5wdXRFbGVtZW50XCI6MTk5LFwiLi9rZXlPZlwiOjIwM31dLDc2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBDbGllbnRSZWFjdFJvb3RJbmRleFxuICogQHR5cGVjaGVja3NcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIG5leHRSZWFjdFJvb3RJbmRleCA9IDA7XG5cbnZhciBDbGllbnRSZWFjdFJvb3RJbmRleCA9IHtcbiAgY3JlYXRlUmVhY3RSb290SW5kZXg6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXh0UmVhY3RSb290SW5kZXgrKztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDbGllbnRSZWFjdFJvb3RJbmRleDtcblxufSx7fV0sNzc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIENvbXBvc2l0aW9uRXZlbnRQbHVnaW5cbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoXCIuL0V2ZW50Q29uc3RhbnRzXCIpO1xudmFyIEV2ZW50UHJvcGFnYXRvcnMgPSByZXF1aXJlKFwiLi9FdmVudFByb3BhZ2F0b3JzXCIpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG52YXIgUmVhY3RJbnB1dFNlbGVjdGlvbiA9IHJlcXVpcmUoXCIuL1JlYWN0SW5wdXRTZWxlY3Rpb25cIik7XG52YXIgU3ludGhldGljQ29tcG9zaXRpb25FdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnRcIik7XG5cbnZhciBnZXRUZXh0Q29udGVudEFjY2Vzc29yID0gcmVxdWlyZShcIi4vZ2V0VGV4dENvbnRlbnRBY2Nlc3NvclwiKTtcbnZhciBrZXlPZiA9IHJlcXVpcmUoXCIuL2tleU9mXCIpO1xuXG52YXIgRU5EX0tFWUNPREVTID0gWzksIDEzLCAyNywgMzJdOyAvLyBUYWIsIFJldHVybiwgRXNjLCBTcGFjZVxudmFyIFNUQVJUX0tFWUNPREUgPSAyMjk7XG5cbnZhciB1c2VDb21wb3NpdGlvbkV2ZW50ID0gKFxuICBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiZcbiAgJ0NvbXBvc2l0aW9uRXZlbnQnIGluIHdpbmRvd1xuKTtcblxuLy8gSW4gSUU5Kywgd2UgaGF2ZSBhY2Nlc3MgdG8gY29tcG9zaXRpb24gZXZlbnRzLCBidXQgdGhlIGRhdGEgc3VwcGxpZWRcbi8vIGJ5IHRoZSBuYXRpdmUgY29tcG9zaXRpb25lbmQgZXZlbnQgbWF5IGJlIGluY29ycmVjdC4gSW4gS29yZWFuLCBmb3IgZXhhbXBsZSxcbi8vIHRoZSBjb21wb3NpdGlvbmVuZCBldmVudCBjb250YWlucyBvbmx5IG9uZSBjaGFyYWN0ZXIgcmVnYXJkbGVzcyBvZlxuLy8gaG93IG1hbnkgY2hhcmFjdGVycyBoYXZlIGJlZW4gY29tcG9zZWQgc2luY2UgY29tcG9zaXRpb25zdGFydC5cbi8vIFdlIHRoZXJlZm9yZSB1c2UgdGhlIGZhbGxiYWNrIGRhdGEgd2hpbGUgc3RpbGwgdXNpbmcgdGhlIG5hdGl2ZVxuLy8gZXZlbnRzIGFzIHRyaWdnZXJzLlxudmFyIHVzZUZhbGxiYWNrRGF0YSA9IChcbiAgIXVzZUNvbXBvc2l0aW9uRXZlbnQgfHxcbiAgKFxuICAgICdkb2N1bWVudE1vZGUnIGluIGRvY3VtZW50ICYmXG4gICAgZG9jdW1lbnQuZG9jdW1lbnRNb2RlID4gOCAmJlxuICAgIGRvY3VtZW50LmRvY3VtZW50TW9kZSA8PSAxMVxuICApXG4pO1xuXG52YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG52YXIgY3VycmVudENvbXBvc2l0aW9uID0gbnVsbDtcblxuLy8gRXZlbnRzIGFuZCB0aGVpciBjb3JyZXNwb25kaW5nIHByb3BlcnR5IG5hbWVzLlxudmFyIGV2ZW50VHlwZXMgPSB7XG4gIGNvbXBvc2l0aW9uRW5kOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkNvbXBvc2l0aW9uRW5kOiBudWxsfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQ29tcG9zaXRpb25FbmRDYXB0dXJlOiBudWxsfSlcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW1xuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BCbHVyLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvbkVuZCxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5RG93bixcbiAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5UHJlc3MsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEtleVVwLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd25cbiAgICBdXG4gIH0sXG4gIGNvbXBvc2l0aW9uU3RhcnQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uQ29tcG9zaXRpb25TdGFydDogbnVsbH0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlOiBudWxsfSlcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW1xuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BCbHVyLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvblN0YXJ0LFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzcyxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5VXAsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93blxuICAgIF1cbiAgfSxcbiAgY29tcG9zaXRpb25VcGRhdGU6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uQ29tcG9zaXRpb25VcGRhdGU6IG51bGx9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmU6IG51bGx9KVxuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEJsdXIsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uVXBkYXRlLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzcyxcbiAgICAgIHRvcExldmVsVHlwZXMudG9wS2V5VXAsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93blxuICAgIF1cbiAgfVxufTtcblxuLyoqXG4gKiBUcmFuc2xhdGUgbmF0aXZlIHRvcCBsZXZlbCBldmVudHMgaW50byBldmVudCB0eXBlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldENvbXBvc2l0aW9uRXZlbnRUeXBlKHRvcExldmVsVHlwZSkge1xuICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvblN0YXJ0OlxuICAgICAgcmV0dXJuIGV2ZW50VHlwZXMuY29tcG9zaXRpb25TdGFydDtcbiAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25FbmQ6XG4gICAgICByZXR1cm4gZXZlbnRUeXBlcy5jb21wb3NpdGlvbkVuZDtcbiAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25VcGRhdGU6XG4gICAgICByZXR1cm4gZXZlbnRUeXBlcy5jb21wb3NpdGlvblVwZGF0ZTtcbiAgfVxufVxuXG4vKipcbiAqIERvZXMgb3VyIGZhbGxiYWNrIGJlc3QtZ3Vlc3MgbW9kZWwgdGhpbmsgdGhpcyBldmVudCBzaWduaWZpZXMgdGhhdFxuICogY29tcG9zaXRpb24gaGFzIGJlZ3VuP1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNGYWxsYmFja1N0YXJ0KHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcbiAgcmV0dXJuIChcbiAgICB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wS2V5RG93biAmJlxuICAgIG5hdGl2ZUV2ZW50LmtleUNvZGUgPT09IFNUQVJUX0tFWUNPREVcbiAgKTtcbn1cblxuLyoqXG4gKiBEb2VzIG91ciBmYWxsYmFjayBtb2RlIHRoaW5rIHRoYXQgdGhpcyBldmVudCBpcyB0aGUgZW5kIG9mIGNvbXBvc2l0aW9uP1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNGYWxsYmFja0VuZCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVVwOlxuICAgICAgLy8gQ29tbWFuZCBrZXlzIGluc2VydCBvciBjbGVhciBJTUUgaW5wdXQuXG4gICAgICByZXR1cm4gKEVORF9LRVlDT0RFUy5pbmRleE9mKG5hdGl2ZUV2ZW50LmtleUNvZGUpICE9PSAtMSk7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleURvd246XG4gICAgICAvLyBFeHBlY3QgSU1FIGtleUNvZGUgb24gZWFjaCBrZXlkb3duLiBJZiB3ZSBnZXQgYW55IG90aGVyXG4gICAgICAvLyBjb2RlIHdlIG11c3QgaGF2ZSBleGl0ZWQgZWFybGllci5cbiAgICAgIHJldHVybiAobmF0aXZlRXZlbnQua2V5Q29kZSAhPT0gU1RBUlRfS0VZQ09ERSk7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzOlxuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd246XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEJsdXI6XG4gICAgICAvLyBFdmVudHMgYXJlIG5vdCBwb3NzaWJsZSB3aXRob3V0IGNhbmNlbGxpbmcgSU1FLlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEhlbHBlciBjbGFzcyBzdG9yZXMgaW5mb3JtYXRpb24gYWJvdXQgc2VsZWN0aW9uIGFuZCBkb2N1bWVudCBzdGF0ZVxuICogc28gd2UgY2FuIGZpZ3VyZSBvdXQgd2hhdCBjaGFuZ2VkIGF0IGEgbGF0ZXIgZGF0ZS5cbiAqXG4gKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSByb290XG4gKi9cbmZ1bmN0aW9uIEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZShyb290KSB7XG4gIHRoaXMucm9vdCA9IHJvb3Q7XG4gIHRoaXMuc3RhcnRTZWxlY3Rpb24gPSBSZWFjdElucHV0U2VsZWN0aW9uLmdldFNlbGVjdGlvbihyb290KTtcbiAgdGhpcy5zdGFydFZhbHVlID0gdGhpcy5nZXRUZXh0KCk7XG59XG5cbi8qKlxuICogR2V0IGN1cnJlbnQgdGV4dCBvZiBpbnB1dC5cbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbkZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZS5wcm90b3R5cGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5yb290LnZhbHVlIHx8IHRoaXMucm9vdFtnZXRUZXh0Q29udGVudEFjY2Vzc29yKCldO1xufTtcblxuLyoqXG4gKiBUZXh0IHRoYXQgaGFzIGNoYW5nZWQgc2luY2UgdGhlIHN0YXJ0IG9mIGNvbXBvc2l0aW9uLlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlLnByb3RvdHlwZS5nZXREYXRhID0gZnVuY3Rpb24oKSB7XG4gIHZhciBlbmRWYWx1ZSA9IHRoaXMuZ2V0VGV4dCgpO1xuICB2YXIgcHJlZml4TGVuZ3RoID0gdGhpcy5zdGFydFNlbGVjdGlvbi5zdGFydDtcbiAgdmFyIHN1ZmZpeExlbmd0aCA9IHRoaXMuc3RhcnRWYWx1ZS5sZW5ndGggLSB0aGlzLnN0YXJ0U2VsZWN0aW9uLmVuZDtcblxuICByZXR1cm4gZW5kVmFsdWUuc3Vic3RyKFxuICAgIHByZWZpeExlbmd0aCxcbiAgICBlbmRWYWx1ZS5sZW5ndGggLSBzdWZmaXhMZW5ndGggLSBwcmVmaXhMZW5ndGhcbiAgKTtcbn07XG5cbi8qKlxuICogVGhpcyBwbHVnaW4gY3JlYXRlcyBgb25Db21wb3NpdGlvblN0YXJ0YCwgYG9uQ29tcG9zaXRpb25VcGRhdGVgIGFuZFxuICogYG9uQ29tcG9zaXRpb25FbmRgIGV2ZW50cyBvbiBpbnB1dHMsIHRleHRhcmVhcyBhbmQgY29udGVudEVkaXRhYmxlXG4gKiBub2Rlcy5cbiAqL1xudmFyIENvbXBvc2l0aW9uRXZlbnRQbHVnaW4gPSB7XG5cbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAgICogQHJldHVybiB7Kn0gQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHN9XG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbihcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgIG5hdGl2ZUV2ZW50KSB7XG5cbiAgICB2YXIgZXZlbnRUeXBlO1xuICAgIHZhciBkYXRhO1xuXG4gICAgaWYgKHVzZUNvbXBvc2l0aW9uRXZlbnQpIHtcbiAgICAgIGV2ZW50VHlwZSA9IGdldENvbXBvc2l0aW9uRXZlbnRUeXBlKHRvcExldmVsVHlwZSk7XG4gICAgfSBlbHNlIGlmICghY3VycmVudENvbXBvc2l0aW9uKSB7XG4gICAgICBpZiAoaXNGYWxsYmFja1N0YXJ0KHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpKSB7XG4gICAgICAgIGV2ZW50VHlwZSA9IGV2ZW50VHlwZXMuY29tcG9zaXRpb25TdGFydDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzRmFsbGJhY2tFbmQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkpIHtcbiAgICAgIGV2ZW50VHlwZSA9IGV2ZW50VHlwZXMuY29tcG9zaXRpb25FbmQ7XG4gICAgfVxuXG4gICAgaWYgKHVzZUZhbGxiYWNrRGF0YSkge1xuICAgICAgLy8gVGhlIGN1cnJlbnQgY29tcG9zaXRpb24gaXMgc3RvcmVkIHN0YXRpY2FsbHkgYW5kIG11c3Qgbm90IGJlXG4gICAgICAvLyBvdmVyd3JpdHRlbiB3aGlsZSBjb21wb3NpdGlvbiBjb250aW51ZXMuXG4gICAgICBpZiAoIWN1cnJlbnRDb21wb3NpdGlvbiAmJiBldmVudFR5cGUgPT09IGV2ZW50VHlwZXMuY29tcG9zaXRpb25TdGFydCkge1xuICAgICAgICBjdXJyZW50Q29tcG9zaXRpb24gPSBuZXcgRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlKHRvcExldmVsVGFyZ2V0KTtcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnRUeXBlID09PSBldmVudFR5cGVzLmNvbXBvc2l0aW9uRW5kKSB7XG4gICAgICAgIGlmIChjdXJyZW50Q29tcG9zaXRpb24pIHtcbiAgICAgICAgICBkYXRhID0gY3VycmVudENvbXBvc2l0aW9uLmdldERhdGEoKTtcbiAgICAgICAgICBjdXJyZW50Q29tcG9zaXRpb24gPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50VHlwZSkge1xuICAgICAgdmFyIGV2ZW50ID0gU3ludGhldGljQ29tcG9zaXRpb25FdmVudC5nZXRQb29sZWQoXG4gICAgICAgIGV2ZW50VHlwZSxcbiAgICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgICAgbmF0aXZlRXZlbnRcbiAgICAgICk7XG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICAvLyBJbmplY3QgZGF0YSBnZW5lcmF0ZWQgZnJvbSBmYWxsYmFjayBwYXRoIGludG8gdGhlIHN5bnRoZXRpYyBldmVudC5cbiAgICAgICAgLy8gVGhpcyBtYXRjaGVzIHRoZSBwcm9wZXJ0eSBvZiBuYXRpdmUgQ29tcG9zaXRpb25FdmVudEludGVyZmFjZS5cbiAgICAgICAgZXZlbnQuZGF0YSA9IGRhdGE7XG4gICAgICB9XG4gICAgICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb21wb3NpdGlvbkV2ZW50UGx1Z2luO1xuXG59LHtcIi4vRXZlbnRDb25zdGFudHNcIjo4NCxcIi4vRXZlbnRQcm9wYWdhdG9yc1wiOjg5LFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOjkwLFwiLi9SZWFjdElucHV0U2VsZWN0aW9uXCI6MTI4LFwiLi9TeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50XCI6MTU0LFwiLi9nZXRUZXh0Q29udGVudEFjY2Vzc29yXCI6MTkxLFwiLi9rZXlPZlwiOjIwM31dLDc4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRE9NQ2hpbGRyZW5PcGVyYXRpb25zXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRGFuZ2VyID0gcmVxdWlyZShcIi4vRGFuZ2VyXCIpO1xudmFyIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzID0gcmVxdWlyZShcIi4vUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXNcIik7XG5cbnZhciBnZXRUZXh0Q29udGVudEFjY2Vzc29yID0gcmVxdWlyZShcIi4vZ2V0VGV4dENvbnRlbnRBY2Nlc3NvclwiKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbi8qKlxuICogVGhlIERPTSBwcm9wZXJ0eSB0byB1c2Ugd2hlbiBzZXR0aW5nIHRleHQgY29udGVudC5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xudmFyIHRleHRDb250ZW50QWNjZXNzb3IgPSBnZXRUZXh0Q29udGVudEFjY2Vzc29yKCk7XG5cbi8qKlxuICogSW5zZXJ0cyBgY2hpbGROb2RlYCBhcyBhIGNoaWxkIG9mIGBwYXJlbnROb2RlYCBhdCB0aGUgYGluZGV4YC5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHBhcmVudE5vZGUgUGFyZW50IG5vZGUgaW4gd2hpY2ggdG8gaW5zZXJ0LlxuICogQHBhcmFtIHtET01FbGVtZW50fSBjaGlsZE5vZGUgQ2hpbGQgbm9kZSB0byBpbnNlcnQuXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggYXQgd2hpY2ggdG8gaW5zZXJ0IHRoZSBjaGlsZC5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBpbnNlcnRDaGlsZEF0KHBhcmVudE5vZGUsIGNoaWxkTm9kZSwgaW5kZXgpIHtcbiAgLy8gQnkgZXhwbG9pdGluZyBhcnJheXMgcmV0dXJuaW5nIGB1bmRlZmluZWRgIGZvciBhbiB1bmRlZmluZWQgaW5kZXgsIHdlIGNhblxuICAvLyByZWx5IGV4Y2x1c2l2ZWx5IG9uIGBpbnNlcnRCZWZvcmUobm9kZSwgbnVsbClgIGluc3RlYWQgb2YgYWxzbyB1c2luZ1xuICAvLyBgYXBwZW5kQ2hpbGQobm9kZSlgLiBIb3dldmVyLCB1c2luZyBgdW5kZWZpbmVkYCBpcyBub3QgYWxsb3dlZCBieSBhbGxcbiAgLy8gYnJvd3NlcnMgc28gd2UgbXVzdCByZXBsYWNlIGl0IHdpdGggYG51bGxgLlxuICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShcbiAgICBjaGlsZE5vZGUsXG4gICAgcGFyZW50Tm9kZS5jaGlsZE5vZGVzW2luZGV4XSB8fCBudWxsXG4gICk7XG59XG5cbnZhciB1cGRhdGVUZXh0Q29udGVudDtcbmlmICh0ZXh0Q29udGVudEFjY2Vzc29yID09PSAndGV4dENvbnRlbnQnKSB7XG4gIC8qKlxuICAgKiBTZXRzIHRoZSB0ZXh0IGNvbnRlbnQgb2YgYG5vZGVgIHRvIGB0ZXh0YC5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlIE5vZGUgdG8gY2hhbmdlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IE5ldyB0ZXh0IGNvbnRlbnRcbiAgICovXG4gIHVwZGF0ZVRleHRDb250ZW50ID0gZnVuY3Rpb24obm9kZSwgdGV4dCkge1xuICAgIG5vZGUudGV4dENvbnRlbnQgPSB0ZXh0O1xuICB9O1xufSBlbHNlIHtcbiAgLyoqXG4gICAqIFNldHMgdGhlIHRleHQgY29udGVudCBvZiBgbm9kZWAgdG8gYHRleHRgLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGUgTm9kZSB0byBjaGFuZ2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgTmV3IHRleHQgY29udGVudFxuICAgKi9cbiAgdXBkYXRlVGV4dENvbnRlbnQgPSBmdW5jdGlvbihub2RlLCB0ZXh0KSB7XG4gICAgLy8gSW4gb3JkZXIgdG8gcHJlc2VydmUgbmV3bGluZXMgY29ycmVjdGx5LCB3ZSBjYW4ndCB1c2UgLmlubmVyVGV4dCB0byBzZXRcbiAgICAvLyB0aGUgY29udGVudHMgKHNlZSAjMTA4MCksIHNvIHdlIGVtcHR5IHRoZSBlbGVtZW50IHRoZW4gYXBwZW5kIGEgdGV4dCBub2RlXG4gICAgd2hpbGUgKG5vZGUuZmlyc3RDaGlsZCkge1xuICAgICAgbm9kZS5yZW1vdmVDaGlsZChub2RlLmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBpZiAodGV4dCkge1xuICAgICAgdmFyIGRvYyA9IG5vZGUub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcbiAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoZG9jLmNyZWF0ZVRleHROb2RlKHRleHQpKTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogT3BlcmF0aW9ucyBmb3IgdXBkYXRpbmcgd2l0aCBET00gY2hpbGRyZW4uXG4gKi9cbnZhciBET01DaGlsZHJlbk9wZXJhdGlvbnMgPSB7XG5cbiAgZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXA6IERhbmdlci5kYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCxcblxuICB1cGRhdGVUZXh0Q29udGVudDogdXBkYXRlVGV4dENvbnRlbnQsXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYSBjb21wb25lbnQncyBjaGlsZHJlbiBieSBwcm9jZXNzaW5nIGEgc2VyaWVzIG9mIHVwZGF0ZXMuIFRoZVxuICAgKiB1cGRhdGUgY29uZmlndXJhdGlvbnMgYXJlIGVhY2ggZXhwZWN0ZWQgdG8gaGF2ZSBhIGBwYXJlbnROb2RlYCBwcm9wZXJ0eS5cbiAgICpcbiAgICogQHBhcmFtIHthcnJheTxvYmplY3Q+fSB1cGRhdGVzIExpc3Qgb2YgdXBkYXRlIGNvbmZpZ3VyYXRpb25zLlxuICAgKiBAcGFyYW0ge2FycmF5PHN0cmluZz59IG1hcmt1cExpc3QgTGlzdCBvZiBtYXJrdXAgc3RyaW5ncy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBwcm9jZXNzVXBkYXRlczogZnVuY3Rpb24odXBkYXRlcywgbWFya3VwTGlzdCkge1xuICAgIHZhciB1cGRhdGU7XG4gICAgLy8gTWFwcGluZyBmcm9tIHBhcmVudCBJRHMgdG8gaW5pdGlhbCBjaGlsZCBvcmRlcmluZ3MuXG4gICAgdmFyIGluaXRpYWxDaGlsZHJlbiA9IG51bGw7XG4gICAgLy8gTGlzdCBvZiBjaGlsZHJlbiB0aGF0IHdpbGwgYmUgbW92ZWQgb3IgcmVtb3ZlZC5cbiAgICB2YXIgdXBkYXRlZENoaWxkcmVuID0gbnVsbDtcblxuICAgIGZvciAodmFyIGkgPSAwOyB1cGRhdGUgPSB1cGRhdGVzW2ldOyBpKyspIHtcbiAgICAgIGlmICh1cGRhdGUudHlwZSA9PT0gUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuTU9WRV9FWElTVElORyB8fFxuICAgICAgICAgIHVwZGF0ZS50eXBlID09PSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5SRU1PVkVfTk9ERSkge1xuICAgICAgICB2YXIgdXBkYXRlZEluZGV4ID0gdXBkYXRlLmZyb21JbmRleDtcbiAgICAgICAgdmFyIHVwZGF0ZWRDaGlsZCA9IHVwZGF0ZS5wYXJlbnROb2RlLmNoaWxkTm9kZXNbdXBkYXRlZEluZGV4XTtcbiAgICAgICAgdmFyIHBhcmVudElEID0gdXBkYXRlLnBhcmVudElEO1xuXG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICAgdXBkYXRlZENoaWxkLFxuICAgICAgICAgICdwcm9jZXNzVXBkYXRlcygpOiBVbmFibGUgdG8gZmluZCBjaGlsZCAlcyBvZiBlbGVtZW50LiBUaGlzICcgK1xuICAgICAgICAgICdwcm9iYWJseSBtZWFucyB0aGUgRE9NIHdhcyB1bmV4cGVjdGVkbHkgbXV0YXRlZCAoZS5nLiwgYnkgdGhlICcgK1xuICAgICAgICAgICdicm93c2VyKSwgdXN1YWxseSBkdWUgdG8gZm9yZ2V0dGluZyBhIDx0Ym9keT4gd2hlbiB1c2luZyB0YWJsZXMsICcgK1xuICAgICAgICAgICduZXN0aW5nIHRhZ3MgbGlrZSA8Zm9ybT4sIDxwPiwgb3IgPGE+LCBvciB1c2luZyBub24tU1ZHIGVsZW1lbnRzICcrXG4gICAgICAgICAgJ2luIGFuIDxzdmc+IHBhcmVudC4gVHJ5IGluc3BlY3RpbmcgdGhlIGNoaWxkIG5vZGVzIG9mIHRoZSBlbGVtZW50ICcgK1xuICAgICAgICAgICd3aXRoIFJlYWN0IElEIGAlc2AuJyxcbiAgICAgICAgICB1cGRhdGVkSW5kZXgsXG4gICAgICAgICAgcGFyZW50SURcbiAgICAgICAgKSA6IGludmFyaWFudCh1cGRhdGVkQ2hpbGQpKTtcblxuICAgICAgICBpbml0aWFsQ2hpbGRyZW4gPSBpbml0aWFsQ2hpbGRyZW4gfHwge307XG4gICAgICAgIGluaXRpYWxDaGlsZHJlbltwYXJlbnRJRF0gPSBpbml0aWFsQ2hpbGRyZW5bcGFyZW50SURdIHx8IFtdO1xuICAgICAgICBpbml0aWFsQ2hpbGRyZW5bcGFyZW50SURdW3VwZGF0ZWRJbmRleF0gPSB1cGRhdGVkQ2hpbGQ7XG5cbiAgICAgICAgdXBkYXRlZENoaWxkcmVuID0gdXBkYXRlZENoaWxkcmVuIHx8IFtdO1xuICAgICAgICB1cGRhdGVkQ2hpbGRyZW4ucHVzaCh1cGRhdGVkQ2hpbGQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZW5kZXJlZE1hcmt1cCA9IERhbmdlci5kYW5nZXJvdXNseVJlbmRlck1hcmt1cChtYXJrdXBMaXN0KTtcblxuICAgIC8vIFJlbW92ZSB1cGRhdGVkIGNoaWxkcmVuIGZpcnN0IHNvIHRoYXQgYHRvSW5kZXhgIGlzIGNvbnNpc3RlbnQuXG4gICAgaWYgKHVwZGF0ZWRDaGlsZHJlbikge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB1cGRhdGVkQ2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdXBkYXRlZENoaWxkcmVuW2pdLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodXBkYXRlZENoaWxkcmVuW2pdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBrID0gMDsgdXBkYXRlID0gdXBkYXRlc1trXTsgaysrKSB7XG4gICAgICBzd2l0Y2ggKHVwZGF0ZS50eXBlKSB7XG4gICAgICAgIGNhc2UgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuSU5TRVJUX01BUktVUDpcbiAgICAgICAgICBpbnNlcnRDaGlsZEF0KFxuICAgICAgICAgICAgdXBkYXRlLnBhcmVudE5vZGUsXG4gICAgICAgICAgICByZW5kZXJlZE1hcmt1cFt1cGRhdGUubWFya3VwSW5kZXhdLFxuICAgICAgICAgICAgdXBkYXRlLnRvSW5kZXhcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLk1PVkVfRVhJU1RJTkc6XG4gICAgICAgICAgaW5zZXJ0Q2hpbGRBdChcbiAgICAgICAgICAgIHVwZGF0ZS5wYXJlbnROb2RlLFxuICAgICAgICAgICAgaW5pdGlhbENoaWxkcmVuW3VwZGF0ZS5wYXJlbnRJRF1bdXBkYXRlLmZyb21JbmRleF0sXG4gICAgICAgICAgICB1cGRhdGUudG9JbmRleFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuVEVYVF9DT05URU5UOlxuICAgICAgICAgIHVwZGF0ZVRleHRDb250ZW50KFxuICAgICAgICAgICAgdXBkYXRlLnBhcmVudE5vZGUsXG4gICAgICAgICAgICB1cGRhdGUudGV4dENvbnRlbnRcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLlJFTU9WRV9OT0RFOlxuICAgICAgICAgIC8vIEFscmVhZHkgcmVtb3ZlZCBieSB0aGUgZm9yLWxvb3AgYWJvdmUuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRE9NQ2hpbGRyZW5PcGVyYXRpb25zO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9EYW5nZXJcIjo4MSxcIi4vUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXNcIjoxMzQsXCIuL2dldFRleHRDb250ZW50QWNjZXNzb3JcIjoxOTEsXCIuL2ludmFyaWFudFwiOjE5NixcIl9wcm9jZXNzXCI6MTl9XSw3OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERPTVByb3BlcnR5XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbi8qanNsaW50IGJpdHdpc2U6IHRydWUgKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbmZ1bmN0aW9uIGNoZWNrTWFzayh2YWx1ZSwgYml0bWFzaykge1xuICByZXR1cm4gKHZhbHVlICYgYml0bWFzaykgPT09IGJpdG1hc2s7XG59XG5cbnZhciBET01Qcm9wZXJ0eUluamVjdGlvbiA9IHtcbiAgLyoqXG4gICAqIE1hcHBpbmcgZnJvbSBub3JtYWxpemVkLCBjYW1lbGNhc2VkIHByb3BlcnR5IG5hbWVzIHRvIGEgY29uZmlndXJhdGlvbiB0aGF0XG4gICAqIHNwZWNpZmllcyBob3cgdGhlIGFzc29jaWF0ZWQgRE9NIHByb3BlcnR5IHNob3VsZCBiZSBhY2Nlc3NlZCBvciByZW5kZXJlZC5cbiAgICovXG4gIE1VU1RfVVNFX0FUVFJJQlVURTogMHgxLFxuICBNVVNUX1VTRV9QUk9QRVJUWTogMHgyLFxuICBIQVNfU0lERV9FRkZFQ1RTOiAweDQsXG4gIEhBU19CT09MRUFOX1ZBTFVFOiAweDgsXG4gIEhBU19OVU1FUklDX1ZBTFVFOiAweDEwLFxuICBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRTogMHgyMCB8IDB4MTAsXG4gIEhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUU6IDB4NDAsXG5cbiAgLyoqXG4gICAqIEluamVjdCBzb21lIHNwZWNpYWxpemVkIGtub3dsZWRnZSBhYm91dCB0aGUgRE9NLiBUaGlzIHRha2VzIGEgY29uZmlnIG9iamVjdFxuICAgKiB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICpcbiAgICogaXNDdXN0b21BdHRyaWJ1dGU6IGZ1bmN0aW9uIHRoYXQgZ2l2ZW4gYW4gYXR0cmlidXRlIG5hbWUgd2lsbCByZXR1cm4gdHJ1ZVxuICAgKiBpZiBpdCBjYW4gYmUgaW5zZXJ0ZWQgaW50byB0aGUgRE9NIHZlcmJhdGltLiBVc2VmdWwgZm9yIGRhdGEtKiBvciBhcmlhLSpcbiAgICogYXR0cmlidXRlcyB3aGVyZSBpdCdzIGltcG9zc2libGUgdG8gZW51bWVyYXRlIGFsbCBvZiB0aGUgcG9zc2libGVcbiAgICogYXR0cmlidXRlIG5hbWVzLFxuICAgKlxuICAgKiBQcm9wZXJ0aWVzOiBvYmplY3QgbWFwcGluZyBET00gcHJvcGVydHkgbmFtZSB0byBvbmUgb2YgdGhlXG4gICAqIERPTVByb3BlcnR5SW5qZWN0aW9uIGNvbnN0YW50cyBvciBudWxsLiBJZiB5b3VyIGF0dHJpYnV0ZSBpc24ndCBpbiBoZXJlLFxuICAgKiBpdCB3b24ndCBnZXQgd3JpdHRlbiB0byB0aGUgRE9NLlxuICAgKlxuICAgKiBET01BdHRyaWJ1dGVOYW1lczogb2JqZWN0IG1hcHBpbmcgUmVhY3QgYXR0cmlidXRlIG5hbWUgdG8gdGhlIERPTVxuICAgKiBhdHRyaWJ1dGUgbmFtZS4gQXR0cmlidXRlIG5hbWVzIG5vdCBzcGVjaWZpZWQgdXNlIHRoZSAqKmxvd2VyY2FzZSoqXG4gICAqIG5vcm1hbGl6ZWQgbmFtZS5cbiAgICpcbiAgICogRE9NUHJvcGVydHlOYW1lczogc2ltaWxhciB0byBET01BdHRyaWJ1dGVOYW1lcyBidXQgZm9yIERPTSBwcm9wZXJ0aWVzLlxuICAgKiBQcm9wZXJ0eSBuYW1lcyBub3Qgc3BlY2lmaWVkIHVzZSB0aGUgbm9ybWFsaXplZCBuYW1lLlxuICAgKlxuICAgKiBET01NdXRhdGlvbk1ldGhvZHM6IFByb3BlcnRpZXMgdGhhdCByZXF1aXJlIHNwZWNpYWwgbXV0YXRpb24gbWV0aG9kcy4gSWZcbiAgICogYHZhbHVlYCBpcyB1bmRlZmluZWQsIHRoZSBtdXRhdGlvbiBtZXRob2Qgc2hvdWxkIHVuc2V0IHRoZSBwcm9wZXJ0eS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGRvbVByb3BlcnR5Q29uZmlnIHRoZSBjb25maWcgYXMgZGVzY3JpYmVkIGFib3ZlLlxuICAgKi9cbiAgaW5qZWN0RE9NUHJvcGVydHlDb25maWc6IGZ1bmN0aW9uKGRvbVByb3BlcnR5Q29uZmlnKSB7XG4gICAgdmFyIFByb3BlcnRpZXMgPSBkb21Qcm9wZXJ0eUNvbmZpZy5Qcm9wZXJ0aWVzIHx8IHt9O1xuICAgIHZhciBET01BdHRyaWJ1dGVOYW1lcyA9IGRvbVByb3BlcnR5Q29uZmlnLkRPTUF0dHJpYnV0ZU5hbWVzIHx8IHt9O1xuICAgIHZhciBET01Qcm9wZXJ0eU5hbWVzID0gZG9tUHJvcGVydHlDb25maWcuRE9NUHJvcGVydHlOYW1lcyB8fCB7fTtcbiAgICB2YXIgRE9NTXV0YXRpb25NZXRob2RzID0gZG9tUHJvcGVydHlDb25maWcuRE9NTXV0YXRpb25NZXRob2RzIHx8IHt9O1xuXG4gICAgaWYgKGRvbVByb3BlcnR5Q29uZmlnLmlzQ3VzdG9tQXR0cmlidXRlKSB7XG4gICAgICBET01Qcm9wZXJ0eS5faXNDdXN0b21BdHRyaWJ1dGVGdW5jdGlvbnMucHVzaChcbiAgICAgICAgZG9tUHJvcGVydHlDb25maWcuaXNDdXN0b21BdHRyaWJ1dGVcbiAgICAgICk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gUHJvcGVydGllcykge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgIURPTVByb3BlcnR5LmlzU3RhbmRhcmROYW1lLmhhc093blByb3BlcnR5KHByb3BOYW1lKSxcbiAgICAgICAgJ2luamVjdERPTVByb3BlcnR5Q29uZmlnKC4uLik6IFlvdVxcJ3JlIHRyeWluZyB0byBpbmplY3QgRE9NIHByb3BlcnR5ICcgK1xuICAgICAgICAnXFwnJXNcXCcgd2hpY2ggaGFzIGFscmVhZHkgYmVlbiBpbmplY3RlZC4gWW91IG1heSBiZSBhY2NpZGVudGFsbHkgJyArXG4gICAgICAgICdpbmplY3RpbmcgdGhlIHNhbWUgRE9NIHByb3BlcnR5IGNvbmZpZyB0d2ljZSwgb3IgeW91IG1heSBiZSAnICtcbiAgICAgICAgJ2luamVjdGluZyB0d28gY29uZmlncyB0aGF0IGhhdmUgY29uZmxpY3RpbmcgcHJvcGVydHkgbmFtZXMuJyxcbiAgICAgICAgcHJvcE5hbWVcbiAgICAgICkgOiBpbnZhcmlhbnQoIURPTVByb3BlcnR5LmlzU3RhbmRhcmROYW1lLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkpO1xuXG4gICAgICBET01Qcm9wZXJ0eS5pc1N0YW5kYXJkTmFtZVtwcm9wTmFtZV0gPSB0cnVlO1xuXG4gICAgICB2YXIgbG93ZXJDYXNlZCA9IHByb3BOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICBET01Qcm9wZXJ0eS5nZXRQb3NzaWJsZVN0YW5kYXJkTmFtZVtsb3dlckNhc2VkXSA9IHByb3BOYW1lO1xuXG4gICAgICBpZiAoRE9NQXR0cmlidXRlTmFtZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIHZhciBhdHRyaWJ1dGVOYW1lID0gRE9NQXR0cmlidXRlTmFtZXNbcHJvcE5hbWVdO1xuICAgICAgICBET01Qcm9wZXJ0eS5nZXRQb3NzaWJsZVN0YW5kYXJkTmFtZVthdHRyaWJ1dGVOYW1lXSA9IHByb3BOYW1lO1xuICAgICAgICBET01Qcm9wZXJ0eS5nZXRBdHRyaWJ1dGVOYW1lW3Byb3BOYW1lXSA9IGF0dHJpYnV0ZU5hbWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBET01Qcm9wZXJ0eS5nZXRBdHRyaWJ1dGVOYW1lW3Byb3BOYW1lXSA9IGxvd2VyQ2FzZWQ7XG4gICAgICB9XG5cbiAgICAgIERPTVByb3BlcnR5LmdldFByb3BlcnR5TmFtZVtwcm9wTmFtZV0gPVxuICAgICAgICBET01Qcm9wZXJ0eU5hbWVzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSA/XG4gICAgICAgICAgRE9NUHJvcGVydHlOYW1lc1twcm9wTmFtZV0gOlxuICAgICAgICAgIHByb3BOYW1lO1xuXG4gICAgICBpZiAoRE9NTXV0YXRpb25NZXRob2RzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICBET01Qcm9wZXJ0eS5nZXRNdXRhdGlvbk1ldGhvZFtwcm9wTmFtZV0gPSBET01NdXRhdGlvbk1ldGhvZHNbcHJvcE5hbWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgRE9NUHJvcGVydHkuZ2V0TXV0YXRpb25NZXRob2RbcHJvcE5hbWVdID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHByb3BDb25maWcgPSBQcm9wZXJ0aWVzW3Byb3BOYW1lXTtcbiAgICAgIERPTVByb3BlcnR5Lm11c3RVc2VBdHRyaWJ1dGVbcHJvcE5hbWVdID1cbiAgICAgICAgY2hlY2tNYXNrKHByb3BDb25maWcsIERPTVByb3BlcnR5SW5qZWN0aW9uLk1VU1RfVVNFX0FUVFJJQlVURSk7XG4gICAgICBET01Qcm9wZXJ0eS5tdXN0VXNlUHJvcGVydHlbcHJvcE5hbWVdID1cbiAgICAgICAgY2hlY2tNYXNrKHByb3BDb25maWcsIERPTVByb3BlcnR5SW5qZWN0aW9uLk1VU1RfVVNFX1BST1BFUlRZKTtcbiAgICAgIERPTVByb3BlcnR5Lmhhc1NpZGVFZmZlY3RzW3Byb3BOYW1lXSA9XG4gICAgICAgIGNoZWNrTWFzayhwcm9wQ29uZmlnLCBET01Qcm9wZXJ0eUluamVjdGlvbi5IQVNfU0lERV9FRkZFQ1RTKTtcbiAgICAgIERPTVByb3BlcnR5Lmhhc0Jvb2xlYW5WYWx1ZVtwcm9wTmFtZV0gPVxuICAgICAgICBjaGVja01hc2socHJvcENvbmZpZywgRE9NUHJvcGVydHlJbmplY3Rpb24uSEFTX0JPT0xFQU5fVkFMVUUpO1xuICAgICAgRE9NUHJvcGVydHkuaGFzTnVtZXJpY1ZhbHVlW3Byb3BOYW1lXSA9XG4gICAgICAgIGNoZWNrTWFzayhwcm9wQ29uZmlnLCBET01Qcm9wZXJ0eUluamVjdGlvbi5IQVNfTlVNRVJJQ19WQUxVRSk7XG4gICAgICBET01Qcm9wZXJ0eS5oYXNQb3NpdGl2ZU51bWVyaWNWYWx1ZVtwcm9wTmFtZV0gPVxuICAgICAgICBjaGVja01hc2socHJvcENvbmZpZywgRE9NUHJvcGVydHlJbmplY3Rpb24uSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUpO1xuICAgICAgRE9NUHJvcGVydHkuaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZVtwcm9wTmFtZV0gPVxuICAgICAgICBjaGVja01hc2socHJvcENvbmZpZywgRE9NUHJvcGVydHlJbmplY3Rpb24uSEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRSk7XG5cbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICFET01Qcm9wZXJ0eS5tdXN0VXNlQXR0cmlidXRlW3Byb3BOYW1lXSB8fFxuICAgICAgICAgICFET01Qcm9wZXJ0eS5tdXN0VXNlUHJvcGVydHlbcHJvcE5hbWVdLFxuICAgICAgICAnRE9NUHJvcGVydHk6IENhbm5vdCByZXF1aXJlIHVzaW5nIGJvdGggYXR0cmlidXRlIGFuZCBwcm9wZXJ0eTogJXMnLFxuICAgICAgICBwcm9wTmFtZVxuICAgICAgKSA6IGludmFyaWFudCghRE9NUHJvcGVydHkubXVzdFVzZUF0dHJpYnV0ZVtwcm9wTmFtZV0gfHxcbiAgICAgICAgIURPTVByb3BlcnR5Lm11c3RVc2VQcm9wZXJ0eVtwcm9wTmFtZV0pKTtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgIERPTVByb3BlcnR5Lm11c3RVc2VQcm9wZXJ0eVtwcm9wTmFtZV0gfHxcbiAgICAgICAgICAhRE9NUHJvcGVydHkuaGFzU2lkZUVmZmVjdHNbcHJvcE5hbWVdLFxuICAgICAgICAnRE9NUHJvcGVydHk6IFByb3BlcnRpZXMgdGhhdCBoYXZlIHNpZGUgZWZmZWN0cyBtdXN0IHVzZSBwcm9wZXJ0eTogJXMnLFxuICAgICAgICBwcm9wTmFtZVxuICAgICAgKSA6IGludmFyaWFudChET01Qcm9wZXJ0eS5tdXN0VXNlUHJvcGVydHlbcHJvcE5hbWVdIHx8XG4gICAgICAgICFET01Qcm9wZXJ0eS5oYXNTaWRlRWZmZWN0c1twcm9wTmFtZV0pKTtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICEhRE9NUHJvcGVydHkuaGFzQm9vbGVhblZhbHVlW3Byb3BOYW1lXSArXG4gICAgICAgICAgISFET01Qcm9wZXJ0eS5oYXNOdW1lcmljVmFsdWVbcHJvcE5hbWVdICtcbiAgICAgICAgICAhIURPTVByb3BlcnR5Lmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWVbcHJvcE5hbWVdIDw9IDEsXG4gICAgICAgICdET01Qcm9wZXJ0eTogVmFsdWUgY2FuIGJlIG9uZSBvZiBib29sZWFuLCBvdmVybG9hZGVkIGJvb2xlYW4sIG9yICcgK1xuICAgICAgICAnbnVtZXJpYyB2YWx1ZSwgYnV0IG5vdCBhIGNvbWJpbmF0aW9uOiAlcycsXG4gICAgICAgIHByb3BOYW1lXG4gICAgICApIDogaW52YXJpYW50KCEhRE9NUHJvcGVydHkuaGFzQm9vbGVhblZhbHVlW3Byb3BOYW1lXSArXG4gICAgICAgICEhRE9NUHJvcGVydHkuaGFzTnVtZXJpY1ZhbHVlW3Byb3BOYW1lXSArXG4gICAgICAgICEhRE9NUHJvcGVydHkuaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZVtwcm9wTmFtZV0gPD0gMSkpO1xuICAgIH1cbiAgfVxufTtcbnZhciBkZWZhdWx0VmFsdWVDYWNoZSA9IHt9O1xuXG4vKipcbiAqIERPTVByb3BlcnR5IGV4cG9ydHMgbG9va3VwIG9iamVjdHMgdGhhdCBjYW4gYmUgdXNlZCBsaWtlIGZ1bmN0aW9uczpcbiAqXG4gKiAgID4gRE9NUHJvcGVydHkuaXNWYWxpZFsnaWQnXVxuICogICB0cnVlXG4gKiAgID4gRE9NUHJvcGVydHkuaXNWYWxpZFsnZm9vYmFyJ11cbiAqICAgdW5kZWZpbmVkXG4gKlxuICogQWx0aG91Z2ggdGhpcyBtYXkgYmUgY29uZnVzaW5nLCBpdCBwZXJmb3JtcyBiZXR0ZXIgaW4gZ2VuZXJhbC5cbiAqXG4gKiBAc2VlIGh0dHA6Ly9qc3BlcmYuY29tL2tleS1leGlzdHNcbiAqIEBzZWUgaHR0cDovL2pzcGVyZi5jb20va2V5LW1pc3NpbmdcbiAqL1xudmFyIERPTVByb3BlcnR5ID0ge1xuXG4gIElEX0FUVFJJQlVURV9OQU1FOiAnZGF0YS1yZWFjdGlkJyxcblxuICAvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgYSBwcm9wZXJ0eSBuYW1lIGlzIGEgc3RhbmRhcmQgcHJvcGVydHkuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBpc1N0YW5kYXJkTmFtZToge30sXG5cbiAgLyoqXG4gICAqIE1hcHBpbmcgZnJvbSBsb3dlcmNhc2UgcHJvcGVydHkgbmFtZXMgdG8gdGhlIHByb3Blcmx5IGNhc2VkIHZlcnNpb24sIHVzZWRcbiAgICogdG8gd2FybiBpbiB0aGUgY2FzZSBvZiBtaXNzaW5nIHByb3BlcnRpZXMuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBnZXRQb3NzaWJsZVN0YW5kYXJkTmFtZToge30sXG5cbiAgLyoqXG4gICAqIE1hcHBpbmcgZnJvbSBub3JtYWxpemVkIG5hbWVzIHRvIGF0dHJpYnV0ZSBuYW1lcyB0aGF0IGRpZmZlci4gQXR0cmlidXRlXG4gICAqIG5hbWVzIGFyZSB1c2VkIHdoZW4gcmVuZGVyaW5nIG1hcmt1cCBvciB3aXRoIGAqQXR0cmlidXRlKClgLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgZ2V0QXR0cmlidXRlTmFtZToge30sXG5cbiAgLyoqXG4gICAqIE1hcHBpbmcgZnJvbSBub3JtYWxpemVkIG5hbWVzIHRvIHByb3BlcnRpZXMgb24gRE9NIG5vZGUgaW5zdGFuY2VzLlxuICAgKiAoVGhpcyBpbmNsdWRlcyBwcm9wZXJ0aWVzIHRoYXQgbXV0YXRlIGR1ZSB0byBleHRlcm5hbCBmYWN0b3JzLilcbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIGdldFByb3BlcnR5TmFtZToge30sXG5cbiAgLyoqXG4gICAqIE1hcHBpbmcgZnJvbSBub3JtYWxpemVkIG5hbWVzIHRvIG11dGF0aW9uIG1ldGhvZHMuIFRoaXMgd2lsbCBvbmx5IGV4aXN0IGlmXG4gICAqIG11dGF0aW9uIGNhbm5vdCBiZSBzZXQgc2ltcGx5IGJ5IHRoZSBwcm9wZXJ0eSBvciBgc2V0QXR0cmlidXRlKClgLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgZ2V0TXV0YXRpb25NZXRob2Q6IHt9LFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBtdXN0IGJlIGFjY2Vzc2VkIGFuZCBtdXRhdGVkIGFzIGFuIG9iamVjdCBwcm9wZXJ0eS5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIG11c3RVc2VBdHRyaWJ1dGU6IHt9LFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBtdXN0IGJlIGFjY2Vzc2VkIGFuZCBtdXRhdGVkIHVzaW5nIGAqQXR0cmlidXRlKClgLlxuICAgKiAoVGhpcyBpbmNsdWRlcyBhbnl0aGluZyB0aGF0IGZhaWxzIGA8cHJvcE5hbWU+IGluIDxlbGVtZW50PmAuKVxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgbXVzdFVzZVByb3BlcnR5OiB7fSxcblxuICAvKipcbiAgICogV2hldGhlciBvciBub3Qgc2V0dGluZyBhIHZhbHVlIGNhdXNlcyBzaWRlIGVmZmVjdHMgc3VjaCBhcyB0cmlnZ2VyaW5nXG4gICAqIHJlc291cmNlcyB0byBiZSBsb2FkZWQgb3IgdGV4dCBzZWxlY3Rpb24gY2hhbmdlcy4gV2UgbXVzdCBlbnN1cmUgdGhhdFxuICAgKiB0aGUgdmFsdWUgaXMgb25seSBzZXQgaWYgaXQgaGFzIGNoYW5nZWQuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBoYXNTaWRlRWZmZWN0czoge30sXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIHByb3BlcnR5IHNob3VsZCBiZSByZW1vdmVkIHdoZW4gc2V0IHRvIGEgZmFsc2V5IHZhbHVlLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgaGFzQm9vbGVhblZhbHVlOiB7fSxcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgcHJvcGVydHkgbXVzdCBiZSBudW1lcmljIG9yIHBhcnNlIGFzIGFcbiAgICogbnVtZXJpYyBhbmQgc2hvdWxkIGJlIHJlbW92ZWQgd2hlbiBzZXQgdG8gYSBmYWxzZXkgdmFsdWUuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBoYXNOdW1lcmljVmFsdWU6IHt9LFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBtdXN0IGJlIHBvc2l0aXZlIG51bWVyaWMgb3IgcGFyc2UgYXMgYSBwb3NpdGl2ZVxuICAgKiBudW1lcmljIGFuZCBzaG91bGQgYmUgcmVtb3ZlZCB3aGVuIHNldCB0byBhIGZhbHNleSB2YWx1ZS5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIGhhc1Bvc2l0aXZlTnVtZXJpY1ZhbHVlOiB7fSxcblxuICAvKipcbiAgICogV2hldGhlciB0aGUgcHJvcGVydHkgY2FuIGJlIHVzZWQgYXMgYSBmbGFnIGFzIHdlbGwgYXMgd2l0aCBhIHZhbHVlLiBSZW1vdmVkXG4gICAqIHdoZW4gc3RyaWN0bHkgZXF1YWwgdG8gZmFsc2U7IHByZXNlbnQgd2l0aG91dCBhIHZhbHVlIHdoZW4gc3RyaWN0bHkgZXF1YWxcbiAgICogdG8gdHJ1ZTsgcHJlc2VudCB3aXRoIGEgdmFsdWUgb3RoZXJ3aXNlLlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZToge30sXG5cbiAgLyoqXG4gICAqIEFsbCBvZiB0aGUgaXNDdXN0b21BdHRyaWJ1dGUoKSBmdW5jdGlvbnMgdGhhdCBoYXZlIGJlZW4gaW5qZWN0ZWQuXG4gICAqL1xuICBfaXNDdXN0b21BdHRyaWJ1dGVGdW5jdGlvbnM6IFtdLFxuXG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciBhIHByb3BlcnR5IG5hbWUgaXMgYSBjdXN0b20gYXR0cmlidXRlLlxuICAgKiBAbWV0aG9kXG4gICAqL1xuICBpc0N1c3RvbUF0dHJpYnV0ZTogZnVuY3Rpb24oYXR0cmlidXRlTmFtZSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgRE9NUHJvcGVydHkuX2lzQ3VzdG9tQXR0cmlidXRlRnVuY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXNDdXN0b21BdHRyaWJ1dGVGbiA9IERPTVByb3BlcnR5Ll9pc0N1c3RvbUF0dHJpYnV0ZUZ1bmN0aW9uc1tpXTtcbiAgICAgIGlmIChpc0N1c3RvbUF0dHJpYnV0ZUZuKGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGRlZmF1bHQgcHJvcGVydHkgdmFsdWUgZm9yIGEgRE9NIHByb3BlcnR5IChpLmUuLCBub3QgYW5cbiAgICogYXR0cmlidXRlKS4gTW9zdCBkZWZhdWx0IHZhbHVlcyBhcmUgJycgb3IgZmFsc2UsIGJ1dCBub3QgYWxsLiBXb3JzZSB5ZXQsXG4gICAqIHNvbWUgKGluIHBhcnRpY3VsYXIsIGB0eXBlYCkgdmFyeSBkZXBlbmRpbmcgb24gdGhlIHR5cGUgb2YgZWxlbWVudC5cbiAgICpcbiAgICogVE9ETzogSXMgaXQgYmV0dGVyIHRvIGdyYWIgYWxsIHRoZSBwb3NzaWJsZSBwcm9wZXJ0aWVzIHdoZW4gY3JlYXRpbmcgYW5cbiAgICogZWxlbWVudCB0byBhdm9pZCBoYXZpbmcgdG8gY3JlYXRlIHRoZSBzYW1lIGVsZW1lbnQgdHdpY2U/XG4gICAqL1xuICBnZXREZWZhdWx0VmFsdWVGb3JQcm9wZXJ0eTogZnVuY3Rpb24obm9kZU5hbWUsIHByb3ApIHtcbiAgICB2YXIgbm9kZURlZmF1bHRzID0gZGVmYXVsdFZhbHVlQ2FjaGVbbm9kZU5hbWVdO1xuICAgIHZhciB0ZXN0RWxlbWVudDtcbiAgICBpZiAoIW5vZGVEZWZhdWx0cykge1xuICAgICAgZGVmYXVsdFZhbHVlQ2FjaGVbbm9kZU5hbWVdID0gbm9kZURlZmF1bHRzID0ge307XG4gICAgfVxuICAgIGlmICghKHByb3AgaW4gbm9kZURlZmF1bHRzKSkge1xuICAgICAgdGVzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5vZGVOYW1lKTtcbiAgICAgIG5vZGVEZWZhdWx0c1twcm9wXSA9IHRlc3RFbGVtZW50W3Byb3BdO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZURlZmF1bHRzW3Byb3BdO1xuICB9LFxuXG4gIGluamVjdGlvbjogRE9NUHJvcGVydHlJbmplY3Rpb25cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRE9NUHJvcGVydHk7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL2ludmFyaWFudFwiOjE5NixcIl9wcm9jZXNzXCI6MTl9XSw4MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERPTVByb3BlcnR5T3BlcmF0aW9uc1xuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIERPTVByb3BlcnR5ID0gcmVxdWlyZShcIi4vRE9NUHJvcGVydHlcIik7XG5cbnZhciBlc2NhcGVUZXh0Rm9yQnJvd3NlciA9IHJlcXVpcmUoXCIuL2VzY2FwZVRleHRGb3JCcm93c2VyXCIpO1xudmFyIG1lbW9pemVTdHJpbmdPbmx5ID0gcmVxdWlyZShcIi4vbWVtb2l6ZVN0cmluZ09ubHlcIik7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbmZ1bmN0aW9uIHNob3VsZElnbm9yZVZhbHVlKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsIHx8XG4gICAgKERPTVByb3BlcnR5Lmhhc0Jvb2xlYW5WYWx1ZVtuYW1lXSAmJiAhdmFsdWUpIHx8XG4gICAgKERPTVByb3BlcnR5Lmhhc051bWVyaWNWYWx1ZVtuYW1lXSAmJiBpc05hTih2YWx1ZSkpIHx8XG4gICAgKERPTVByb3BlcnR5Lmhhc1Bvc2l0aXZlTnVtZXJpY1ZhbHVlW25hbWVdICYmICh2YWx1ZSA8IDEpKSB8fFxuICAgIChET01Qcm9wZXJ0eS5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlW25hbWVdICYmIHZhbHVlID09PSBmYWxzZSk7XG59XG5cbnZhciBwcm9jZXNzQXR0cmlidXRlTmFtZUFuZFByZWZpeCA9IG1lbW9pemVTdHJpbmdPbmx5KGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIGVzY2FwZVRleHRGb3JCcm93c2VyKG5hbWUpICsgJz1cIic7XG59KTtcblxuaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICB2YXIgcmVhY3RQcm9wcyA9IHtcbiAgICBjaGlsZHJlbjogdHJ1ZSxcbiAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDogdHJ1ZSxcbiAgICBrZXk6IHRydWUsXG4gICAgcmVmOiB0cnVlXG4gIH07XG4gIHZhciB3YXJuZWRQcm9wZXJ0aWVzID0ge307XG5cbiAgdmFyIHdhcm5Vbmtub3duUHJvcGVydHkgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgaWYgKHJlYWN0UHJvcHMuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgcmVhY3RQcm9wc1tuYW1lXSB8fFxuICAgICAgICB3YXJuZWRQcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KG5hbWUpICYmIHdhcm5lZFByb3BlcnRpZXNbbmFtZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3YXJuZWRQcm9wZXJ0aWVzW25hbWVdID0gdHJ1ZTtcbiAgICB2YXIgbG93ZXJDYXNlZE5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAvLyBkYXRhLSogYXR0cmlidXRlcyBzaG91bGQgYmUgbG93ZXJjYXNlOyBzdWdnZXN0IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuICAgIHZhciBzdGFuZGFyZE5hbWUgPSAoXG4gICAgICBET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShsb3dlckNhc2VkTmFtZSkgP1xuICAgICAgICBsb3dlckNhc2VkTmFtZSA6XG4gICAgICBET01Qcm9wZXJ0eS5nZXRQb3NzaWJsZVN0YW5kYXJkTmFtZS5oYXNPd25Qcm9wZXJ0eShsb3dlckNhc2VkTmFtZSkgP1xuICAgICAgICBET01Qcm9wZXJ0eS5nZXRQb3NzaWJsZVN0YW5kYXJkTmFtZVtsb3dlckNhc2VkTmFtZV0gOlxuICAgICAgICBudWxsXG4gICAgKTtcblxuICAgIC8vIEZvciBub3csIG9ubHkgd2FybiB3aGVuIHdlIGhhdmUgYSBzdWdnZXN0ZWQgY29ycmVjdGlvbi4gVGhpcyBwcmV2ZW50c1xuICAgIC8vIGxvZ2dpbmcgdG9vIG11Y2ggd2hlbiB1c2luZyB0cmFuc2ZlclByb3BzVG8uXG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICBzdGFuZGFyZE5hbWUgPT0gbnVsbCxcbiAgICAgICdVbmtub3duIERPTSBwcm9wZXJ0eSAnICsgbmFtZSArICcuIERpZCB5b3UgbWVhbiAnICsgc3RhbmRhcmROYW1lICsgJz8nXG4gICAgKSA6IG51bGwpO1xuXG4gIH07XG59XG5cbi8qKlxuICogT3BlcmF0aW9ucyBmb3IgZGVhbGluZyB3aXRoIERPTSBwcm9wZXJ0aWVzLlxuICovXG52YXIgRE9NUHJvcGVydHlPcGVyYXRpb25zID0ge1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIG1hcmt1cCBmb3IgdGhlIElEIHByb3BlcnR5LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVW5lc2NhcGVkIElELlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IE1hcmt1cCBzdHJpbmcuXG4gICAqL1xuICBjcmVhdGVNYXJrdXBGb3JJRDogZnVuY3Rpb24oaWQpIHtcbiAgICByZXR1cm4gcHJvY2Vzc0F0dHJpYnV0ZU5hbWVBbmRQcmVmaXgoRE9NUHJvcGVydHkuSURfQVRUUklCVVRFX05BTUUpICtcbiAgICAgIGVzY2FwZVRleHRGb3JCcm93c2VyKGlkKSArICdcIic7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgbWFya3VwIGZvciBhIHByb3BlcnR5LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqIEByZXR1cm4gez9zdHJpbmd9IE1hcmt1cCBzdHJpbmcsIG9yIG51bGwgaWYgdGhlIHByb3BlcnR5IHdhcyBpbnZhbGlkLlxuICAgKi9cbiAgY3JlYXRlTWFya3VwRm9yUHJvcGVydHk6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKERPTVByb3BlcnR5LmlzU3RhbmRhcmROYW1lLmhhc093blByb3BlcnR5KG5hbWUpICYmXG4gICAgICAgIERPTVByb3BlcnR5LmlzU3RhbmRhcmROYW1lW25hbWVdKSB7XG4gICAgICBpZiAoc2hvdWxkSWdub3JlVmFsdWUobmFtZSwgdmFsdWUpKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIHZhciBhdHRyaWJ1dGVOYW1lID0gRE9NUHJvcGVydHkuZ2V0QXR0cmlidXRlTmFtZVtuYW1lXTtcbiAgICAgIGlmIChET01Qcm9wZXJ0eS5oYXNCb29sZWFuVmFsdWVbbmFtZV0gfHxcbiAgICAgICAgICAoRE9NUHJvcGVydHkuaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZVtuYW1lXSAmJiB2YWx1ZSA9PT0gdHJ1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGVzY2FwZVRleHRGb3JCcm93c2VyKGF0dHJpYnV0ZU5hbWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb2Nlc3NBdHRyaWJ1dGVOYW1lQW5kUHJlZml4KGF0dHJpYnV0ZU5hbWUpICtcbiAgICAgICAgZXNjYXBlVGV4dEZvckJyb3dzZXIodmFsdWUpICsgJ1wiJztcbiAgICB9IGVsc2UgaWYgKERPTVByb3BlcnR5LmlzQ3VzdG9tQXR0cmlidXRlKG5hbWUpKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvY2Vzc0F0dHJpYnV0ZU5hbWVBbmRQcmVmaXgobmFtZSkgK1xuICAgICAgICBlc2NhcGVUZXh0Rm9yQnJvd3Nlcih2YWx1ZSkgKyAnXCInO1xuICAgIH0gZWxzZSBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICB3YXJuVW5rbm93blByb3BlcnR5KG5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogU2V0cyB0aGUgdmFsdWUgZm9yIGEgcHJvcGVydHkgb24gYSBub2RlLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKi9cbiAgc2V0VmFsdWVGb3JQcm9wZXJ0eTogZnVuY3Rpb24obm9kZSwgbmFtZSwgdmFsdWUpIHtcbiAgICBpZiAoRE9NUHJvcGVydHkuaXNTdGFuZGFyZE5hbWUuaGFzT3duUHJvcGVydHkobmFtZSkgJiZcbiAgICAgICAgRE9NUHJvcGVydHkuaXNTdGFuZGFyZE5hbWVbbmFtZV0pIHtcbiAgICAgIHZhciBtdXRhdGlvbk1ldGhvZCA9IERPTVByb3BlcnR5LmdldE11dGF0aW9uTWV0aG9kW25hbWVdO1xuICAgICAgaWYgKG11dGF0aW9uTWV0aG9kKSB7XG4gICAgICAgIG11dGF0aW9uTWV0aG9kKG5vZGUsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoc2hvdWxkSWdub3JlVmFsdWUobmFtZSwgdmFsdWUpKSB7XG4gICAgICAgIHRoaXMuZGVsZXRlVmFsdWVGb3JQcm9wZXJ0eShub2RlLCBuYW1lKTtcbiAgICAgIH0gZWxzZSBpZiAoRE9NUHJvcGVydHkubXVzdFVzZUF0dHJpYnV0ZVtuYW1lXSkge1xuICAgICAgICAvLyBgc2V0QXR0cmlidXRlYCB3aXRoIG9iamVjdHMgYmVjb21lcyBvbmx5IGBbb2JqZWN0XWAgaW4gSUU4LzksXG4gICAgICAgIC8vICgnJyArIHZhbHVlKSBtYWtlcyBpdCBvdXRwdXQgdGhlIGNvcnJlY3QgdG9TdHJpbmcoKS12YWx1ZS5cbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoRE9NUHJvcGVydHkuZ2V0QXR0cmlidXRlTmFtZVtuYW1lXSwgJycgKyB2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcHJvcE5hbWUgPSBET01Qcm9wZXJ0eS5nZXRQcm9wZXJ0eU5hbWVbbmFtZV07XG4gICAgICAgIC8vIE11c3QgZXhwbGljaXRseSBjYXN0IHZhbHVlcyBmb3IgSEFTX1NJREVfRUZGRUNUUy1wcm9wZXJ0aWVzIHRvIHRoZVxuICAgICAgICAvLyBwcm9wZXJ0eSB0eXBlIGJlZm9yZSBjb21wYXJpbmc7IG9ubHkgYHZhbHVlYCBkb2VzIGFuZCBpcyBzdHJpbmcuXG4gICAgICAgIGlmICghRE9NUHJvcGVydHkuaGFzU2lkZUVmZmVjdHNbbmFtZV0gfHxcbiAgICAgICAgICAgICgnJyArIG5vZGVbcHJvcE5hbWVdKSAhPT0gKCcnICsgdmFsdWUpKSB7XG4gICAgICAgICAgLy8gQ29udHJhcnkgdG8gYHNldEF0dHJpYnV0ZWAsIG9iamVjdCBwcm9wZXJ0aWVzIGFyZSBwcm9wZXJseVxuICAgICAgICAgIC8vIGB0b1N0cmluZ2BlZCBieSBJRTgvOS5cbiAgICAgICAgICBub2RlW3Byb3BOYW1lXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShuYW1lKSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShuYW1lLCAnJyArIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgd2FyblVua25vd25Qcm9wZXJ0eShuYW1lKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgdGhlIHZhbHVlIGZvciBhIHByb3BlcnR5IG9uIGEgbm9kZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqL1xuICBkZWxldGVWYWx1ZUZvclByb3BlcnR5OiBmdW5jdGlvbihub2RlLCBuYW1lKSB7XG4gICAgaWYgKERPTVByb3BlcnR5LmlzU3RhbmRhcmROYW1lLmhhc093blByb3BlcnR5KG5hbWUpICYmXG4gICAgICAgIERPTVByb3BlcnR5LmlzU3RhbmRhcmROYW1lW25hbWVdKSB7XG4gICAgICB2YXIgbXV0YXRpb25NZXRob2QgPSBET01Qcm9wZXJ0eS5nZXRNdXRhdGlvbk1ldGhvZFtuYW1lXTtcbiAgICAgIGlmIChtdXRhdGlvbk1ldGhvZCkge1xuICAgICAgICBtdXRhdGlvbk1ldGhvZChub2RlLCB1bmRlZmluZWQpO1xuICAgICAgfSBlbHNlIGlmIChET01Qcm9wZXJ0eS5tdXN0VXNlQXR0cmlidXRlW25hbWVdKSB7XG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKERPTVByb3BlcnR5LmdldEF0dHJpYnV0ZU5hbWVbbmFtZV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHByb3BOYW1lID0gRE9NUHJvcGVydHkuZ2V0UHJvcGVydHlOYW1lW25hbWVdO1xuICAgICAgICB2YXIgZGVmYXVsdFZhbHVlID0gRE9NUHJvcGVydHkuZ2V0RGVmYXVsdFZhbHVlRm9yUHJvcGVydHkoXG4gICAgICAgICAgbm9kZS5ub2RlTmFtZSxcbiAgICAgICAgICBwcm9wTmFtZVxuICAgICAgICApO1xuICAgICAgICBpZiAoIURPTVByb3BlcnR5Lmhhc1NpZGVFZmZlY3RzW25hbWVdIHx8XG4gICAgICAgICAgICAoJycgKyBub2RlW3Byb3BOYW1lXSkgIT09IGRlZmF1bHRWYWx1ZSkge1xuICAgICAgICAgIG5vZGVbcHJvcE5hbWVdID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShuYW1lKSkge1xuICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgfSBlbHNlIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIHdhcm5Vbmtub3duUHJvcGVydHkobmFtZSk7XG4gICAgfVxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRE9NUHJvcGVydHlPcGVyYXRpb25zO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9ET01Qcm9wZXJ0eVwiOjc5LFwiLi9lc2NhcGVUZXh0Rm9yQnJvd3NlclwiOjE3OSxcIi4vbWVtb2l6ZVN0cmluZ09ubHlcIjoyMDUsXCIuL3dhcm5pbmdcIjoyMTUsXCJfcHJvY2Vzc1wiOjE5fV0sODE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBEYW5nZXJcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuLypqc2xpbnQgZXZpbDogdHJ1ZSwgc3ViOiB0cnVlICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKTtcblxudmFyIGNyZWF0ZU5vZGVzRnJvbU1hcmt1cCA9IHJlcXVpcmUoXCIuL2NyZWF0ZU5vZGVzRnJvbU1hcmt1cFwiKTtcbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZShcIi4vZW1wdHlGdW5jdGlvblwiKTtcbnZhciBnZXRNYXJrdXBXcmFwID0gcmVxdWlyZShcIi4vZ2V0TWFya3VwV3JhcFwiKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbnZhciBPUEVOX1RBR19OQU1FX0VYUCA9IC9eKDxbXiBcXC8+XSspLztcbnZhciBSRVNVTFRfSU5ERVhfQVRUUiA9ICdkYXRhLWRhbmdlci1pbmRleCc7XG5cbi8qKlxuICogRXh0cmFjdHMgdGhlIGBub2RlTmFtZWAgZnJvbSBhIHN0cmluZyBvZiBtYXJrdXAuXG4gKlxuICogTk9URTogRXh0cmFjdGluZyB0aGUgYG5vZGVOYW1lYCBkb2VzIG5vdCByZXF1aXJlIGEgcmVndWxhciBleHByZXNzaW9uIG1hdGNoXG4gKiBiZWNhdXNlIHdlIG1ha2UgYXNzdW1wdGlvbnMgYWJvdXQgUmVhY3QtZ2VuZXJhdGVkIG1hcmt1cCAoaS5lLiB0aGVyZSBhcmUgbm9cbiAqIHNwYWNlcyBzdXJyb3VuZGluZyB0aGUgb3BlbmluZyB0YWcgYW5kIHRoZXJlIGlzIGF0IGxlYXN0IG9uZSBhdHRyaWJ1dGUpLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgU3RyaW5nIG9mIG1hcmt1cC5cbiAqIEByZXR1cm4ge3N0cmluZ30gTm9kZSBuYW1lIG9mIHRoZSBzdXBwbGllZCBtYXJrdXAuXG4gKiBAc2VlIGh0dHA6Ly9qc3BlcmYuY29tL2V4dHJhY3Qtbm9kZW5hbWVcbiAqL1xuZnVuY3Rpb24gZ2V0Tm9kZU5hbWUobWFya3VwKSB7XG4gIHJldHVybiBtYXJrdXAuc3Vic3RyaW5nKDEsIG1hcmt1cC5pbmRleE9mKCcgJykpO1xufVxuXG52YXIgRGFuZ2VyID0ge1xuXG4gIC8qKlxuICAgKiBSZW5kZXJzIG1hcmt1cCBpbnRvIGFuIGFycmF5IG9mIG5vZGVzLiBUaGUgbWFya3VwIGlzIGV4cGVjdGVkIHRvIHJlbmRlclxuICAgKiBpbnRvIGEgbGlzdCBvZiByb290IG5vZGVzLiBBbHNvLCB0aGUgbGVuZ3RoIG9mIGByZXN1bHRMaXN0YCBhbmRcbiAgICogYG1hcmt1cExpc3RgIHNob3VsZCBiZSB0aGUgc2FtZS5cbiAgICpcbiAgICogQHBhcmFtIHthcnJheTxzdHJpbmc+fSBtYXJrdXBMaXN0IExpc3Qgb2YgbWFya3VwIHN0cmluZ3MgdG8gcmVuZGVyLlxuICAgKiBAcmV0dXJuIHthcnJheTxET01FbGVtZW50Pn0gTGlzdCBvZiByZW5kZXJlZCBub2Rlcy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBkYW5nZXJvdXNseVJlbmRlck1hcmt1cDogZnVuY3Rpb24obWFya3VwTGlzdCkge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00sXG4gICAgICAnZGFuZ2Vyb3VzbHlSZW5kZXJNYXJrdXAoLi4uKTogQ2Fubm90IHJlbmRlciBtYXJrdXAgaW4gYSB3b3JrZXIgJyArXG4gICAgICAndGhyZWFkLiBNYWtlIHN1cmUgYHdpbmRvd2AgYW5kIGBkb2N1bWVudGAgYXJlIGF2YWlsYWJsZSBnbG9iYWxseSAnICtcbiAgICAgICdiZWZvcmUgcmVxdWlyaW5nIFJlYWN0IHdoZW4gdW5pdCB0ZXN0aW5nIG9yIHVzZSAnICtcbiAgICAgICdSZWFjdC5yZW5kZXJUb1N0cmluZyBmb3Igc2VydmVyIHJlbmRlcmluZy4nXG4gICAgKSA6IGludmFyaWFudChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pKTtcbiAgICB2YXIgbm9kZU5hbWU7XG4gICAgdmFyIG1hcmt1cEJ5Tm9kZU5hbWUgPSB7fTtcbiAgICAvLyBHcm91cCBtYXJrdXAgYnkgYG5vZGVOYW1lYCBpZiBhIHdyYXAgaXMgbmVjZXNzYXJ5LCBlbHNlIGJ5ICcqJy5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hcmt1cExpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgIG1hcmt1cExpc3RbaV0sXG4gICAgICAgICdkYW5nZXJvdXNseVJlbmRlck1hcmt1cCguLi4pOiBNaXNzaW5nIG1hcmt1cC4nXG4gICAgICApIDogaW52YXJpYW50KG1hcmt1cExpc3RbaV0pKTtcbiAgICAgIG5vZGVOYW1lID0gZ2V0Tm9kZU5hbWUobWFya3VwTGlzdFtpXSk7XG4gICAgICBub2RlTmFtZSA9IGdldE1hcmt1cFdyYXAobm9kZU5hbWUpID8gbm9kZU5hbWUgOiAnKic7XG4gICAgICBtYXJrdXBCeU5vZGVOYW1lW25vZGVOYW1lXSA9IG1hcmt1cEJ5Tm9kZU5hbWVbbm9kZU5hbWVdIHx8IFtdO1xuICAgICAgbWFya3VwQnlOb2RlTmFtZVtub2RlTmFtZV1baV0gPSBtYXJrdXBMaXN0W2ldO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0TGlzdCA9IFtdO1xuICAgIHZhciByZXN1bHRMaXN0QXNzaWdubWVudENvdW50ID0gMDtcbiAgICBmb3IgKG5vZGVOYW1lIGluIG1hcmt1cEJ5Tm9kZU5hbWUpIHtcbiAgICAgIGlmICghbWFya3VwQnlOb2RlTmFtZS5oYXNPd25Qcm9wZXJ0eShub2RlTmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgbWFya3VwTGlzdEJ5Tm9kZU5hbWUgPSBtYXJrdXBCeU5vZGVOYW1lW25vZGVOYW1lXTtcblxuICAgICAgLy8gVGhpcyBmb3ItaW4gbG9vcCBza2lwcyB0aGUgaG9sZXMgb2YgdGhlIHNwYXJzZSBhcnJheS4gVGhlIG9yZGVyIG9mXG4gICAgICAvLyBpdGVyYXRpb24gc2hvdWxkIGZvbGxvdyB0aGUgb3JkZXIgb2YgYXNzaWdubWVudCwgd2hpY2ggaGFwcGVucyB0byBtYXRjaFxuICAgICAgLy8gbnVtZXJpY2FsIGluZGV4IG9yZGVyLCBidXQgd2UgZG9uJ3QgcmVseSBvbiB0aGF0LlxuICAgICAgZm9yICh2YXIgcmVzdWx0SW5kZXggaW4gbWFya3VwTGlzdEJ5Tm9kZU5hbWUpIHtcbiAgICAgICAgaWYgKG1hcmt1cExpc3RCeU5vZGVOYW1lLmhhc093blByb3BlcnR5KHJlc3VsdEluZGV4KSkge1xuICAgICAgICAgIHZhciBtYXJrdXAgPSBtYXJrdXBMaXN0QnlOb2RlTmFtZVtyZXN1bHRJbmRleF07XG5cbiAgICAgICAgICAvLyBQdXNoIHRoZSByZXF1ZXN0ZWQgbWFya3VwIHdpdGggYW4gYWRkaXRpb25hbCBSRVNVTFRfSU5ERVhfQVRUUlxuICAgICAgICAgIC8vIGF0dHJpYnV0ZS4gIElmIHRoZSBtYXJrdXAgZG9lcyBub3Qgc3RhcnQgd2l0aCBhIDwgY2hhcmFjdGVyLCBpdFxuICAgICAgICAgIC8vIHdpbGwgYmUgZGlzY2FyZGVkIGJlbG93ICh3aXRoIGFuIGFwcHJvcHJpYXRlIGNvbnNvbGUuZXJyb3IpLlxuICAgICAgICAgIG1hcmt1cExpc3RCeU5vZGVOYW1lW3Jlc3VsdEluZGV4XSA9IG1hcmt1cC5yZXBsYWNlKFxuICAgICAgICAgICAgT1BFTl9UQUdfTkFNRV9FWFAsXG4gICAgICAgICAgICAvLyBUaGlzIGluZGV4IHdpbGwgYmUgcGFyc2VkIGJhY2sgb3V0IGJlbG93LlxuICAgICAgICAgICAgJyQxICcgKyBSRVNVTFRfSU5ERVhfQVRUUiArICc9XCInICsgcmVzdWx0SW5kZXggKyAnXCIgJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gUmVuZGVyIGVhY2ggZ3JvdXAgb2YgbWFya3VwIHdpdGggc2ltaWxhciB3cmFwcGluZyBgbm9kZU5hbWVgLlxuICAgICAgdmFyIHJlbmRlck5vZGVzID0gY3JlYXRlTm9kZXNGcm9tTWFya3VwKFxuICAgICAgICBtYXJrdXBMaXN0QnlOb2RlTmFtZS5qb2luKCcnKSxcbiAgICAgICAgZW1wdHlGdW5jdGlvbiAvLyBEbyBub3RoaW5nIHNwZWNpYWwgd2l0aCA8c2NyaXB0PiB0YWdzLlxuICAgICAgKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHJlbmRlck5vZGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciByZW5kZXJOb2RlID0gcmVuZGVyTm9kZXNbaV07XG4gICAgICAgIGlmIChyZW5kZXJOb2RlLmhhc0F0dHJpYnV0ZSAmJlxuICAgICAgICAgICAgcmVuZGVyTm9kZS5oYXNBdHRyaWJ1dGUoUkVTVUxUX0lOREVYX0FUVFIpKSB7XG5cbiAgICAgICAgICByZXN1bHRJbmRleCA9ICtyZW5kZXJOb2RlLmdldEF0dHJpYnV0ZShSRVNVTFRfSU5ERVhfQVRUUik7XG4gICAgICAgICAgcmVuZGVyTm9kZS5yZW1vdmVBdHRyaWJ1dGUoUkVTVUxUX0lOREVYX0FUVFIpO1xuXG4gICAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgICAgICFyZXN1bHRMaXN0Lmhhc093blByb3BlcnR5KHJlc3VsdEluZGV4KSxcbiAgICAgICAgICAgICdEYW5nZXI6IEFzc2lnbmluZyB0byBhbiBhbHJlYWR5LW9jY3VwaWVkIHJlc3VsdCBpbmRleC4nXG4gICAgICAgICAgKSA6IGludmFyaWFudCghcmVzdWx0TGlzdC5oYXNPd25Qcm9wZXJ0eShyZXN1bHRJbmRleCkpKTtcblxuICAgICAgICAgIHJlc3VsdExpc3RbcmVzdWx0SW5kZXhdID0gcmVuZGVyTm9kZTtcblxuICAgICAgICAgIC8vIFRoaXMgc2hvdWxkIG1hdGNoIHJlc3VsdExpc3QubGVuZ3RoIGFuZCBtYXJrdXBMaXN0Lmxlbmd0aCB3aGVuXG4gICAgICAgICAgLy8gd2UncmUgZG9uZS5cbiAgICAgICAgICByZXN1bHRMaXN0QXNzaWdubWVudENvdW50ICs9IDE7XG5cbiAgICAgICAgfSBlbHNlIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgXCJEYW5nZXI6IERpc2NhcmRpbmcgdW5leHBlY3RlZCBub2RlOlwiLFxuICAgICAgICAgICAgcmVuZGVyTm9kZVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBbHRob3VnaCByZXN1bHRMaXN0IHdhcyBwb3B1bGF0ZWQgb3V0IG9mIG9yZGVyLCBpdCBzaG91bGQgbm93IGJlIGEgZGVuc2VcbiAgICAvLyBhcnJheS5cbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgcmVzdWx0TGlzdEFzc2lnbm1lbnRDb3VudCA9PT0gcmVzdWx0TGlzdC5sZW5ndGgsXG4gICAgICAnRGFuZ2VyOiBEaWQgbm90IGFzc2lnbiB0byBldmVyeSBpbmRleCBvZiByZXN1bHRMaXN0LidcbiAgICApIDogaW52YXJpYW50KHJlc3VsdExpc3RBc3NpZ25tZW50Q291bnQgPT09IHJlc3VsdExpc3QubGVuZ3RoKSk7XG5cbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgcmVzdWx0TGlzdC5sZW5ndGggPT09IG1hcmt1cExpc3QubGVuZ3RoLFxuICAgICAgJ0RhbmdlcjogRXhwZWN0ZWQgbWFya3VwIHRvIHJlbmRlciAlcyBub2RlcywgYnV0IHJlbmRlcmVkICVzLicsXG4gICAgICBtYXJrdXBMaXN0Lmxlbmd0aCxcbiAgICAgIHJlc3VsdExpc3QubGVuZ3RoXG4gICAgKSA6IGludmFyaWFudChyZXN1bHRMaXN0Lmxlbmd0aCA9PT0gbWFya3VwTGlzdC5sZW5ndGgpKTtcblxuICAgIHJldHVybiByZXN1bHRMaXN0O1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhIG5vZGUgd2l0aCBhIHN0cmluZyBvZiBtYXJrdXAgYXQgaXRzIGN1cnJlbnQgcG9zaXRpb24gd2l0aGluIGl0c1xuICAgKiBwYXJlbnQuIFRoZSBtYXJrdXAgbXVzdCByZW5kZXIgaW50byBhIHNpbmdsZSByb290IG5vZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gb2xkQ2hpbGQgQ2hpbGQgbm9kZSB0byByZXBsYWNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIE1hcmt1cCB0byByZW5kZXIgaW4gcGxhY2Ugb2YgdGhlIGNoaWxkIG5vZGUuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXA6IGZ1bmN0aW9uKG9sZENoaWxkLCBtYXJrdXApIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NLFxuICAgICAgJ2Rhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwKC4uLik6IENhbm5vdCByZW5kZXIgbWFya3VwIGluIGEgJyArXG4gICAgICAnd29ya2VyIHRocmVhZC4gTWFrZSBzdXJlIGB3aW5kb3dgIGFuZCBgZG9jdW1lbnRgIGFyZSBhdmFpbGFibGUgJyArXG4gICAgICAnZ2xvYmFsbHkgYmVmb3JlIHJlcXVpcmluZyBSZWFjdCB3aGVuIHVuaXQgdGVzdGluZyBvciB1c2UgJyArXG4gICAgICAnUmVhY3QucmVuZGVyVG9TdHJpbmcgZm9yIHNlcnZlciByZW5kZXJpbmcuJ1xuICAgICkgOiBpbnZhcmlhbnQoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSk7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChtYXJrdXAsICdkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCguLi4pOiBNaXNzaW5nIG1hcmt1cC4nKSA6IGludmFyaWFudChtYXJrdXApKTtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgb2xkQ2hpbGQudGFnTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAnaHRtbCcsXG4gICAgICAnZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAoLi4uKTogQ2Fubm90IHJlcGxhY2UgbWFya3VwIG9mIHRoZSAnICtcbiAgICAgICc8aHRtbD4gbm9kZS4gVGhpcyBpcyBiZWNhdXNlIGJyb3dzZXIgcXVpcmtzIG1ha2UgdGhpcyB1bnJlbGlhYmxlICcgK1xuICAgICAgJ2FuZC9vciBzbG93LiBJZiB5b3Ugd2FudCB0byByZW5kZXIgdG8gdGhlIHJvb3QgeW91IG11c3QgdXNlICcgK1xuICAgICAgJ3NlcnZlciByZW5kZXJpbmcuIFNlZSByZW5kZXJDb21wb25lbnRUb1N0cmluZygpLidcbiAgICApIDogaW52YXJpYW50KG9sZENoaWxkLnRhZ05hbWUudG9Mb3dlckNhc2UoKSAhPT0gJ2h0bWwnKSk7XG5cbiAgICB2YXIgbmV3Q2hpbGQgPSBjcmVhdGVOb2Rlc0Zyb21NYXJrdXAobWFya3VwLCBlbXB0eUZ1bmN0aW9uKVswXTtcbiAgICBvbGRDaGlsZC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChuZXdDaGlsZCwgb2xkQ2hpbGQpO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRGFuZ2VyO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOjkwLFwiLi9jcmVhdGVOb2Rlc0Zyb21NYXJrdXBcIjoxNzMsXCIuL2VtcHR5RnVuY3Rpb25cIjoxNzcsXCIuL2dldE1hcmt1cFdyYXBcIjoxODgsXCIuL2ludmFyaWFudFwiOjE5NixcIl9wcm9jZXNzXCI6MTl9XSw4MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXJcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuIHZhciBrZXlPZiA9IHJlcXVpcmUoXCIuL2tleU9mXCIpO1xuXG4vKipcbiAqIE1vZHVsZSB0aGF0IGlzIGluamVjdGFibGUgaW50byBgRXZlbnRQbHVnaW5IdWJgLCB0aGF0IHNwZWNpZmllcyBhXG4gKiBkZXRlcm1pbmlzdGljIG9yZGVyaW5nIG9mIGBFdmVudFBsdWdpbmBzLiBBIGNvbnZlbmllbnQgd2F5IHRvIHJlYXNvbiBhYm91dFxuICogcGx1Z2lucywgd2l0aG91dCBoYXZpbmcgdG8gcGFja2FnZSBldmVyeSBvbmUgb2YgdGhlbS4gVGhpcyBpcyBiZXR0ZXIgdGhhblxuICogaGF2aW5nIHBsdWdpbnMgYmUgb3JkZXJlZCBpbiB0aGUgc2FtZSBvcmRlciB0aGF0IHRoZXkgYXJlIGluamVjdGVkIGJlY2F1c2VcbiAqIHRoYXQgb3JkZXJpbmcgd291bGQgYmUgaW5mbHVlbmNlZCBieSB0aGUgcGFja2FnaW5nIG9yZGVyLlxuICogYFJlc3BvbmRlckV2ZW50UGx1Z2luYCBtdXN0IG9jY3VyIGJlZm9yZSBgU2ltcGxlRXZlbnRQbHVnaW5gIHNvIHRoYXRcbiAqIHByZXZlbnRpbmcgZGVmYXVsdCBvbiBldmVudHMgaXMgY29udmVuaWVudCBpbiBgU2ltcGxlRXZlbnRQbHVnaW5gIGhhbmRsZXJzLlxuICovXG52YXIgRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXIgPSBbXG4gIGtleU9mKHtSZXNwb25kZXJFdmVudFBsdWdpbjogbnVsbH0pLFxuICBrZXlPZih7U2ltcGxlRXZlbnRQbHVnaW46IG51bGx9KSxcbiAga2V5T2Yoe1RhcEV2ZW50UGx1Z2luOiBudWxsfSksXG4gIGtleU9mKHtFbnRlckxlYXZlRXZlbnRQbHVnaW46IG51bGx9KSxcbiAga2V5T2Yoe0NoYW5nZUV2ZW50UGx1Z2luOiBudWxsfSksXG4gIGtleU9mKHtTZWxlY3RFdmVudFBsdWdpbjogbnVsbH0pLFxuICBrZXlPZih7Q29tcG9zaXRpb25FdmVudFBsdWdpbjogbnVsbH0pLFxuICBrZXlPZih7QmVmb3JlSW5wdXRFdmVudFBsdWdpbjogbnVsbH0pLFxuICBrZXlPZih7QW5hbHl0aWNzRXZlbnRQbHVnaW46IG51bGx9KSxcbiAga2V5T2Yoe01vYmlsZVNhZmFyaUNsaWNrRXZlbnRQbHVnaW46IG51bGx9KVxuXTtcblxubW9kdWxlLmV4cG9ydHMgPSBEZWZhdWx0RXZlbnRQbHVnaW5PcmRlcjtcblxufSx7XCIuL2tleU9mXCI6MjAzfV0sODM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEVudGVyTGVhdmVFdmVudFBsdWdpblxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZShcIi4vRXZlbnRDb25zdGFudHNcIik7XG52YXIgRXZlbnRQcm9wYWdhdG9ycyA9IHJlcXVpcmUoXCIuL0V2ZW50UHJvcGFnYXRvcnNcIik7XG52YXIgU3ludGhldGljTW91c2VFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY01vdXNlRXZlbnRcIik7XG5cbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZShcIi4vUmVhY3RNb3VudFwiKTtcbnZhciBrZXlPZiA9IHJlcXVpcmUoXCIuL2tleU9mXCIpO1xuXG52YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG52YXIgZ2V0Rmlyc3RSZWFjdERPTSA9IFJlYWN0TW91bnQuZ2V0Rmlyc3RSZWFjdERPTTtcblxudmFyIGV2ZW50VHlwZXMgPSB7XG4gIG1vdXNlRW50ZXI6IHtcbiAgICByZWdpc3RyYXRpb25OYW1lOiBrZXlPZih7b25Nb3VzZUVudGVyOiBudWxsfSksXG4gICAgZGVwZW5kZW5jaWVzOiBbXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3V0LFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU92ZXJcbiAgICBdXG4gIH0sXG4gIG1vdXNlTGVhdmU6IHtcbiAgICByZWdpc3RyYXRpb25OYW1lOiBrZXlPZih7b25Nb3VzZUxlYXZlOiBudWxsfSksXG4gICAgZGVwZW5kZW5jaWVzOiBbXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3V0LFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU92ZXJcbiAgICBdXG4gIH1cbn07XG5cbnZhciBleHRyYWN0ZWRFdmVudHMgPSBbbnVsbCwgbnVsbF07XG5cbnZhciBFbnRlckxlYXZlRXZlbnRQbHVnaW4gPSB7XG5cbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICAvKipcbiAgICogRm9yIGFsbW9zdCBldmVyeSBpbnRlcmFjdGlvbiB3ZSBjYXJlIGFib3V0LCB0aGVyZSB3aWxsIGJlIGJvdGggYSB0b3AtbGV2ZWxcbiAgICogYG1vdXNlb3ZlcmAgYW5kIGBtb3VzZW91dGAgZXZlbnQgdGhhdCBvY2N1cnMuIE9ubHkgdXNlIGBtb3VzZW91dGAgc28gdGhhdFxuICAgKiB3ZSBkbyBub3QgZXh0cmFjdCBkdXBsaWNhdGUgZXZlbnRzLiBIb3dldmVyLCBtb3ZpbmcgdGhlIG1vdXNlIGludG8gdGhlXG4gICAqIGJyb3dzZXIgZnJvbSBvdXRzaWRlIHdpbGwgbm90IGZpcmUgYSBgbW91c2VvdXRgIGV2ZW50LiBJbiB0aGlzIGNhc2UsIHdlIHVzZVxuICAgKiB0aGUgYG1vdXNlb3ZlcmAgdG9wLWxldmVsIGV2ZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVGFyZ2V0SUQgSUQgb2YgYHRvcExldmVsVGFyZ2V0YC5cbiAgICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICAgKiBAcmV0dXJuIHsqfSBBbiBhY2N1bXVsYXRpb24gb2Ygc3ludGhldGljIGV2ZW50cy5cbiAgICogQHNlZSB7RXZlbnRQbHVnaW5IdWIuZXh0cmFjdEV2ZW50c31cbiAgICovXG4gIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uKFxuICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgICB0b3BMZXZlbFRhcmdldElELFxuICAgICAgbmF0aXZlRXZlbnQpIHtcbiAgICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3ZlciAmJlxuICAgICAgICAobmF0aXZlRXZlbnQucmVsYXRlZFRhcmdldCB8fCBuYXRpdmVFdmVudC5mcm9tRWxlbWVudCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAodG9wTGV2ZWxUeXBlICE9PSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3V0ICYmXG4gICAgICAgIHRvcExldmVsVHlwZSAhPT0gdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU92ZXIpIHtcbiAgICAgIC8vIE11c3Qgbm90IGJlIGEgbW91c2UgaW4gb3IgbW91c2Ugb3V0IC0gaWdub3JpbmcuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgd2luO1xuICAgIGlmICh0b3BMZXZlbFRhcmdldC53aW5kb3cgPT09IHRvcExldmVsVGFyZ2V0KSB7XG4gICAgICAvLyBgdG9wTGV2ZWxUYXJnZXRgIGlzIHByb2JhYmx5IGEgd2luZG93IG9iamVjdC5cbiAgICAgIHdpbiA9IHRvcExldmVsVGFyZ2V0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUT0RPOiBGaWd1cmUgb3V0IHdoeSBgb3duZXJEb2N1bWVudGAgaXMgc29tZXRpbWVzIHVuZGVmaW5lZCBpbiBJRTguXG4gICAgICB2YXIgZG9jID0gdG9wTGV2ZWxUYXJnZXQub3duZXJEb2N1bWVudDtcbiAgICAgIGlmIChkb2MpIHtcbiAgICAgICAgd2luID0gZG9jLmRlZmF1bHRWaWV3IHx8IGRvYy5wYXJlbnRXaW5kb3c7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW4gPSB3aW5kb3c7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGZyb20sIHRvO1xuICAgIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wTW91c2VPdXQpIHtcbiAgICAgIGZyb20gPSB0b3BMZXZlbFRhcmdldDtcbiAgICAgIHRvID1cbiAgICAgICAgZ2V0Rmlyc3RSZWFjdERPTShuYXRpdmVFdmVudC5yZWxhdGVkVGFyZ2V0IHx8IG5hdGl2ZUV2ZW50LnRvRWxlbWVudCkgfHxcbiAgICAgICAgd2luO1xuICAgIH0gZWxzZSB7XG4gICAgICBmcm9tID0gd2luO1xuICAgICAgdG8gPSB0b3BMZXZlbFRhcmdldDtcbiAgICB9XG5cbiAgICBpZiAoZnJvbSA9PT0gdG8pIHtcbiAgICAgIC8vIE5vdGhpbmcgcGVydGFpbnMgdG8gb3VyIG1hbmFnZWQgY29tcG9uZW50cy5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBmcm9tSUQgPSBmcm9tID8gUmVhY3RNb3VudC5nZXRJRChmcm9tKSA6ICcnO1xuICAgIHZhciB0b0lEID0gdG8gPyBSZWFjdE1vdW50LmdldElEKHRvKSA6ICcnO1xuXG4gICAgdmFyIGxlYXZlID0gU3ludGhldGljTW91c2VFdmVudC5nZXRQb29sZWQoXG4gICAgICBldmVudFR5cGVzLm1vdXNlTGVhdmUsXG4gICAgICBmcm9tSUQsXG4gICAgICBuYXRpdmVFdmVudFxuICAgICk7XG4gICAgbGVhdmUudHlwZSA9ICdtb3VzZWxlYXZlJztcbiAgICBsZWF2ZS50YXJnZXQgPSBmcm9tO1xuICAgIGxlYXZlLnJlbGF0ZWRUYXJnZXQgPSB0bztcblxuICAgIHZhciBlbnRlciA9IFN5bnRoZXRpY01vdXNlRXZlbnQuZ2V0UG9vbGVkKFxuICAgICAgZXZlbnRUeXBlcy5tb3VzZUVudGVyLFxuICAgICAgdG9JRCxcbiAgICAgIG5hdGl2ZUV2ZW50XG4gICAgKTtcbiAgICBlbnRlci50eXBlID0gJ21vdXNlZW50ZXInO1xuICAgIGVudGVyLnRhcmdldCA9IHRvO1xuICAgIGVudGVyLnJlbGF0ZWRUYXJnZXQgPSBmcm9tO1xuXG4gICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMobGVhdmUsIGVudGVyLCBmcm9tSUQsIHRvSUQpO1xuXG4gICAgZXh0cmFjdGVkRXZlbnRzWzBdID0gbGVhdmU7XG4gICAgZXh0cmFjdGVkRXZlbnRzWzFdID0gZW50ZXI7XG5cbiAgICByZXR1cm4gZXh0cmFjdGVkRXZlbnRzO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luO1xuXG59LHtcIi4vRXZlbnRDb25zdGFudHNcIjo4NCxcIi4vRXZlbnRQcm9wYWdhdG9yc1wiOjg5LFwiLi9SZWFjdE1vdW50XCI6MTMyLFwiLi9TeW50aGV0aWNNb3VzZUV2ZW50XCI6MTYwLFwiLi9rZXlPZlwiOjIwM31dLDg0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBFdmVudENvbnN0YW50c1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIga2V5TWlycm9yID0gcmVxdWlyZShcIi4va2V5TWlycm9yXCIpO1xuXG52YXIgUHJvcGFnYXRpb25QaGFzZXMgPSBrZXlNaXJyb3Ioe2J1YmJsZWQ6IG51bGwsIGNhcHR1cmVkOiBudWxsfSk7XG5cbi8qKlxuICogVHlwZXMgb2YgcmF3IHNpZ25hbHMgZnJvbSB0aGUgYnJvd3NlciBjYXVnaHQgYXQgdGhlIHRvcCBsZXZlbC5cbiAqL1xudmFyIHRvcExldmVsVHlwZXMgPSBrZXlNaXJyb3Ioe1xuICB0b3BCbHVyOiBudWxsLFxuICB0b3BDaGFuZ2U6IG51bGwsXG4gIHRvcENsaWNrOiBudWxsLFxuICB0b3BDb21wb3NpdGlvbkVuZDogbnVsbCxcbiAgdG9wQ29tcG9zaXRpb25TdGFydDogbnVsbCxcbiAgdG9wQ29tcG9zaXRpb25VcGRhdGU6IG51bGwsXG4gIHRvcENvbnRleHRNZW51OiBudWxsLFxuICB0b3BDb3B5OiBudWxsLFxuICB0b3BDdXQ6IG51bGwsXG4gIHRvcERvdWJsZUNsaWNrOiBudWxsLFxuICB0b3BEcmFnOiBudWxsLFxuICB0b3BEcmFnRW5kOiBudWxsLFxuICB0b3BEcmFnRW50ZXI6IG51bGwsXG4gIHRvcERyYWdFeGl0OiBudWxsLFxuICB0b3BEcmFnTGVhdmU6IG51bGwsXG4gIHRvcERyYWdPdmVyOiBudWxsLFxuICB0b3BEcmFnU3RhcnQ6IG51bGwsXG4gIHRvcERyb3A6IG51bGwsXG4gIHRvcEVycm9yOiBudWxsLFxuICB0b3BGb2N1czogbnVsbCxcbiAgdG9wSW5wdXQ6IG51bGwsXG4gIHRvcEtleURvd246IG51bGwsXG4gIHRvcEtleVByZXNzOiBudWxsLFxuICB0b3BLZXlVcDogbnVsbCxcbiAgdG9wTG9hZDogbnVsbCxcbiAgdG9wTW91c2VEb3duOiBudWxsLFxuICB0b3BNb3VzZU1vdmU6IG51bGwsXG4gIHRvcE1vdXNlT3V0OiBudWxsLFxuICB0b3BNb3VzZU92ZXI6IG51bGwsXG4gIHRvcE1vdXNlVXA6IG51bGwsXG4gIHRvcFBhc3RlOiBudWxsLFxuICB0b3BSZXNldDogbnVsbCxcbiAgdG9wU2Nyb2xsOiBudWxsLFxuICB0b3BTZWxlY3Rpb25DaGFuZ2U6IG51bGwsXG4gIHRvcFN1Ym1pdDogbnVsbCxcbiAgdG9wVGV4dElucHV0OiBudWxsLFxuICB0b3BUb3VjaENhbmNlbDogbnVsbCxcbiAgdG9wVG91Y2hFbmQ6IG51bGwsXG4gIHRvcFRvdWNoTW92ZTogbnVsbCxcbiAgdG9wVG91Y2hTdGFydDogbnVsbCxcbiAgdG9wV2hlZWw6IG51bGxcbn0pO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSB7XG4gIHRvcExldmVsVHlwZXM6IHRvcExldmVsVHlwZXMsXG4gIFByb3BhZ2F0aW9uUGhhc2VzOiBQcm9wYWdhdGlvblBoYXNlc1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudENvbnN0YW50cztcblxufSx7XCIuL2tleU1pcnJvclwiOjIwMn1dLDg1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXZlbnRMaXN0ZW5lclxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoXCIuL2VtcHR5RnVuY3Rpb25cIik7XG5cbi8qKlxuICogVXBzdHJlYW0gdmVyc2lvbiBvZiBldmVudCBsaXN0ZW5lci4gRG9lcyBub3QgdGFrZSBpbnRvIGFjY291bnQgc3BlY2lmaWNcbiAqIG5hdHVyZSBvZiBwbGF0Zm9ybS5cbiAqL1xudmFyIEV2ZW50TGlzdGVuZXIgPSB7XG4gIC8qKlxuICAgKiBMaXN0ZW4gdG8gRE9NIGV2ZW50cyBkdXJpbmcgdGhlIGJ1YmJsZSBwaGFzZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdGFyZ2V0IERPTSBlbGVtZW50IHRvIHJlZ2lzdGVyIGxpc3RlbmVyIG9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIEV2ZW50IHR5cGUsIGUuZy4gJ2NsaWNrJyBvciAnbW91c2VvdmVyJy5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24uXG4gICAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IHdpdGggYSBgcmVtb3ZlYCBtZXRob2QuXG4gICAqL1xuICBsaXN0ZW46IGZ1bmN0aW9uKHRhcmdldCwgZXZlbnRUeXBlLCBjYWxsYmFjaykge1xuICAgIGlmICh0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYWxsYmFjaywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICh0YXJnZXQuYXR0YWNoRXZlbnQpIHtcbiAgICAgIHRhcmdldC5hdHRhY2hFdmVudCgnb24nICsgZXZlbnRUeXBlLCBjYWxsYmFjayk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRhcmdldC5kZXRhY2hFdmVudCgnb24nICsgZXZlbnRUeXBlLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBMaXN0ZW4gdG8gRE9NIGV2ZW50cyBkdXJpbmcgdGhlIGNhcHR1cmUgcGhhc2UuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRhcmdldCBET00gZWxlbWVudCB0byByZWdpc3RlciBsaXN0ZW5lciBvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZSBFdmVudCB0eXBlLCBlLmcuICdjbGljaycgb3IgJ21vdXNlb3ZlcicuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uLlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IE9iamVjdCB3aXRoIGEgYHJlbW92ZWAgbWV0aG9kLlxuICAgKi9cbiAgY2FwdHVyZTogZnVuY3Rpb24odGFyZ2V0LCBldmVudFR5cGUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCF0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICdBdHRlbXB0ZWQgdG8gbGlzdGVuIHRvIGV2ZW50cyBkdXJpbmcgdGhlIGNhcHR1cmUgcGhhc2Ugb24gYSAnICtcbiAgICAgICAgICAnYnJvd3NlciB0aGF0IGRvZXMgbm90IHN1cHBvcnQgdGhlIGNhcHR1cmUgcGhhc2UuIFlvdXIgYXBwbGljYXRpb24gJyArXG4gICAgICAgICAgJ3dpbGwgbm90IHJlY2VpdmUgc29tZSBldmVudHMuJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZlOiBlbXB0eUZ1bmN0aW9uXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCB0cnVlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYWxsYmFjaywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9LFxuXG4gIHJlZ2lzdGVyRGVmYXVsdDogZnVuY3Rpb24oKSB7fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudExpc3RlbmVyO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9lbXB0eUZ1bmN0aW9uXCI6MTc3LFwiX3Byb2Nlc3NcIjoxOX1dLDg2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXZlbnRQbHVnaW5IdWJcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEV2ZW50UGx1Z2luUmVnaXN0cnkgPSByZXF1aXJlKFwiLi9FdmVudFBsdWdpblJlZ2lzdHJ5XCIpO1xudmFyIEV2ZW50UGx1Z2luVXRpbHMgPSByZXF1aXJlKFwiLi9FdmVudFBsdWdpblV0aWxzXCIpO1xuXG52YXIgYWNjdW11bGF0ZUludG8gPSByZXF1aXJlKFwiLi9hY2N1bXVsYXRlSW50b1wiKTtcbnZhciBmb3JFYWNoQWNjdW11bGF0ZWQgPSByZXF1aXJlKFwiLi9mb3JFYWNoQWNjdW11bGF0ZWRcIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIEludGVybmFsIHN0b3JlIGZvciBldmVudCBsaXN0ZW5lcnNcbiAqL1xudmFyIGxpc3RlbmVyQmFuayA9IHt9O1xuXG4vKipcbiAqIEludGVybmFsIHF1ZXVlIG9mIGV2ZW50cyB0aGF0IGhhdmUgYWNjdW11bGF0ZWQgdGhlaXIgZGlzcGF0Y2hlcyBhbmQgYXJlXG4gKiB3YWl0aW5nIHRvIGhhdmUgdGhlaXIgZGlzcGF0Y2hlcyBleGVjdXRlZC5cbiAqL1xudmFyIGV2ZW50UXVldWUgPSBudWxsO1xuXG4vKipcbiAqIERpc3BhdGNoZXMgYW4gZXZlbnQgYW5kIHJlbGVhc2VzIGl0IGJhY2sgaW50byB0aGUgcG9vbCwgdW5sZXNzIHBlcnNpc3RlbnQuXG4gKlxuICogQHBhcmFtIHs/b2JqZWN0fSBldmVudCBTeW50aGV0aWMgZXZlbnQgdG8gYmUgZGlzcGF0Y2hlZC5cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2UgPSBmdW5jdGlvbihldmVudCkge1xuICBpZiAoZXZlbnQpIHtcbiAgICB2YXIgZXhlY3V0ZURpc3BhdGNoID0gRXZlbnRQbHVnaW5VdGlscy5leGVjdXRlRGlzcGF0Y2g7XG4gICAgLy8gUGx1Z2lucyBjYW4gcHJvdmlkZSBjdXN0b20gYmVoYXZpb3Igd2hlbiBkaXNwYXRjaGluZyBldmVudHMuXG4gICAgdmFyIFBsdWdpbk1vZHVsZSA9IEV2ZW50UGx1Z2luUmVnaXN0cnkuZ2V0UGx1Z2luTW9kdWxlRm9yRXZlbnQoZXZlbnQpO1xuICAgIGlmIChQbHVnaW5Nb2R1bGUgJiYgUGx1Z2luTW9kdWxlLmV4ZWN1dGVEaXNwYXRjaCkge1xuICAgICAgZXhlY3V0ZURpc3BhdGNoID0gUGx1Z2luTW9kdWxlLmV4ZWN1dGVEaXNwYXRjaDtcbiAgICB9XG4gICAgRXZlbnRQbHVnaW5VdGlscy5leGVjdXRlRGlzcGF0Y2hlc0luT3JkZXIoZXZlbnQsIGV4ZWN1dGVEaXNwYXRjaCk7XG5cbiAgICBpZiAoIWV2ZW50LmlzUGVyc2lzdGVudCgpKSB7XG4gICAgICBldmVudC5jb25zdHJ1Y3Rvci5yZWxlYXNlKGV2ZW50KTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogLSBgSW5zdGFuY2VIYW5kbGVgOiBbcmVxdWlyZWRdIE1vZHVsZSB0aGF0IHBlcmZvcm1zIGxvZ2ljYWwgdHJhdmVyc2FscyBvZiBET01cbiAqICAgaGllcmFyY2h5IGdpdmVuIGlkcyBvZiB0aGUgbG9naWNhbCBET00gZWxlbWVudHMgaW52b2x2ZWQuXG4gKi9cbnZhciBJbnN0YW5jZUhhbmRsZSA9IG51bGw7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlSW5zdGFuY2VIYW5kbGUoKSB7XG4gIHZhciBpbnZhbGlkID0gIUluc3RhbmNlSGFuZGxlfHxcbiAgICAhSW5zdGFuY2VIYW5kbGUudHJhdmVyc2VUd29QaGFzZSB8fFxuICAgICFJbnN0YW5jZUhhbmRsZS50cmF2ZXJzZUVudGVyTGVhdmU7XG4gIGlmIChpbnZhbGlkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnN0YW5jZUhhbmRsZSBub3QgaW5qZWN0ZWQgYmVmb3JlIHVzZSEnKTtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgaXMgYSB1bmlmaWVkIGludGVyZmFjZSBmb3IgZXZlbnQgcGx1Z2lucyB0byBiZSBpbnN0YWxsZWQgYW5kIGNvbmZpZ3VyZWQuXG4gKlxuICogRXZlbnQgcGx1Z2lucyBjYW4gaW1wbGVtZW50IHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIGBleHRyYWN0RXZlbnRzYCB7ZnVuY3Rpb24oc3RyaW5nLCBET01FdmVudFRhcmdldCwgc3RyaW5nLCBvYmplY3QpOiAqfVxuICogICAgIFJlcXVpcmVkLiBXaGVuIGEgdG9wLWxldmVsIGV2ZW50IGlzIGZpcmVkLCB0aGlzIG1ldGhvZCBpcyBleHBlY3RlZCB0b1xuICogICAgIGV4dHJhY3Qgc3ludGhldGljIGV2ZW50cyB0aGF0IHdpbGwgaW4gdHVybiBiZSBxdWV1ZWQgYW5kIGRpc3BhdGNoZWQuXG4gKlxuICogICBgZXZlbnRUeXBlc2Age29iamVjdH1cbiAqICAgICBPcHRpb25hbCwgcGx1Z2lucyB0aGF0IGZpcmUgZXZlbnRzIG11c3QgcHVibGlzaCBhIG1hcHBpbmcgb2YgcmVnaXN0cmF0aW9uXG4gKiAgICAgbmFtZXMgdGhhdCBhcmUgdXNlZCB0byByZWdpc3RlciBsaXN0ZW5lcnMuIFZhbHVlcyBvZiB0aGlzIG1hcHBpbmcgbXVzdFxuICogICAgIGJlIG9iamVjdHMgdGhhdCBjb250YWluIGByZWdpc3RyYXRpb25OYW1lYCBvciBgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNgLlxuICpcbiAqICAgYGV4ZWN1dGVEaXNwYXRjaGAge2Z1bmN0aW9uKG9iamVjdCwgZnVuY3Rpb24sIHN0cmluZyl9XG4gKiAgICAgT3B0aW9uYWwsIGFsbG93cyBwbHVnaW5zIHRvIG92ZXJyaWRlIGhvdyBhbiBldmVudCBnZXRzIGRpc3BhdGNoZWQuIEJ5XG4gKiAgICAgZGVmYXVsdCwgdGhlIGxpc3RlbmVyIGlzIHNpbXBseSBpbnZva2VkLlxuICpcbiAqIEVhY2ggcGx1Z2luIHRoYXQgaXMgaW5qZWN0ZWQgaW50byBgRXZlbnRzUGx1Z2luSHViYCBpcyBpbW1lZGlhdGVseSBvcGVyYWJsZS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbnZhciBFdmVudFBsdWdpbkh1YiA9IHtcblxuICAvKipcbiAgICogTWV0aG9kcyBmb3IgaW5qZWN0aW5nIGRlcGVuZGVuY2llcy5cbiAgICovXG4gIGluamVjdGlvbjoge1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IEluamVjdGVkTW91bnRcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgaW5qZWN0TW91bnQ6IEV2ZW50UGx1Z2luVXRpbHMuaW5qZWN0aW9uLmluamVjdE1vdW50LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IEluamVjdGVkSW5zdGFuY2VIYW5kbGVcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgaW5qZWN0SW5zdGFuY2VIYW5kbGU6IGZ1bmN0aW9uKEluamVjdGVkSW5zdGFuY2VIYW5kbGUpIHtcbiAgICAgIEluc3RhbmNlSGFuZGxlID0gSW5qZWN0ZWRJbnN0YW5jZUhhbmRsZTtcbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgdmFsaWRhdGVJbnN0YW5jZUhhbmRsZSgpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRJbnN0YW5jZUhhbmRsZTogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgIHZhbGlkYXRlSW5zdGFuY2VIYW5kbGUoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBJbnN0YW5jZUhhbmRsZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHthcnJheX0gSW5qZWN0ZWRFdmVudFBsdWdpbk9yZGVyXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGluamVjdEV2ZW50UGx1Z2luT3JkZXI6IEV2ZW50UGx1Z2luUmVnaXN0cnkuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcixcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBpbmplY3RlZE5hbWVzVG9QbHVnaW5zIE1hcCBmcm9tIG5hbWVzIHRvIHBsdWdpbiBtb2R1bGVzLlxuICAgICAqL1xuICAgIGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTogRXZlbnRQbHVnaW5SZWdpc3RyeS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWVcblxuICB9LFxuXG4gIGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnczogRXZlbnRQbHVnaW5SZWdpc3RyeS5ldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MsXG5cbiAgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6IEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMsXG5cbiAgLyoqXG4gICAqIFN0b3JlcyBgbGlzdGVuZXJgIGF0IGBsaXN0ZW5lckJhbmtbcmVnaXN0cmF0aW9uTmFtZV1baWRdYC4gSXMgaWRlbXBvdGVudC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBET00gZWxlbWVudC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lzdHJhdGlvbk5hbWUgTmFtZSBvZiBsaXN0ZW5lciAoZS5nLiBgb25DbGlja2ApLlxuICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gbGlzdGVuZXIgVGhlIGNhbGxiYWNrIHRvIHN0b3JlLlxuICAgKi9cbiAgcHV0TGlzdGVuZXI6IGZ1bmN0aW9uKGlkLCByZWdpc3RyYXRpb25OYW1lLCBsaXN0ZW5lcikge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAhbGlzdGVuZXIgfHwgdHlwZW9mIGxpc3RlbmVyID09PSAnZnVuY3Rpb24nLFxuICAgICAgJ0V4cGVjdGVkICVzIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24sIGluc3RlYWQgZ290IHR5cGUgJXMnLFxuICAgICAgcmVnaXN0cmF0aW9uTmFtZSwgdHlwZW9mIGxpc3RlbmVyXG4gICAgKSA6IGludmFyaWFudCghbGlzdGVuZXIgfHwgdHlwZW9mIGxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSk7XG5cbiAgICB2YXIgYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWUgPVxuICAgICAgbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdIHx8IChsaXN0ZW5lckJhbmtbcmVnaXN0cmF0aW9uTmFtZV0gPSB7fSk7XG4gICAgYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWVbaWRdID0gbGlzdGVuZXI7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiB0aGUgRE9NIGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIE5hbWUgb2YgbGlzdGVuZXIgKGUuZy4gYG9uQ2xpY2tgKS5cbiAgICogQHJldHVybiB7P2Z1bmN0aW9ufSBUaGUgc3RvcmVkIGNhbGxiYWNrLlxuICAgKi9cbiAgZ2V0TGlzdGVuZXI6IGZ1bmN0aW9uKGlkLCByZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgdmFyIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lID0gbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICAgIHJldHVybiBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSAmJiBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZVtpZF07XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYSBsaXN0ZW5lciBmcm9tIHRoZSByZWdpc3RyYXRpb24gYmFuay5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBET00gZWxlbWVudC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lzdHJhdGlvbk5hbWUgTmFtZSBvZiBsaXN0ZW5lciAoZS5nLiBgb25DbGlja2ApLlxuICAgKi9cbiAgZGVsZXRlTGlzdGVuZXI6IGZ1bmN0aW9uKGlkLCByZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgdmFyIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lID0gbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICAgIGlmIChiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSkge1xuICAgICAgZGVsZXRlIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lW2lkXTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYWxsIGxpc3RlbmVycyBmb3IgdGhlIERPTSBlbGVtZW50IHdpdGggdGhlIHN1cHBsaWVkIElELlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgSUQgb2YgdGhlIERPTSBlbGVtZW50LlxuICAgKi9cbiAgZGVsZXRlQWxsTGlzdGVuZXJzOiBmdW5jdGlvbihpZCkge1xuICAgIGZvciAodmFyIHJlZ2lzdHJhdGlvbk5hbWUgaW4gbGlzdGVuZXJCYW5rKSB7XG4gICAgICBkZWxldGUgbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdW2lkXTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFsbG93cyByZWdpc3RlcmVkIHBsdWdpbnMgYW4gb3Bwb3J0dW5pdHkgdG8gZXh0cmFjdCBldmVudHMgZnJvbSB0b3AtbGV2ZWxcbiAgICogbmF0aXZlIGJyb3dzZXIgZXZlbnRzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVGFyZ2V0SUQgSUQgb2YgYHRvcExldmVsVGFyZ2V0YC5cbiAgICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICAgKiBAcmV0dXJuIHsqfSBBbiBhY2N1bXVsYXRpb24gb2Ygc3ludGhldGljIGV2ZW50cy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbihcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgIG5hdGl2ZUV2ZW50KSB7XG4gICAgdmFyIGV2ZW50cztcbiAgICB2YXIgcGx1Z2lucyA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucGx1Z2lucztcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHBsdWdpbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAvLyBOb3QgZXZlcnkgcGx1Z2luIGluIHRoZSBvcmRlcmluZyBtYXkgYmUgbG9hZGVkIGF0IHJ1bnRpbWUuXG4gICAgICB2YXIgcG9zc2libGVQbHVnaW4gPSBwbHVnaW5zW2ldO1xuICAgICAgaWYgKHBvc3NpYmxlUGx1Z2luKSB7XG4gICAgICAgIHZhciBleHRyYWN0ZWRFdmVudHMgPSBwb3NzaWJsZVBsdWdpbi5leHRyYWN0RXZlbnRzKFxuICAgICAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgICAgICB0b3BMZXZlbFRhcmdldElELFxuICAgICAgICAgIG5hdGl2ZUV2ZW50XG4gICAgICAgICk7XG4gICAgICAgIGlmIChleHRyYWN0ZWRFdmVudHMpIHtcbiAgICAgICAgICBldmVudHMgPSBhY2N1bXVsYXRlSW50byhldmVudHMsIGV4dHJhY3RlZEV2ZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGV2ZW50cztcbiAgfSxcblxuICAvKipcbiAgICogRW5xdWV1ZXMgYSBzeW50aGV0aWMgZXZlbnQgdGhhdCBzaG91bGQgYmUgZGlzcGF0Y2hlZCB3aGVuXG4gICAqIGBwcm9jZXNzRXZlbnRRdWV1ZWAgaXMgaW52b2tlZC5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBldmVudHMgQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZUV2ZW50czogZnVuY3Rpb24oZXZlbnRzKSB7XG4gICAgaWYgKGV2ZW50cykge1xuICAgICAgZXZlbnRRdWV1ZSA9IGFjY3VtdWxhdGVJbnRvKGV2ZW50UXVldWUsIGV2ZW50cyk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFsbCBzeW50aGV0aWMgZXZlbnRzIG9uIHRoZSBldmVudCBxdWV1ZS5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBwcm9jZXNzRXZlbnRRdWV1ZTogZnVuY3Rpb24oKSB7XG4gICAgLy8gU2V0IGBldmVudFF1ZXVlYCB0byBudWxsIGJlZm9yZSBwcm9jZXNzaW5nIGl0IHNvIHRoYXQgd2UgY2FuIHRlbGwgaWYgbW9yZVxuICAgIC8vIGV2ZW50cyBnZXQgZW5xdWV1ZWQgd2hpbGUgcHJvY2Vzc2luZy5cbiAgICB2YXIgcHJvY2Vzc2luZ0V2ZW50UXVldWUgPSBldmVudFF1ZXVlO1xuICAgIGV2ZW50UXVldWUgPSBudWxsO1xuICAgIGZvckVhY2hBY2N1bXVsYXRlZChwcm9jZXNzaW5nRXZlbnRRdWV1ZSwgZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlKTtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgIWV2ZW50UXVldWUsXG4gICAgICAncHJvY2Vzc0V2ZW50UXVldWUoKTogQWRkaXRpb25hbCBldmVudHMgd2VyZSBlbnF1ZXVlZCB3aGlsZSBwcm9jZXNzaW5nICcgK1xuICAgICAgJ2FuIGV2ZW50IHF1ZXVlLiBTdXBwb3J0IGZvciB0aGlzIGhhcyBub3QgeWV0IGJlZW4gaW1wbGVtZW50ZWQuJ1xuICAgICkgOiBpbnZhcmlhbnQoIWV2ZW50UXVldWUpKTtcbiAgfSxcblxuICAvKipcbiAgICogVGhlc2UgYXJlIG5lZWRlZCBmb3IgdGVzdHMgb25seS4gRG8gbm90IHVzZSFcbiAgICovXG4gIF9fcHVyZ2U6IGZ1bmN0aW9uKCkge1xuICAgIGxpc3RlbmVyQmFuayA9IHt9O1xuICB9LFxuXG4gIF9fZ2V0TGlzdGVuZXJCYW5rOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbGlzdGVuZXJCYW5rO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRQbHVnaW5IdWI7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL0V2ZW50UGx1Z2luUmVnaXN0cnlcIjo4NyxcIi4vRXZlbnRQbHVnaW5VdGlsc1wiOjg4LFwiLi9hY2N1bXVsYXRlSW50b1wiOjE2NixcIi4vZm9yRWFjaEFjY3VtdWxhdGVkXCI6MTgyLFwiLi9pbnZhcmlhbnRcIjoxOTYsXCJfcHJvY2Vzc1wiOjE5fV0sODc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBFdmVudFBsdWdpblJlZ2lzdHJ5XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIEluamVjdGFibGUgb3JkZXJpbmcgb2YgZXZlbnQgcGx1Z2lucy5cbiAqL1xudmFyIEV2ZW50UGx1Z2luT3JkZXIgPSBudWxsO1xuXG4vKipcbiAqIEluamVjdGFibGUgbWFwcGluZyBmcm9tIG5hbWVzIHRvIGV2ZW50IHBsdWdpbiBtb2R1bGVzLlxuICovXG52YXIgbmFtZXNUb1BsdWdpbnMgPSB7fTtcblxuLyoqXG4gKiBSZWNvbXB1dGVzIHRoZSBwbHVnaW4gbGlzdCB1c2luZyB0aGUgaW5qZWN0ZWQgcGx1Z2lucyBhbmQgcGx1Z2luIG9yZGVyaW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlY29tcHV0ZVBsdWdpbk9yZGVyaW5nKCkge1xuICBpZiAoIUV2ZW50UGx1Z2luT3JkZXIpIHtcbiAgICAvLyBXYWl0IHVudGlsIGFuIGBFdmVudFBsdWdpbk9yZGVyYCBpcyBpbmplY3RlZC5cbiAgICByZXR1cm47XG4gIH1cbiAgZm9yICh2YXIgcGx1Z2luTmFtZSBpbiBuYW1lc1RvUGx1Z2lucykge1xuICAgIHZhciBQbHVnaW5Nb2R1bGUgPSBuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXTtcbiAgICB2YXIgcGx1Z2luSW5kZXggPSBFdmVudFBsdWdpbk9yZGVyLmluZGV4T2YocGx1Z2luTmFtZSk7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIHBsdWdpbkluZGV4ID4gLTEsXG4gICAgICAnRXZlbnRQbHVnaW5SZWdpc3RyeTogQ2Fubm90IGluamVjdCBldmVudCBwbHVnaW5zIHRoYXQgZG8gbm90IGV4aXN0IGluICcgK1xuICAgICAgJ3RoZSBwbHVnaW4gb3JkZXJpbmcsIGAlc2AuJyxcbiAgICAgIHBsdWdpbk5hbWVcbiAgICApIDogaW52YXJpYW50KHBsdWdpbkluZGV4ID4gLTEpKTtcbiAgICBpZiAoRXZlbnRQbHVnaW5SZWdpc3RyeS5wbHVnaW5zW3BsdWdpbkluZGV4XSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBQbHVnaW5Nb2R1bGUuZXh0cmFjdEV2ZW50cyxcbiAgICAgICdFdmVudFBsdWdpblJlZ2lzdHJ5OiBFdmVudCBwbHVnaW5zIG11c3QgaW1wbGVtZW50IGFuIGBleHRyYWN0RXZlbnRzYCAnICtcbiAgICAgICdtZXRob2QsIGJ1dCBgJXNgIGRvZXMgbm90LicsXG4gICAgICBwbHVnaW5OYW1lXG4gICAgKSA6IGludmFyaWFudChQbHVnaW5Nb2R1bGUuZXh0cmFjdEV2ZW50cykpO1xuICAgIEV2ZW50UGx1Z2luUmVnaXN0cnkucGx1Z2luc1twbHVnaW5JbmRleF0gPSBQbHVnaW5Nb2R1bGU7XG4gICAgdmFyIHB1Ymxpc2hlZEV2ZW50cyA9IFBsdWdpbk1vZHVsZS5ldmVudFR5cGVzO1xuICAgIGZvciAodmFyIGV2ZW50TmFtZSBpbiBwdWJsaXNoZWRFdmVudHMpIHtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgIHB1Ymxpc2hFdmVudEZvclBsdWdpbihcbiAgICAgICAgICBwdWJsaXNoZWRFdmVudHNbZXZlbnROYW1lXSxcbiAgICAgICAgICBQbHVnaW5Nb2R1bGUsXG4gICAgICAgICAgZXZlbnROYW1lXG4gICAgICAgICksXG4gICAgICAgICdFdmVudFBsdWdpblJlZ2lzdHJ5OiBGYWlsZWQgdG8gcHVibGlzaCBldmVudCBgJXNgIGZvciBwbHVnaW4gYCVzYC4nLFxuICAgICAgICBldmVudE5hbWUsXG4gICAgICAgIHBsdWdpbk5hbWVcbiAgICAgICkgOiBpbnZhcmlhbnQocHVibGlzaEV2ZW50Rm9yUGx1Z2luKFxuICAgICAgICBwdWJsaXNoZWRFdmVudHNbZXZlbnROYW1lXSxcbiAgICAgICAgUGx1Z2luTW9kdWxlLFxuICAgICAgICBldmVudE5hbWVcbiAgICAgICkpKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBQdWJsaXNoZXMgYW4gZXZlbnQgc28gdGhhdCBpdCBjYW4gYmUgZGlzcGF0Y2hlZCBieSB0aGUgc3VwcGxpZWQgcGx1Z2luLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBEaXNwYXRjaCBjb25maWd1cmF0aW9uIGZvciB0aGUgZXZlbnQuXG4gKiBAcGFyYW0ge29iamVjdH0gUGx1Z2luTW9kdWxlIFBsdWdpbiBwdWJsaXNoaW5nIHRoZSBldmVudC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGV2ZW50IHdhcyBzdWNjZXNzZnVsbHkgcHVibGlzaGVkLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcHVibGlzaEV2ZW50Rm9yUGx1Z2luKGRpc3BhdGNoQ29uZmlnLCBQbHVnaW5Nb2R1bGUsIGV2ZW50TmFtZSkge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICFFdmVudFBsdWdpblJlZ2lzdHJ5LmV2ZW50TmFtZURpc3BhdGNoQ29uZmlncy5oYXNPd25Qcm9wZXJ0eShldmVudE5hbWUpLFxuICAgICdFdmVudFBsdWdpbkh1YjogTW9yZSB0aGFuIG9uZSBwbHVnaW4gYXR0ZW1wdGVkIHRvIHB1Ymxpc2ggdGhlIHNhbWUgJyArXG4gICAgJ2V2ZW50IG5hbWUsIGAlc2AuJyxcbiAgICBldmVudE5hbWVcbiAgKSA6IGludmFyaWFudCghRXZlbnRQbHVnaW5SZWdpc3RyeS5ldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MuaGFzT3duUHJvcGVydHkoZXZlbnROYW1lKSkpO1xuICBFdmVudFBsdWdpblJlZ2lzdHJ5LmV2ZW50TmFtZURpc3BhdGNoQ29uZmlnc1tldmVudE5hbWVdID0gZGlzcGF0Y2hDb25maWc7XG5cbiAgdmFyIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzID0gZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7XG4gIGlmIChwaGFzZWRSZWdpc3RyYXRpb25OYW1lcykge1xuICAgIGZvciAodmFyIHBoYXNlTmFtZSBpbiBwaGFzZWRSZWdpc3RyYXRpb25OYW1lcykge1xuICAgICAgaWYgKHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzLmhhc093blByb3BlcnR5KHBoYXNlTmFtZSkpIHtcbiAgICAgICAgdmFyIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWUgPSBwaGFzZWRSZWdpc3RyYXRpb25OYW1lc1twaGFzZU5hbWVdO1xuICAgICAgICBwdWJsaXNoUmVnaXN0cmF0aW9uTmFtZShcbiAgICAgICAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lLFxuICAgICAgICAgIFBsdWdpbk1vZHVsZSxcbiAgICAgICAgICBldmVudE5hbWVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkge1xuICAgIHB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lKFxuICAgICAgZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSxcbiAgICAgIFBsdWdpbk1vZHVsZSxcbiAgICAgIGV2ZW50TmFtZVxuICAgICk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFB1Ymxpc2hlcyBhIHJlZ2lzdHJhdGlvbiBuYW1lIHRoYXQgaXMgdXNlZCB0byBpZGVudGlmeSBkaXNwYXRjaGVkIGV2ZW50cyBhbmRcbiAqIGNhbiBiZSB1c2VkIHdpdGggYEV2ZW50UGx1Z2luSHViLnB1dExpc3RlbmVyYCB0byByZWdpc3RlciBsaXN0ZW5lcnMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lzdHJhdGlvbk5hbWUgUmVnaXN0cmF0aW9uIG5hbWUgdG8gYWRkLlxuICogQHBhcmFtIHtvYmplY3R9IFBsdWdpbk1vZHVsZSBQbHVnaW4gcHVibGlzaGluZyB0aGUgZXZlbnQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBwdWJsaXNoUmVnaXN0cmF0aW9uTmFtZShyZWdpc3RyYXRpb25OYW1lLCBQbHVnaW5Nb2R1bGUsIGV2ZW50TmFtZSkge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICFFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW3JlZ2lzdHJhdGlvbk5hbWVdLFxuICAgICdFdmVudFBsdWdpbkh1YjogTW9yZSB0aGFuIG9uZSBwbHVnaW4gYXR0ZW1wdGVkIHRvIHB1Ymxpc2ggdGhlIHNhbWUgJyArXG4gICAgJ3JlZ2lzdHJhdGlvbiBuYW1lLCBgJXNgLicsXG4gICAgcmVnaXN0cmF0aW9uTmFtZVxuICApIDogaW52YXJpYW50KCFFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW3JlZ2lzdHJhdGlvbk5hbWVdKSk7XG4gIEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV0gPSBQbHVnaW5Nb2R1bGU7XG4gIEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llc1tyZWdpc3RyYXRpb25OYW1lXSA9XG4gICAgUGx1Z2luTW9kdWxlLmV2ZW50VHlwZXNbZXZlbnROYW1lXS5kZXBlbmRlbmNpZXM7XG59XG5cbi8qKlxuICogUmVnaXN0ZXJzIHBsdWdpbnMgc28gdGhhdCB0aGV5IGNhbiBleHRyYWN0IGFuZCBkaXNwYXRjaCBldmVudHMuXG4gKlxuICogQHNlZSB7RXZlbnRQbHVnaW5IdWJ9XG4gKi9cbnZhciBFdmVudFBsdWdpblJlZ2lzdHJ5ID0ge1xuXG4gIC8qKlxuICAgKiBPcmRlcmVkIGxpc3Qgb2YgaW5qZWN0ZWQgcGx1Z2lucy5cbiAgICovXG4gIHBsdWdpbnM6IFtdLFxuXG4gIC8qKlxuICAgKiBNYXBwaW5nIGZyb20gZXZlbnQgbmFtZSB0byBkaXNwYXRjaCBjb25maWdcbiAgICovXG4gIGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnczoge30sXG5cbiAgLyoqXG4gICAqIE1hcHBpbmcgZnJvbSByZWdpc3RyYXRpb24gbmFtZSB0byBwbHVnaW4gbW9kdWxlXG4gICAqL1xuICByZWdpc3RyYXRpb25OYW1lTW9kdWxlczoge30sXG5cbiAgLyoqXG4gICAqIE1hcHBpbmcgZnJvbSByZWdpc3RyYXRpb24gbmFtZSB0byBldmVudCBuYW1lXG4gICAqL1xuICByZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzOiB7fSxcblxuICAvKipcbiAgICogSW5qZWN0cyBhbiBvcmRlcmluZyBvZiBwbHVnaW5zIChieSBwbHVnaW4gbmFtZSkuIFRoaXMgYWxsb3dzIHRoZSBvcmRlcmluZ1xuICAgKiB0byBiZSBkZWNvdXBsZWQgZnJvbSBpbmplY3Rpb24gb2YgdGhlIGFjdHVhbCBwbHVnaW5zIHNvIHRoYXQgb3JkZXJpbmcgaXNcbiAgICogYWx3YXlzIGRldGVybWluaXN0aWMgcmVnYXJkbGVzcyBvZiBwYWNrYWdpbmcsIG9uLXRoZS1mbHkgaW5qZWN0aW9uLCBldGMuXG4gICAqXG4gICAqIEBwYXJhbSB7YXJyYXl9IEluamVjdGVkRXZlbnRQbHVnaW5PcmRlclxuICAgKiBAaW50ZXJuYWxcbiAgICogQHNlZSB7RXZlbnRQbHVnaW5IdWIuaW5qZWN0aW9uLmluamVjdEV2ZW50UGx1Z2luT3JkZXJ9XG4gICAqL1xuICBpbmplY3RFdmVudFBsdWdpbk9yZGVyOiBmdW5jdGlvbihJbmplY3RlZEV2ZW50UGx1Z2luT3JkZXIpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgIUV2ZW50UGx1Z2luT3JkZXIsXG4gICAgICAnRXZlbnRQbHVnaW5SZWdpc3RyeTogQ2Fubm90IGluamVjdCBldmVudCBwbHVnaW4gb3JkZXJpbmcgbW9yZSB0aGFuICcgK1xuICAgICAgJ29uY2UuIFlvdSBhcmUgbGlrZWx5IHRyeWluZyB0byBsb2FkIG1vcmUgdGhhbiBvbmUgY29weSBvZiBSZWFjdC4nXG4gICAgKSA6IGludmFyaWFudCghRXZlbnRQbHVnaW5PcmRlcikpO1xuICAgIC8vIENsb25lIHRoZSBvcmRlcmluZyBzbyBpdCBjYW5ub3QgYmUgZHluYW1pY2FsbHkgbXV0YXRlZC5cbiAgICBFdmVudFBsdWdpbk9yZGVyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoSW5qZWN0ZWRFdmVudFBsdWdpbk9yZGVyKTtcbiAgICByZWNvbXB1dGVQbHVnaW5PcmRlcmluZygpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbmplY3RzIHBsdWdpbnMgdG8gYmUgdXNlZCBieSBgRXZlbnRQbHVnaW5IdWJgLiBUaGUgcGx1Z2luIG5hbWVzIG11c3QgYmVcbiAgICogaW4gdGhlIG9yZGVyaW5nIGluamVjdGVkIGJ5IGBpbmplY3RFdmVudFBsdWdpbk9yZGVyYC5cbiAgICpcbiAgICogUGx1Z2lucyBjYW4gYmUgaW5qZWN0ZWQgYXMgcGFydCBvZiBwYWdlIGluaXRpYWxpemF0aW9uIG9yIG9uLXRoZS1mbHkuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBpbmplY3RlZE5hbWVzVG9QbHVnaW5zIE1hcCBmcm9tIG5hbWVzIHRvIHBsdWdpbiBtb2R1bGVzLlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHNlZSB7RXZlbnRQbHVnaW5IdWIuaW5qZWN0aW9uLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZX1cbiAgICovXG4gIGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTogZnVuY3Rpb24oaW5qZWN0ZWROYW1lc1RvUGx1Z2lucykge1xuICAgIHZhciBpc09yZGVyaW5nRGlydHkgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBwbHVnaW5OYW1lIGluIGluamVjdGVkTmFtZXNUb1BsdWdpbnMpIHtcbiAgICAgIGlmICghaW5qZWN0ZWROYW1lc1RvUGx1Z2lucy5oYXNPd25Qcm9wZXJ0eShwbHVnaW5OYW1lKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBQbHVnaW5Nb2R1bGUgPSBpbmplY3RlZE5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdO1xuICAgICAgaWYgKCFuYW1lc1RvUGx1Z2lucy5oYXNPd25Qcm9wZXJ0eShwbHVnaW5OYW1lKSB8fFxuICAgICAgICAgIG5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdICE9PSBQbHVnaW5Nb2R1bGUpIHtcbiAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgICAhbmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV0sXG4gICAgICAgICAgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IENhbm5vdCBpbmplY3QgdHdvIGRpZmZlcmVudCBldmVudCBwbHVnaW5zICcgK1xuICAgICAgICAgICd1c2luZyB0aGUgc2FtZSBuYW1lLCBgJXNgLicsXG4gICAgICAgICAgcGx1Z2luTmFtZVxuICAgICAgICApIDogaW52YXJpYW50KCFuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXSkpO1xuICAgICAgICBuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXSA9IFBsdWdpbk1vZHVsZTtcbiAgICAgICAgaXNPcmRlcmluZ0RpcnR5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzT3JkZXJpbmdEaXJ0eSkge1xuICAgICAgcmVjb21wdXRlUGx1Z2luT3JkZXJpbmcoKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIExvb2tzIHVwIHRoZSBwbHVnaW4gZm9yIHRoZSBzdXBwbGllZCBldmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IEEgc3ludGhldGljIGV2ZW50LlxuICAgKiBAcmV0dXJuIHs/b2JqZWN0fSBUaGUgcGx1Z2luIHRoYXQgY3JlYXRlZCB0aGUgc3VwcGxpZWQgZXZlbnQuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZ2V0UGx1Z2luTW9kdWxlRm9yRXZlbnQ6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIGRpc3BhdGNoQ29uZmlnID0gZXZlbnQuZGlzcGF0Y2hDb25maWc7XG4gICAgaWYgKGRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICAgIHJldHVybiBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW1xuICAgICAgICBkaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lXG4gICAgICBdIHx8IG51bGw7XG4gICAgfVxuICAgIGZvciAodmFyIHBoYXNlIGluIGRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgICBpZiAoIWRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzLmhhc093blByb3BlcnR5KHBoYXNlKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBQbHVnaW5Nb2R1bGUgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW1xuICAgICAgICBkaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1twaGFzZV1cbiAgICAgIF07XG4gICAgICBpZiAoUGx1Z2luTW9kdWxlKSB7XG4gICAgICAgIHJldHVybiBQbHVnaW5Nb2R1bGU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBFeHBvc2VkIGZvciB1bml0IHRlc3RpbmcuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVzZXRFdmVudFBsdWdpbnM6IGZ1bmN0aW9uKCkge1xuICAgIEV2ZW50UGx1Z2luT3JkZXIgPSBudWxsO1xuICAgIGZvciAodmFyIHBsdWdpbk5hbWUgaW4gbmFtZXNUb1BsdWdpbnMpIHtcbiAgICAgIGlmIChuYW1lc1RvUGx1Z2lucy5oYXNPd25Qcm9wZXJ0eShwbHVnaW5OYW1lKSkge1xuICAgICAgICBkZWxldGUgbmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV07XG4gICAgICB9XG4gICAgfVxuICAgIEV2ZW50UGx1Z2luUmVnaXN0cnkucGx1Z2lucy5sZW5ndGggPSAwO1xuXG4gICAgdmFyIGV2ZW50TmFtZURpc3BhdGNoQ29uZmlncyA9IEV2ZW50UGx1Z2luUmVnaXN0cnkuZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzO1xuICAgIGZvciAodmFyIGV2ZW50TmFtZSBpbiBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MpIHtcbiAgICAgIGlmIChldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MuaGFzT3duUHJvcGVydHkoZXZlbnROYW1lKSkge1xuICAgICAgICBkZWxldGUgZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzW2V2ZW50TmFtZV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzID0gRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlcztcbiAgICBmb3IgKHZhciByZWdpc3RyYXRpb25OYW1lIGluIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzKSB7XG4gICAgICBpZiAocmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMuaGFzT3duUHJvcGVydHkocmVnaXN0cmF0aW9uTmFtZSkpIHtcbiAgICAgICAgZGVsZXRlIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50UGx1Z2luUmVnaXN0cnk7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL2ludmFyaWFudFwiOjE5NixcIl9wcm9jZXNzXCI6MTl9XSw4ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEV2ZW50UGx1Z2luVXRpbHNcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZShcIi4vRXZlbnRDb25zdGFudHNcIik7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbi8qKlxuICogSW5qZWN0ZWQgZGVwZW5kZW5jaWVzOlxuICovXG5cbi8qKlxuICogLSBgTW91bnRgOiBbcmVxdWlyZWRdIE1vZHVsZSB0aGF0IGNhbiBjb252ZXJ0IGJldHdlZW4gUmVhY3QgZG9tIElEcyBhbmRcbiAqICAgYWN0dWFsIG5vZGUgcmVmZXJlbmNlcy5cbiAqL1xudmFyIGluamVjdGlvbiA9IHtcbiAgTW91bnQ6IG51bGwsXG4gIGluamVjdE1vdW50OiBmdW5jdGlvbihJbmplY3RlZE1vdW50KSB7XG4gICAgaW5qZWN0aW9uLk1vdW50ID0gSW5qZWN0ZWRNb3VudDtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICBJbmplY3RlZE1vdW50ICYmIEluamVjdGVkTW91bnQuZ2V0Tm9kZSxcbiAgICAgICAgJ0V2ZW50UGx1Z2luVXRpbHMuaW5qZWN0aW9uLmluamVjdE1vdW50KC4uLik6IEluamVjdGVkIE1vdW50IG1vZHVsZSAnICtcbiAgICAgICAgJ2lzIG1pc3NpbmcgZ2V0Tm9kZS4nXG4gICAgICApIDogaW52YXJpYW50KEluamVjdGVkTW91bnQgJiYgSW5qZWN0ZWRNb3VudC5nZXROb2RlKSk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG5cbmZ1bmN0aW9uIGlzRW5kaXNoKHRvcExldmVsVHlwZSkge1xuICByZXR1cm4gdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlVXAgfHxcbiAgICAgICAgIHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BUb3VjaEVuZCB8fFxuICAgICAgICAgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoQ2FuY2VsO1xufVxuXG5mdW5jdGlvbiBpc01vdmVpc2godG9wTGV2ZWxUeXBlKSB7XG4gIHJldHVybiB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wTW91c2VNb3ZlIHx8XG4gICAgICAgICB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wVG91Y2hNb3ZlO1xufVxuZnVuY3Rpb24gaXNTdGFydGlzaCh0b3BMZXZlbFR5cGUpIHtcbiAgcmV0dXJuIHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd24gfHxcbiAgICAgICAgIHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BUb3VjaFN0YXJ0O1xufVxuXG5cbnZhciB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcztcbmlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgdmFsaWRhdGVFdmVudERpc3BhdGNoZXMgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciBkaXNwYXRjaExpc3RlbmVycyA9IGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycztcbiAgICB2YXIgZGlzcGF0Y2hJRHMgPSBldmVudC5fZGlzcGF0Y2hJRHM7XG5cbiAgICB2YXIgbGlzdGVuZXJzSXNBcnIgPSBBcnJheS5pc0FycmF5KGRpc3BhdGNoTGlzdGVuZXJzKTtcbiAgICB2YXIgaWRzSXNBcnIgPSBBcnJheS5pc0FycmF5KGRpc3BhdGNoSURzKTtcbiAgICB2YXIgSURzTGVuID0gaWRzSXNBcnIgPyBkaXNwYXRjaElEcy5sZW5ndGggOiBkaXNwYXRjaElEcyA/IDEgOiAwO1xuICAgIHZhciBsaXN0ZW5lcnNMZW4gPSBsaXN0ZW5lcnNJc0FyciA/XG4gICAgICBkaXNwYXRjaExpc3RlbmVycy5sZW5ndGggOlxuICAgICAgZGlzcGF0Y2hMaXN0ZW5lcnMgPyAxIDogMDtcblxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBpZHNJc0FyciA9PT0gbGlzdGVuZXJzSXNBcnIgJiYgSURzTGVuID09PSBsaXN0ZW5lcnNMZW4sXG4gICAgICAnRXZlbnRQbHVnaW5VdGlsczogSW52YWxpZCBgZXZlbnRgLidcbiAgICApIDogaW52YXJpYW50KGlkc0lzQXJyID09PSBsaXN0ZW5lcnNJc0FyciAmJiBJRHNMZW4gPT09IGxpc3RlbmVyc0xlbikpO1xuICB9O1xufVxuXG4vKipcbiAqIEludm9rZXMgYGNiKGV2ZW50LCBsaXN0ZW5lciwgaWQpYC4gQXZvaWRzIHVzaW5nIGNhbGwgaWYgbm8gc2NvcGUgaXNcbiAqIHByb3ZpZGVkLiBUaGUgYChsaXN0ZW5lcixpZClgIHBhaXIgZWZmZWN0aXZlbHkgZm9ybXMgdGhlIFwiZGlzcGF0Y2hcIiBidXQgYXJlXG4gKiBrZXB0IHNlcGFyYXRlIHRvIGNvbnNlcnZlIG1lbW9yeS5cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaEV2ZW50RGlzcGF0Y2goZXZlbnQsIGNiKSB7XG4gIHZhciBkaXNwYXRjaExpc3RlbmVycyA9IGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycztcbiAgdmFyIGRpc3BhdGNoSURzID0gZXZlbnQuX2Rpc3BhdGNoSURzO1xuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgdmFsaWRhdGVFdmVudERpc3BhdGNoZXMoZXZlbnQpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KGRpc3BhdGNoTGlzdGVuZXJzKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlzcGF0Y2hMaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgLy8gTGlzdGVuZXJzIGFuZCBJRHMgYXJlIHR3byBwYXJhbGxlbCBhcnJheXMgdGhhdCBhcmUgYWx3YXlzIGluIHN5bmMuXG4gICAgICBjYihldmVudCwgZGlzcGF0Y2hMaXN0ZW5lcnNbaV0sIGRpc3BhdGNoSURzW2ldKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZGlzcGF0Y2hMaXN0ZW5lcnMpIHtcbiAgICBjYihldmVudCwgZGlzcGF0Y2hMaXN0ZW5lcnMsIGRpc3BhdGNoSURzKTtcbiAgfVxufVxuXG4vKipcbiAqIERlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgUGx1Z2luTW9kdWxlLmV4ZWN1dGVEaXNwYXRjaCgpLlxuICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gU3ludGhldGljRXZlbnQgdG8gaGFuZGxlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBBcHBsaWNhdGlvbi1sZXZlbCBjYWxsYmFja1xuICogQHBhcmFtIHtzdHJpbmd9IGRvbUlEIERPTSBpZCB0byBwYXNzIHRvIHRoZSBjYWxsYmFjay5cbiAqL1xuZnVuY3Rpb24gZXhlY3V0ZURpc3BhdGNoKGV2ZW50LCBsaXN0ZW5lciwgZG9tSUQpIHtcbiAgZXZlbnQuY3VycmVudFRhcmdldCA9IGluamVjdGlvbi5Nb3VudC5nZXROb2RlKGRvbUlEKTtcbiAgdmFyIHJldHVyblZhbHVlID0gbGlzdGVuZXIoZXZlbnQsIGRvbUlEKTtcbiAgZXZlbnQuY3VycmVudFRhcmdldCA9IG51bGw7XG4gIHJldHVybiByZXR1cm5WYWx1ZTtcbn1cblxuLyoqXG4gKiBTdGFuZGFyZC9zaW1wbGUgaXRlcmF0aW9uIHRocm91Z2ggYW4gZXZlbnQncyBjb2xsZWN0ZWQgZGlzcGF0Y2hlcy5cbiAqL1xuZnVuY3Rpb24gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyKGV2ZW50LCBleGVjdXRlRGlzcGF0Y2gpIHtcbiAgZm9yRWFjaEV2ZW50RGlzcGF0Y2goZXZlbnQsIGV4ZWN1dGVEaXNwYXRjaCk7XG4gIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9IG51bGw7XG4gIGV2ZW50Ll9kaXNwYXRjaElEcyA9IG51bGw7XG59XG5cbi8qKlxuICogU3RhbmRhcmQvc2ltcGxlIGl0ZXJhdGlvbiB0aHJvdWdoIGFuIGV2ZW50J3MgY29sbGVjdGVkIGRpc3BhdGNoZXMsIGJ1dCBzdG9wc1xuICogYXQgdGhlIGZpcnN0IGRpc3BhdGNoIGV4ZWN1dGlvbiByZXR1cm5pbmcgdHJ1ZSwgYW5kIHJldHVybnMgdGhhdCBpZC5cbiAqXG4gKiBAcmV0dXJuIGlkIG9mIHRoZSBmaXJzdCBkaXNwYXRjaCBleGVjdXRpb24gd2hvJ3MgbGlzdGVuZXIgcmV0dXJucyB0cnVlLCBvclxuICogbnVsbCBpZiBubyBsaXN0ZW5lciByZXR1cm5lZCB0cnVlLlxuICovXG5mdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlSW1wbChldmVudCkge1xuICB2YXIgZGlzcGF0Y2hMaXN0ZW5lcnMgPSBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnM7XG4gIHZhciBkaXNwYXRjaElEcyA9IGV2ZW50Ll9kaXNwYXRjaElEcztcbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzKGV2ZW50KTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShkaXNwYXRjaExpc3RlbmVycykpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpc3BhdGNoTGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIC8vIExpc3RlbmVycyBhbmQgSURzIGFyZSB0d28gcGFyYWxsZWwgYXJyYXlzIHRoYXQgYXJlIGFsd2F5cyBpbiBzeW5jLlxuICAgICAgaWYgKGRpc3BhdGNoTGlzdGVuZXJzW2ldKGV2ZW50LCBkaXNwYXRjaElEc1tpXSkpIHtcbiAgICAgICAgcmV0dXJuIGRpc3BhdGNoSURzW2ldO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChkaXNwYXRjaExpc3RlbmVycykge1xuICAgIGlmIChkaXNwYXRjaExpc3RlbmVycyhldmVudCwgZGlzcGF0Y2hJRHMpKSB7XG4gICAgICByZXR1cm4gZGlzcGF0Y2hJRHM7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEBzZWUgZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZUltcGxcbiAqL1xuZnVuY3Rpb24gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZShldmVudCkge1xuICB2YXIgcmV0ID0gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZUltcGwoZXZlbnQpO1xuICBldmVudC5fZGlzcGF0Y2hJRHMgPSBudWxsO1xuICBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMgPSBudWxsO1xuICByZXR1cm4gcmV0O1xufVxuXG4vKipcbiAqIEV4ZWN1dGlvbiBvZiBhIFwiZGlyZWN0XCIgZGlzcGF0Y2ggLSB0aGVyZSBtdXN0IGJlIGF0IG1vc3Qgb25lIGRpc3BhdGNoXG4gKiBhY2N1bXVsYXRlZCBvbiB0aGUgZXZlbnQgb3IgaXQgaXMgY29uc2lkZXJlZCBhbiBlcnJvci4gSXQgZG9lc24ndCByZWFsbHkgbWFrZVxuICogc2Vuc2UgZm9yIGFuIGV2ZW50IHdpdGggbXVsdGlwbGUgZGlzcGF0Y2hlcyAoYnViYmxlZCkgdG8ga2VlcCB0cmFjayBvZiB0aGVcbiAqIHJldHVybiB2YWx1ZXMgYXQgZWFjaCBkaXNwYXRjaCBleGVjdXRpb24sIGJ1dCBpdCBkb2VzIHRlbmQgdG8gbWFrZSBzZW5zZSB3aGVuXG4gKiBkZWFsaW5nIHdpdGggXCJkaXJlY3RcIiBkaXNwYXRjaGVzLlxuICpcbiAqIEByZXR1cm4gVGhlIHJldHVybiB2YWx1ZSBvZiBleGVjdXRpbmcgdGhlIHNpbmdsZSBkaXNwYXRjaC5cbiAqL1xuZnVuY3Rpb24gZXhlY3V0ZURpcmVjdERpc3BhdGNoKGV2ZW50KSB7XG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyhldmVudCk7XG4gIH1cbiAgdmFyIGRpc3BhdGNoTGlzdGVuZXIgPSBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnM7XG4gIHZhciBkaXNwYXRjaElEID0gZXZlbnQuX2Rpc3BhdGNoSURzO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICFBcnJheS5pc0FycmF5KGRpc3BhdGNoTGlzdGVuZXIpLFxuICAgICdleGVjdXRlRGlyZWN0RGlzcGF0Y2goLi4uKTogSW52YWxpZCBgZXZlbnRgLidcbiAgKSA6IGludmFyaWFudCghQXJyYXkuaXNBcnJheShkaXNwYXRjaExpc3RlbmVyKSkpO1xuICB2YXIgcmVzID0gZGlzcGF0Y2hMaXN0ZW5lciA/XG4gICAgZGlzcGF0Y2hMaXN0ZW5lcihldmVudCwgZGlzcGF0Y2hJRCkgOlxuICAgIG51bGw7XG4gIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9IG51bGw7XG4gIGV2ZW50Ll9kaXNwYXRjaElEcyA9IG51bGw7XG4gIHJldHVybiByZXM7XG59XG5cbi8qKlxuICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnRcbiAqIEByZXR1cm4ge2Jvb2x9IFRydWUgaWZmIG51bWJlciBvZiBkaXNwYXRjaGVzIGFjY3VtdWxhdGVkIGlzIGdyZWF0ZXIgdGhhbiAwLlxuICovXG5mdW5jdGlvbiBoYXNEaXNwYXRjaGVzKGV2ZW50KSB7XG4gIHJldHVybiAhIWV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycztcbn1cblxuLyoqXG4gKiBHZW5lcmFsIHV0aWxpdGllcyB0aGF0IGFyZSB1c2VmdWwgaW4gY3JlYXRpbmcgY3VzdG9tIEV2ZW50IFBsdWdpbnMuXG4gKi9cbnZhciBFdmVudFBsdWdpblV0aWxzID0ge1xuICBpc0VuZGlzaDogaXNFbmRpc2gsXG4gIGlzTW92ZWlzaDogaXNNb3ZlaXNoLFxuICBpc1N0YXJ0aXNoOiBpc1N0YXJ0aXNoLFxuXG4gIGV4ZWN1dGVEaXJlY3REaXNwYXRjaDogZXhlY3V0ZURpcmVjdERpc3BhdGNoLFxuICBleGVjdXRlRGlzcGF0Y2g6IGV4ZWN1dGVEaXNwYXRjaCxcbiAgZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyOiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXIsXG4gIGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWU6IGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWUsXG4gIGhhc0Rpc3BhdGNoZXM6IGhhc0Rpc3BhdGNoZXMsXG4gIGluamVjdGlvbjogaW5qZWN0aW9uLFxuICB1c2VUb3VjaEV2ZW50czogZmFsc2Vcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRQbHVnaW5VdGlscztcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vRXZlbnRDb25zdGFudHNcIjo4NCxcIi4vaW52YXJpYW50XCI6MTk2LFwiX3Byb2Nlc3NcIjoxOX1dLDg5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXZlbnRQcm9wYWdhdG9yc1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcbnZhciBFdmVudFBsdWdpbkh1YiA9IHJlcXVpcmUoXCIuL0V2ZW50UGx1Z2luSHViXCIpO1xuXG52YXIgYWNjdW11bGF0ZUludG8gPSByZXF1aXJlKFwiLi9hY2N1bXVsYXRlSW50b1wiKTtcbnZhciBmb3JFYWNoQWNjdW11bGF0ZWQgPSByZXF1aXJlKFwiLi9mb3JFYWNoQWNjdW11bGF0ZWRcIik7XG5cbnZhciBQcm9wYWdhdGlvblBoYXNlcyA9IEV2ZW50Q29uc3RhbnRzLlByb3BhZ2F0aW9uUGhhc2VzO1xudmFyIGdldExpc3RlbmVyID0gRXZlbnRQbHVnaW5IdWIuZ2V0TGlzdGVuZXI7XG5cbi8qKlxuICogU29tZSBldmVudCB0eXBlcyBoYXZlIGEgbm90aW9uIG9mIGRpZmZlcmVudCByZWdpc3RyYXRpb24gbmFtZXMgZm9yIGRpZmZlcmVudFxuICogXCJwaGFzZXNcIiBvZiBwcm9wYWdhdGlvbi4gVGhpcyBmaW5kcyBsaXN0ZW5lcnMgYnkgYSBnaXZlbiBwaGFzZS5cbiAqL1xuZnVuY3Rpb24gbGlzdGVuZXJBdFBoYXNlKGlkLCBldmVudCwgcHJvcGFnYXRpb25QaGFzZSkge1xuICB2YXIgcmVnaXN0cmF0aW9uTmFtZSA9XG4gICAgZXZlbnQuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbcHJvcGFnYXRpb25QaGFzZV07XG4gIHJldHVybiBnZXRMaXN0ZW5lcihpZCwgcmVnaXN0cmF0aW9uTmFtZSk7XG59XG5cbi8qKlxuICogVGFncyBhIGBTeW50aGV0aWNFdmVudGAgd2l0aCBkaXNwYXRjaGVkIGxpc3RlbmVycy4gQ3JlYXRpbmcgdGhpcyBmdW5jdGlvblxuICogaGVyZSwgYWxsb3dzIHVzIHRvIG5vdCBoYXZlIHRvIGJpbmQgb3IgY3JlYXRlIGZ1bmN0aW9ucyBmb3IgZWFjaCBldmVudC5cbiAqIE11dGF0aW5nIHRoZSBldmVudCdzIG1lbWJlcnMgYWxsb3dzIHVzIHRvIG5vdCBoYXZlIHRvIGNyZWF0ZSBhIHdyYXBwaW5nXG4gKiBcImRpc3BhdGNoXCIgb2JqZWN0IHRoYXQgcGFpcnMgdGhlIGV2ZW50IHdpdGggdGhlIGxpc3RlbmVyLlxuICovXG5mdW5jdGlvbiBhY2N1bXVsYXRlRGlyZWN0aW9uYWxEaXNwYXRjaGVzKGRvbUlELCB1cHdhcmRzLCBldmVudCkge1xuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgaWYgKCFkb21JRCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdEaXNwYXRjaGluZyBpZCBtdXN0IG5vdCBiZSBudWxsJyk7XG4gICAgfVxuICB9XG4gIHZhciBwaGFzZSA9IHVwd2FyZHMgPyBQcm9wYWdhdGlvblBoYXNlcy5idWJibGVkIDogUHJvcGFnYXRpb25QaGFzZXMuY2FwdHVyZWQ7XG4gIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyQXRQaGFzZShkb21JRCwgZXZlbnQsIHBoYXNlKTtcbiAgaWYgKGxpc3RlbmVyKSB7XG4gICAgZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzID1cbiAgICAgIGFjY3VtdWxhdGVJbnRvKGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycywgbGlzdGVuZXIpO1xuICAgIGV2ZW50Ll9kaXNwYXRjaElEcyA9IGFjY3VtdWxhdGVJbnRvKGV2ZW50Ll9kaXNwYXRjaElEcywgZG9tSUQpO1xuICB9XG59XG5cbi8qKlxuICogQ29sbGVjdCBkaXNwYXRjaGVzIChtdXN0IGJlIGVudGlyZWx5IGNvbGxlY3RlZCBiZWZvcmUgZGlzcGF0Y2hpbmcgLSBzZWUgdW5pdFxuICogdGVzdHMpLiBMYXppbHkgYWxsb2NhdGUgdGhlIGFycmF5IHRvIGNvbnNlcnZlIG1lbW9yeS4gIFdlIG11c3QgbG9vcCB0aHJvdWdoXG4gKiBlYWNoIGV2ZW50IGFuZCBwZXJmb3JtIHRoZSB0cmF2ZXJzYWwgZm9yIGVhY2ggb25lLiBXZSBjYW4gbm90IHBlcmZvcm0gYVxuICogc2luZ2xlIHRyYXZlcnNhbCBmb3IgdGhlIGVudGlyZSBjb2xsZWN0aW9uIG9mIGV2ZW50cyBiZWNhdXNlIGVhY2ggZXZlbnQgbWF5XG4gKiBoYXZlIGEgZGlmZmVyZW50IHRhcmdldC5cbiAqL1xuZnVuY3Rpb24gYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZShldmVudCkge1xuICBpZiAoZXZlbnQgJiYgZXZlbnQuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpIHtcbiAgICBFdmVudFBsdWdpbkh1Yi5pbmplY3Rpb24uZ2V0SW5zdGFuY2VIYW5kbGUoKS50cmF2ZXJzZVR3b1BoYXNlKFxuICAgICAgZXZlbnQuZGlzcGF0Y2hNYXJrZXIsXG4gICAgICBhY2N1bXVsYXRlRGlyZWN0aW9uYWxEaXNwYXRjaGVzLFxuICAgICAgZXZlbnRcbiAgICApO1xuICB9XG59XG5cblxuLyoqXG4gKiBBY2N1bXVsYXRlcyB3aXRob3V0IHJlZ2FyZCB0byBkaXJlY3Rpb24sIGRvZXMgbm90IGxvb2sgZm9yIHBoYXNlZFxuICogcmVnaXN0cmF0aW9uIG5hbWVzLiBTYW1lIGFzIGBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlc1NpbmdsZWAgYnV0IHdpdGhvdXRcbiAqIHJlcXVpcmluZyB0aGF0IHRoZSBgZGlzcGF0Y2hNYXJrZXJgIGJlIHRoZSBzYW1lIGFzIHRoZSBkaXNwYXRjaGVkIElELlxuICovXG5mdW5jdGlvbiBhY2N1bXVsYXRlRGlzcGF0Y2hlcyhpZCwgaWdub3JlZERpcmVjdGlvbiwgZXZlbnQpIHtcbiAgaWYgKGV2ZW50ICYmIGV2ZW50LmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICB2YXIgcmVnaXN0cmF0aW9uTmFtZSA9IGV2ZW50LmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWU7XG4gICAgdmFyIGxpc3RlbmVyID0gZ2V0TGlzdGVuZXIoaWQsIHJlZ2lzdHJhdGlvbk5hbWUpO1xuICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzID1cbiAgICAgICAgYWNjdW11bGF0ZUludG8oZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzLCBsaXN0ZW5lcik7XG4gICAgICBldmVudC5fZGlzcGF0Y2hJRHMgPSBhY2N1bXVsYXRlSW50byhldmVudC5fZGlzcGF0Y2hJRHMsIGlkKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2N1bXVsYXRlcyBkaXNwYXRjaGVzIG9uIGFuIGBTeW50aGV0aWNFdmVudGAsIGJ1dCBvbmx5IGZvciB0aGVcbiAqIGBkaXNwYXRjaE1hcmtlcmAuXG4gKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudFxuICovXG5mdW5jdGlvbiBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlc1NpbmdsZShldmVudCkge1xuICBpZiAoZXZlbnQgJiYgZXZlbnQuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkge1xuICAgIGFjY3VtdWxhdGVEaXNwYXRjaGVzKGV2ZW50LmRpc3BhdGNoTWFya2VyLCBudWxsLCBldmVudCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudHMpIHtcbiAgZm9yRWFjaEFjY3VtdWxhdGVkKGV2ZW50cywgYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZSk7XG59XG5cbmZ1bmN0aW9uIGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlcyhsZWF2ZSwgZW50ZXIsIGZyb21JRCwgdG9JRCkge1xuICBFdmVudFBsdWdpbkh1Yi5pbmplY3Rpb24uZ2V0SW5zdGFuY2VIYW5kbGUoKS50cmF2ZXJzZUVudGVyTGVhdmUoXG4gICAgZnJvbUlELFxuICAgIHRvSUQsXG4gICAgYWNjdW11bGF0ZURpc3BhdGNoZXMsXG4gICAgbGVhdmUsXG4gICAgZW50ZXJcbiAgKTtcbn1cblxuXG5mdW5jdGlvbiBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyhldmVudHMpIHtcbiAgZm9yRWFjaEFjY3VtdWxhdGVkKGV2ZW50cywgYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXNTaW5nbGUpO1xufVxuXG5cblxuLyoqXG4gKiBBIHNtYWxsIHNldCBvZiBwcm9wYWdhdGlvbiBwYXR0ZXJucywgZWFjaCBvZiB3aGljaCB3aWxsIGFjY2VwdCBhIHNtYWxsIGFtb3VudFxuICogb2YgaW5mb3JtYXRpb24sIGFuZCBnZW5lcmF0ZSBhIHNldCBvZiBcImRpc3BhdGNoIHJlYWR5IGV2ZW50IG9iamVjdHNcIiAtIHdoaWNoXG4gKiBhcmUgc2V0cyBvZiBldmVudHMgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiBhbm5vdGF0ZWQgd2l0aCBhIHNldCBvZiBkaXNwYXRjaGVkXG4gKiBsaXN0ZW5lciBmdW5jdGlvbnMvaWRzLiBUaGUgQVBJIGlzIGRlc2lnbmVkIHRoaXMgd2F5IHRvIGRpc2NvdXJhZ2UgdGhlc2VcbiAqIHByb3BhZ2F0aW9uIHN0cmF0ZWdpZXMgZnJvbSBhY3R1YWxseSBleGVjdXRpbmcgdGhlIGRpc3BhdGNoZXMsIHNpbmNlIHdlXG4gKiBhbHdheXMgd2FudCB0byBjb2xsZWN0IHRoZSBlbnRpcmUgc2V0IG9mIGRpc3BhdGNoZXMgYmVmb3JlIGV4ZWN1dGluZyBldmVudCBhXG4gKiBzaW5nbGUgb25lLlxuICpcbiAqIEBjb25zdHJ1Y3RvciBFdmVudFByb3BhZ2F0b3JzXG4gKi9cbnZhciBFdmVudFByb3BhZ2F0b3JzID0ge1xuICBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzOiBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzLFxuICBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlczogYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXMsXG4gIGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlczogYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50UHJvcGFnYXRvcnM7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL0V2ZW50Q29uc3RhbnRzXCI6ODQsXCIuL0V2ZW50UGx1Z2luSHViXCI6ODYsXCIuL2FjY3VtdWxhdGVJbnRvXCI6MTY2LFwiLi9mb3JFYWNoQWNjdW11bGF0ZWRcIjoxODIsXCJfcHJvY2Vzc1wiOjE5fV0sOTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEV4ZWN1dGlvbkVudmlyb25tZW50XG4gKi9cblxuLypqc2xpbnQgZXZpbDogdHJ1ZSAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGNhblVzZURPTSA9ICEhKFxuICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICB3aW5kb3cuZG9jdW1lbnQgJiZcbiAgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnRcbik7XG5cbi8qKlxuICogU2ltcGxlLCBsaWdodHdlaWdodCBtb2R1bGUgYXNzaXN0aW5nIHdpdGggdGhlIGRldGVjdGlvbiBhbmQgY29udGV4dCBvZlxuICogV29ya2VyLiBIZWxwcyBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmNpZXMgYW5kIGFsbG93cyBjb2RlIHRvIHJlYXNvbiBhYm91dFxuICogd2hldGhlciBvciBub3QgdGhleSBhcmUgaW4gYSBXb3JrZXIsIGV2ZW4gaWYgdGhleSBuZXZlciBpbmNsdWRlIHRoZSBtYWluXG4gKiBgUmVhY3RXb3JrZXJgIGRlcGVuZGVuY3kuXG4gKi9cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHtcblxuICBjYW5Vc2VET006IGNhblVzZURPTSxcblxuICBjYW5Vc2VXb3JrZXJzOiB0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJyxcblxuICBjYW5Vc2VFdmVudExpc3RlbmVyczpcbiAgICBjYW5Vc2VET00gJiYgISEod2luZG93LmFkZEV2ZW50TGlzdGVuZXIgfHwgd2luZG93LmF0dGFjaEV2ZW50KSxcblxuICBjYW5Vc2VWaWV3cG9ydDogY2FuVXNlRE9NICYmICEhd2luZG93LnNjcmVlbixcblxuICBpc0luV29ya2VyOiAhY2FuVXNlRE9NIC8vIEZvciBub3csIHRoaXMgaXMgdHJ1ZSAtIG1pZ2h0IGNoYW5nZSBpbiB0aGUgZnV0dXJlLlxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV4ZWN1dGlvbkVudmlyb25tZW50O1xuXG59LHt9XSw5MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgSFRNTERPTVByb3BlcnR5Q29uZmlnXG4gKi9cblxuLypqc2xpbnQgYml0d2lzZTogdHJ1ZSovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRE9NUHJvcGVydHkgPSByZXF1aXJlKFwiLi9ET01Qcm9wZXJ0eVwiKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xuXG52YXIgTVVTVF9VU0VfQVRUUklCVVRFID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLk1VU1RfVVNFX0FUVFJJQlVURTtcbnZhciBNVVNUX1VTRV9QUk9QRVJUWSA9IERPTVByb3BlcnR5LmluamVjdGlvbi5NVVNUX1VTRV9QUk9QRVJUWTtcbnZhciBIQVNfQk9PTEVBTl9WQUxVRSA9IERPTVByb3BlcnR5LmluamVjdGlvbi5IQVNfQk9PTEVBTl9WQUxVRTtcbnZhciBIQVNfU0lERV9FRkZFQ1RTID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLkhBU19TSURFX0VGRkVDVFM7XG52YXIgSEFTX05VTUVSSUNfVkFMVUUgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uSEFTX05VTUVSSUNfVkFMVUU7XG52YXIgSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUgPVxuICBET01Qcm9wZXJ0eS5pbmplY3Rpb24uSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUU7XG52YXIgSEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRSA9XG4gIERPTVByb3BlcnR5LmluamVjdGlvbi5IQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFO1xuXG52YXIgaGFzU1ZHO1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICB2YXIgaW1wbGVtZW50YXRpb24gPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbjtcbiAgaGFzU1ZHID0gKFxuICAgIGltcGxlbWVudGF0aW9uICYmXG4gICAgaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSAmJlxuICAgIGltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoXG4gICAgICAnaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHMTEvZmVhdHVyZSNCYXNpY1N0cnVjdHVyZScsXG4gICAgICAnMS4xJ1xuICAgIClcbiAgKTtcbn1cblxuXG52YXIgSFRNTERPTVByb3BlcnR5Q29uZmlnID0ge1xuICBpc0N1c3RvbUF0dHJpYnV0ZTogUmVnRXhwLnByb3RvdHlwZS50ZXN0LmJpbmQoXG4gICAgL14oZGF0YXxhcmlhKS1bYS16X11bYS16XFxkXy5cXC1dKiQvXG4gICksXG4gIFByb3BlcnRpZXM6IHtcbiAgICAvKipcbiAgICAgKiBTdGFuZGFyZCBQcm9wZXJ0aWVzXG4gICAgICovXG4gICAgYWNjZXB0OiBudWxsLFxuICAgIGFjY2VwdENoYXJzZXQ6IG51bGwsXG4gICAgYWNjZXNzS2V5OiBudWxsLFxuICAgIGFjdGlvbjogbnVsbCxcbiAgICBhbGxvd0Z1bGxTY3JlZW46IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGFsbG93VHJhbnNwYXJlbmN5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgYWx0OiBudWxsLFxuICAgIGFzeW5jOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBhdXRvQ29tcGxldGU6IG51bGwsXG4gICAgLy8gYXV0b0ZvY3VzIGlzIHBvbHlmaWxsZWQvbm9ybWFsaXplZCBieSBBdXRvRm9jdXNNaXhpblxuICAgIC8vIGF1dG9Gb2N1czogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgYXV0b1BsYXk6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGNlbGxQYWRkaW5nOiBudWxsLFxuICAgIGNlbGxTcGFjaW5nOiBudWxsLFxuICAgIGNoYXJTZXQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBjaGVja2VkOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGNsYXNzSUQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICAvLyBUbyBzZXQgY2xhc3NOYW1lIG9uIFNWRyBlbGVtZW50cywgaXQncyBuZWNlc3NhcnkgdG8gdXNlIC5zZXRBdHRyaWJ1dGU7XG4gICAgLy8gdGhpcyB3b3JrcyBvbiBIVE1MIGVsZW1lbnRzIHRvbyBpbiBhbGwgYnJvd3NlcnMgZXhjZXB0IElFOC4gQ29udmVuaWVudGx5LFxuICAgIC8vIElFOCBkb2Vzbid0IHN1cHBvcnQgU1ZHIGFuZCBzbyB3ZSBjYW4gc2ltcGx5IHVzZSB0aGUgYXR0cmlidXRlIGluXG4gICAgLy8gYnJvd3NlcnMgdGhhdCBzdXBwb3J0IFNWRyBhbmQgdGhlIHByb3BlcnR5IGluIGJyb3dzZXJzIHRoYXQgZG9uJ3QsXG4gICAgLy8gcmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoZSBlbGVtZW50IGlzIEhUTUwgb3IgU1ZHLlxuICAgIGNsYXNzTmFtZTogaGFzU1ZHID8gTVVTVF9VU0VfQVRUUklCVVRFIDogTVVTVF9VU0VfUFJPUEVSVFksXG4gICAgY29sczogTVVTVF9VU0VfQVRUUklCVVRFIHwgSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUsXG4gICAgY29sU3BhbjogbnVsbCxcbiAgICBjb250ZW50OiBudWxsLFxuICAgIGNvbnRlbnRFZGl0YWJsZTogbnVsbCxcbiAgICBjb250ZXh0TWVudTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGNvbnRyb2xzOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGNvb3JkczogbnVsbCxcbiAgICBjcm9zc09yaWdpbjogbnVsbCxcbiAgICBkYXRhOiBudWxsLCAvLyBGb3IgYDxvYmplY3QgLz5gIGFjdHMgYXMgYHNyY2AuXG4gICAgZGF0ZVRpbWU6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBkZWZlcjogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgZGlyOiBudWxsLFxuICAgIGRpc2FibGVkOiBNVVNUX1VTRV9BVFRSSUJVVEUgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBkb3dubG9hZDogSEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRSxcbiAgICBkcmFnZ2FibGU6IG51bGwsXG4gICAgZW5jVHlwZTogbnVsbCxcbiAgICBmb3JtOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZm9ybUFjdGlvbjogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZvcm1FbmNUeXBlOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZm9ybU1ldGhvZDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZvcm1Ob1ZhbGlkYXRlOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBmb3JtVGFyZ2V0OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZnJhbWVCb3JkZXI6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBoZWlnaHQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBoaWRkZW46IE1VU1RfVVNFX0FUVFJJQlVURSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGhyZWY6IG51bGwsXG4gICAgaHJlZkxhbmc6IG51bGwsXG4gICAgaHRtbEZvcjogbnVsbCxcbiAgICBodHRwRXF1aXY6IG51bGwsXG4gICAgaWNvbjogbnVsbCxcbiAgICBpZDogTVVTVF9VU0VfUFJPUEVSVFksXG4gICAgbGFiZWw6IG51bGwsXG4gICAgbGFuZzogbnVsbCxcbiAgICBsaXN0OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgbG9vcDogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBtYW5pZmVzdDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIG1hcmdpbkhlaWdodDogbnVsbCxcbiAgICBtYXJnaW5XaWR0aDogbnVsbCxcbiAgICBtYXg6IG51bGwsXG4gICAgbWF4TGVuZ3RoOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgbWVkaWE6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBtZWRpYUdyb3VwOiBudWxsLFxuICAgIG1ldGhvZDogbnVsbCxcbiAgICBtaW46IG51bGwsXG4gICAgbXVsdGlwbGU6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgbXV0ZWQ6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgbmFtZTogbnVsbCxcbiAgICBub1ZhbGlkYXRlOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBvcGVuOiBudWxsLFxuICAgIHBhdHRlcm46IG51bGwsXG4gICAgcGxhY2Vob2xkZXI6IG51bGwsXG4gICAgcG9zdGVyOiBudWxsLFxuICAgIHByZWxvYWQ6IG51bGwsXG4gICAgcmFkaW9Hcm91cDogbnVsbCxcbiAgICByZWFkT25seTogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICByZWw6IG51bGwsXG4gICAgcmVxdWlyZWQ6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIHJvbGU6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICByb3dzOiBNVVNUX1VTRV9BVFRSSUJVVEUgfCBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSxcbiAgICByb3dTcGFuOiBudWxsLFxuICAgIHNhbmRib3g6IG51bGwsXG4gICAgc2NvcGU6IG51bGwsXG4gICAgc2Nyb2xsaW5nOiBudWxsLFxuICAgIHNlYW1sZXNzOiBNVVNUX1VTRV9BVFRSSUJVVEUgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBzZWxlY3RlZDogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBzaGFwZTogbnVsbCxcbiAgICBzaXplOiBNVVNUX1VTRV9BVFRSSUJVVEUgfCBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSxcbiAgICBzaXplczogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHNwYW46IEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFLFxuICAgIHNwZWxsQ2hlY2s6IG51bGwsXG4gICAgc3JjOiBudWxsLFxuICAgIHNyY0RvYzogTVVTVF9VU0VfUFJPUEVSVFksXG4gICAgc3JjU2V0OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3RhcnQ6IEhBU19OVU1FUklDX1ZBTFVFLFxuICAgIHN0ZXA6IG51bGwsXG4gICAgc3R5bGU6IG51bGwsXG4gICAgdGFiSW5kZXg6IG51bGwsXG4gICAgdGFyZ2V0OiBudWxsLFxuICAgIHRpdGxlOiBudWxsLFxuICAgIHR5cGU6IG51bGwsXG4gICAgdXNlTWFwOiBudWxsLFxuICAgIHZhbHVlOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19TSURFX0VGRkVDVFMsXG4gICAgd2lkdGg6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB3bW9kZTogTVVTVF9VU0VfQVRUUklCVVRFLFxuXG4gICAgLyoqXG4gICAgICogTm9uLXN0YW5kYXJkIFByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBhdXRvQ2FwaXRhbGl6ZTogbnVsbCwgLy8gU3VwcG9ydGVkIGluIE1vYmlsZSBTYWZhcmkgZm9yIGtleWJvYXJkIGhpbnRzXG4gICAgYXV0b0NvcnJlY3Q6IG51bGwsIC8vIFN1cHBvcnRlZCBpbiBNb2JpbGUgU2FmYXJpIGZvciBrZXlib2FyZCBoaW50c1xuICAgIGl0ZW1Qcm9wOiBNVVNUX1VTRV9BVFRSSUJVVEUsIC8vIE1pY3JvZGF0YTogaHR0cDovL3NjaGVtYS5vcmcvZG9jcy9ncy5odG1sXG4gICAgaXRlbVNjb3BlOiBNVVNUX1VTRV9BVFRSSUJVVEUgfCBIQVNfQk9PTEVBTl9WQUxVRSwgLy8gTWljcm9kYXRhOiBodHRwOi8vc2NoZW1hLm9yZy9kb2NzL2dzLmh0bWxcbiAgICBpdGVtVHlwZTogTVVTVF9VU0VfQVRUUklCVVRFLCAvLyBNaWNyb2RhdGE6IGh0dHA6Ly9zY2hlbWEub3JnL2RvY3MvZ3MuaHRtbFxuICAgIHByb3BlcnR5OiBudWxsIC8vIFN1cHBvcnRzIE9HIGluIG1ldGEgdGFnc1xuICB9LFxuICBET01BdHRyaWJ1dGVOYW1lczoge1xuICAgIGFjY2VwdENoYXJzZXQ6ICdhY2NlcHQtY2hhcnNldCcsXG4gICAgY2xhc3NOYW1lOiAnY2xhc3MnLFxuICAgIGh0bWxGb3I6ICdmb3InLFxuICAgIGh0dHBFcXVpdjogJ2h0dHAtZXF1aXYnXG4gIH0sXG4gIERPTVByb3BlcnR5TmFtZXM6IHtcbiAgICBhdXRvQ2FwaXRhbGl6ZTogJ2F1dG9jYXBpdGFsaXplJyxcbiAgICBhdXRvQ29tcGxldGU6ICdhdXRvY29tcGxldGUnLFxuICAgIGF1dG9Db3JyZWN0OiAnYXV0b2NvcnJlY3QnLFxuICAgIGF1dG9Gb2N1czogJ2F1dG9mb2N1cycsXG4gICAgYXV0b1BsYXk6ICdhdXRvcGxheScsXG4gICAgZW5jVHlwZTogJ2VuY3R5cGUnLFxuICAgIGhyZWZMYW5nOiAnaHJlZmxhbmcnLFxuICAgIHJhZGlvR3JvdXA6ICdyYWRpb2dyb3VwJyxcbiAgICBzcGVsbENoZWNrOiAnc3BlbGxjaGVjaycsXG4gICAgc3JjRG9jOiAnc3JjZG9jJyxcbiAgICBzcmNTZXQ6ICdzcmNzZXQnXG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSFRNTERPTVByb3BlcnR5Q29uZmlnO1xuXG59LHtcIi4vRE9NUHJvcGVydHlcIjo3OSxcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIjo5MH1dLDkyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgTGlua2VkVmFsdWVVdGlsc1xuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIFJlYWN0UHJvcFR5cGVzID0gcmVxdWlyZShcIi4vUmVhY3RQcm9wVHlwZXNcIik7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbnZhciBoYXNSZWFkT25seVZhbHVlID0ge1xuICAnYnV0dG9uJzogdHJ1ZSxcbiAgJ2NoZWNrYm94JzogdHJ1ZSxcbiAgJ2ltYWdlJzogdHJ1ZSxcbiAgJ2hpZGRlbic6IHRydWUsXG4gICdyYWRpbyc6IHRydWUsXG4gICdyZXNldCc6IHRydWUsXG4gICdzdWJtaXQnOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBfYXNzZXJ0U2luZ2xlTGluayhpbnB1dCkge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIGlucHV0LnByb3BzLmNoZWNrZWRMaW5rID09IG51bGwgfHwgaW5wdXQucHJvcHMudmFsdWVMaW5rID09IG51bGwsXG4gICAgJ0Nhbm5vdCBwcm92aWRlIGEgY2hlY2tlZExpbmsgYW5kIGEgdmFsdWVMaW5rLiBJZiB5b3Ugd2FudCB0byB1c2UgJyArXG4gICAgJ2NoZWNrZWRMaW5rLCB5b3UgcHJvYmFibHkgZG9uXFwndCB3YW50IHRvIHVzZSB2YWx1ZUxpbmsgYW5kIHZpY2UgdmVyc2EuJ1xuICApIDogaW52YXJpYW50KGlucHV0LnByb3BzLmNoZWNrZWRMaW5rID09IG51bGwgfHwgaW5wdXQucHJvcHMudmFsdWVMaW5rID09IG51bGwpKTtcbn1cbmZ1bmN0aW9uIF9hc3NlcnRWYWx1ZUxpbmsoaW5wdXQpIHtcbiAgX2Fzc2VydFNpbmdsZUxpbmsoaW5wdXQpO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIGlucHV0LnByb3BzLnZhbHVlID09IG51bGwgJiYgaW5wdXQucHJvcHMub25DaGFuZ2UgPT0gbnVsbCxcbiAgICAnQ2Fubm90IHByb3ZpZGUgYSB2YWx1ZUxpbmsgYW5kIGEgdmFsdWUgb3Igb25DaGFuZ2UgZXZlbnQuIElmIHlvdSB3YW50ICcgK1xuICAgICd0byB1c2UgdmFsdWUgb3Igb25DaGFuZ2UsIHlvdSBwcm9iYWJseSBkb25cXCd0IHdhbnQgdG8gdXNlIHZhbHVlTGluay4nXG4gICkgOiBpbnZhcmlhbnQoaW5wdXQucHJvcHMudmFsdWUgPT0gbnVsbCAmJiBpbnB1dC5wcm9wcy5vbkNoYW5nZSA9PSBudWxsKSk7XG59XG5cbmZ1bmN0aW9uIF9hc3NlcnRDaGVja2VkTGluayhpbnB1dCkge1xuICBfYXNzZXJ0U2luZ2xlTGluayhpbnB1dCk7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgaW5wdXQucHJvcHMuY2hlY2tlZCA9PSBudWxsICYmIGlucHV0LnByb3BzLm9uQ2hhbmdlID09IG51bGwsXG4gICAgJ0Nhbm5vdCBwcm92aWRlIGEgY2hlY2tlZExpbmsgYW5kIGEgY2hlY2tlZCBwcm9wZXJ0eSBvciBvbkNoYW5nZSBldmVudC4gJyArXG4gICAgJ0lmIHlvdSB3YW50IHRvIHVzZSBjaGVja2VkIG9yIG9uQ2hhbmdlLCB5b3UgcHJvYmFibHkgZG9uXFwndCB3YW50IHRvICcgK1xuICAgICd1c2UgY2hlY2tlZExpbmsnXG4gICkgOiBpbnZhcmlhbnQoaW5wdXQucHJvcHMuY2hlY2tlZCA9PSBudWxsICYmIGlucHV0LnByb3BzLm9uQ2hhbmdlID09IG51bGwpKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBlIGNoYW5nZSBldmVudCB0byBoYW5kbGVcbiAqL1xuZnVuY3Rpb24gX2hhbmRsZUxpbmtlZFZhbHVlQ2hhbmdlKGUpIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgdGhpcy5wcm9wcy52YWx1ZUxpbmsucmVxdWVzdENoYW5nZShlLnRhcmdldC52YWx1ZSk7XG59XG5cbi8qKlxuICAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGUgY2hhbmdlIGV2ZW50IHRvIGhhbmRsZVxuICAqL1xuZnVuY3Rpb24gX2hhbmRsZUxpbmtlZENoZWNrQ2hhbmdlKGUpIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgdGhpcy5wcm9wcy5jaGVja2VkTGluay5yZXF1ZXN0Q2hhbmdlKGUudGFyZ2V0LmNoZWNrZWQpO1xufVxuXG4vKipcbiAqIFByb3ZpZGUgYSBsaW5rZWQgYHZhbHVlYCBhdHRyaWJ1dGUgZm9yIGNvbnRyb2xsZWQgZm9ybXMuIFlvdSBzaG91bGQgbm90IHVzZVxuICogdGhpcyBvdXRzaWRlIG9mIHRoZSBSZWFjdERPTSBjb250cm9sbGVkIGZvcm0gY29tcG9uZW50cy5cbiAqL1xudmFyIExpbmtlZFZhbHVlVXRpbHMgPSB7XG4gIE1peGluOiB7XG4gICAgcHJvcFR5cGVzOiB7XG4gICAgICB2YWx1ZTogZnVuY3Rpb24ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gICAgICAgIGlmICghcHJvcHNbcHJvcE5hbWVdIHx8XG4gICAgICAgICAgICBoYXNSZWFkT25seVZhbHVlW3Byb3BzLnR5cGVdIHx8XG4gICAgICAgICAgICBwcm9wcy5vbkNoYW5nZSB8fFxuICAgICAgICAgICAgcHJvcHMucmVhZE9ubHkgfHxcbiAgICAgICAgICAgIHByb3BzLmRpc2FibGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgICAgJ1lvdSBwcm92aWRlZCBhIGB2YWx1ZWAgcHJvcCB0byBhIGZvcm0gZmllbGQgd2l0aG91dCBhbiAnICtcbiAgICAgICAgICAnYG9uQ2hhbmdlYCBoYW5kbGVyLiBUaGlzIHdpbGwgcmVuZGVyIGEgcmVhZC1vbmx5IGZpZWxkLiBJZiAnICtcbiAgICAgICAgICAndGhlIGZpZWxkIHNob3VsZCBiZSBtdXRhYmxlIHVzZSBgZGVmYXVsdFZhbHVlYC4gT3RoZXJ3aXNlLCAnICtcbiAgICAgICAgICAnc2V0IGVpdGhlciBgb25DaGFuZ2VgIG9yIGByZWFkT25seWAuJ1xuICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIGNoZWNrZWQ6IGZ1bmN0aW9uKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICAgICAgICBpZiAoIXByb3BzW3Byb3BOYW1lXSB8fFxuICAgICAgICAgICAgcHJvcHMub25DaGFuZ2UgfHxcbiAgICAgICAgICAgIHByb3BzLnJlYWRPbmx5IHx8XG4gICAgICAgICAgICBwcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAgICdZb3UgcHJvdmlkZWQgYSBgY2hlY2tlZGAgcHJvcCB0byBhIGZvcm0gZmllbGQgd2l0aG91dCBhbiAnICtcbiAgICAgICAgICAnYG9uQ2hhbmdlYCBoYW5kbGVyLiBUaGlzIHdpbGwgcmVuZGVyIGEgcmVhZC1vbmx5IGZpZWxkLiBJZiAnICtcbiAgICAgICAgICAndGhlIGZpZWxkIHNob3VsZCBiZSBtdXRhYmxlIHVzZSBgZGVmYXVsdENoZWNrZWRgLiBPdGhlcndpc2UsICcgK1xuICAgICAgICAgICdzZXQgZWl0aGVyIGBvbkNoYW5nZWAgb3IgYHJlYWRPbmx5YC4nXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgICAgb25DaGFuZ2U6IFJlYWN0UHJvcFR5cGVzLmZ1bmNcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGlucHV0IEZvcm0gY29tcG9uZW50XG4gICAqIEByZXR1cm4geyp9IGN1cnJlbnQgdmFsdWUgb2YgdGhlIGlucHV0IGVpdGhlciBmcm9tIHZhbHVlIHByb3Agb3IgbGluay5cbiAgICovXG4gIGdldFZhbHVlOiBmdW5jdGlvbihpbnB1dCkge1xuICAgIGlmIChpbnB1dC5wcm9wcy52YWx1ZUxpbmspIHtcbiAgICAgIF9hc3NlcnRWYWx1ZUxpbmsoaW5wdXQpO1xuICAgICAgcmV0dXJuIGlucHV0LnByb3BzLnZhbHVlTGluay52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0LnByb3BzLnZhbHVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBpbnB1dCBGb3JtIGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHsqfSBjdXJyZW50IGNoZWNrZWQgc3RhdHVzIG9mIHRoZSBpbnB1dCBlaXRoZXIgZnJvbSBjaGVja2VkIHByb3BcbiAgICogICAgICAgICAgICAgb3IgbGluay5cbiAgICovXG4gIGdldENoZWNrZWQ6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgaWYgKGlucHV0LnByb3BzLmNoZWNrZWRMaW5rKSB7XG4gICAgICBfYXNzZXJ0Q2hlY2tlZExpbmsoaW5wdXQpO1xuICAgICAgcmV0dXJuIGlucHV0LnByb3BzLmNoZWNrZWRMaW5rLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gaW5wdXQucHJvcHMuY2hlY2tlZDtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gaW5wdXQgRm9ybSBjb21wb25lbnRcbiAgICogQHJldHVybiB7ZnVuY3Rpb259IGNoYW5nZSBjYWxsYmFjayBlaXRoZXIgZnJvbSBvbkNoYW5nZSBwcm9wIG9yIGxpbmsuXG4gICAqL1xuICBnZXRPbkNoYW5nZTogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQucHJvcHMudmFsdWVMaW5rKSB7XG4gICAgICBfYXNzZXJ0VmFsdWVMaW5rKGlucHV0KTtcbiAgICAgIHJldHVybiBfaGFuZGxlTGlua2VkVmFsdWVDaGFuZ2U7XG4gICAgfSBlbHNlIGlmIChpbnB1dC5wcm9wcy5jaGVja2VkTGluaykge1xuICAgICAgX2Fzc2VydENoZWNrZWRMaW5rKGlucHV0KTtcbiAgICAgIHJldHVybiBfaGFuZGxlTGlua2VkQ2hlY2tDaGFuZ2U7XG4gICAgfVxuICAgIHJldHVybiBpbnB1dC5wcm9wcy5vbkNoYW5nZTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBMaW5rZWRWYWx1ZVV0aWxzO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9SZWFjdFByb3BUeXBlc1wiOjE0MSxcIi4vaW52YXJpYW50XCI6MTk2LFwiX3Byb2Nlc3NcIjoxOX1dLDkzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIExvY2FsRXZlbnRUcmFwTWl4aW5cbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlciA9IHJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlclwiKTtcblxudmFyIGFjY3VtdWxhdGVJbnRvID0gcmVxdWlyZShcIi4vYWNjdW11bGF0ZUludG9cIik7XG52YXIgZm9yRWFjaEFjY3VtdWxhdGVkID0gcmVxdWlyZShcIi4vZm9yRWFjaEFjY3VtdWxhdGVkXCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxuZnVuY3Rpb24gcmVtb3ZlKGV2ZW50KSB7XG4gIGV2ZW50LnJlbW92ZSgpO1xufVxuXG52YXIgTG9jYWxFdmVudFRyYXBNaXhpbiA9IHtcbiAgdHJhcEJ1YmJsZWRFdmVudDpmdW5jdGlvbih0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSkge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQodGhpcy5pc01vdW50ZWQoKSwgJ011c3QgYmUgbW91bnRlZCB0byB0cmFwIGV2ZW50cycpIDogaW52YXJpYW50KHRoaXMuaXNNb3VudGVkKCkpKTtcbiAgICB2YXIgbGlzdGVuZXIgPSBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIudHJhcEJ1YmJsZWRFdmVudChcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIGhhbmRsZXJCYXNlTmFtZSxcbiAgICAgIHRoaXMuZ2V0RE9NTm9kZSgpXG4gICAgKTtcbiAgICB0aGlzLl9sb2NhbEV2ZW50TGlzdGVuZXJzID1cbiAgICAgIGFjY3VtdWxhdGVJbnRvKHRoaXMuX2xvY2FsRXZlbnRMaXN0ZW5lcnMsIGxpc3RlbmVyKTtcbiAgfSxcblxuICAvLyB0cmFwQ2FwdHVyZWRFdmVudCB3b3VsZCBsb29rIG5lYXJseSBpZGVudGljYWwuIFdlIGRvbid0IGltcGxlbWVudCB0aGF0XG4gIC8vIG1ldGhvZCBiZWNhdXNlIGl0IGlzbid0IGN1cnJlbnRseSBuZWVkZWQuXG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQ6ZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2xvY2FsRXZlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIGZvckVhY2hBY2N1bXVsYXRlZCh0aGlzLl9sb2NhbEV2ZW50TGlzdGVuZXJzLCByZW1vdmUpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBMb2NhbEV2ZW50VHJhcE1peGluO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJcIjo5OSxcIi4vYWNjdW11bGF0ZUludG9cIjoxNjYsXCIuL2ZvckVhY2hBY2N1bXVsYXRlZFwiOjE4MixcIi4vaW52YXJpYW50XCI6MTk2LFwiX3Byb2Nlc3NcIjoxOX1dLDk0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBNb2JpbGVTYWZhcmlDbGlja0V2ZW50UGx1Z2luXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKFwiLi9lbXB0eUZ1bmN0aW9uXCIpO1xuXG52YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG5cbi8qKlxuICogTW9iaWxlIFNhZmFyaSBkb2VzIG5vdCBmaXJlIHByb3Blcmx5IGJ1YmJsZSBjbGljayBldmVudHMgb24gbm9uLWludGVyYWN0aXZlXG4gKiBlbGVtZW50cywgd2hpY2ggbWVhbnMgZGVsZWdhdGVkIGNsaWNrIGxpc3RlbmVycyBkbyBub3QgZmlyZS4gVGhlIHdvcmthcm91bmRcbiAqIGZvciB0aGlzIGJ1ZyBpbnZvbHZlcyBhdHRhY2hpbmcgYW4gZW1wdHkgY2xpY2sgbGlzdGVuZXIgb24gdGhlIHRhcmdldCBub2RlLlxuICpcbiAqIFRoaXMgcGFydGljdWxhciBwbHVnaW4gd29ya3MgYXJvdW5kIHRoZSBidWcgYnkgYXR0YWNoaW5nIGFuIGVtcHR5IGNsaWNrXG4gKiBsaXN0ZW5lciBvbiBgdG91Y2hzdGFydGAgKHdoaWNoIGRvZXMgZmlyZSBvbiBldmVyeSBlbGVtZW50KS5cbiAqL1xudmFyIE1vYmlsZVNhZmFyaUNsaWNrRXZlbnRQbHVnaW4gPSB7XG5cbiAgZXZlbnRUeXBlczogbnVsbCxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAgICogQHJldHVybiB7Kn0gQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHN9XG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbihcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgIG5hdGl2ZUV2ZW50KSB7XG4gICAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BUb3VjaFN0YXJ0KSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gbmF0aXZlRXZlbnQudGFyZ2V0O1xuICAgICAgaWYgKHRhcmdldCAmJiAhdGFyZ2V0Lm9uY2xpY2spIHtcbiAgICAgICAgdGFyZ2V0Lm9uY2xpY2sgPSBlbXB0eUZ1bmN0aW9uO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1vYmlsZVNhZmFyaUNsaWNrRXZlbnRQbHVnaW47XG5cbn0se1wiLi9FdmVudENvbnN0YW50c1wiOjg0LFwiLi9lbXB0eUZ1bmN0aW9uXCI6MTc3fV0sOTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBPYmplY3QuYXNzaWduXG4gKi9cblxuLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLW9iamVjdC5hc3NpZ25cblxuZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlcykge1xuICBpZiAodGFyZ2V0ID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIHRhcmdldCBjYW5ub3QgYmUgbnVsbCBvciB1bmRlZmluZWQnKTtcbiAgfVxuXG4gIHZhciB0byA9IE9iamVjdCh0YXJnZXQpO1xuICB2YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4gIGZvciAodmFyIG5leHRJbmRleCA9IDE7IG5leHRJbmRleCA8IGFyZ3VtZW50cy5sZW5ndGg7IG5leHRJbmRleCsrKSB7XG4gICAgdmFyIG5leHRTb3VyY2UgPSBhcmd1bWVudHNbbmV4dEluZGV4XTtcbiAgICBpZiAobmV4dFNvdXJjZSA9PSBudWxsKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgZnJvbSA9IE9iamVjdChuZXh0U291cmNlKTtcblxuICAgIC8vIFdlIGRvbid0IGN1cnJlbnRseSBzdXBwb3J0IGFjY2Vzc29ycyBub3IgcHJveGllcy4gVGhlcmVmb3JlIHRoaXNcbiAgICAvLyBjb3B5IGNhbm5vdCB0aHJvdy4gSWYgd2UgZXZlciBzdXBwb3J0ZWQgdGhpcyB0aGVuIHdlIG11c3QgaGFuZGxlXG4gICAgLy8gZXhjZXB0aW9ucyBhbmQgc2lkZS1lZmZlY3RzLiBXZSBkb24ndCBzdXBwb3J0IHN5bWJvbHMgc28gdGhleSB3b24ndFxuICAgIC8vIGJlIHRyYW5zZmVycmVkLlxuXG4gICAgZm9yICh2YXIga2V5IGluIGZyb20pIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcbiAgICAgICAgdG9ba2V5XSA9IGZyb21ba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdG87XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc2lnbjtcblxufSx7fV0sOTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBQb29sZWRDbGFzc1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIFN0YXRpYyBwb29sZXJzLiBTZXZlcmFsIGN1c3RvbSB2ZXJzaW9ucyBmb3IgZWFjaCBwb3RlbnRpYWwgbnVtYmVyIG9mXG4gKiBhcmd1bWVudHMuIEEgY29tcGxldGVseSBnZW5lcmljIHBvb2xlciBpcyBlYXN5IHRvIGltcGxlbWVudCwgYnV0IHdvdWxkXG4gKiByZXF1aXJlIGFjY2Vzc2luZyB0aGUgYGFyZ3VtZW50c2Agb2JqZWN0LiBJbiBlYWNoIG9mIHRoZXNlLCBgdGhpc2AgcmVmZXJzIHRvXG4gKiB0aGUgQ2xhc3MgaXRzZWxmLCBub3QgYW4gaW5zdGFuY2UuIElmIGFueSBvdGhlcnMgYXJlIG5lZWRlZCwgc2ltcGx5IGFkZCB0aGVtXG4gKiBoZXJlLCBvciBpbiB0aGVpciBvd24gZmlsZXMuXG4gKi9cbnZhciBvbmVBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uKGNvcHlGaWVsZHNGcm9tKSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGNvcHlGaWVsZHNGcm9tKTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBLbGFzcyhjb3B5RmllbGRzRnJvbSk7XG4gIH1cbn07XG5cbnZhciB0d29Bcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uKGExLCBhMikge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIpO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEtsYXNzKGExLCBhMik7XG4gIH1cbn07XG5cbnZhciB0aHJlZUFyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24oYTEsIGEyLCBhMykge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIsIGEzKTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBLbGFzcyhhMSwgYTIsIGEzKTtcbiAgfVxufTtcblxudmFyIGZpdmVBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uKGExLCBhMiwgYTMsIGE0LCBhNSkge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIsIGEzLCBhNCwgYTUpO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEtsYXNzKGExLCBhMiwgYTMsIGE0LCBhNSk7XG4gIH1cbn07XG5cbnZhciBzdGFuZGFyZFJlbGVhc2VyID0gZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgdmFyIEtsYXNzID0gdGhpcztcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBpbnN0YW5jZSBpbnN0YW5jZW9mIEtsYXNzLFxuICAgICdUcnlpbmcgdG8gcmVsZWFzZSBhbiBpbnN0YW5jZSBpbnRvIGEgcG9vbCBvZiBhIGRpZmZlcmVudCB0eXBlLidcbiAgKSA6IGludmFyaWFudChpbnN0YW5jZSBpbnN0YW5jZW9mIEtsYXNzKSk7XG4gIGlmIChpbnN0YW5jZS5kZXN0cnVjdG9yKSB7XG4gICAgaW5zdGFuY2UuZGVzdHJ1Y3RvcigpO1xuICB9XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoIDwgS2xhc3MucG9vbFNpemUpIHtcbiAgICBLbGFzcy5pbnN0YW5jZVBvb2wucHVzaChpbnN0YW5jZSk7XG4gIH1cbn07XG5cbnZhciBERUZBVUxUX1BPT0xfU0laRSA9IDEwO1xudmFyIERFRkFVTFRfUE9PTEVSID0gb25lQXJndW1lbnRQb29sZXI7XG5cbi8qKlxuICogQXVnbWVudHMgYENvcHlDb25zdHJ1Y3RvcmAgdG8gYmUgYSBwb29sYWJsZSBjbGFzcywgYXVnbWVudGluZyBvbmx5IHRoZSBjbGFzc1xuICogaXRzZWxmIChzdGF0aWNhbGx5KSBub3QgYWRkaW5nIGFueSBwcm90b3R5cGljYWwgZmllbGRzLiBBbnkgQ29weUNvbnN0cnVjdG9yXG4gKiB5b3UgZ2l2ZSB0aGlzIG1heSBoYXZlIGEgYHBvb2xTaXplYCBwcm9wZXJ0eSwgYW5kIHdpbGwgbG9vayBmb3IgYVxuICogcHJvdG90eXBpY2FsIGBkZXN0cnVjdG9yYCBvbiBpbnN0YW5jZXMgKG9wdGlvbmFsKS5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBDb3B5Q29uc3RydWN0b3IgQ29uc3RydWN0b3IgdGhhdCBjYW4gYmUgdXNlZCB0byByZXNldC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHBvb2xlciBDdXN0b21pemFibGUgcG9vbGVyLlxuICovXG52YXIgYWRkUG9vbGluZ1RvID0gZnVuY3Rpb24oQ29weUNvbnN0cnVjdG9yLCBwb29sZXIpIHtcbiAgdmFyIE5ld0tsYXNzID0gQ29weUNvbnN0cnVjdG9yO1xuICBOZXdLbGFzcy5pbnN0YW5jZVBvb2wgPSBbXTtcbiAgTmV3S2xhc3MuZ2V0UG9vbGVkID0gcG9vbGVyIHx8IERFRkFVTFRfUE9PTEVSO1xuICBpZiAoIU5ld0tsYXNzLnBvb2xTaXplKSB7XG4gICAgTmV3S2xhc3MucG9vbFNpemUgPSBERUZBVUxUX1BPT0xfU0laRTtcbiAgfVxuICBOZXdLbGFzcy5yZWxlYXNlID0gc3RhbmRhcmRSZWxlYXNlcjtcbiAgcmV0dXJuIE5ld0tsYXNzO1xufTtcblxudmFyIFBvb2xlZENsYXNzID0ge1xuICBhZGRQb29saW5nVG86IGFkZFBvb2xpbmdUbyxcbiAgb25lQXJndW1lbnRQb29sZXI6IG9uZUFyZ3VtZW50UG9vbGVyLFxuICB0d29Bcmd1bWVudFBvb2xlcjogdHdvQXJndW1lbnRQb29sZXIsXG4gIHRocmVlQXJndW1lbnRQb29sZXI6IHRocmVlQXJndW1lbnRQb29sZXIsXG4gIGZpdmVBcmd1bWVudFBvb2xlcjogZml2ZUFyZ3VtZW50UG9vbGVyXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBvb2xlZENsYXNzO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9pbnZhcmlhbnRcIjoxOTYsXCJfcHJvY2Vzc1wiOjE5fV0sOTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRE9NUHJvcGVydHlPcGVyYXRpb25zID0gcmVxdWlyZShcIi4vRE9NUHJvcGVydHlPcGVyYXRpb25zXCIpO1xudmFyIEV2ZW50UGx1Z2luVXRpbHMgPSByZXF1aXJlKFwiLi9FdmVudFBsdWdpblV0aWxzXCIpO1xudmFyIFJlYWN0Q2hpbGRyZW4gPSByZXF1aXJlKFwiLi9SZWFjdENoaWxkcmVuXCIpO1xudmFyIFJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RDb21wb25lbnRcIik7XG52YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdENvbXBvc2l0ZUNvbXBvbmVudFwiKTtcbnZhciBSZWFjdENvbnRleHQgPSByZXF1aXJlKFwiLi9SZWFjdENvbnRleHRcIik7XG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKFwiLi9SZWFjdEN1cnJlbnRPd25lclwiKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RFbGVtZW50VmFsaWRhdG9yID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50VmFsaWRhdG9yXCIpO1xudmFyIFJlYWN0RE9NID0gcmVxdWlyZShcIi4vUmVhY3RET01cIik7XG52YXIgUmVhY3RET01Db21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdERPTUNvbXBvbmVudFwiKTtcbnZhciBSZWFjdERlZmF1bHRJbmplY3Rpb24gPSByZXF1aXJlKFwiLi9SZWFjdERlZmF1bHRJbmplY3Rpb25cIik7XG52YXIgUmVhY3RJbnN0YW5jZUhhbmRsZXMgPSByZXF1aXJlKFwiLi9SZWFjdEluc3RhbmNlSGFuZGxlc1wiKTtcbnZhciBSZWFjdExlZ2FjeUVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdExlZ2FjeUVsZW1lbnRcIik7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoXCIuL1JlYWN0TW91bnRcIik7XG52YXIgUmVhY3RNdWx0aUNoaWxkID0gcmVxdWlyZShcIi4vUmVhY3RNdWx0aUNoaWxkXCIpO1xudmFyIFJlYWN0UGVyZiA9IHJlcXVpcmUoXCIuL1JlYWN0UGVyZlwiKTtcbnZhciBSZWFjdFByb3BUeXBlcyA9IHJlcXVpcmUoXCIuL1JlYWN0UHJvcFR5cGVzXCIpO1xudmFyIFJlYWN0U2VydmVyUmVuZGVyaW5nID0gcmVxdWlyZShcIi4vUmVhY3RTZXJ2ZXJSZW5kZXJpbmdcIik7XG52YXIgUmVhY3RUZXh0Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RUZXh0Q29tcG9uZW50XCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBkZXByZWNhdGVkID0gcmVxdWlyZShcIi4vZGVwcmVjYXRlZFwiKTtcbnZhciBvbmx5Q2hpbGQgPSByZXF1aXJlKFwiLi9vbmx5Q2hpbGRcIik7XG5cblJlYWN0RGVmYXVsdEluamVjdGlvbi5pbmplY3QoKTtcblxudmFyIGNyZWF0ZUVsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRWxlbWVudDtcbnZhciBjcmVhdGVGYWN0b3J5ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3Rvcnk7XG5cbmlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgY3JlYXRlRWxlbWVudCA9IFJlYWN0RWxlbWVudFZhbGlkYXRvci5jcmVhdGVFbGVtZW50O1xuICBjcmVhdGVGYWN0b3J5ID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNyZWF0ZUZhY3Rvcnk7XG59XG5cbi8vIFRPRE86IERyb3AgbGVnYWN5IGVsZW1lbnRzIG9uY2UgY2xhc3NlcyBubyBsb25nZXIgZXhwb3J0IHRoZXNlIGZhY3Rvcmllc1xuY3JlYXRlRWxlbWVudCA9IFJlYWN0TGVnYWN5RWxlbWVudC53cmFwQ3JlYXRlRWxlbWVudChcbiAgY3JlYXRlRWxlbWVudFxuKTtcbmNyZWF0ZUZhY3RvcnkgPSBSZWFjdExlZ2FjeUVsZW1lbnQud3JhcENyZWF0ZUZhY3RvcnkoXG4gIGNyZWF0ZUZhY3Rvcnlcbik7XG5cbnZhciByZW5kZXIgPSBSZWFjdFBlcmYubWVhc3VyZSgnUmVhY3QnLCAncmVuZGVyJywgUmVhY3RNb3VudC5yZW5kZXIpO1xuXG52YXIgUmVhY3QgPSB7XG4gIENoaWxkcmVuOiB7XG4gICAgbWFwOiBSZWFjdENoaWxkcmVuLm1hcCxcbiAgICBmb3JFYWNoOiBSZWFjdENoaWxkcmVuLmZvckVhY2gsXG4gICAgY291bnQ6IFJlYWN0Q2hpbGRyZW4uY291bnQsXG4gICAgb25seTogb25seUNoaWxkXG4gIH0sXG4gIERPTTogUmVhY3RET00sXG4gIFByb3BUeXBlczogUmVhY3RQcm9wVHlwZXMsXG4gIGluaXRpYWxpemVUb3VjaEV2ZW50czogZnVuY3Rpb24oc2hvdWxkVXNlVG91Y2gpIHtcbiAgICBFdmVudFBsdWdpblV0aWxzLnVzZVRvdWNoRXZlbnRzID0gc2hvdWxkVXNlVG91Y2g7XG4gIH0sXG4gIGNyZWF0ZUNsYXNzOiBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudC5jcmVhdGVDbGFzcyxcbiAgY3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudCxcbiAgY3JlYXRlRmFjdG9yeTogY3JlYXRlRmFjdG9yeSxcbiAgY29uc3RydWN0QW5kUmVuZGVyQ29tcG9uZW50OiBSZWFjdE1vdW50LmNvbnN0cnVjdEFuZFJlbmRlckNvbXBvbmVudCxcbiAgY29uc3RydWN0QW5kUmVuZGVyQ29tcG9uZW50QnlJRDogUmVhY3RNb3VudC5jb25zdHJ1Y3RBbmRSZW5kZXJDb21wb25lbnRCeUlELFxuICByZW5kZXI6IHJlbmRlcixcbiAgcmVuZGVyVG9TdHJpbmc6IFJlYWN0U2VydmVyUmVuZGVyaW5nLnJlbmRlclRvU3RyaW5nLFxuICByZW5kZXJUb1N0YXRpY01hcmt1cDogUmVhY3RTZXJ2ZXJSZW5kZXJpbmcucmVuZGVyVG9TdGF0aWNNYXJrdXAsXG4gIHVubW91bnRDb21wb25lbnRBdE5vZGU6IFJlYWN0TW91bnQudW5tb3VudENvbXBvbmVudEF0Tm9kZSxcbiAgaXNWYWxpZENsYXNzOiBSZWFjdExlZ2FjeUVsZW1lbnQuaXNWYWxpZENsYXNzLFxuICBpc1ZhbGlkRWxlbWVudDogUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50LFxuICB3aXRoQ29udGV4dDogUmVhY3RDb250ZXh0LndpdGhDb250ZXh0LFxuXG4gIC8vIEhvb2sgZm9yIEpTWCBzcHJlYWQsIGRvbid0IHVzZSB0aGlzIGZvciBhbnl0aGluZyBlbHNlLlxuICBfX3NwcmVhZDogYXNzaWduLFxuXG4gIC8vIERlcHJlY2F0aW9ucyAocmVtb3ZlIGZvciAwLjEzKVxuICByZW5kZXJDb21wb25lbnQ6IGRlcHJlY2F0ZWQoXG4gICAgJ1JlYWN0JyxcbiAgICAncmVuZGVyQ29tcG9uZW50JyxcbiAgICAncmVuZGVyJyxcbiAgICB0aGlzLFxuICAgIHJlbmRlclxuICApLFxuICByZW5kZXJDb21wb25lbnRUb1N0cmluZzogZGVwcmVjYXRlZChcbiAgICAnUmVhY3QnLFxuICAgICdyZW5kZXJDb21wb25lbnRUb1N0cmluZycsXG4gICAgJ3JlbmRlclRvU3RyaW5nJyxcbiAgICB0aGlzLFxuICAgIFJlYWN0U2VydmVyUmVuZGVyaW5nLnJlbmRlclRvU3RyaW5nXG4gICksXG4gIHJlbmRlckNvbXBvbmVudFRvU3RhdGljTWFya3VwOiBkZXByZWNhdGVkKFxuICAgICdSZWFjdCcsXG4gICAgJ3JlbmRlckNvbXBvbmVudFRvU3RhdGljTWFya3VwJyxcbiAgICAncmVuZGVyVG9TdGF0aWNNYXJrdXAnLFxuICAgIHRoaXMsXG4gICAgUmVhY3RTZXJ2ZXJSZW5kZXJpbmcucmVuZGVyVG9TdGF0aWNNYXJrdXBcbiAgKSxcbiAgaXNWYWxpZENvbXBvbmVudDogZGVwcmVjYXRlZChcbiAgICAnUmVhY3QnLFxuICAgICdpc1ZhbGlkQ29tcG9uZW50JyxcbiAgICAnaXNWYWxpZEVsZW1lbnQnLFxuICAgIHRoaXMsXG4gICAgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50XG4gIClcbn07XG5cbi8vIEluamVjdCB0aGUgcnVudGltZSBpbnRvIGEgZGV2dG9vbHMgZ2xvYmFsIGhvb2sgcmVnYXJkbGVzcyBvZiBicm93c2VyLlxuLy8gQWxsb3dzIGZvciBkZWJ1Z2dpbmcgd2hlbiB0aGUgaG9vayBpcyBpbmplY3RlZCBvbiB0aGUgcGFnZS5cbmlmIChcbiAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5pbmplY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmluamVjdCh7XG4gICAgQ29tcG9uZW50OiBSZWFjdENvbXBvbmVudCxcbiAgICBDdXJyZW50T3duZXI6IFJlYWN0Q3VycmVudE93bmVyLFxuICAgIERPTUNvbXBvbmVudDogUmVhY3RET01Db21wb25lbnQsXG4gICAgRE9NUHJvcGVydHlPcGVyYXRpb25zOiBET01Qcm9wZXJ0eU9wZXJhdGlvbnMsXG4gICAgSW5zdGFuY2VIYW5kbGVzOiBSZWFjdEluc3RhbmNlSGFuZGxlcyxcbiAgICBNb3VudDogUmVhY3RNb3VudCxcbiAgICBNdWx0aUNoaWxkOiBSZWFjdE11bHRpQ2hpbGQsXG4gICAgVGV4dENvbXBvbmVudDogUmVhY3RUZXh0Q29tcG9uZW50XG4gIH0pO1xufVxuXG5pZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gIHZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xuICBpZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmIHdpbmRvdy50b3AgPT09IHdpbmRvdy5zZWxmKSB7XG5cbiAgICAvLyBJZiB3ZSdyZSBpbiBDaHJvbWUsIGxvb2sgZm9yIHRoZSBkZXZ0b29scyBtYXJrZXIgYW5kIHByb3ZpZGUgYSBkb3dubG9hZFxuICAgIC8vIGxpbmsgaWYgbm90IGluc3RhbGxlZC5cbiAgICBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUnKSA+IC0xKSB7XG4gICAgICBpZiAodHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhcbiAgICAgICAgICAnRG93bmxvYWQgdGhlIFJlYWN0IERldlRvb2xzIGZvciBhIGJldHRlciBkZXZlbG9wbWVudCBleHBlcmllbmNlOiAnICtcbiAgICAgICAgICAnaHR0cDovL2ZiLm1lL3JlYWN0LWRldnRvb2xzJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBleHBlY3RlZEZlYXR1cmVzID0gW1xuICAgICAgLy8gc2hpbXNcbiAgICAgIEFycmF5LmlzQXJyYXksXG4gICAgICBBcnJheS5wcm90b3R5cGUuZXZlcnksXG4gICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaCxcbiAgICAgIEFycmF5LnByb3RvdHlwZS5pbmRleE9mLFxuICAgICAgQXJyYXkucHJvdG90eXBlLm1hcCxcbiAgICAgIERhdGUubm93LFxuICAgICAgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQsXG4gICAgICBPYmplY3Qua2V5cyxcbiAgICAgIFN0cmluZy5wcm90b3R5cGUuc3BsaXQsXG4gICAgICBTdHJpbmcucHJvdG90eXBlLnRyaW0sXG5cbiAgICAgIC8vIHNoYW1zXG4gICAgICBPYmplY3QuY3JlYXRlLFxuICAgICAgT2JqZWN0LmZyZWV6ZVxuICAgIF07XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4cGVjdGVkRmVhdHVyZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghZXhwZWN0ZWRGZWF0dXJlc1tpXSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICdPbmUgb3IgbW9yZSBFUzUgc2hpbS9zaGFtcyBleHBlY3RlZCBieSBSZWFjdCBhcmUgbm90IGF2YWlsYWJsZTogJyArXG4gICAgICAgICAgJ2h0dHA6Ly9mYi5tZS9yZWFjdC13YXJuaW5nLXBvbHlmaWxscydcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIFZlcnNpb24gZXhpc3RzIG9ubHkgaW4gdGhlIG9wZW4tc291cmNlIHZlcnNpb24gb2YgUmVhY3QsIG5vdCBpbiBGYWNlYm9vaydzXG4vLyBpbnRlcm5hbCB2ZXJzaW9uLlxuUmVhY3QudmVyc2lvbiA9ICcwLjEyLjInO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnNcIjo4MCxcIi4vRXZlbnRQbHVnaW5VdGlsc1wiOjg4LFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOjkwLFwiLi9PYmplY3QuYXNzaWduXCI6OTUsXCIuL1JlYWN0Q2hpbGRyZW5cIjoxMDAsXCIuL1JlYWN0Q29tcG9uZW50XCI6MTAxLFwiLi9SZWFjdENvbXBvc2l0ZUNvbXBvbmVudFwiOjEwMyxcIi4vUmVhY3RDb250ZXh0XCI6MTA0LFwiLi9SZWFjdEN1cnJlbnRPd25lclwiOjEwNSxcIi4vUmVhY3RET01cIjoxMDYsXCIuL1JlYWN0RE9NQ29tcG9uZW50XCI6MTA4LFwiLi9SZWFjdERlZmF1bHRJbmplY3Rpb25cIjoxMTgsXCIuL1JlYWN0RWxlbWVudFwiOjEyMSxcIi4vUmVhY3RFbGVtZW50VmFsaWRhdG9yXCI6MTIyLFwiLi9SZWFjdEluc3RhbmNlSGFuZGxlc1wiOjEyOSxcIi4vUmVhY3RMZWdhY3lFbGVtZW50XCI6MTMwLFwiLi9SZWFjdE1vdW50XCI6MTMyLFwiLi9SZWFjdE11bHRpQ2hpbGRcIjoxMzMsXCIuL1JlYWN0UGVyZlwiOjEzNyxcIi4vUmVhY3RQcm9wVHlwZXNcIjoxNDEsXCIuL1JlYWN0U2VydmVyUmVuZGVyaW5nXCI6MTQ1LFwiLi9SZWFjdFRleHRDb21wb25lbnRcIjoxNDcsXCIuL2RlcHJlY2F0ZWRcIjoxNzYsXCIuL29ubHlDaGlsZFwiOjIwNyxcIl9wcm9jZXNzXCI6MTl9XSw5ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSZWFjdEVtcHR5Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbXB0eUNvbXBvbmVudFwiKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZShcIi4vUmVhY3RNb3VudFwiKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxudmFyIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluID0ge1xuICAvKipcbiAgICogUmV0dXJucyB0aGUgRE9NIG5vZGUgcmVuZGVyZWQgYnkgdGhpcyBjb21wb25lbnQuXG4gICAqXG4gICAqIEByZXR1cm4ge0RPTUVsZW1lbnR9IFRoZSByb290IG5vZGUgb2YgdGhpcyBjb21wb25lbnQuXG4gICAqIEBmaW5hbFxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBnZXRET01Ob2RlOiBmdW5jdGlvbigpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgdGhpcy5pc01vdW50ZWQoKSxcbiAgICAgICdnZXRET01Ob2RlKCk6IEEgY29tcG9uZW50IG11c3QgYmUgbW91bnRlZCB0byBoYXZlIGEgRE9NIG5vZGUuJ1xuICAgICkgOiBpbnZhcmlhbnQodGhpcy5pc01vdW50ZWQoKSkpO1xuICAgIGlmIChSZWFjdEVtcHR5Q29tcG9uZW50LmlzTnVsbENvbXBvbmVudElEKHRoaXMuX3Jvb3ROb2RlSUQpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIFJlYWN0TW91bnQuZ2V0Tm9kZSh0aGlzLl9yb290Tm9kZUlEKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbjtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vUmVhY3RFbXB0eUNvbXBvbmVudFwiOjEyMyxcIi4vUmVhY3RNb3VudFwiOjEzMixcIi4vaW52YXJpYW50XCI6MTk2LFwiX3Byb2Nlc3NcIjoxOX1dLDk5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoXCIuL0V2ZW50Q29uc3RhbnRzXCIpO1xudmFyIEV2ZW50UGx1Z2luSHViID0gcmVxdWlyZShcIi4vRXZlbnRQbHVnaW5IdWJcIik7XG52YXIgRXZlbnRQbHVnaW5SZWdpc3RyeSA9IHJlcXVpcmUoXCIuL0V2ZW50UGx1Z2luUmVnaXN0cnlcIik7XG52YXIgUmVhY3RFdmVudEVtaXR0ZXJNaXhpbiA9IHJlcXVpcmUoXCIuL1JlYWN0RXZlbnRFbWl0dGVyTWl4aW5cIik7XG52YXIgVmlld3BvcnRNZXRyaWNzID0gcmVxdWlyZShcIi4vVmlld3BvcnRNZXRyaWNzXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBpc0V2ZW50U3VwcG9ydGVkID0gcmVxdWlyZShcIi4vaXNFdmVudFN1cHBvcnRlZFwiKTtcblxuLyoqXG4gKiBTdW1tYXJ5IG9mIGBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJgIGV2ZW50IGhhbmRsaW5nOlxuICpcbiAqICAtIFRvcC1sZXZlbCBkZWxlZ2F0aW9uIGlzIHVzZWQgdG8gdHJhcCBtb3N0IG5hdGl2ZSBicm93c2VyIGV2ZW50cy4gVGhpc1xuICogICAgbWF5IG9ubHkgb2NjdXIgaW4gdGhlIG1haW4gdGhyZWFkIGFuZCBpcyB0aGUgcmVzcG9uc2liaWxpdHkgb2ZcbiAqICAgIFJlYWN0RXZlbnRMaXN0ZW5lciwgd2hpY2ggaXMgaW5qZWN0ZWQgYW5kIGNhbiB0aGVyZWZvcmUgc3VwcG9ydCBwbHVnZ2FibGVcbiAqICAgIGV2ZW50IHNvdXJjZXMuIFRoaXMgaXMgdGhlIG9ubHkgd29yayB0aGF0IG9jY3VycyBpbiB0aGUgbWFpbiB0aHJlYWQuXG4gKlxuICogIC0gV2Ugbm9ybWFsaXplIGFuZCBkZS1kdXBsaWNhdGUgZXZlbnRzIHRvIGFjY291bnQgZm9yIGJyb3dzZXIgcXVpcmtzLiBUaGlzXG4gKiAgICBtYXkgYmUgZG9uZSBpbiB0aGUgd29ya2VyIHRocmVhZC5cbiAqXG4gKiAgLSBGb3J3YXJkIHRoZXNlIG5hdGl2ZSBldmVudHMgKHdpdGggdGhlIGFzc29jaWF0ZWQgdG9wLWxldmVsIHR5cGUgdXNlZCB0b1xuICogICAgdHJhcCBpdCkgdG8gYEV2ZW50UGx1Z2luSHViYCwgd2hpY2ggaW4gdHVybiB3aWxsIGFzayBwbHVnaW5zIGlmIHRoZXkgd2FudFxuICogICAgdG8gZXh0cmFjdCBhbnkgc3ludGhldGljIGV2ZW50cy5cbiAqXG4gKiAgLSBUaGUgYEV2ZW50UGx1Z2luSHViYCB3aWxsIHRoZW4gcHJvY2VzcyBlYWNoIGV2ZW50IGJ5IGFubm90YXRpbmcgdGhlbSB3aXRoXG4gKiAgICBcImRpc3BhdGNoZXNcIiwgYSBzZXF1ZW5jZSBvZiBsaXN0ZW5lcnMgYW5kIElEcyB0aGF0IGNhcmUgYWJvdXQgdGhhdCBldmVudC5cbiAqXG4gKiAgLSBUaGUgYEV2ZW50UGx1Z2luSHViYCB0aGVuIGRpc3BhdGNoZXMgdGhlIGV2ZW50cy5cbiAqXG4gKiBPdmVydmlldyBvZiBSZWFjdCBhbmQgdGhlIGV2ZW50IHN5c3RlbTpcbiAqXG4gKiArLS0tLS0tLS0tLS0tKyAgICAuXG4gKiB8ICAgIERPTSAgICAgfCAgICAuXG4gKiArLS0tLS0tLS0tLS0tKyAgICAuXG4gKiAgICAgICB8ICAgICAgICAgICAuXG4gKiAgICAgICB2ICAgICAgICAgICAuXG4gKiArLS0tLS0tLS0tLS0tKyAgICAuXG4gKiB8IFJlYWN0RXZlbnQgfCAgICAuXG4gKiB8ICBMaXN0ZW5lciAgfCAgICAuXG4gKiArLS0tLS0tLS0tLS0tKyAgICAuICAgICAgICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLStcbiAqICAgICAgIHwgICAgICAgICAgIC4gICAgICAgICAgICAgICArLS0tLS0tLS0rfFNpbXBsZUV2ZW50fFxuICogICAgICAgfCAgICAgICAgICAgLiAgICAgICAgICAgICAgIHwgICAgICAgICB8UGx1Z2luICAgICB8XG4gKiArLS0tLS18LS0tLS0tKyAgICAuICAgICAgICAgICAgICAgdiAgICAgICAgICstLS0tLS0tLS0tLStcbiAqIHwgICAgIHwgICAgICB8ICAgIC4gICAgKy0tLS0tLS0tLS0tLS0tKyAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tLStcbiAqIHwgICAgICstLS0tLS0tLS0tLS4tLS0+fEV2ZW50UGx1Z2luSHVifCAgICAgICAgICAgICAgICAgICAgfCAgICBFdmVudCAgIHxcbiAqIHwgICAgICAgICAgICB8ICAgIC4gICAgfCAgICAgICAgICAgICAgfCAgICAgKy0tLS0tLS0tLS0tKyAgfCBQcm9wYWdhdG9yc3xcbiAqIHwgUmVhY3RFdmVudCB8ICAgIC4gICAgfCAgICAgICAgICAgICAgfCAgICAgfFRhcEV2ZW50ICAgfCAgfC0tLS0tLS0tLS0tLXxcbiAqIHwgIEVtaXR0ZXIgICB8ICAgIC4gICAgfCAgICAgICAgICAgICAgfDwtLS0rfFBsdWdpbiAgICAgfCAgfG90aGVyIHBsdWdpbnxcbiAqIHwgICAgICAgICAgICB8ICAgIC4gICAgfCAgICAgICAgICAgICAgfCAgICAgKy0tLS0tLS0tLS0tKyAgfCAgdXRpbGl0aWVzIHxcbiAqIHwgICAgICstLS0tLS0tLS0tLS4tLS0+fCAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tLStcbiAqIHwgICAgIHwgICAgICB8ICAgIC4gICAgKy0tLS0tLS0tLS0tLS0tK1xuICogKy0tLS0tfC0tLS0tLSsgICAgLiAgICAgICAgICAgICAgICBeICAgICAgICArLS0tLS0tLS0tLS0rXG4gKiAgICAgICB8ICAgICAgICAgICAuICAgICAgICAgICAgICAgIHwgICAgICAgIHxFbnRlci9MZWF2ZXxcbiAqICAgICAgICsgICAgICAgICAgIC4gICAgICAgICAgICAgICAgKy0tLS0tLS0rfFBsdWdpbiAgICAgfFxuICogKy0tLS0tLS0tLS0tLS0rICAgLiAgICAgICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0rXG4gKiB8IGFwcGxpY2F0aW9uIHwgICAuXG4gKiB8LS0tLS0tLS0tLS0tLXwgICAuXG4gKiB8ICAgICAgICAgICAgIHwgICAuXG4gKiB8ICAgICAgICAgICAgIHwgICAuXG4gKiArLS0tLS0tLS0tLS0tLSsgICAuXG4gKiAgICAgICAgICAgICAgICAgICAuXG4gKiAgICBSZWFjdCBDb3JlICAgICAuICBHZW5lcmFsIFB1cnBvc2UgRXZlbnQgUGx1Z2luIFN5c3RlbVxuICovXG5cbnZhciBhbHJlYWR5TGlzdGVuaW5nVG8gPSB7fTtcbnZhciBpc01vbml0b3JpbmdTY3JvbGxWYWx1ZSA9IGZhbHNlO1xudmFyIHJlYWN0VG9wTGlzdGVuZXJzQ291bnRlciA9IDA7XG5cbi8vIEZvciBldmVudHMgbGlrZSAnc3VibWl0JyB3aGljaCBkb24ndCBjb25zaXN0ZW50bHkgYnViYmxlICh3aGljaCB3ZSB0cmFwIGF0IGFcbi8vIGxvd2VyIG5vZGUgdGhhbiBgZG9jdW1lbnRgKSwgYmluZGluZyBhdCBgZG9jdW1lbnRgIHdvdWxkIGNhdXNlIGR1cGxpY2F0ZVxuLy8gZXZlbnRzIHNvIHdlIGRvbid0IGluY2x1ZGUgdGhlbSBoZXJlXG52YXIgdG9wRXZlbnRNYXBwaW5nID0ge1xuICB0b3BCbHVyOiAnYmx1cicsXG4gIHRvcENoYW5nZTogJ2NoYW5nZScsXG4gIHRvcENsaWNrOiAnY2xpY2snLFxuICB0b3BDb21wb3NpdGlvbkVuZDogJ2NvbXBvc2l0aW9uZW5kJyxcbiAgdG9wQ29tcG9zaXRpb25TdGFydDogJ2NvbXBvc2l0aW9uc3RhcnQnLFxuICB0b3BDb21wb3NpdGlvblVwZGF0ZTogJ2NvbXBvc2l0aW9udXBkYXRlJyxcbiAgdG9wQ29udGV4dE1lbnU6ICdjb250ZXh0bWVudScsXG4gIHRvcENvcHk6ICdjb3B5JyxcbiAgdG9wQ3V0OiAnY3V0JyxcbiAgdG9wRG91YmxlQ2xpY2s6ICdkYmxjbGljaycsXG4gIHRvcERyYWc6ICdkcmFnJyxcbiAgdG9wRHJhZ0VuZDogJ2RyYWdlbmQnLFxuICB0b3BEcmFnRW50ZXI6ICdkcmFnZW50ZXInLFxuICB0b3BEcmFnRXhpdDogJ2RyYWdleGl0JyxcbiAgdG9wRHJhZ0xlYXZlOiAnZHJhZ2xlYXZlJyxcbiAgdG9wRHJhZ092ZXI6ICdkcmFnb3ZlcicsXG4gIHRvcERyYWdTdGFydDogJ2RyYWdzdGFydCcsXG4gIHRvcERyb3A6ICdkcm9wJyxcbiAgdG9wRm9jdXM6ICdmb2N1cycsXG4gIHRvcElucHV0OiAnaW5wdXQnLFxuICB0b3BLZXlEb3duOiAna2V5ZG93bicsXG4gIHRvcEtleVByZXNzOiAna2V5cHJlc3MnLFxuICB0b3BLZXlVcDogJ2tleXVwJyxcbiAgdG9wTW91c2VEb3duOiAnbW91c2Vkb3duJyxcbiAgdG9wTW91c2VNb3ZlOiAnbW91c2Vtb3ZlJyxcbiAgdG9wTW91c2VPdXQ6ICdtb3VzZW91dCcsXG4gIHRvcE1vdXNlT3ZlcjogJ21vdXNlb3ZlcicsXG4gIHRvcE1vdXNlVXA6ICdtb3VzZXVwJyxcbiAgdG9wUGFzdGU6ICdwYXN0ZScsXG4gIHRvcFNjcm9sbDogJ3Njcm9sbCcsXG4gIHRvcFNlbGVjdGlvbkNoYW5nZTogJ3NlbGVjdGlvbmNoYW5nZScsXG4gIHRvcFRleHRJbnB1dDogJ3RleHRJbnB1dCcsXG4gIHRvcFRvdWNoQ2FuY2VsOiAndG91Y2hjYW5jZWwnLFxuICB0b3BUb3VjaEVuZDogJ3RvdWNoZW5kJyxcbiAgdG9wVG91Y2hNb3ZlOiAndG91Y2htb3ZlJyxcbiAgdG9wVG91Y2hTdGFydDogJ3RvdWNoc3RhcnQnLFxuICB0b3BXaGVlbDogJ3doZWVsJ1xufTtcblxuLyoqXG4gKiBUbyBlbnN1cmUgbm8gY29uZmxpY3RzIHdpdGggb3RoZXIgcG90ZW50aWFsIFJlYWN0IGluc3RhbmNlcyBvbiB0aGUgcGFnZVxuICovXG52YXIgdG9wTGlzdGVuZXJzSURLZXkgPSBcIl9yZWFjdExpc3RlbmVyc0lEXCIgKyBTdHJpbmcoTWF0aC5yYW5kb20oKSkuc2xpY2UoMik7XG5cbmZ1bmN0aW9uIGdldExpc3RlbmluZ0ZvckRvY3VtZW50KG1vdW50QXQpIHtcbiAgLy8gSW4gSUU4LCBgbW91bnRBdGAgaXMgYSBob3N0IG9iamVjdCBhbmQgZG9lc24ndCBoYXZlIGBoYXNPd25Qcm9wZXJ0eWBcbiAgLy8gZGlyZWN0bHkuXG4gIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vdW50QXQsIHRvcExpc3RlbmVyc0lES2V5KSkge1xuICAgIG1vdW50QXRbdG9wTGlzdGVuZXJzSURLZXldID0gcmVhY3RUb3BMaXN0ZW5lcnNDb3VudGVyKys7XG4gICAgYWxyZWFkeUxpc3RlbmluZ1RvW21vdW50QXRbdG9wTGlzdGVuZXJzSURLZXldXSA9IHt9O1xuICB9XG4gIHJldHVybiBhbHJlYWR5TGlzdGVuaW5nVG9bbW91bnRBdFt0b3BMaXN0ZW5lcnNJREtleV1dO1xufVxuXG4vKipcbiAqIGBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJgIGlzIHVzZWQgdG8gYXR0YWNoIHRvcC1sZXZlbCBldmVudCBsaXN0ZW5lcnMuIEZvclxuICogZXhhbXBsZTpcbiAqXG4gKiAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5wdXRMaXN0ZW5lcignbXlJRCcsICdvbkNsaWNrJywgbXlGdW5jdGlvbik7XG4gKlxuICogVGhpcyB3b3VsZCBhbGxvY2F0ZSBhIFwicmVnaXN0cmF0aW9uXCIgb2YgYCgnb25DbGljaycsIG15RnVuY3Rpb24pYCBvbiAnbXlJRCcuXG4gKlxuICogQGludGVybmFsXG4gKi9cbnZhciBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIgPSBhc3NpZ24oe30sIFJlYWN0RXZlbnRFbWl0dGVyTWl4aW4sIHtcblxuICAvKipcbiAgICogSW5qZWN0YWJsZSBldmVudCBiYWNrZW5kXG4gICAqL1xuICBSZWFjdEV2ZW50TGlzdGVuZXI6IG51bGwsXG5cbiAgaW5qZWN0aW9uOiB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFJlYWN0RXZlbnRMaXN0ZW5lclxuICAgICAqL1xuICAgIGluamVjdFJlYWN0RXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24oUmVhY3RFdmVudExpc3RlbmVyKSB7XG4gICAgICBSZWFjdEV2ZW50TGlzdGVuZXIuc2V0SGFuZGxlVG9wTGV2ZWwoXG4gICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5oYW5kbGVUb3BMZXZlbFxuICAgICAgKTtcbiAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIgPSBSZWFjdEV2ZW50TGlzdGVuZXI7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIHdoZXRoZXIgb3Igbm90IGFueSBjcmVhdGVkIGNhbGxiYWNrcyBzaG91bGQgYmUgZW5hYmxlZC5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBlbmFibGVkIFRydWUgaWYgY2FsbGJhY2tzIHNob3VsZCBiZSBlbmFibGVkLlxuICAgKi9cbiAgc2V0RW5hYmxlZDogZnVuY3Rpb24oZW5hYmxlZCkge1xuICAgIGlmIChSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyKSB7XG4gICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnNldEVuYWJsZWQoZW5hYmxlZCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGNhbGxiYWNrcyBhcmUgZW5hYmxlZC5cbiAgICovXG4gIGlzRW5hYmxlZDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICEhKFxuICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lciAmJlxuICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci5pc0VuYWJsZWQoKVxuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFdlIGxpc3RlbiBmb3IgYnViYmxlZCB0b3VjaCBldmVudHMgb24gdGhlIGRvY3VtZW50IG9iamVjdC5cbiAgICpcbiAgICogRmlyZWZveCB2OC4wMSAoYW5kIHBvc3NpYmx5IG90aGVycykgZXhoaWJpdGVkIHN0cmFuZ2UgYmVoYXZpb3Igd2hlblxuICAgKiBtb3VudGluZyBgb25tb3VzZW1vdmVgIGV2ZW50cyBhdCBzb21lIG5vZGUgdGhhdCB3YXMgbm90IHRoZSBkb2N1bWVudFxuICAgKiBlbGVtZW50LiBUaGUgc3ltcHRvbXMgd2VyZSB0aGF0IGlmIHlvdXIgbW91c2UgaXMgbm90IG1vdmluZyBvdmVyIHNvbWV0aGluZ1xuICAgKiBjb250YWluZWQgd2l0aGluIHRoYXQgbW91bnQgcG9pbnQgKGZvciBleGFtcGxlIG9uIHRoZSBiYWNrZ3JvdW5kKSB0aGVcbiAgICogdG9wLWxldmVsIGxpc3RlbmVycyBmb3IgYG9ubW91c2Vtb3ZlYCB3b24ndCBiZSBjYWxsZWQuIEhvd2V2ZXIsIGlmIHlvdVxuICAgKiByZWdpc3RlciB0aGUgYG1vdXNlbW92ZWAgb24gdGhlIGRvY3VtZW50IG9iamVjdCwgdGhlbiBpdCB3aWxsIG9mIGNvdXJzZVxuICAgKiBjYXRjaCBhbGwgYG1vdXNlbW92ZWBzLiBUaGlzIGFsb25nIHdpdGggaU9TIHF1aXJrcywganVzdGlmaWVzIHJlc3RyaWN0aW5nXG4gICAqIHRvcC1sZXZlbCBsaXN0ZW5lcnMgdG8gdGhlIGRvY3VtZW50IG9iamVjdCBvbmx5LCBhdCBsZWFzdCBmb3IgdGhlc2VcbiAgICogbW92ZW1lbnQgdHlwZXMgb2YgZXZlbnRzIGFuZCBwb3NzaWJseSBhbGwgZXZlbnRzLlxuICAgKlxuICAgKiBAc2VlIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDEwLzA5L2NsaWNrX2V2ZW50X2RlbC5odG1sXG4gICAqXG4gICAqIEFsc28sIGBrZXl1cGAvYGtleXByZXNzYC9ga2V5ZG93bmAgZG8gbm90IGJ1YmJsZSB0byB0aGUgd2luZG93IG9uIElFLCBidXRcbiAgICogdGhleSBidWJibGUgdG8gZG9jdW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIE5hbWUgb2YgbGlzdGVuZXIgKGUuZy4gYG9uQ2xpY2tgKS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRlbnREb2N1bWVudEhhbmRsZSBEb2N1bWVudCB3aGljaCBvd25zIHRoZSBjb250YWluZXJcbiAgICovXG4gIGxpc3RlblRvOiBmdW5jdGlvbihyZWdpc3RyYXRpb25OYW1lLCBjb250ZW50RG9jdW1lbnRIYW5kbGUpIHtcbiAgICB2YXIgbW91bnRBdCA9IGNvbnRlbnREb2N1bWVudEhhbmRsZTtcbiAgICB2YXIgaXNMaXN0ZW5pbmcgPSBnZXRMaXN0ZW5pbmdGb3JEb2N1bWVudChtb3VudEF0KTtcbiAgICB2YXIgZGVwZW5kZW5jaWVzID0gRXZlbnRQbHVnaW5SZWdpc3RyeS5cbiAgICAgIHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXNbcmVnaXN0cmF0aW9uTmFtZV07XG5cbiAgICB2YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBkZXBlbmRlbmNpZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgZGVwZW5kZW5jeSA9IGRlcGVuZGVuY2llc1tpXTtcbiAgICAgIGlmICghKFxuICAgICAgICAgICAgaXNMaXN0ZW5pbmcuaGFzT3duUHJvcGVydHkoZGVwZW5kZW5jeSkgJiZcbiAgICAgICAgICAgIGlzTGlzdGVuaW5nW2RlcGVuZGVuY3ldXG4gICAgICAgICAgKSkge1xuICAgICAgICBpZiAoZGVwZW5kZW5jeSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BXaGVlbCkge1xuICAgICAgICAgIGlmIChpc0V2ZW50U3VwcG9ydGVkKCd3aGVlbCcpKSB7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoXG4gICAgICAgICAgICAgIHRvcExldmVsVHlwZXMudG9wV2hlZWwsXG4gICAgICAgICAgICAgICd3aGVlbCcsXG4gICAgICAgICAgICAgIG1vdW50QXRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIGlmIChpc0V2ZW50U3VwcG9ydGVkKCdtb3VzZXdoZWVsJykpIHtcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudChcbiAgICAgICAgICAgICAgdG9wTGV2ZWxUeXBlcy50b3BXaGVlbCxcbiAgICAgICAgICAgICAgJ21vdXNld2hlZWwnLFxuICAgICAgICAgICAgICBtb3VudEF0XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBGaXJlZm94IG5lZWRzIHRvIGNhcHR1cmUgYSBkaWZmZXJlbnQgbW91c2Ugc2Nyb2xsIGV2ZW50LlxuICAgICAgICAgICAgLy8gQHNlZSBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2RvbS9ldmVudHMvdGVzdHMvc2Nyb2xsLmh0bWxcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudChcbiAgICAgICAgICAgICAgdG9wTGV2ZWxUeXBlcy50b3BXaGVlbCxcbiAgICAgICAgICAgICAgJ0RPTU1vdXNlU2Nyb2xsJyxcbiAgICAgICAgICAgICAgbW91bnRBdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZGVwZW5kZW5jeSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BTY3JvbGwpIHtcblxuICAgICAgICAgIGlmIChpc0V2ZW50U3VwcG9ydGVkKCdzY3JvbGwnLCB0cnVlKSkge1xuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQ2FwdHVyZWRFdmVudChcbiAgICAgICAgICAgICAgdG9wTGV2ZWxUeXBlcy50b3BTY3JvbGwsXG4gICAgICAgICAgICAgICdzY3JvbGwnLFxuICAgICAgICAgICAgICBtb3VudEF0XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoXG4gICAgICAgICAgICAgIHRvcExldmVsVHlwZXMudG9wU2Nyb2xsLFxuICAgICAgICAgICAgICAnc2Nyb2xsJyxcbiAgICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci5XSU5ET1dfSEFORExFXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChkZXBlbmRlbmN5ID09PSB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzIHx8XG4gICAgICAgICAgICBkZXBlbmRlbmN5ID09PSB0b3BMZXZlbFR5cGVzLnRvcEJsdXIpIHtcblxuICAgICAgICAgIGlmIChpc0V2ZW50U3VwcG9ydGVkKCdmb2N1cycsIHRydWUpKSB7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBDYXB0dXJlZEV2ZW50KFxuICAgICAgICAgICAgICB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzLFxuICAgICAgICAgICAgICAnZm9jdXMnLFxuICAgICAgICAgICAgICBtb3VudEF0XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQ2FwdHVyZWRFdmVudChcbiAgICAgICAgICAgICAgdG9wTGV2ZWxUeXBlcy50b3BCbHVyLFxuICAgICAgICAgICAgICAnYmx1cicsXG4gICAgICAgICAgICAgIG1vdW50QXRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIGlmIChpc0V2ZW50U3VwcG9ydGVkKCdmb2N1c2luJykpIHtcbiAgICAgICAgICAgIC8vIElFIGhhcyBgZm9jdXNpbmAgYW5kIGBmb2N1c291dGAgZXZlbnRzIHdoaWNoIGJ1YmJsZS5cbiAgICAgICAgICAgIC8vIEBzZWUgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMDgvMDQvZGVsZWdhdGluZ190aGUuaHRtbFxuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KFxuICAgICAgICAgICAgICB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzLFxuICAgICAgICAgICAgICAnZm9jdXNpbicsXG4gICAgICAgICAgICAgIG1vdW50QXRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoXG4gICAgICAgICAgICAgIHRvcExldmVsVHlwZXMudG9wQmx1cixcbiAgICAgICAgICAgICAgJ2ZvY3Vzb3V0JyxcbiAgICAgICAgICAgICAgbW91bnRBdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyB0byBtYWtlIHN1cmUgYmx1ciBhbmQgZm9jdXMgZXZlbnQgbGlzdGVuZXJzIGFyZSBvbmx5IGF0dGFjaGVkIG9uY2VcbiAgICAgICAgICBpc0xpc3RlbmluZ1t0b3BMZXZlbFR5cGVzLnRvcEJsdXJdID0gdHJ1ZTtcbiAgICAgICAgICBpc0xpc3RlbmluZ1t0b3BMZXZlbFR5cGVzLnRvcEZvY3VzXSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAodG9wRXZlbnRNYXBwaW5nLmhhc093blByb3BlcnR5KGRlcGVuZGVuY3kpKSB7XG4gICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KFxuICAgICAgICAgICAgZGVwZW5kZW5jeSxcbiAgICAgICAgICAgIHRvcEV2ZW50TWFwcGluZ1tkZXBlbmRlbmN5XSxcbiAgICAgICAgICAgIG1vdW50QXRcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaXNMaXN0ZW5pbmdbZGVwZW5kZW5jeV0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICB0cmFwQnViYmxlZEV2ZW50OiBmdW5jdGlvbih0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgaGFuZGxlKSB7XG4gICAgcmV0dXJuIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudChcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIGhhbmRsZXJCYXNlTmFtZSxcbiAgICAgIGhhbmRsZVxuICAgICk7XG4gIH0sXG5cbiAgdHJhcENhcHR1cmVkRXZlbnQ6IGZ1bmN0aW9uKHRvcExldmVsVHlwZSwgaGFuZGxlckJhc2VOYW1lLCBoYW5kbGUpIHtcbiAgICByZXR1cm4gUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQ2FwdHVyZWRFdmVudChcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIGhhbmRsZXJCYXNlTmFtZSxcbiAgICAgIGhhbmRsZVxuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIExpc3RlbnMgdG8gd2luZG93IHNjcm9sbCBhbmQgcmVzaXplIGV2ZW50cy4gV2UgY2FjaGUgc2Nyb2xsIHZhbHVlcyBzbyB0aGF0XG4gICAqIGFwcGxpY2F0aW9uIGNvZGUgY2FuIGFjY2VzcyB0aGVtIHdpdGhvdXQgdHJpZ2dlcmluZyByZWZsb3dzLlxuICAgKlxuICAgKiBOT1RFOiBTY3JvbGwgZXZlbnRzIGRvIG5vdCBidWJibGUuXG4gICAqXG4gICAqIEBzZWUgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9kb20vZXZlbnRzL3Njcm9sbC5odG1sXG4gICAqL1xuICBlbnN1cmVTY3JvbGxWYWx1ZU1vbml0b3Jpbmc6IGZ1bmN0aW9uKCl7XG4gICAgaWYgKCFpc01vbml0b3JpbmdTY3JvbGxWYWx1ZSkge1xuICAgICAgdmFyIHJlZnJlc2ggPSBWaWV3cG9ydE1ldHJpY3MucmVmcmVzaFNjcm9sbFZhbHVlcztcbiAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIubW9uaXRvclNjcm9sbFZhbHVlKHJlZnJlc2gpO1xuICAgICAgaXNNb25pdG9yaW5nU2Nyb2xsVmFsdWUgPSB0cnVlO1xuICAgIH1cbiAgfSxcblxuICBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M6IEV2ZW50UGx1Z2luSHViLmV2ZW50TmFtZURpc3BhdGNoQ29uZmlncyxcblxuICByZWdpc3RyYXRpb25OYW1lTW9kdWxlczogRXZlbnRQbHVnaW5IdWIucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMsXG5cbiAgcHV0TGlzdGVuZXI6IEV2ZW50UGx1Z2luSHViLnB1dExpc3RlbmVyLFxuXG4gIGdldExpc3RlbmVyOiBFdmVudFBsdWdpbkh1Yi5nZXRMaXN0ZW5lcixcblxuICBkZWxldGVMaXN0ZW5lcjogRXZlbnRQbHVnaW5IdWIuZGVsZXRlTGlzdGVuZXIsXG5cbiAgZGVsZXRlQWxsTGlzdGVuZXJzOiBFdmVudFBsdWdpbkh1Yi5kZWxldGVBbGxMaXN0ZW5lcnNcblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyO1xuXG59LHtcIi4vRXZlbnRDb25zdGFudHNcIjo4NCxcIi4vRXZlbnRQbHVnaW5IdWJcIjo4NixcIi4vRXZlbnRQbHVnaW5SZWdpc3RyeVwiOjg3LFwiLi9PYmplY3QuYXNzaWduXCI6OTUsXCIuL1JlYWN0RXZlbnRFbWl0dGVyTWl4aW5cIjoxMjUsXCIuL1ZpZXdwb3J0TWV0cmljc1wiOjE2NSxcIi4vaXNFdmVudFN1cHBvcnRlZFwiOjE5N31dLDEwMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Q2hpbGRyZW5cbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZShcIi4vUG9vbGVkQ2xhc3NcIik7XG5cbnZhciB0cmF2ZXJzZUFsbENoaWxkcmVuID0gcmVxdWlyZShcIi4vdHJhdmVyc2VBbGxDaGlsZHJlblwiKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxudmFyIHR3b0FyZ3VtZW50UG9vbGVyID0gUG9vbGVkQ2xhc3MudHdvQXJndW1lbnRQb29sZXI7XG52YXIgdGhyZWVBcmd1bWVudFBvb2xlciA9IFBvb2xlZENsYXNzLnRocmVlQXJndW1lbnRQb29sZXI7XG5cbi8qKlxuICogUG9vbGVkQ2xhc3MgcmVwcmVzZW50aW5nIHRoZSBib29ra2VlcGluZyBhc3NvY2lhdGVkIHdpdGggcGVyZm9ybWluZyBhIGNoaWxkXG4gKiB0cmF2ZXJzYWwuIEFsbG93cyBhdm9pZGluZyBiaW5kaW5nIGNhbGxiYWNrcy5cbiAqXG4gKiBAY29uc3RydWN0b3IgRm9yRWFjaEJvb2tLZWVwaW5nXG4gKiBAcGFyYW0geyFmdW5jdGlvbn0gZm9yRWFjaEZ1bmN0aW9uIEZ1bmN0aW9uIHRvIHBlcmZvcm0gdHJhdmVyc2FsIHdpdGguXG4gKiBAcGFyYW0gez8qfSBmb3JFYWNoQ29udGV4dCBDb250ZXh0IHRvIHBlcmZvcm0gY29udGV4dCB3aXRoLlxuICovXG5mdW5jdGlvbiBGb3JFYWNoQm9va0tlZXBpbmcoZm9yRWFjaEZ1bmN0aW9uLCBmb3JFYWNoQ29udGV4dCkge1xuICB0aGlzLmZvckVhY2hGdW5jdGlvbiA9IGZvckVhY2hGdW5jdGlvbjtcbiAgdGhpcy5mb3JFYWNoQ29udGV4dCA9IGZvckVhY2hDb250ZXh0O1xufVxuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKEZvckVhY2hCb29rS2VlcGluZywgdHdvQXJndW1lbnRQb29sZXIpO1xuXG5mdW5jdGlvbiBmb3JFYWNoU2luZ2xlQ2hpbGQodHJhdmVyc2VDb250ZXh0LCBjaGlsZCwgbmFtZSwgaSkge1xuICB2YXIgZm9yRWFjaEJvb2tLZWVwaW5nID0gdHJhdmVyc2VDb250ZXh0O1xuICBmb3JFYWNoQm9va0tlZXBpbmcuZm9yRWFjaEZ1bmN0aW9uLmNhbGwoXG4gICAgZm9yRWFjaEJvb2tLZWVwaW5nLmZvckVhY2hDb250ZXh0LCBjaGlsZCwgaSk7XG59XG5cbi8qKlxuICogSXRlcmF0ZXMgdGhyb3VnaCBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmAuXG4gKlxuICogVGhlIHByb3ZpZGVkIGZvckVhY2hGdW5jKGNoaWxkLCBpbmRleCkgd2lsbCBiZSBjYWxsZWQgZm9yIGVhY2hcbiAqIGxlYWYgY2hpbGQuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCosIGludCl9IGZvckVhY2hGdW5jLlxuICogQHBhcmFtIHsqfSBmb3JFYWNoQ29udGV4dCBDb250ZXh0IGZvciBmb3JFYWNoQ29udGV4dC5cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaENoaWxkcmVuKGNoaWxkcmVuLCBmb3JFYWNoRnVuYywgZm9yRWFjaENvbnRleHQpIHtcbiAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cblxuICB2YXIgdHJhdmVyc2VDb250ZXh0ID1cbiAgICBGb3JFYWNoQm9va0tlZXBpbmcuZ2V0UG9vbGVkKGZvckVhY2hGdW5jLCBmb3JFYWNoQ29udGV4dCk7XG4gIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIGZvckVhY2hTaW5nbGVDaGlsZCwgdHJhdmVyc2VDb250ZXh0KTtcbiAgRm9yRWFjaEJvb2tLZWVwaW5nLnJlbGVhc2UodHJhdmVyc2VDb250ZXh0KTtcbn1cblxuLyoqXG4gKiBQb29sZWRDbGFzcyByZXByZXNlbnRpbmcgdGhlIGJvb2trZWVwaW5nIGFzc29jaWF0ZWQgd2l0aCBwZXJmb3JtaW5nIGEgY2hpbGRcbiAqIG1hcHBpbmcuIEFsbG93cyBhdm9pZGluZyBiaW5kaW5nIGNhbGxiYWNrcy5cbiAqXG4gKiBAY29uc3RydWN0b3IgTWFwQm9va0tlZXBpbmdcbiAqIEBwYXJhbSB7ISp9IG1hcFJlc3VsdCBPYmplY3QgY29udGFpbmluZyB0aGUgb3JkZXJlZCBtYXAgb2YgcmVzdWx0cy5cbiAqIEBwYXJhbSB7IWZ1bmN0aW9ufSBtYXBGdW5jdGlvbiBGdW5jdGlvbiB0byBwZXJmb3JtIG1hcHBpbmcgd2l0aC5cbiAqIEBwYXJhbSB7Pyp9IG1hcENvbnRleHQgQ29udGV4dCB0byBwZXJmb3JtIG1hcHBpbmcgd2l0aC5cbiAqL1xuZnVuY3Rpb24gTWFwQm9va0tlZXBpbmcobWFwUmVzdWx0LCBtYXBGdW5jdGlvbiwgbWFwQ29udGV4dCkge1xuICB0aGlzLm1hcFJlc3VsdCA9IG1hcFJlc3VsdDtcbiAgdGhpcy5tYXBGdW5jdGlvbiA9IG1hcEZ1bmN0aW9uO1xuICB0aGlzLm1hcENvbnRleHQgPSBtYXBDb250ZXh0O1xufVxuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKE1hcEJvb2tLZWVwaW5nLCB0aHJlZUFyZ3VtZW50UG9vbGVyKTtcblxuZnVuY3Rpb24gbWFwU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCh0cmF2ZXJzZUNvbnRleHQsIGNoaWxkLCBuYW1lLCBpKSB7XG4gIHZhciBtYXBCb29rS2VlcGluZyA9IHRyYXZlcnNlQ29udGV4dDtcbiAgdmFyIG1hcFJlc3VsdCA9IG1hcEJvb2tLZWVwaW5nLm1hcFJlc3VsdDtcblxuICB2YXIga2V5VW5pcXVlID0gIW1hcFJlc3VsdC5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAga2V5VW5pcXVlLFxuICAgICdSZWFjdENoaWxkcmVuLm1hcCguLi4pOiBFbmNvdW50ZXJlZCB0d28gY2hpbGRyZW4gd2l0aCB0aGUgc2FtZSBrZXksICcgK1xuICAgICdgJXNgLiBDaGlsZCBrZXlzIG11c3QgYmUgdW5pcXVlOyB3aGVuIHR3byBjaGlsZHJlbiBzaGFyZSBhIGtleSwgb25seSAnICtcbiAgICAndGhlIGZpcnN0IGNoaWxkIHdpbGwgYmUgdXNlZC4nLFxuICAgIG5hbWVcbiAgKSA6IG51bGwpO1xuXG4gIGlmIChrZXlVbmlxdWUpIHtcbiAgICB2YXIgbWFwcGVkQ2hpbGQgPVxuICAgICAgbWFwQm9va0tlZXBpbmcubWFwRnVuY3Rpb24uY2FsbChtYXBCb29rS2VlcGluZy5tYXBDb250ZXh0LCBjaGlsZCwgaSk7XG4gICAgbWFwUmVzdWx0W25hbWVdID0gbWFwcGVkQ2hpbGQ7XG4gIH1cbn1cblxuLyoqXG4gKiBNYXBzIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYC5cbiAqXG4gKiBUaGUgcHJvdmlkZWQgbWFwRnVuY3Rpb24oY2hpbGQsIGtleSwgaW5kZXgpIHdpbGwgYmUgY2FsbGVkIGZvciBlYWNoXG4gKiBsZWFmIGNoaWxkLlxuICpcbiAqIFRPRE86IFRoaXMgbWF5IGxpa2VseSBicmVhayBhbnkgY2FsbHMgdG8gYFJlYWN0Q2hpbGRyZW4ubWFwYCB0aGF0IHdlcmVcbiAqIHByZXZpb3VzbHkgcmVseWluZyBvbiB0aGUgZmFjdCB0aGF0IHdlIGd1YXJkZWQgYWdhaW5zdCBudWxsIGNoaWxkcmVuLlxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHBhcmFtIHtmdW5jdGlvbigqLCBpbnQpfSBtYXBGdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gbWFwQ29udGV4dCBDb250ZXh0IGZvciBtYXBGdW5jdGlvbi5cbiAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9yZGVyZWQgbWFwIG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIG1hcENoaWxkcmVuKGNoaWxkcmVuLCBmdW5jLCBjb250ZXh0KSB7XG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG5cbiAgdmFyIG1hcFJlc3VsdCA9IHt9O1xuICB2YXIgdHJhdmVyc2VDb250ZXh0ID0gTWFwQm9va0tlZXBpbmcuZ2V0UG9vbGVkKG1hcFJlc3VsdCwgZnVuYywgY29udGV4dCk7XG4gIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIG1hcFNpbmdsZUNoaWxkSW50b0NvbnRleHQsIHRyYXZlcnNlQ29udGV4dCk7XG4gIE1hcEJvb2tLZWVwaW5nLnJlbGVhc2UodHJhdmVyc2VDb250ZXh0KTtcbiAgcmV0dXJuIG1hcFJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaFNpbmdsZUNoaWxkRHVtbXkodHJhdmVyc2VDb250ZXh0LCBjaGlsZCwgbmFtZSwgaSkge1xuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBDb3VudCB0aGUgbnVtYmVyIG9mIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXNcbiAqIGBwcm9wcy5jaGlsZHJlbmAuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hpbGRyZW4uXG4gKi9cbmZ1bmN0aW9uIGNvdW50Q2hpbGRyZW4oY2hpbGRyZW4sIGNvbnRleHQpIHtcbiAgcmV0dXJuIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIGZvckVhY2hTaW5nbGVDaGlsZER1bW15LCBudWxsKTtcbn1cblxudmFyIFJlYWN0Q2hpbGRyZW4gPSB7XG4gIGZvckVhY2g6IGZvckVhY2hDaGlsZHJlbixcbiAgbWFwOiBtYXBDaGlsZHJlbixcbiAgY291bnQ6IGNvdW50Q2hpbGRyZW5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDaGlsZHJlbjtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vUG9vbGVkQ2xhc3NcIjo5NixcIi4vdHJhdmVyc2VBbGxDaGlsZHJlblwiOjIxNCxcIi4vd2FybmluZ1wiOjIxNSxcIl9wcm9jZXNzXCI6MTl9XSwxMDE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdENvbXBvbmVudFxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0T3duZXIgPSByZXF1aXJlKFwiLi9SZWFjdE93bmVyXCIpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoXCIuL1JlYWN0VXBkYXRlc1wiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xudmFyIGtleU1pcnJvciA9IHJlcXVpcmUoXCIuL2tleU1pcnJvclwiKTtcblxuLyoqXG4gKiBFdmVyeSBSZWFjdCBjb21wb25lbnQgaXMgaW4gb25lIG9mIHRoZXNlIGxpZmUgY3ljbGVzLlxuICovXG52YXIgQ29tcG9uZW50TGlmZUN5Y2xlID0ga2V5TWlycm9yKHtcbiAgLyoqXG4gICAqIE1vdW50ZWQgY29tcG9uZW50cyBoYXZlIGEgRE9NIG5vZGUgcmVwcmVzZW50YXRpb24gYW5kIGFyZSBjYXBhYmxlIG9mXG4gICAqIHJlY2VpdmluZyBuZXcgcHJvcHMuXG4gICAqL1xuICBNT1VOVEVEOiBudWxsLFxuICAvKipcbiAgICogVW5tb3VudGVkIGNvbXBvbmVudHMgYXJlIGluYWN0aXZlIGFuZCBjYW5ub3QgcmVjZWl2ZSBuZXcgcHJvcHMuXG4gICAqL1xuICBVTk1PVU5URUQ6IG51bGxcbn0pO1xuXG52YXIgaW5qZWN0ZWQgPSBmYWxzZTtcblxuLyoqXG4gKiBPcHRpb25hbGx5IGluamVjdGFibGUgZW52aXJvbm1lbnQgZGVwZW5kZW50IGNsZWFudXAgaG9vay4gKHNlcnZlciB2cy5cbiAqIGJyb3dzZXIgZXRjKS4gRXhhbXBsZTogQSBicm93c2VyIHN5c3RlbSBjYWNoZXMgRE9NIG5vZGVzIGJhc2VkIG9uIGNvbXBvbmVudFxuICogSUQgYW5kIG11c3QgcmVtb3ZlIHRoYXQgY2FjaGUgZW50cnkgd2hlbiB0aGlzIGluc3RhbmNlIGlzIHVubW91bnRlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgdW5tb3VudElERnJvbUVudmlyb25tZW50ID0gbnVsbDtcblxuLyoqXG4gKiBUaGUgXCJpbWFnZVwiIG9mIGEgY29tcG9uZW50IHRyZWUsIGlzIHRoZSBwbGF0Zm9ybSBzcGVjaWZpYyAodHlwaWNhbGx5XG4gKiBzZXJpYWxpemVkKSBkYXRhIHRoYXQgcmVwcmVzZW50cyBhIHRyZWUgb2YgbG93ZXIgbGV2ZWwgVUkgYnVpbGRpbmcgYmxvY2tzLlxuICogT24gdGhlIHdlYiwgdGhpcyBcImltYWdlXCIgaXMgSFRNTCBtYXJrdXAgd2hpY2ggZGVzY3JpYmVzIGEgY29uc3RydWN0aW9uIG9mXG4gKiBsb3cgbGV2ZWwgYGRpdmAgYW5kIGBzcGFuYCBub2Rlcy4gT3RoZXIgcGxhdGZvcm1zIG1heSBoYXZlIGRpZmZlcmVudFxuICogZW5jb2Rpbmcgb2YgdGhpcyBcImltYWdlXCIuIFRoaXMgbXVzdCBiZSBpbmplY3RlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgbW91bnRJbWFnZUludG9Ob2RlID0gbnVsbDtcblxuLyoqXG4gKiBDb21wb25lbnRzIGFyZSB0aGUgYmFzaWMgdW5pdHMgb2YgY29tcG9zaXRpb24gaW4gUmVhY3QuXG4gKlxuICogRXZlcnkgY29tcG9uZW50IGFjY2VwdHMgYSBzZXQgb2Yga2V5ZWQgaW5wdXQgcGFyYW1ldGVycyBrbm93biBhcyBcInByb3BzXCIgdGhhdFxuICogYXJlIGluaXRpYWxpemVkIGJ5IHRoZSBjb25zdHJ1Y3Rvci4gT25jZSBhIGNvbXBvbmVudCBpcyBtb3VudGVkLCB0aGUgcHJvcHNcbiAqIGNhbiBiZSBtdXRhdGVkIHVzaW5nIGBzZXRQcm9wc2Agb3IgYHJlcGxhY2VQcm9wc2AuXG4gKlxuICogRXZlcnkgY29tcG9uZW50IGlzIGNhcGFibGUgb2YgdGhlIGZvbGxvd2luZyBvcGVyYXRpb25zOlxuICpcbiAqICAgYG1vdW50Q29tcG9uZW50YFxuICogICAgIEluaXRpYWxpemVzIHRoZSBjb21wb25lbnQsIHJlbmRlcnMgbWFya3VwLCBhbmQgcmVnaXN0ZXJzIGV2ZW50IGxpc3RlbmVycy5cbiAqXG4gKiAgIGByZWNlaXZlQ29tcG9uZW50YFxuICogICAgIFVwZGF0ZXMgdGhlIHJlbmRlcmVkIERPTSBub2RlcyB0byBtYXRjaCB0aGUgZ2l2ZW4gY29tcG9uZW50LlxuICpcbiAqICAgYHVubW91bnRDb21wb25lbnRgXG4gKiAgICAgUmVsZWFzZXMgYW55IHJlc291cmNlcyBhbGxvY2F0ZWQgYnkgdGhpcyBjb21wb25lbnQuXG4gKlxuICogQ29tcG9uZW50cyBjYW4gYWxzbyBiZSBcIm93bmVkXCIgYnkgb3RoZXIgY29tcG9uZW50cy4gQmVpbmcgb3duZWQgYnkgYW5vdGhlclxuICogY29tcG9uZW50IG1lYW5zIGJlaW5nIGNvbnN0cnVjdGVkIGJ5IHRoYXQgY29tcG9uZW50LiBUaGlzIGlzIGRpZmZlcmVudCBmcm9tXG4gKiBiZWluZyB0aGUgY2hpbGQgb2YgYSBjb21wb25lbnQsIHdoaWNoIG1lYW5zIGhhdmluZyBhIERPTSByZXByZXNlbnRhdGlvbiB0aGF0XG4gKiBpcyBhIGNoaWxkIG9mIHRoZSBET00gcmVwcmVzZW50YXRpb24gb2YgdGhhdCBjb21wb25lbnQuXG4gKlxuICogQGNsYXNzIFJlYWN0Q29tcG9uZW50XG4gKi9cbnZhciBSZWFjdENvbXBvbmVudCA9IHtcblxuICBpbmplY3Rpb246IHtcbiAgICBpbmplY3RFbnZpcm9ubWVudDogZnVuY3Rpb24oUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCkge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgIWluamVjdGVkLFxuICAgICAgICAnUmVhY3RDb21wb25lbnQ6IGluamVjdEVudmlyb25tZW50KCkgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UuJ1xuICAgICAgKSA6IGludmFyaWFudCghaW5qZWN0ZWQpKTtcbiAgICAgIG1vdW50SW1hZ2VJbnRvTm9kZSA9IFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQubW91bnRJbWFnZUludG9Ob2RlO1xuICAgICAgdW5tb3VudElERnJvbUVudmlyb25tZW50ID1cbiAgICAgICAgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC51bm1vdW50SURGcm9tRW52aXJvbm1lbnQ7XG4gICAgICBSZWFjdENvbXBvbmVudC5CYWNrZW5kSURPcGVyYXRpb25zID1cbiAgICAgICAgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5CYWNrZW5kSURPcGVyYXRpb25zO1xuICAgICAgaW5qZWN0ZWQgPSB0cnVlO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBMaWZlQ3ljbGU6IENvbXBvbmVudExpZmVDeWNsZSxcblxuICAvKipcbiAgICogSW5qZWN0ZWQgbW9kdWxlIHRoYXQgcHJvdmlkZXMgYWJpbGl0eSB0byBtdXRhdGUgaW5kaXZpZHVhbCBwcm9wZXJ0aWVzLlxuICAgKiBJbmplY3RlZCBpbnRvIHRoZSBiYXNlIGNsYXNzIGJlY2F1c2UgbWFueSBkaWZmZXJlbnQgc3ViY2xhc3NlcyBuZWVkIGFjY2Vzc1xuICAgKiB0byB0aGlzLlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIEJhY2tlbmRJRE9wZXJhdGlvbnM6IG51bGwsXG5cbiAgLyoqXG4gICAqIEJhc2UgZnVuY3Rpb25hbGl0eSBmb3IgZXZlcnkgUmVhY3RDb21wb25lbnQgY29uc3RydWN0b3IuIE1peGVkIGludG8gdGhlXG4gICAqIGBSZWFjdENvbXBvbmVudGAgcHJvdG90eXBlLCBidXQgZXhwb3NlZCBzdGF0aWNhbGx5IGZvciBlYXN5IGFjY2Vzcy5cbiAgICpcbiAgICogQGxlbmRzIHtSZWFjdENvbXBvbmVudC5wcm90b3R5cGV9XG4gICAqL1xuICBNaXhpbjoge1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgb3Igbm90IHRoaXMgY29tcG9uZW50IGlzIG1vdW50ZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIG1vdW50ZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgKiBAZmluYWxcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgaXNNb3VudGVkOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9saWZlQ3ljbGVTdGF0ZSA9PT0gQ29tcG9uZW50TGlmZUN5Y2xlLk1PVU5URUQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHByb3BzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHBhcnRpYWxQcm9wcyBTdWJzZXQgb2YgdGhlIG5leHQgcHJvcHMuXG4gICAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBwcm9wcyBhcmUgdXBkYXRlZC5cbiAgICAgKiBAZmluYWxcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgc2V0UHJvcHM6IGZ1bmN0aW9uKHBhcnRpYWxQcm9wcywgY2FsbGJhY2spIHtcbiAgICAgIC8vIE1lcmdlIHdpdGggdGhlIHBlbmRpbmcgZWxlbWVudCBpZiBpdCBleGlzdHMsIG90aGVyd2lzZSB3aXRoIGV4aXN0aW5nXG4gICAgICAvLyBlbGVtZW50IHByb3BzLlxuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLl9wZW5kaW5nRWxlbWVudCB8fCB0aGlzLl9jdXJyZW50RWxlbWVudDtcbiAgICAgIHRoaXMucmVwbGFjZVByb3BzKFxuICAgICAgICBhc3NpZ24oe30sIGVsZW1lbnQucHJvcHMsIHBhcnRpYWxQcm9wcyksXG4gICAgICAgIGNhbGxiYWNrXG4gICAgICApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlcyBhbGwgb2YgdGhlIHByb3BzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHByb3BzIE5ldyBwcm9wcy5cbiAgICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHByb3BzIGFyZSB1cGRhdGVkLlxuICAgICAqIEBmaW5hbFxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICByZXBsYWNlUHJvcHM6IGZ1bmN0aW9uKHByb3BzLCBjYWxsYmFjaykge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgdGhpcy5pc01vdW50ZWQoKSxcbiAgICAgICAgJ3JlcGxhY2VQcm9wcyguLi4pOiBDYW4gb25seSB1cGRhdGUgYSBtb3VudGVkIGNvbXBvbmVudC4nXG4gICAgICApIDogaW52YXJpYW50KHRoaXMuaXNNb3VudGVkKCkpKTtcbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgIHRoaXMuX21vdW50RGVwdGggPT09IDAsXG4gICAgICAgICdyZXBsYWNlUHJvcHMoLi4uKTogWW91IGNhbGxlZCBgc2V0UHJvcHNgIG9yIGByZXBsYWNlUHJvcHNgIG9uIGEgJyArXG4gICAgICAgICdjb21wb25lbnQgd2l0aCBhIHBhcmVudC4gVGhpcyBpcyBhbiBhbnRpLXBhdHRlcm4gc2luY2UgcHJvcHMgd2lsbCAnICtcbiAgICAgICAgJ2dldCByZWFjdGl2ZWx5IHVwZGF0ZWQgd2hlbiByZW5kZXJlZC4gSW5zdGVhZCwgY2hhbmdlIHRoZSBvd25lclxcJ3MgJyArXG4gICAgICAgICdgcmVuZGVyYCBtZXRob2QgdG8gcGFzcyB0aGUgY29ycmVjdCB2YWx1ZSBhcyBwcm9wcyB0byB0aGUgY29tcG9uZW50ICcgK1xuICAgICAgICAnd2hlcmUgaXQgaXMgY3JlYXRlZC4nXG4gICAgICApIDogaW52YXJpYW50KHRoaXMuX21vdW50RGVwdGggPT09IDApKTtcbiAgICAgIC8vIFRoaXMgaXMgYSBkZW9wdGltaXplZCBwYXRoLiBXZSBvcHRpbWl6ZSBmb3IgYWx3YXlzIGhhdmluZyBhIGVsZW1lbnQuXG4gICAgICAvLyBUaGlzIGNyZWF0ZXMgYW4gZXh0cmEgaW50ZXJuYWwgZWxlbWVudC5cbiAgICAgIHRoaXMuX3BlbmRpbmdFbGVtZW50ID0gUmVhY3RFbGVtZW50LmNsb25lQW5kUmVwbGFjZVByb3BzKFxuICAgICAgICB0aGlzLl9wZW5kaW5nRWxlbWVudCB8fCB0aGlzLl9jdXJyZW50RWxlbWVudCxcbiAgICAgICAgcHJvcHNcbiAgICAgICk7XG4gICAgICBSZWFjdFVwZGF0ZXMuZW5xdWV1ZVVwZGF0ZSh0aGlzLCBjYWxsYmFjayk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNjaGVkdWxlIGEgcGFydGlhbCB1cGRhdGUgdG8gdGhlIHByb3BzLiBPbmx5IHVzZWQgZm9yIGludGVybmFsIHRlc3RpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcGFydGlhbFByb3BzIFN1YnNldCBvZiB0aGUgbmV4dCBwcm9wcy5cbiAgICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHByb3BzIGFyZSB1cGRhdGVkLlxuICAgICAqIEBmaW5hbFxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIF9zZXRQcm9wc0ludGVybmFsOiBmdW5jdGlvbihwYXJ0aWFsUHJvcHMsIGNhbGxiYWNrKSB7XG4gICAgICAvLyBUaGlzIGlzIGEgZGVvcHRpbWl6ZWQgcGF0aC4gV2Ugb3B0aW1pemUgZm9yIGFsd2F5cyBoYXZpbmcgYSBlbGVtZW50LlxuICAgICAgLy8gVGhpcyBjcmVhdGVzIGFuIGV4dHJhIGludGVybmFsIGVsZW1lbnQuXG4gICAgICB2YXIgZWxlbWVudCA9IHRoaXMuX3BlbmRpbmdFbGVtZW50IHx8IHRoaXMuX2N1cnJlbnRFbGVtZW50O1xuICAgICAgdGhpcy5fcGVuZGluZ0VsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY2xvbmVBbmRSZXBsYWNlUHJvcHMoXG4gICAgICAgIGVsZW1lbnQsXG4gICAgICAgIGFzc2lnbih7fSwgZWxlbWVudC5wcm9wcywgcGFydGlhbFByb3BzKVxuICAgICAgKTtcbiAgICAgIFJlYWN0VXBkYXRlcy5lbnF1ZXVlVXBkYXRlKHRoaXMsIGNhbGxiYWNrKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQmFzZSBjb25zdHJ1Y3RvciBmb3IgYWxsIFJlYWN0IGNvbXBvbmVudHMuXG4gICAgICpcbiAgICAgKiBTdWJjbGFzc2VzIHRoYXQgb3ZlcnJpZGUgdGhpcyBtZXRob2Qgc2hvdWxkIG1ha2Ugc3VyZSB0byBpbnZva2VcbiAgICAgKiBgUmVhY3RDb21wb25lbnQuTWl4aW4uY29uc3RydWN0LmNhbGwodGhpcywgLi4uKWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudFxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbnN0cnVjdDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgLy8gVGhpcyBpcyB0aGUgcHVibGljIGV4cG9zZWQgcHJvcHMgb2JqZWN0IGFmdGVyIGl0IGhhcyBiZWVuIHByb2Nlc3NlZFxuICAgICAgLy8gd2l0aCBkZWZhdWx0IHByb3BzLiBUaGUgZWxlbWVudCdzIHByb3BzIHJlcHJlc2VudHMgdGhlIHRydWUgaW50ZXJuYWxcbiAgICAgIC8vIHN0YXRlIG9mIHRoZSBwcm9wcy5cbiAgICAgIHRoaXMucHJvcHMgPSBlbGVtZW50LnByb3BzO1xuICAgICAgLy8gUmVjb3JkIHRoZSBjb21wb25lbnQgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIHRoaXMgY29tcG9uZW50LlxuICAgICAgLy8gVGhpcyBpcyBhY2Nlc3NpYmxlIHRocm91Z2ggdGhlIGVsZW1lbnQgYnV0IHdlIG1haW50YWluIGFuIGV4dHJhXG4gICAgICAvLyBmaWVsZCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIGRldnRvb2xzIGFuZCBhcyBhIHdheSB0byBtYWtlIGFuXG4gICAgICAvLyBpbmNyZW1lbnRhbCB1cGRhdGUuIFRPRE86IENvbnNpZGVyIGRlcHJlY2F0aW5nIHRoaXMgZmllbGQuXG4gICAgICB0aGlzLl9vd25lciA9IGVsZW1lbnQuX293bmVyO1xuXG4gICAgICAvLyBBbGwgY29tcG9uZW50cyBzdGFydCB1bm1vdW50ZWQuXG4gICAgICB0aGlzLl9saWZlQ3ljbGVTdGF0ZSA9IENvbXBvbmVudExpZmVDeWNsZS5VTk1PVU5URUQ7XG5cbiAgICAgIC8vIFNlZSBSZWFjdFVwZGF0ZXMuXG4gICAgICB0aGlzLl9wZW5kaW5nQ2FsbGJhY2tzID0gbnVsbDtcblxuICAgICAgLy8gV2Uga2VlcCB0aGUgb2xkIGVsZW1lbnQgYW5kIGEgcmVmZXJlbmNlIHRvIHRoZSBwZW5kaW5nIGVsZW1lbnRcbiAgICAgIC8vIHRvIHRyYWNrIHVwZGF0ZXMuXG4gICAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLl9wZW5kaW5nRWxlbWVudCA9IG51bGw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBjb21wb25lbnQsIHJlbmRlcnMgbWFya3VwLCBhbmQgcmVnaXN0ZXJzIGV2ZW50IGxpc3RlbmVycy5cbiAgICAgKlxuICAgICAqIE5PVEU6IFRoaXMgZG9lcyBub3QgaW5zZXJ0IGFueSBub2RlcyBpbnRvIHRoZSBET00uXG4gICAgICpcbiAgICAgKiBTdWJjbGFzc2VzIHRoYXQgb3ZlcnJpZGUgdGhpcyBtZXRob2Qgc2hvdWxkIG1ha2Ugc3VyZSB0byBpbnZva2VcbiAgICAgKiBgUmVhY3RDb21wb25lbnQuTWl4aW4ubW91bnRDb21wb25lbnQuY2FsbCh0aGlzLCAuLi4pYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByb290SUQgRE9NIElEIG9mIHRoZSByb290IG5vZGUuXG4gICAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1vdW50RGVwdGggbnVtYmVyIG9mIGNvbXBvbmVudHMgaW4gdGhlIG93bmVyIGhpZXJhcmNoeS5cbiAgICAgKiBAcmV0dXJuIHs/c3RyaW5nfSBSZW5kZXJlZCBtYXJrdXAgdG8gYmUgaW5zZXJ0ZWQgaW50byB0aGUgRE9NLlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIG1vdW50Q29tcG9uZW50OiBmdW5jdGlvbihyb290SUQsIHRyYW5zYWN0aW9uLCBtb3VudERlcHRoKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAhdGhpcy5pc01vdW50ZWQoKSxcbiAgICAgICAgJ21vdW50Q29tcG9uZW50KCVzLCAuLi4pOiBDYW4gb25seSBtb3VudCBhbiB1bm1vdW50ZWQgY29tcG9uZW50LiAnICtcbiAgICAgICAgJ01ha2Ugc3VyZSB0byBhdm9pZCBzdG9yaW5nIGNvbXBvbmVudHMgYmV0d2VlbiByZW5kZXJzIG9yIHJldXNpbmcgYSAnICtcbiAgICAgICAgJ3NpbmdsZSBjb21wb25lbnQgaW5zdGFuY2UgaW4gbXVsdGlwbGUgcGxhY2VzLicsXG4gICAgICAgIHJvb3RJRFxuICAgICAgKSA6IGludmFyaWFudCghdGhpcy5pc01vdW50ZWQoKSkpO1xuICAgICAgdmFyIHJlZiA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnJlZjtcbiAgICAgIGlmIChyZWYgIT0gbnVsbCkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5fb3duZXI7XG4gICAgICAgIFJlYWN0T3duZXIuYWRkQ29tcG9uZW50QXNSZWZUbyh0aGlzLCByZWYsIG93bmVyKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3Jvb3ROb2RlSUQgPSByb290SUQ7XG4gICAgICB0aGlzLl9saWZlQ3ljbGVTdGF0ZSA9IENvbXBvbmVudExpZmVDeWNsZS5NT1VOVEVEO1xuICAgICAgdGhpcy5fbW91bnREZXB0aCA9IG1vdW50RGVwdGg7XG4gICAgICAvLyBFZmZlY3RpdmVseTogcmV0dXJuICcnO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZWxlYXNlcyBhbnkgcmVzb3VyY2VzIGFsbG9jYXRlZCBieSBgbW91bnRDb21wb25lbnRgLlxuICAgICAqXG4gICAgICogTk9URTogVGhpcyBkb2VzIG5vdCByZW1vdmUgYW55IG5vZGVzIGZyb20gdGhlIERPTS5cbiAgICAgKlxuICAgICAqIFN1YmNsYXNzZXMgdGhhdCBvdmVycmlkZSB0aGlzIG1ldGhvZCBzaG91bGQgbWFrZSBzdXJlIHRvIGludm9rZVxuICAgICAqIGBSZWFjdENvbXBvbmVudC5NaXhpbi51bm1vdW50Q29tcG9uZW50LmNhbGwodGhpcylgLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdW5tb3VudENvbXBvbmVudDogZnVuY3Rpb24oKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICB0aGlzLmlzTW91bnRlZCgpLFxuICAgICAgICAndW5tb3VudENvbXBvbmVudCgpOiBDYW4gb25seSB1bm1vdW50IGEgbW91bnRlZCBjb21wb25lbnQuJ1xuICAgICAgKSA6IGludmFyaWFudCh0aGlzLmlzTW91bnRlZCgpKSk7XG4gICAgICB2YXIgcmVmID0gdGhpcy5fY3VycmVudEVsZW1lbnQucmVmO1xuICAgICAgaWYgKHJlZiAhPSBudWxsKSB7XG4gICAgICAgIFJlYWN0T3duZXIucmVtb3ZlQ29tcG9uZW50QXNSZWZGcm9tKHRoaXMsIHJlZiwgdGhpcy5fb3duZXIpO1xuICAgICAgfVxuICAgICAgdW5tb3VudElERnJvbUVudmlyb25tZW50KHRoaXMuX3Jvb3ROb2RlSUQpO1xuICAgICAgdGhpcy5fcm9vdE5vZGVJRCA9IG51bGw7XG4gICAgICB0aGlzLl9saWZlQ3ljbGVTdGF0ZSA9IENvbXBvbmVudExpZmVDeWNsZS5VTk1PVU5URUQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdpdmVuIGEgbmV3IGluc3RhbmNlIG9mIHRoaXMgY29tcG9uZW50LCB1cGRhdGVzIHRoZSByZW5kZXJlZCBET00gbm9kZXNcbiAgICAgKiBhcyBpZiB0aGF0IGluc3RhbmNlIHdhcyByZW5kZXJlZCBpbnN0ZWFkLlxuICAgICAqXG4gICAgICogU3ViY2xhc3NlcyB0aGF0IG92ZXJyaWRlIHRoaXMgbWV0aG9kIHNob3VsZCBtYWtlIHN1cmUgdG8gaW52b2tlXG4gICAgICogYFJlYWN0Q29tcG9uZW50Lk1peGluLnJlY2VpdmVDb21wb25lbnQuY2FsbCh0aGlzLCAuLi4pYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0Q29tcG9uZW50IE5leHQgc2V0IG9mIHByb3BlcnRpZXMuXG4gICAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHJlY2VpdmVDb21wb25lbnQ6IGZ1bmN0aW9uKG5leHRFbGVtZW50LCB0cmFuc2FjdGlvbikge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgdGhpcy5pc01vdW50ZWQoKSxcbiAgICAgICAgJ3JlY2VpdmVDb21wb25lbnQoLi4uKTogQ2FuIG9ubHkgdXBkYXRlIGEgbW91bnRlZCBjb21wb25lbnQuJ1xuICAgICAgKSA6IGludmFyaWFudCh0aGlzLmlzTW91bnRlZCgpKSk7XG4gICAgICB0aGlzLl9wZW5kaW5nRWxlbWVudCA9IG5leHRFbGVtZW50O1xuICAgICAgdGhpcy5wZXJmb3JtVXBkYXRlSWZOZWNlc3NhcnkodHJhbnNhY3Rpb24pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJZiBgX3BlbmRpbmdFbGVtZW50YCBpcyBzZXQsIHVwZGF0ZSB0aGUgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHBlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeTogZnVuY3Rpb24odHJhbnNhY3Rpb24pIHtcbiAgICAgIGlmICh0aGlzLl9wZW5kaW5nRWxlbWVudCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBwcmV2RWxlbWVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50O1xuICAgICAgdmFyIG5leHRFbGVtZW50ID0gdGhpcy5fcGVuZGluZ0VsZW1lbnQ7XG4gICAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IG5leHRFbGVtZW50O1xuICAgICAgdGhpcy5wcm9wcyA9IG5leHRFbGVtZW50LnByb3BzO1xuICAgICAgdGhpcy5fb3duZXIgPSBuZXh0RWxlbWVudC5fb3duZXI7XG4gICAgICB0aGlzLl9wZW5kaW5nRWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudCh0cmFuc2FjdGlvbiwgcHJldkVsZW1lbnQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBjb21wb25lbnQncyBjdXJyZW50bHkgbW91bnRlZCByZXByZXNlbnRhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcHJldkVsZW1lbnRcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB1cGRhdGVDb21wb25lbnQ6IGZ1bmN0aW9uKHRyYW5zYWN0aW9uLCBwcmV2RWxlbWVudCkge1xuICAgICAgdmFyIG5leHRFbGVtZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQ7XG5cbiAgICAgIC8vIElmIGVpdGhlciB0aGUgb3duZXIgb3IgYSBgcmVmYCBoYXMgY2hhbmdlZCwgbWFrZSBzdXJlIHRoZSBuZXdlc3Qgb3duZXJcbiAgICAgIC8vIGhhcyBzdG9yZWQgYSByZWZlcmVuY2UgdG8gYHRoaXNgLCBhbmQgdGhlIHByZXZpb3VzIG93bmVyIChpZiBkaWZmZXJlbnQpXG4gICAgICAvLyBoYXMgZm9yZ290dGVuIHRoZSByZWZlcmVuY2UgdG8gYHRoaXNgLiBXZSB1c2UgdGhlIGVsZW1lbnQgaW5zdGVhZFxuICAgICAgLy8gb2YgdGhlIHB1YmxpYyB0aGlzLnByb3BzIGJlY2F1c2UgdGhlIHBvc3QgcHJvY2Vzc2luZyBjYW5ub3QgZGV0ZXJtaW5lXG4gICAgICAvLyBhIHJlZi4gVGhlIHJlZiBjb25jZXB0dWFsbHkgbGl2ZXMgb24gdGhlIGVsZW1lbnQuXG5cbiAgICAgIC8vIFRPRE86IFNob3VsZCB0aGlzIGV2ZW4gYmUgcG9zc2libGU/IFRoZSBvd25lciBjYW5ub3QgY2hhbmdlIGJlY2F1c2VcbiAgICAgIC8vIGl0J3MgZm9yYmlkZGVuIGJ5IHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50LiBUaGUgcmVmIGNhbiBjaGFuZ2VcbiAgICAgIC8vIGlmIHlvdSBzd2FwIHRoZSBrZXlzIG9mIGJ1dCBub3QgdGhlIHJlZnMuIFJlY29uc2lkZXIgd2hlcmUgdGhpcyBjaGVja1xuICAgICAgLy8gaXMgbWFkZS4gSXQgcHJvYmFibHkgYmVsb25ncyB3aGVyZSB0aGUga2V5IGNoZWNraW5nIGFuZFxuICAgICAgLy8gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCBpcyBkb25lLlxuXG4gICAgICBpZiAobmV4dEVsZW1lbnQuX293bmVyICE9PSBwcmV2RWxlbWVudC5fb3duZXIgfHxcbiAgICAgICAgICBuZXh0RWxlbWVudC5yZWYgIT09IHByZXZFbGVtZW50LnJlZikge1xuICAgICAgICBpZiAocHJldkVsZW1lbnQucmVmICE9IG51bGwpIHtcbiAgICAgICAgICBSZWFjdE93bmVyLnJlbW92ZUNvbXBvbmVudEFzUmVmRnJvbShcbiAgICAgICAgICAgIHRoaXMsIHByZXZFbGVtZW50LnJlZiwgcHJldkVsZW1lbnQuX293bmVyXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDb3JyZWN0LCBldmVuIGlmIHRoZSBvd25lciBpcyB0aGUgc2FtZSwgYW5kIG9ubHkgdGhlIHJlZiBoYXMgY2hhbmdlZC5cbiAgICAgICAgaWYgKG5leHRFbGVtZW50LnJlZiAhPSBudWxsKSB7XG4gICAgICAgICAgUmVhY3RPd25lci5hZGRDb21wb25lbnRBc1JlZlRvKFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIG5leHRFbGVtZW50LnJlZixcbiAgICAgICAgICAgIG5leHRFbGVtZW50Ll9vd25lclxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTW91bnRzIHRoaXMgY29tcG9uZW50IGFuZCBpbnNlcnRzIGl0IGludG8gdGhlIERPTS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByb290SUQgRE9NIElEIG9mIHRoZSByb290IG5vZGUuXG4gICAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgRE9NIGVsZW1lbnQgdG8gbW91bnQgaW50by5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNob3VsZFJldXNlTWFya3VwIElmIHRydWUsIGRvIG5vdCBpbnNlcnQgbWFya3VwXG4gICAgICogQGZpbmFsXG4gICAgICogQGludGVybmFsXG4gICAgICogQHNlZSB7UmVhY3RNb3VudC5yZW5kZXJ9XG4gICAgICovXG4gICAgbW91bnRDb21wb25lbnRJbnRvTm9kZTogZnVuY3Rpb24ocm9vdElELCBjb250YWluZXIsIHNob3VsZFJldXNlTWFya3VwKSB7XG4gICAgICB2YXIgdHJhbnNhY3Rpb24gPSBSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5nZXRQb29sZWQoKTtcbiAgICAgIHRyYW5zYWN0aW9uLnBlcmZvcm0oXG4gICAgICAgIHRoaXMuX21vdW50Q29tcG9uZW50SW50b05vZGUsXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHJvb3RJRCxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICB0cmFuc2FjdGlvbixcbiAgICAgICAgc2hvdWxkUmV1c2VNYXJrdXBcbiAgICAgICk7XG4gICAgICBSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5yZWxlYXNlKHRyYW5zYWN0aW9uKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJvb3RJRCBET00gSUQgb2YgdGhlIHJvb3Qgbm9kZS5cbiAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0byBtb3VudCBpbnRvLlxuICAgICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNob3VsZFJldXNlTWFya3VwIElmIHRydWUsIGRvIG5vdCBpbnNlcnQgbWFya3VwXG4gICAgICogQGZpbmFsXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfbW91bnRDb21wb25lbnRJbnRvTm9kZTogZnVuY3Rpb24oXG4gICAgICAgIHJvb3RJRCxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICB0cmFuc2FjdGlvbixcbiAgICAgICAgc2hvdWxkUmV1c2VNYXJrdXApIHtcbiAgICAgIHZhciBtYXJrdXAgPSB0aGlzLm1vdW50Q29tcG9uZW50KHJvb3RJRCwgdHJhbnNhY3Rpb24sIDApO1xuICAgICAgbW91bnRJbWFnZUludG9Ob2RlKG1hcmt1cCwgY29udGFpbmVyLCBzaG91bGRSZXVzZU1hcmt1cCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGlzIGNvbXBvbmVudCBpcyBvd25lZCBieSB0aGUgc3VwcGxpZWQgYG93bmVyYCBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBvd25lciBDb21wb25lbnQgdG8gY2hlY2suXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgb3duZXJzYCBvd25zIHRoaXMgY29tcG9uZW50LlxuICAgICAqIEBmaW5hbFxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGlzT3duZWRCeTogZnVuY3Rpb24ob3duZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLl9vd25lciA9PT0gb3duZXI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldHMgYW5vdGhlciBjb21wb25lbnQsIHRoYXQgc2hhcmVzIHRoZSBzYW1lIG93bmVyIGFzIHRoaXMgb25lLCBieSByZWYuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmIG9mIGEgc2libGluZyBDb21wb25lbnQuXG4gICAgICogQHJldHVybiB7P1JlYWN0Q29tcG9uZW50fSB0aGUgYWN0dWFsIHNpYmxpbmcgQ29tcG9uZW50LlxuICAgICAqIEBmaW5hbFxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGdldFNpYmxpbmdCeVJlZjogZnVuY3Rpb24ocmVmKSB7XG4gICAgICB2YXIgb3duZXIgPSB0aGlzLl9vd25lcjtcbiAgICAgIGlmICghb3duZXIgfHwgIW93bmVyLnJlZnMpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3duZXIucmVmc1tyZWZdO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbXBvbmVudDtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vT2JqZWN0LmFzc2lnblwiOjk1LFwiLi9SZWFjdEVsZW1lbnRcIjoxMjEsXCIuL1JlYWN0T3duZXJcIjoxMzYsXCIuL1JlYWN0VXBkYXRlc1wiOjE0OCxcIi4vaW52YXJpYW50XCI6MTk2LFwiLi9rZXlNaXJyb3JcIjoyMDIsXCJfcHJvY2Vzc1wiOjE5fV0sMTAyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnRcbiAqL1xuXG4vKmpzbGludCBldmlsOiB0cnVlICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgUmVhY3RET01JRE9wZXJhdGlvbnMgPSByZXF1aXJlKFwiLi9SZWFjdERPTUlET3BlcmF0aW9uc1wiKTtcbnZhciBSZWFjdE1hcmt1cENoZWNrc3VtID0gcmVxdWlyZShcIi4vUmVhY3RNYXJrdXBDaGVja3N1bVwiKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZShcIi4vUmVhY3RNb3VudFwiKTtcbnZhciBSZWFjdFBlcmYgPSByZXF1aXJlKFwiLi9SZWFjdFBlcmZcIik7XG52YXIgUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiA9IHJlcXVpcmUoXCIuL1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb25cIik7XG5cbnZhciBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIgPSByZXF1aXJlKFwiLi9nZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXJcIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xudmFyIHNldElubmVySFRNTCA9IHJlcXVpcmUoXCIuL3NldElubmVySFRNTFwiKTtcblxuXG52YXIgRUxFTUVOVF9OT0RFX1RZUEUgPSAxO1xudmFyIERPQ19OT0RFX1RZUEUgPSA5O1xuXG5cbi8qKlxuICogQWJzdHJhY3RzIGF3YXkgYWxsIGZ1bmN0aW9uYWxpdHkgb2YgYFJlYWN0Q29tcG9uZW50YCByZXF1aXJlcyBrbm93bGVkZ2Ugb2ZcbiAqIHRoZSBicm93c2VyIGNvbnRleHQuXG4gKi9cbnZhciBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudCA9IHtcbiAgUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbjogUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbixcblxuICBCYWNrZW5kSURPcGVyYXRpb25zOiBSZWFjdERPTUlET3BlcmF0aW9ucyxcblxuICAvKipcbiAgICogSWYgYSBwYXJ0aWN1bGFyIGVudmlyb25tZW50IHJlcXVpcmVzIHRoYXQgc29tZSByZXNvdXJjZXMgYmUgY2xlYW5lZCB1cCxcbiAgICogc3BlY2lmeSB0aGlzIGluIHRoZSBpbmplY3RlZCBNaXhpbi4gSW4gdGhlIERPTSwgd2Ugd291bGQgbGlrZWx5IHdhbnQgdG9cbiAgICogcHVyZ2UgYW55IGNhY2hlZCBub2RlIElEIGxvb2t1cHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB1bm1vdW50SURGcm9tRW52aXJvbm1lbnQ6IGZ1bmN0aW9uKHJvb3ROb2RlSUQpIHtcbiAgICBSZWFjdE1vdW50LnB1cmdlSUQocm9vdE5vZGVJRCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgTWFya3VwIHN0cmluZyB0byBwbGFjZSBpbnRvIHRoZSBET00gRWxlbWVudC5cbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgRE9NIEVsZW1lbnQgdG8gaW5zZXJ0IG1hcmt1cCBpbnRvLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHNob3VsZFJldXNlTWFya3VwIFNob3VsZCByZXVzZSB0aGUgZXhpc3RpbmcgbWFya3VwIGluIHRoZVxuICAgKiBjb250YWluZXIgaWYgcG9zc2libGUuXG4gICAqL1xuICBtb3VudEltYWdlSW50b05vZGU6IFJlYWN0UGVyZi5tZWFzdXJlKFxuICAgICdSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudCcsXG4gICAgJ21vdW50SW1hZ2VJbnRvTm9kZScsXG4gICAgZnVuY3Rpb24obWFya3VwLCBjb250YWluZXIsIHNob3VsZFJldXNlTWFya3VwKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICBjb250YWluZXIgJiYgKFxuICAgICAgICAgIGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFX1RZUEUgfHxcbiAgICAgICAgICAgIGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DX05PREVfVFlQRVxuICAgICAgICApLFxuICAgICAgICAnbW91bnRDb21wb25lbnRJbnRvTm9kZSguLi4pOiBUYXJnZXQgY29udGFpbmVyIGlzIG5vdCB2YWxpZC4nXG4gICAgICApIDogaW52YXJpYW50KGNvbnRhaW5lciAmJiAoXG4gICAgICAgIGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFX1RZUEUgfHxcbiAgICAgICAgICBjb250YWluZXIubm9kZVR5cGUgPT09IERPQ19OT0RFX1RZUEVcbiAgICAgICkpKTtcblxuICAgICAgaWYgKHNob3VsZFJldXNlTWFya3VwKSB7XG4gICAgICAgIGlmIChSZWFjdE1hcmt1cENoZWNrc3VtLmNhblJldXNlTWFya3VwKFxuICAgICAgICAgIG1hcmt1cCxcbiAgICAgICAgICBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIoY29udGFpbmVyKSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgICAgIGNvbnRhaW5lci5ub2RlVHlwZSAhPT0gRE9DX05PREVfVFlQRSxcbiAgICAgICAgICAgICdZb3VcXCdyZSB0cnlpbmcgdG8gcmVuZGVyIGEgY29tcG9uZW50IHRvIHRoZSBkb2N1bWVudCB1c2luZyAnICtcbiAgICAgICAgICAgICdzZXJ2ZXIgcmVuZGVyaW5nIGJ1dCB0aGUgY2hlY2tzdW0gd2FzIGludmFsaWQuIFRoaXMgdXN1YWxseSAnICtcbiAgICAgICAgICAgICdtZWFucyB5b3UgcmVuZGVyZWQgYSBkaWZmZXJlbnQgY29tcG9uZW50IHR5cGUgb3IgcHJvcHMgb24gJyArXG4gICAgICAgICAgICAndGhlIGNsaWVudCBmcm9tIHRoZSBvbmUgb24gdGhlIHNlcnZlciwgb3IgeW91ciByZW5kZXIoKSAnICtcbiAgICAgICAgICAgICdtZXRob2RzIGFyZSBpbXB1cmUuIFJlYWN0IGNhbm5vdCBoYW5kbGUgdGhpcyBjYXNlIGR1ZSB0byAnICtcbiAgICAgICAgICAgICdjcm9zcy1icm93c2VyIHF1aXJrcyBieSByZW5kZXJpbmcgYXQgdGhlIGRvY3VtZW50IHJvb3QuIFlvdSAnICtcbiAgICAgICAgICAgICdzaG91bGQgbG9vayBmb3IgZW52aXJvbm1lbnQgZGVwZW5kZW50IGNvZGUgaW4geW91ciBjb21wb25lbnRzICcgK1xuICAgICAgICAgICAgJ2FuZCBlbnN1cmUgdGhlIHByb3BzIGFyZSB0aGUgc2FtZSBjbGllbnQgYW5kIHNlcnZlciBzaWRlLidcbiAgICAgICAgICApIDogaW52YXJpYW50KGNvbnRhaW5lci5ub2RlVHlwZSAhPT0gRE9DX05PREVfVFlQRSkpO1xuXG4gICAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAnUmVhY3QgYXR0ZW1wdGVkIHRvIHVzZSByZXVzZSBtYXJrdXAgaW4gYSBjb250YWluZXIgYnV0IHRoZSAnICtcbiAgICAgICAgICAgICAgJ2NoZWNrc3VtIHdhcyBpbnZhbGlkLiBUaGlzIGdlbmVyYWxseSBtZWFucyB0aGF0IHlvdSBhcmUgJyArXG4gICAgICAgICAgICAgICd1c2luZyBzZXJ2ZXIgcmVuZGVyaW5nIGFuZCB0aGUgbWFya3VwIGdlbmVyYXRlZCBvbiB0aGUgJyArXG4gICAgICAgICAgICAgICdzZXJ2ZXIgd2FzIG5vdCB3aGF0IHRoZSBjbGllbnQgd2FzIGV4cGVjdGluZy4gUmVhY3QgaW5qZWN0ZWQgJyArXG4gICAgICAgICAgICAgICduZXcgbWFya3VwIHRvIGNvbXBlbnNhdGUgd2hpY2ggd29ya3MgYnV0IHlvdSBoYXZlIGxvc3QgbWFueSAnICtcbiAgICAgICAgICAgICAgJ29mIHRoZSBiZW5lZml0cyBvZiBzZXJ2ZXIgcmVuZGVyaW5nLiBJbnN0ZWFkLCBmaWd1cmUgb3V0ICcgK1xuICAgICAgICAgICAgICAnd2h5IHRoZSBtYXJrdXAgYmVpbmcgZ2VuZXJhdGVkIGlzIGRpZmZlcmVudCBvbiB0aGUgY2xpZW50ICcgK1xuICAgICAgICAgICAgICAnb3Igc2VydmVyLidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgIGNvbnRhaW5lci5ub2RlVHlwZSAhPT0gRE9DX05PREVfVFlQRSxcbiAgICAgICAgJ1lvdVxcJ3JlIHRyeWluZyB0byByZW5kZXIgYSBjb21wb25lbnQgdG8gdGhlIGRvY3VtZW50IGJ1dCAnICtcbiAgICAgICAgICAneW91IGRpZG5cXCd0IHVzZSBzZXJ2ZXIgcmVuZGVyaW5nLiBXZSBjYW5cXCd0IGRvIHRoaXMgJyArXG4gICAgICAgICAgJ3dpdGhvdXQgdXNpbmcgc2VydmVyIHJlbmRlcmluZyBkdWUgdG8gY3Jvc3MtYnJvd3NlciBxdWlya3MuICcgK1xuICAgICAgICAgICdTZWUgcmVuZGVyQ29tcG9uZW50VG9TdHJpbmcoKSBmb3Igc2VydmVyIHJlbmRlcmluZy4nXG4gICAgICApIDogaW52YXJpYW50KGNvbnRhaW5lci5ub2RlVHlwZSAhPT0gRE9DX05PREVfVFlQRSkpO1xuXG4gICAgICBzZXRJbm5lckhUTUwoY29udGFpbmVyLCBtYXJrdXApO1xuICAgIH1cbiAgKVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudDtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vUmVhY3RET01JRE9wZXJhdGlvbnNcIjoxMTAsXCIuL1JlYWN0TWFya3VwQ2hlY2tzdW1cIjoxMzEsXCIuL1JlYWN0TW91bnRcIjoxMzIsXCIuL1JlYWN0UGVyZlwiOjEzNyxcIi4vUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvblwiOjE0MyxcIi4vZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyXCI6MTkwLFwiLi9pbnZhcmlhbnRcIjoxOTYsXCIuL3NldElubmVySFRNTFwiOjIxMCxcIl9wcm9jZXNzXCI6MTl9XSwxMDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudFxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdENvbXBvbmVudFwiKTtcbnZhciBSZWFjdENvbnRleHQgPSByZXF1aXJlKFwiLi9SZWFjdENvbnRleHRcIik7XG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKFwiLi9SZWFjdEN1cnJlbnRPd25lclwiKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RFbGVtZW50VmFsaWRhdG9yID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50VmFsaWRhdG9yXCIpO1xudmFyIFJlYWN0RW1wdHlDb21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVtcHR5Q29tcG9uZW50XCIpO1xudmFyIFJlYWN0RXJyb3JVdGlscyA9IHJlcXVpcmUoXCIuL1JlYWN0RXJyb3JVdGlsc1wiKTtcbnZhciBSZWFjdExlZ2FjeUVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdExlZ2FjeUVsZW1lbnRcIik7XG52YXIgUmVhY3RPd25lciA9IHJlcXVpcmUoXCIuL1JlYWN0T3duZXJcIik7XG52YXIgUmVhY3RQZXJmID0gcmVxdWlyZShcIi4vUmVhY3RQZXJmXCIpO1xudmFyIFJlYWN0UHJvcFRyYW5zZmVyZXIgPSByZXF1aXJlKFwiLi9SZWFjdFByb3BUcmFuc2ZlcmVyXCIpO1xudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMgPSByZXF1aXJlKFwiLi9SZWFjdFByb3BUeXBlTG9jYXRpb25zXCIpO1xudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzID0gcmVxdWlyZShcIi4vUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNcIik7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZShcIi4vUmVhY3RVcGRhdGVzXCIpO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcbnZhciBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudFwiKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG52YXIga2V5TWlycm9yID0gcmVxdWlyZShcIi4va2V5TWlycm9yXCIpO1xudmFyIGtleU9mID0gcmVxdWlyZShcIi4va2V5T2ZcIik7XG52YXIgbW9uaXRvckNvZGVVc2UgPSByZXF1aXJlKFwiLi9tb25pdG9yQ29kZVVzZVwiKTtcbnZhciBtYXBPYmplY3QgPSByZXF1aXJlKFwiLi9tYXBPYmplY3RcIik7XG52YXIgc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKFwiLi9zaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudFwiKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxudmFyIE1JWElOU19LRVkgPSBrZXlPZih7bWl4aW5zOiBudWxsfSk7XG5cbi8qKlxuICogUG9saWNpZXMgdGhhdCBkZXNjcmliZSBtZXRob2RzIGluIGBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudEludGVyZmFjZWAuXG4gKi9cbnZhciBTcGVjUG9saWN5ID0ga2V5TWlycm9yKHtcbiAgLyoqXG4gICAqIFRoZXNlIG1ldGhvZHMgbWF5IGJlIGRlZmluZWQgb25seSBvbmNlIGJ5IHRoZSBjbGFzcyBzcGVjaWZpY2F0aW9uIG9yIG1peGluLlxuICAgKi9cbiAgREVGSU5FX09OQ0U6IG51bGwsXG4gIC8qKlxuICAgKiBUaGVzZSBtZXRob2RzIG1heSBiZSBkZWZpbmVkIGJ5IGJvdGggdGhlIGNsYXNzIHNwZWNpZmljYXRpb24gYW5kIG1peGlucy5cbiAgICogU3Vic2VxdWVudCBkZWZpbml0aW9ucyB3aWxsIGJlIGNoYWluZWQuIFRoZXNlIG1ldGhvZHMgbXVzdCByZXR1cm4gdm9pZC5cbiAgICovXG4gIERFRklORV9NQU5ZOiBudWxsLFxuICAvKipcbiAgICogVGhlc2UgbWV0aG9kcyBhcmUgb3ZlcnJpZGluZyB0aGUgYmFzZSBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCBjbGFzcy5cbiAgICovXG4gIE9WRVJSSURFX0JBU0U6IG51bGwsXG4gIC8qKlxuICAgKiBUaGVzZSBtZXRob2RzIGFyZSBzaW1pbGFyIHRvIERFRklORV9NQU5ZLCBleGNlcHQgd2UgYXNzdW1lIHRoZXkgcmV0dXJuXG4gICAqIG9iamVjdHMuIFdlIHRyeSB0byBtZXJnZSB0aGUga2V5cyBvZiB0aGUgcmV0dXJuIHZhbHVlcyBvZiBhbGwgdGhlIG1peGVkIGluXG4gICAqIGZ1bmN0aW9ucy4gSWYgdGhlcmUgaXMgYSBrZXkgY29uZmxpY3Qgd2UgdGhyb3cuXG4gICAqL1xuICBERUZJTkVfTUFOWV9NRVJHRUQ6IG51bGxcbn0pO1xuXG5cbnZhciBpbmplY3RlZE1peGlucyA9IFtdO1xuXG4vKipcbiAqIENvbXBvc2l0ZSBjb21wb25lbnRzIGFyZSBoaWdoZXItbGV2ZWwgY29tcG9uZW50cyB0aGF0IGNvbXBvc2Ugb3RoZXIgY29tcG9zaXRlXG4gKiBvciBuYXRpdmUgY29tcG9uZW50cy5cbiAqXG4gKiBUbyBjcmVhdGUgYSBuZXcgdHlwZSBvZiBgUmVhY3RDb21wb3NpdGVDb21wb25lbnRgLCBwYXNzIGEgc3BlY2lmaWNhdGlvbiBvZlxuICogeW91ciBuZXcgY2xhc3MgdG8gYFJlYWN0LmNyZWF0ZUNsYXNzYC4gVGhlIG9ubHkgcmVxdWlyZW1lbnQgb2YgeW91ciBjbGFzc1xuICogc3BlY2lmaWNhdGlvbiBpcyB0aGF0IHlvdSBpbXBsZW1lbnQgYSBgcmVuZGVyYCBtZXRob2QuXG4gKlxuICogICB2YXIgTXlDb21wb25lbnQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gKiAgICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAqICAgICAgIHJldHVybiA8ZGl2PkhlbGxvIFdvcmxkPC9kaXY+O1xuICogICAgIH1cbiAqICAgfSk7XG4gKlxuICogVGhlIGNsYXNzIHNwZWNpZmljYXRpb24gc3VwcG9ydHMgYSBzcGVjaWZpYyBwcm90b2NvbCBvZiBtZXRob2RzIHRoYXQgaGF2ZVxuICogc3BlY2lhbCBtZWFuaW5nIChlLmcuIGByZW5kZXJgKS4gU2VlIGBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudEludGVyZmFjZWAgZm9yXG4gKiBtb3JlIHRoZSBjb21wcmVoZW5zaXZlIHByb3RvY29sLiBBbnkgb3RoZXIgcHJvcGVydGllcyBhbmQgbWV0aG9kcyBpbiB0aGVcbiAqIGNsYXNzIHNwZWNpZmljYXRpb24gd2lsbCBhdmFpbGFibGUgb24gdGhlIHByb3RvdHlwZS5cbiAqXG4gKiBAaW50ZXJmYWNlIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50SW50ZXJmYWNlXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50SW50ZXJmYWNlID0ge1xuXG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiBNaXhpbiBvYmplY3RzIHRvIGluY2x1ZGUgd2hlbiBkZWZpbmluZyB5b3VyIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHR5cGUge2FycmF5fVxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIG1peGluczogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblxuICAvKipcbiAgICogQW4gb2JqZWN0IGNvbnRhaW5pbmcgcHJvcGVydGllcyBhbmQgbWV0aG9kcyB0aGF0IHNob3VsZCBiZSBkZWZpbmVkIG9uXG4gICAqIHRoZSBjb21wb25lbnQncyBjb25zdHJ1Y3RvciBpbnN0ZWFkIG9mIGl0cyBwcm90b3R5cGUgKHN0YXRpYyBtZXRob2RzKS5cbiAgICpcbiAgICogQHR5cGUge29iamVjdH1cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBzdGF0aWNzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG4gIC8qKlxuICAgKiBEZWZpbml0aW9uIG9mIHByb3AgdHlwZXMgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKlxuICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIHByb3BUeXBlczogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblxuICAvKipcbiAgICogRGVmaW5pdGlvbiBvZiBjb250ZXh0IHR5cGVzIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHR5cGUge29iamVjdH1cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb250ZXh0VHlwZXM6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cbiAgLyoqXG4gICAqIERlZmluaXRpb24gb2YgY29udGV4dCB0eXBlcyB0aGlzIGNvbXBvbmVudCBzZXRzIGZvciBpdHMgY2hpbGRyZW4uXG4gICAqXG4gICAqIEB0eXBlIHtvYmplY3R9XG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgY2hpbGRDb250ZXh0VHlwZXM6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cbiAgLy8gPT09PSBEZWZpbml0aW9uIG1ldGhvZHMgPT09PVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkLiBWYWx1ZXMgaW4gdGhlIG1hcHBpbmcgd2lsbCBiZSBzZXQgb25cbiAgICogYHRoaXMucHJvcHNgIGlmIHRoYXQgcHJvcCBpcyBub3Qgc3BlY2lmaWVkIChpLmUuIHVzaW5nIGFuIGBpbmAgY2hlY2spLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBpbnZva2VkIGJlZm9yZSBgZ2V0SW5pdGlhbFN0YXRlYCBhbmQgdGhlcmVmb3JlIGNhbm5vdCByZWx5XG4gICAqIG9uIGB0aGlzLnN0YXRlYCBvciB1c2UgYHRoaXMuc2V0U3RhdGVgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgZ2V0RGVmYXVsdFByb3BzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCxcblxuICAvKipcbiAgICogSW52b2tlZCBvbmNlIGJlZm9yZSB0aGUgY29tcG9uZW50IGlzIG1vdW50ZWQuIFRoZSByZXR1cm4gdmFsdWUgd2lsbCBiZSB1c2VkXG4gICAqIGFzIHRoZSBpbml0aWFsIHZhbHVlIG9mIGB0aGlzLnN0YXRlYC5cbiAgICpcbiAgICogICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgKiAgICAgcmV0dXJuIHtcbiAgICogICAgICAgaXNPbjogZmFsc2UsXG4gICAqICAgICAgIGZvb0JhejogbmV3IEJhekZvbygpXG4gICAqICAgICB9XG4gICAqICAgfVxuICAgKlxuICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgZ2V0SW5pdGlhbFN0YXRlOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCxcblxuICAvKipcbiAgICogQHJldHVybiB7b2JqZWN0fVxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGdldENoaWxkQ29udGV4dDogU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQsXG5cbiAgLyoqXG4gICAqIFVzZXMgcHJvcHMgZnJvbSBgdGhpcy5wcm9wc2AgYW5kIHN0YXRlIGZyb20gYHRoaXMuc3RhdGVgIHRvIHJlbmRlciB0aGVcbiAgICogc3RydWN0dXJlIG9mIHRoZSBjb21wb25lbnQuXG4gICAqXG4gICAqIE5vIGd1YXJhbnRlZXMgYXJlIG1hZGUgYWJvdXQgd2hlbiBvciBob3cgb2Z0ZW4gdGhpcyBtZXRob2QgaXMgaW52b2tlZCwgc29cbiAgICogaXQgbXVzdCBub3QgaGF2ZSBzaWRlIGVmZmVjdHMuXG4gICAqXG4gICAqICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICogICAgIHZhciBuYW1lID0gdGhpcy5wcm9wcy5uYW1lO1xuICAgKiAgICAgcmV0dXJuIDxkaXY+SGVsbG8sIHtuYW1lfSE8L2Rpdj47XG4gICAqICAgfVxuICAgKlxuICAgKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudH1cbiAgICogQG5vc2lkZWVmZmVjdHNcbiAgICogQHJlcXVpcmVkXG4gICAqL1xuICByZW5kZXI6IFNwZWNQb2xpY3kuREVGSU5FX09OQ0UsXG5cblxuXG4gIC8vID09PT0gRGVsZWdhdGUgbWV0aG9kcyA9PT09XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGluaXRpYWxseSBjcmVhdGVkIGFuZCBhYm91dCB0byBiZSBtb3VudGVkLlxuICAgKiBUaGlzIG1heSBoYXZlIHNpZGUgZWZmZWN0cywgYnV0IGFueSBleHRlcm5hbCBzdWJzY3JpcHRpb25zIG9yIGRhdGEgY3JlYXRlZFxuICAgKiBieSB0aGlzIG1ldGhvZCBtdXN0IGJlIGNsZWFuZWQgdXAgaW4gYGNvbXBvbmVudFdpbGxVbm1vdW50YC5cbiAgICpcbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb21wb25lbnRXaWxsTW91bnQ6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGhhcyBiZWVuIG1vdW50ZWQgYW5kIGhhcyBhIERPTSByZXByZXNlbnRhdGlvbi5cbiAgICogSG93ZXZlciwgdGhlcmUgaXMgbm8gZ3VhcmFudGVlIHRoYXQgdGhlIERPTSBub2RlIGlzIGluIHRoZSBkb2N1bWVudC5cbiAgICpcbiAgICogVXNlIHRoaXMgYXMgYW4gb3Bwb3J0dW5pdHkgdG8gb3BlcmF0ZSBvbiB0aGUgRE9NIHdoZW4gdGhlIGNvbXBvbmVudCBoYXNcbiAgICogYmVlbiBtb3VudGVkIChpbml0aWFsaXplZCBhbmQgcmVuZGVyZWQpIGZvciB0aGUgZmlyc3QgdGltZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSByb290Tm9kZSBET00gZWxlbWVudCByZXByZXNlbnRpbmcgdGhlIGNvbXBvbmVudC5cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb21wb25lbnREaWRNb3VudDogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblxuICAvKipcbiAgICogSW52b2tlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCByZWNlaXZlcyBuZXcgcHJvcHMuXG4gICAqXG4gICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIHJlYWN0IHRvIGEgcHJvcCB0cmFuc2l0aW9uIGJ5IHVwZGF0aW5nIHRoZVxuICAgKiBzdGF0ZSB1c2luZyBgdGhpcy5zZXRTdGF0ZWAuIEN1cnJlbnQgcHJvcHMgYXJlIGFjY2Vzc2VkIHZpYSBgdGhpcy5wcm9wc2AuXG4gICAqXG4gICAqICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24obmV4dFByb3BzLCBuZXh0Q29udGV4dCkge1xuICAgKiAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAqICAgICAgIGxpa2VzSW5jcmVhc2luZzogbmV4dFByb3BzLmxpa2VDb3VudCA+IHRoaXMucHJvcHMubGlrZUNvdW50XG4gICAqICAgICB9KTtcbiAgICogICB9XG4gICAqXG4gICAqIE5PVEU6IFRoZXJlIGlzIG5vIGVxdWl2YWxlbnQgYGNvbXBvbmVudFdpbGxSZWNlaXZlU3RhdGVgLiBBbiBpbmNvbWluZyBwcm9wXG4gICAqIHRyYW5zaXRpb24gbWF5IGNhdXNlIGEgc3RhdGUgY2hhbmdlLCBidXQgdGhlIG9wcG9zaXRlIGlzIG5vdCB0cnVlLiBJZiB5b3VcbiAgICogbmVlZCBpdCwgeW91IGFyZSBwcm9iYWJseSBsb29raW5nIGZvciBgY29tcG9uZW50V2lsbFVwZGF0ZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0UHJvcHNcbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoaWxlIGRlY2lkaW5nIGlmIHRoZSBjb21wb25lbnQgc2hvdWxkIGJlIHVwZGF0ZWQgYXMgYSByZXN1bHQgb2ZcbiAgICogcmVjZWl2aW5nIG5ldyBwcm9wcywgc3RhdGUgYW5kL29yIGNvbnRleHQuXG4gICAqXG4gICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIGByZXR1cm4gZmFsc2VgIHdoZW4geW91J3JlIGNlcnRhaW4gdGhhdCB0aGVcbiAgICogdHJhbnNpdGlvbiB0byB0aGUgbmV3IHByb3BzL3N0YXRlL2NvbnRleHQgd2lsbCBub3QgcmVxdWlyZSBhIGNvbXBvbmVudFxuICAgKiB1cGRhdGUuXG4gICAqXG4gICAqICAgc2hvdWxkQ29tcG9uZW50VXBkYXRlOiBmdW5jdGlvbihuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQpIHtcbiAgICogICAgIHJldHVybiAhZXF1YWwobmV4dFByb3BzLCB0aGlzLnByb3BzKSB8fFxuICAgKiAgICAgICAhZXF1YWwobmV4dFN0YXRlLCB0aGlzLnN0YXRlKSB8fFxuICAgKiAgICAgICAhZXF1YWwobmV4dENvbnRleHQsIHRoaXMuY29udGV4dCk7XG4gICAqICAgfVxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmV4dFByb3BzXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dFN0YXRlXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dENvbnRleHRcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgY29tcG9uZW50IHNob3VsZCB1cGRhdGUuXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlOiBTcGVjUG9saWN5LkRFRklORV9PTkNFLFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBhYm91dCB0byB1cGRhdGUgZHVlIHRvIGEgdHJhbnNpdGlvbiBmcm9tXG4gICAqIGB0aGlzLnByb3BzYCwgYHRoaXMuc3RhdGVgIGFuZCBgdGhpcy5jb250ZXh0YCB0byBgbmV4dFByb3BzYCwgYG5leHRTdGF0ZWBcbiAgICogYW5kIGBuZXh0Q29udGV4dGAuXG4gICAqXG4gICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIHBlcmZvcm0gcHJlcGFyYXRpb24gYmVmb3JlIGFuIHVwZGF0ZSBvY2N1cnMuXG4gICAqXG4gICAqIE5PVEU6IFlvdSAqKmNhbm5vdCoqIHVzZSBgdGhpcy5zZXRTdGF0ZSgpYCBpbiB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG5leHRQcm9wc1xuICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRTdGF0ZVxuICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRDb250ZXh0XG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb21wb25lbnRXaWxsVXBkYXRlOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCdzIERPTSByZXByZXNlbnRhdGlvbiBoYXMgYmVlbiB1cGRhdGVkLlxuICAgKlxuICAgKiBVc2UgdGhpcyBhcyBhbiBvcHBvcnR1bml0eSB0byBvcGVyYXRlIG9uIHRoZSBET00gd2hlbiB0aGUgY29tcG9uZW50IGhhc1xuICAgKiBiZWVuIHVwZGF0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwcmV2UHJvcHNcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBwcmV2U3RhdGVcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBwcmV2Q29udGV4dFxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHJvb3ROb2RlIERPTSBlbGVtZW50IHJlcHJlc2VudGluZyB0aGUgY29tcG9uZW50LlxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgYWJvdXQgdG8gYmUgcmVtb3ZlZCBmcm9tIGl0cyBwYXJlbnQgYW5kIGhhdmVcbiAgICogaXRzIERPTSByZXByZXNlbnRhdGlvbiBkZXN0cm95ZWQuXG4gICAqXG4gICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIGRlYWxsb2NhdGUgYW55IGV4dGVybmFsIHJlc291cmNlcy5cbiAgICpcbiAgICogTk9URTogVGhlcmUgaXMgbm8gYGNvbXBvbmVudERpZFVubW91bnRgIHNpbmNlIHlvdXIgY29tcG9uZW50IHdpbGwgaGF2ZSBiZWVuXG4gICAqIGRlc3Ryb3llZCBieSB0aGF0IHBvaW50LlxuICAgKlxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50OiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuXG5cblxuICAvLyA9PT09IEFkdmFuY2VkIG1ldGhvZHMgPT09PVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBjb21wb25lbnQncyBjdXJyZW50bHkgbW91bnRlZCBET00gcmVwcmVzZW50YXRpb24uXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIHRoaXMgaW1wbGVtZW50cyBSZWFjdCdzIHJlbmRlcmluZyBhbmQgcmVjb25jaWxpYXRpb24gYWxnb3JpdGhtLlxuICAgKiBTb3BoaXN0aWNhdGVkIGNsaWVudHMgbWF5IHdpc2ggdG8gb3ZlcnJpZGUgdGhpcy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAaW50ZXJuYWxcbiAgICogQG92ZXJyaWRhYmxlXG4gICAqL1xuICB1cGRhdGVDb21wb25lbnQ6IFNwZWNQb2xpY3kuT1ZFUlJJREVfQkFTRVxuXG59O1xuXG4vKipcbiAqIE1hcHBpbmcgZnJvbSBjbGFzcyBzcGVjaWZpY2F0aW9uIGtleXMgdG8gc3BlY2lhbCBwcm9jZXNzaW5nIGZ1bmN0aW9ucy5cbiAqXG4gKiBBbHRob3VnaCB0aGVzZSBhcmUgZGVjbGFyZWQgbGlrZSBpbnN0YW5jZSBwcm9wZXJ0aWVzIGluIHRoZSBzcGVjaWZpY2F0aW9uXG4gKiB3aGVuIGRlZmluaW5nIGNsYXNzZXMgdXNpbmcgYFJlYWN0LmNyZWF0ZUNsYXNzYCwgdGhleSBhcmUgYWN0dWFsbHkgc3RhdGljXG4gKiBhbmQgYXJlIGFjY2Vzc2libGUgb24gdGhlIGNvbnN0cnVjdG9yIGluc3RlYWQgb2YgdGhlIHByb3RvdHlwZS4gRGVzcGl0ZVxuICogYmVpbmcgc3RhdGljLCB0aGV5IG11c3QgYmUgZGVmaW5lZCBvdXRzaWRlIG9mIHRoZSBcInN0YXRpY3NcIiBrZXkgdW5kZXJcbiAqIHdoaWNoIGFsbCBvdGhlciBzdGF0aWMgbWV0aG9kcyBhcmUgZGVmaW5lZC5cbiAqL1xudmFyIFJFU0VSVkVEX1NQRUNfS0VZUyA9IHtcbiAgZGlzcGxheU5hbWU6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBkaXNwbGF5TmFtZSkge1xuICAgIENvbnN0cnVjdG9yLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gIH0sXG4gIG1peGluczogZnVuY3Rpb24oQ29uc3RydWN0b3IsIG1peGlucykge1xuICAgIGlmIChtaXhpbnMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWl4aW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG1peFNwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBtaXhpbnNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgY2hpbGRDb250ZXh0VHlwZXM6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBjaGlsZENvbnRleHRUeXBlcykge1xuICAgIHZhbGlkYXRlVHlwZURlZihcbiAgICAgIENvbnN0cnVjdG9yLFxuICAgICAgY2hpbGRDb250ZXh0VHlwZXMsXG4gICAgICBSZWFjdFByb3BUeXBlTG9jYXRpb25zLmNoaWxkQ29udGV4dFxuICAgICk7XG4gICAgQ29uc3RydWN0b3IuY2hpbGRDb250ZXh0VHlwZXMgPSBhc3NpZ24oXG4gICAgICB7fSxcbiAgICAgIENvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzLFxuICAgICAgY2hpbGRDb250ZXh0VHlwZXNcbiAgICApO1xuICB9LFxuICBjb250ZXh0VHlwZXM6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBjb250ZXh0VHlwZXMpIHtcbiAgICB2YWxpZGF0ZVR5cGVEZWYoXG4gICAgICBDb25zdHJ1Y3RvcixcbiAgICAgIGNvbnRleHRUeXBlcyxcbiAgICAgIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMuY29udGV4dFxuICAgICk7XG4gICAgQ29uc3RydWN0b3IuY29udGV4dFR5cGVzID0gYXNzaWduKFxuICAgICAge30sXG4gICAgICBDb25zdHJ1Y3Rvci5jb250ZXh0VHlwZXMsXG4gICAgICBjb250ZXh0VHlwZXNcbiAgICApO1xuICB9LFxuICAvKipcbiAgICogU3BlY2lhbCBjYXNlIGdldERlZmF1bHRQcm9wcyB3aGljaCBzaG91bGQgbW92ZSBpbnRvIHN0YXRpY3MgYnV0IHJlcXVpcmVzXG4gICAqIGF1dG9tYXRpYyBtZXJnaW5nLlxuICAgKi9cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgaWYgKENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcykge1xuICAgICAgQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzID0gY3JlYXRlTWVyZ2VkUmVzdWx0RnVuY3Rpb24oXG4gICAgICAgIENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcyxcbiAgICAgICAgZ2V0RGVmYXVsdFByb3BzXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMgPSBnZXREZWZhdWx0UHJvcHM7XG4gICAgfVxuICB9LFxuICBwcm9wVHlwZXM6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBwcm9wVHlwZXMpIHtcbiAgICB2YWxpZGF0ZVR5cGVEZWYoXG4gICAgICBDb25zdHJ1Y3RvcixcbiAgICAgIHByb3BUeXBlcyxcbiAgICAgIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMucHJvcFxuICAgICk7XG4gICAgQ29uc3RydWN0b3IucHJvcFR5cGVzID0gYXNzaWduKFxuICAgICAge30sXG4gICAgICBDb25zdHJ1Y3Rvci5wcm9wVHlwZXMsXG4gICAgICBwcm9wVHlwZXNcbiAgICApO1xuICB9LFxuICBzdGF0aWNzOiBmdW5jdGlvbihDb25zdHJ1Y3Rvciwgc3RhdGljcykge1xuICAgIG1peFN0YXRpY1NwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBzdGF0aWNzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKGNvbXBvbmVudCkge1xuICB2YXIgb3duZXIgPSBjb21wb25lbnQuX293bmVyIHx8IG51bGw7XG4gIGlmIChvd25lciAmJiBvd25lci5jb25zdHJ1Y3RvciAmJiBvd25lci5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSkge1xuICAgIHJldHVybiAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgb3duZXIuY29uc3RydWN0b3IuZGlzcGxheU5hbWUgK1xuICAgICAgJ2AuJztcbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVHlwZURlZihDb25zdHJ1Y3RvciwgdHlwZURlZiwgbG9jYXRpb24pIHtcbiAgZm9yICh2YXIgcHJvcE5hbWUgaW4gdHlwZURlZikge1xuICAgIGlmICh0eXBlRGVmLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgdHlwZW9mIHR5cGVEZWZbcHJvcE5hbWVdID09ICdmdW5jdGlvbicsXG4gICAgICAgICclczogJXMgdHlwZSBgJXNgIGlzIGludmFsaWQ7IGl0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tICcgK1xuICAgICAgICAnUmVhY3QuUHJvcFR5cGVzLicsXG4gICAgICAgIENvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCcsXG4gICAgICAgIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXSxcbiAgICAgICAgcHJvcE5hbWVcbiAgICAgICkgOiBpbnZhcmlhbnQodHlwZW9mIHR5cGVEZWZbcHJvcE5hbWVdID09ICdmdW5jdGlvbicpKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVNZXRob2RPdmVycmlkZShwcm90bywgbmFtZSkge1xuICB2YXIgc3BlY1BvbGljeSA9IFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50SW50ZXJmYWNlLmhhc093blByb3BlcnR5KG5hbWUpID9cbiAgICBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudEludGVyZmFjZVtuYW1lXSA6XG4gICAgbnVsbDtcblxuICAvLyBEaXNhbGxvdyBvdmVycmlkaW5nIG9mIGJhc2UgY2xhc3MgbWV0aG9kcyB1bmxlc3MgZXhwbGljaXRseSBhbGxvd2VkLlxuICBpZiAoUmVhY3RDb21wb3NpdGVDb21wb25lbnRNaXhpbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5Lk9WRVJSSURFX0JBU0UsXG4gICAgICAnUmVhY3RDb21wb3NpdGVDb21wb25lbnRJbnRlcmZhY2U6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBvdmVycmlkZSAnICtcbiAgICAgICdgJXNgIGZyb20geW91ciBjbGFzcyBzcGVjaWZpY2F0aW9uLiBFbnN1cmUgdGhhdCB5b3VyIG1ldGhvZCBuYW1lcyAnICtcbiAgICAgICdkbyBub3Qgb3ZlcmxhcCB3aXRoIFJlYWN0IG1ldGhvZHMuJyxcbiAgICAgIG5hbWVcbiAgICApIDogaW52YXJpYW50KHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuT1ZFUlJJREVfQkFTRSkpO1xuICB9XG5cbiAgLy8gRGlzYWxsb3cgZGVmaW5pbmcgbWV0aG9kcyBtb3JlIHRoYW4gb25jZSB1bmxlc3MgZXhwbGljaXRseSBhbGxvd2VkLlxuICBpZiAocHJvdG8uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5ERUZJTkVfTUFOWSB8fFxuICAgICAgc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQsXG4gICAgICAnUmVhY3RDb21wb3NpdGVDb21wb25lbnRJbnRlcmZhY2U6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBkZWZpbmUgJyArXG4gICAgICAnYCVzYCBvbiB5b3VyIGNvbXBvbmVudCBtb3JlIHRoYW4gb25jZS4gVGhpcyBjb25mbGljdCBtYXkgYmUgZHVlICcgK1xuICAgICAgJ3RvIGEgbWl4aW4uJyxcbiAgICAgIG5hbWVcbiAgICApIDogaW52YXJpYW50KHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTlkgfHxcbiAgICBzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlTGlmZUN5Y2xlT25SZXBsYWNlU3RhdGUoaW5zdGFuY2UpIHtcbiAgdmFyIGNvbXBvc2l0ZUxpZmVDeWNsZVN0YXRlID0gaW5zdGFuY2UuX2NvbXBvc2l0ZUxpZmVDeWNsZVN0YXRlO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIGluc3RhbmNlLmlzTW91bnRlZCgpIHx8XG4gICAgICBjb21wb3NpdGVMaWZlQ3ljbGVTdGF0ZSA9PT0gQ29tcG9zaXRlTGlmZUN5Y2xlLk1PVU5USU5HLFxuICAgICdyZXBsYWNlU3RhdGUoLi4uKTogQ2FuIG9ubHkgdXBkYXRlIGEgbW91bnRlZCBvciBtb3VudGluZyBjb21wb25lbnQuJ1xuICApIDogaW52YXJpYW50KGluc3RhbmNlLmlzTW91bnRlZCgpIHx8XG4gICAgY29tcG9zaXRlTGlmZUN5Y2xlU3RhdGUgPT09IENvbXBvc2l0ZUxpZmVDeWNsZS5NT1VOVElORykpO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPT0gbnVsbCxcbiAgICAncmVwbGFjZVN0YXRlKC4uLik6IENhbm5vdCB1cGRhdGUgZHVyaW5nIGFuIGV4aXN0aW5nIHN0YXRlIHRyYW5zaXRpb24gJyArXG4gICAgJyhzdWNoIGFzIHdpdGhpbiBgcmVuZGVyYCkuIFJlbmRlciBtZXRob2RzIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gJyArXG4gICAgJ29mIHByb3BzIGFuZCBzdGF0ZS4nXG4gICkgOiBpbnZhcmlhbnQoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9PSBudWxsKSk7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoY29tcG9zaXRlTGlmZUN5Y2xlU3RhdGUgIT09IENvbXBvc2l0ZUxpZmVDeWNsZS5VTk1PVU5USU5HLFxuICAgICdyZXBsYWNlU3RhdGUoLi4uKTogQ2Fubm90IHVwZGF0ZSB3aGlsZSB1bm1vdW50aW5nIGNvbXBvbmVudC4gVGhpcyAnICtcbiAgICAndXN1YWxseSBtZWFucyB5b3UgY2FsbGVkIHNldFN0YXRlKCkgb24gYW4gdW5tb3VudGVkIGNvbXBvbmVudC4nXG4gICkgOiBpbnZhcmlhbnQoY29tcG9zaXRlTGlmZUN5Y2xlU3RhdGUgIT09IENvbXBvc2l0ZUxpZmVDeWNsZS5VTk1PVU5USU5HKSk7XG59XG5cbi8qKlxuICogTWl4aW4gaGVscGVyIHdoaWNoIGhhbmRsZXMgcG9saWN5IHZhbGlkYXRpb24gYW5kIHJlc2VydmVkXG4gKiBzcGVjaWZpY2F0aW9uIGtleXMgd2hlbiBidWlsZGluZyBgUmVhY3RDb21wb3NpdGVDb21wb25lbnRgIGNsYXNzc2VzLlxuICovXG5mdW5jdGlvbiBtaXhTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3Rvciwgc3BlYykge1xuICBpZiAoIXNwZWMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICFSZWFjdExlZ2FjeUVsZW1lbnQuaXNWYWxpZEZhY3Rvcnkoc3BlYyksXG4gICAgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50OiBZb3VcXCdyZSBhdHRlbXB0aW5nIHRvICcgK1xuICAgICd1c2UgYSBjb21wb25lbnQgY2xhc3MgYXMgYSBtaXhpbi4gSW5zdGVhZCwganVzdCB1c2UgYSByZWd1bGFyIG9iamVjdC4nXG4gICkgOiBpbnZhcmlhbnQoIVJlYWN0TGVnYWN5RWxlbWVudC5pc1ZhbGlkRmFjdG9yeShzcGVjKSkpO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICFSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoc3BlYyksXG4gICAgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50OiBZb3VcXCdyZSBhdHRlbXB0aW5nIHRvICcgK1xuICAgICd1c2UgYSBjb21wb25lbnQgYXMgYSBtaXhpbi4gSW5zdGVhZCwganVzdCB1c2UgYSByZWd1bGFyIG9iamVjdC4nXG4gICkgOiBpbnZhcmlhbnQoIVJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChzcGVjKSkpO1xuXG4gIHZhciBwcm90byA9IENvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxuICAvLyBCeSBoYW5kbGluZyBtaXhpbnMgYmVmb3JlIGFueSBvdGhlciBwcm9wZXJ0aWVzLCB3ZSBlbnN1cmUgdGhlIHNhbWVcbiAgLy8gY2hhaW5pbmcgb3JkZXIgaXMgYXBwbGllZCB0byBtZXRob2RzIHdpdGggREVGSU5FX01BTlkgcG9saWN5LCB3aGV0aGVyXG4gIC8vIG1peGlucyBhcmUgbGlzdGVkIGJlZm9yZSBvciBhZnRlciB0aGVzZSBtZXRob2RzIGluIHRoZSBzcGVjLlxuICBpZiAoc3BlYy5oYXNPd25Qcm9wZXJ0eShNSVhJTlNfS0VZKSkge1xuICAgIFJFU0VSVkVEX1NQRUNfS0VZUy5taXhpbnMoQ29uc3RydWN0b3IsIHNwZWMubWl4aW5zKTtcbiAgfVxuXG4gIGZvciAodmFyIG5hbWUgaW4gc3BlYykge1xuICAgIGlmICghc3BlYy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKG5hbWUgPT09IE1JWElOU19LRVkpIHtcbiAgICAgIC8vIFdlIGhhdmUgYWxyZWFkeSBoYW5kbGVkIG1peGlucyBpbiBhIHNwZWNpYWwgY2FzZSBhYm92ZVxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIHByb3BlcnR5ID0gc3BlY1tuYW1lXTtcbiAgICB2YWxpZGF0ZU1ldGhvZE92ZXJyaWRlKHByb3RvLCBuYW1lKTtcblxuICAgIGlmIChSRVNFUlZFRF9TUEVDX0tFWVMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIFJFU0VSVkVEX1NQRUNfS0VZU1tuYW1lXShDb25zdHJ1Y3RvciwgcHJvcGVydHkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTZXR1cCBtZXRob2RzIG9uIHByb3RvdHlwZTpcbiAgICAgIC8vIFRoZSBmb2xsb3dpbmcgbWVtYmVyIG1ldGhvZHMgc2hvdWxkIG5vdCBiZSBhdXRvbWF0aWNhbGx5IGJvdW5kOlxuICAgICAgLy8gMS4gRXhwZWN0ZWQgUmVhY3RDb21wb3NpdGVDb21wb25lbnQgbWV0aG9kcyAoaW4gdGhlIFwiaW50ZXJmYWNlXCIpLlxuICAgICAgLy8gMi4gT3ZlcnJpZGRlbiBtZXRob2RzICh0aGF0IHdlcmUgbWl4ZWQgaW4pLlxuICAgICAgdmFyIGlzQ29tcG9zaXRlQ29tcG9uZW50TWV0aG9kID1cbiAgICAgICAgUmVhY3RDb21wb3NpdGVDb21wb25lbnRJbnRlcmZhY2UuaGFzT3duUHJvcGVydHkobmFtZSk7XG4gICAgICB2YXIgaXNBbHJlYWR5RGVmaW5lZCA9IHByb3RvLmhhc093blByb3BlcnR5KG5hbWUpO1xuICAgICAgdmFyIG1hcmtlZERvbnRCaW5kID0gcHJvcGVydHkgJiYgcHJvcGVydHkuX19yZWFjdERvbnRCaW5kO1xuICAgICAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgcHJvcGVydHkgPT09ICdmdW5jdGlvbic7XG4gICAgICB2YXIgc2hvdWxkQXV0b0JpbmQgPVxuICAgICAgICBpc0Z1bmN0aW9uICYmXG4gICAgICAgICFpc0NvbXBvc2l0ZUNvbXBvbmVudE1ldGhvZCAmJlxuICAgICAgICAhaXNBbHJlYWR5RGVmaW5lZCAmJlxuICAgICAgICAhbWFya2VkRG9udEJpbmQ7XG5cbiAgICAgIGlmIChzaG91bGRBdXRvQmluZCkge1xuICAgICAgICBpZiAoIXByb3RvLl9fcmVhY3RBdXRvQmluZE1hcCkge1xuICAgICAgICAgIHByb3RvLl9fcmVhY3RBdXRvQmluZE1hcCA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHByb3RvLl9fcmVhY3RBdXRvQmluZE1hcFtuYW1lXSA9IHByb3BlcnR5O1xuICAgICAgICBwcm90b1tuYW1lXSA9IHByb3BlcnR5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzQWxyZWFkeURlZmluZWQpIHtcbiAgICAgICAgICB2YXIgc3BlY1BvbGljeSA9IFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50SW50ZXJmYWNlW25hbWVdO1xuXG4gICAgICAgICAgLy8gVGhlc2UgY2FzZXMgc2hvdWxkIGFscmVhZHkgYmUgY2F1Z2h0IGJ5IHZhbGlkYXRlTWV0aG9kT3ZlcnJpZGVcbiAgICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAgICAgaXNDb21wb3NpdGVDb21wb25lbnRNZXRob2QgJiYgKFxuICAgICAgICAgICAgICBzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCB8fFxuICAgICAgICAgICAgICBzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50OiBVbmV4cGVjdGVkIHNwZWMgcG9saWN5ICVzIGZvciBrZXkgJXMgJyArXG4gICAgICAgICAgICAnd2hlbiBtaXhpbmcgaW4gY29tcG9uZW50IHNwZWNzLicsXG4gICAgICAgICAgICBzcGVjUG9saWN5LFxuICAgICAgICAgICAgbmFtZVxuICAgICAgICAgICkgOiBpbnZhcmlhbnQoaXNDb21wb3NpdGVDb21wb25lbnRNZXRob2QgJiYgKFxuICAgICAgICAgICAgc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQgfHxcbiAgICAgICAgICAgIHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTllcbiAgICAgICAgICApKSk7XG5cbiAgICAgICAgICAvLyBGb3IgbWV0aG9kcyB3aGljaCBhcmUgZGVmaW5lZCBtb3JlIHRoYW4gb25jZSwgY2FsbCB0aGUgZXhpc3RpbmdcbiAgICAgICAgICAvLyBtZXRob2RzIGJlZm9yZSBjYWxsaW5nIHRoZSBuZXcgcHJvcGVydHksIG1lcmdpbmcgaWYgYXBwcm9wcmlhdGUuXG4gICAgICAgICAgaWYgKHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTllfTUVSR0VEKSB7XG4gICAgICAgICAgICBwcm90b1tuYW1lXSA9IGNyZWF0ZU1lcmdlZFJlc3VsdEZ1bmN0aW9uKHByb3RvW25hbWVdLCBwcm9wZXJ0eSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZKSB7XG4gICAgICAgICAgICBwcm90b1tuYW1lXSA9IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihwcm90b1tuYW1lXSwgcHJvcGVydHkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm90b1tuYW1lXSA9IHByb3BlcnR5O1xuICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgICAgIC8vIEFkZCB2ZXJib3NlIGRpc3BsYXlOYW1lIHRvIHRoZSBmdW5jdGlvbiwgd2hpY2ggaGVscHMgd2hlbiBsb29raW5nXG4gICAgICAgICAgICAvLyBhdCBwcm9maWxpbmcgdG9vbHMuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHByb3BlcnR5ID09PSAnZnVuY3Rpb24nICYmIHNwZWMuZGlzcGxheU5hbWUpIHtcbiAgICAgICAgICAgICAgcHJvdG9bbmFtZV0uZGlzcGxheU5hbWUgPSBzcGVjLmRpc3BsYXlOYW1lICsgJ18nICsgbmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbWl4U3RhdGljU3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIHN0YXRpY3MpIHtcbiAgaWYgKCFzdGF0aWNzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGZvciAodmFyIG5hbWUgaW4gc3RhdGljcykge1xuICAgIHZhciBwcm9wZXJ0eSA9IHN0YXRpY3NbbmFtZV07XG4gICAgaWYgKCFzdGF0aWNzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgaXNSZXNlcnZlZCA9IG5hbWUgaW4gUkVTRVJWRURfU1BFQ19LRVlTO1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAhaXNSZXNlcnZlZCxcbiAgICAgICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudDogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSBhIHJlc2VydmVkICcgK1xuICAgICAgJ3Byb3BlcnR5LCBgJXNgLCB0aGF0IHNob3VsZG5cXCd0IGJlIG9uIHRoZSBcInN0YXRpY3NcIiBrZXkuIERlZmluZSBpdCAnICtcbiAgICAgICdhcyBhbiBpbnN0YW5jZSBwcm9wZXJ0eSBpbnN0ZWFkOyBpdCB3aWxsIHN0aWxsIGJlIGFjY2Vzc2libGUgb24gdGhlICcgK1xuICAgICAgJ2NvbnN0cnVjdG9yLicsXG4gICAgICBuYW1lXG4gICAgKSA6IGludmFyaWFudCghaXNSZXNlcnZlZCkpO1xuXG4gICAgdmFyIGlzSW5oZXJpdGVkID0gbmFtZSBpbiBDb25zdHJ1Y3RvcjtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgIWlzSW5oZXJpdGVkLFxuICAgICAgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50OiBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gZGVmaW5lICcgK1xuICAgICAgJ2Alc2Agb24geW91ciBjb21wb25lbnQgbW9yZSB0aGFuIG9uY2UuIFRoaXMgY29uZmxpY3QgbWF5IGJlICcgK1xuICAgICAgJ2R1ZSB0byBhIG1peGluLicsXG4gICAgICBuYW1lXG4gICAgKSA6IGludmFyaWFudCghaXNJbmhlcml0ZWQpKTtcbiAgICBDb25zdHJ1Y3RvcltuYW1lXSA9IHByb3BlcnR5O1xuICB9XG59XG5cbi8qKlxuICogTWVyZ2UgdHdvIG9iamVjdHMsIGJ1dCB0aHJvdyBpZiBib3RoIGNvbnRhaW4gdGhlIHNhbWUga2V5LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvbmUgVGhlIGZpcnN0IG9iamVjdCwgd2hpY2ggaXMgbXV0YXRlZC5cbiAqIEBwYXJhbSB7b2JqZWN0fSB0d28gVGhlIHNlY29uZCBvYmplY3RcbiAqIEByZXR1cm4ge29iamVjdH0gb25lIGFmdGVyIGl0IGhhcyBiZWVuIG11dGF0ZWQgdG8gY29udGFpbiBldmVyeXRoaW5nIGluIHR3by5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VPYmplY3RzV2l0aE5vRHVwbGljYXRlS2V5cyhvbmUsIHR3bykge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIG9uZSAmJiB0d28gJiYgdHlwZW9mIG9uZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHR3byA9PT0gJ29iamVjdCcsXG4gICAgJ21lcmdlT2JqZWN0c1dpdGhOb0R1cGxpY2F0ZUtleXMoKTogQ2Fubm90IG1lcmdlIG5vbi1vYmplY3RzJ1xuICApIDogaW52YXJpYW50KG9uZSAmJiB0d28gJiYgdHlwZW9mIG9uZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHR3byA9PT0gJ29iamVjdCcpKTtcblxuICBtYXBPYmplY3QodHdvLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIG9uZVtrZXldID09PSB1bmRlZmluZWQsXG4gICAgICAnbWVyZ2VPYmplY3RzV2l0aE5vRHVwbGljYXRlS2V5cygpOiAnICtcbiAgICAgICdUcmllZCB0byBtZXJnZSB0d28gb2JqZWN0cyB3aXRoIHRoZSBzYW1lIGtleTogYCVzYC4gVGhpcyBjb25mbGljdCAnICtcbiAgICAgICdtYXkgYmUgZHVlIHRvIGEgbWl4aW47IGluIHBhcnRpY3VsYXIsIHRoaXMgbWF5IGJlIGNhdXNlZCBieSB0d28gJyArXG4gICAgICAnZ2V0SW5pdGlhbFN0YXRlKCkgb3IgZ2V0RGVmYXVsdFByb3BzKCkgbWV0aG9kcyByZXR1cm5pbmcgb2JqZWN0cyAnICtcbiAgICAgICd3aXRoIGNsYXNoaW5nIGtleXMuJyxcbiAgICAgIGtleVxuICAgICkgOiBpbnZhcmlhbnQob25lW2tleV0gPT09IHVuZGVmaW5lZCkpO1xuICAgIG9uZVtrZXldID0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gb25lO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdHdvIGZ1bmN0aW9ucyBhbmQgbWVyZ2VzIHRoZWlyIHJldHVybiB2YWx1ZXMuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gb25lIEZ1bmN0aW9uIHRvIGludm9rZSBmaXJzdC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHR3byBGdW5jdGlvbiB0byBpbnZva2Ugc2Vjb25kLlxuICogQHJldHVybiB7ZnVuY3Rpb259IEZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgdHdvIGFyZ3VtZW50IGZ1bmN0aW9ucy5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU1lcmdlZFJlc3VsdEZ1bmN0aW9uKG9uZSwgdHdvKSB7XG4gIHJldHVybiBmdW5jdGlvbiBtZXJnZWRSZXN1bHQoKSB7XG4gICAgdmFyIGEgPSBvbmUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB2YXIgYiA9IHR3by5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChhID09IG51bGwpIHtcbiAgICAgIHJldHVybiBiO1xuICAgIH0gZWxzZSBpZiAoYiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlT2JqZWN0c1dpdGhOb0R1cGxpY2F0ZUtleXMoYSwgYik7XG4gIH07XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0d28gZnVuY3Rpb25zIGFuZCBpZ25vcmVzIHRoZWlyIHJldHVybiB2YWxlcy5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBvbmUgRnVuY3Rpb24gdG8gaW52b2tlIGZpcnN0LlxuICogQHBhcmFtIHtmdW5jdGlvbn0gdHdvIEZ1bmN0aW9uIHRvIGludm9rZSBzZWNvbmQuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn0gRnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSB0d28gYXJndW1lbnQgZnVuY3Rpb25zLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKG9uZSwgdHdvKSB7XG4gIHJldHVybiBmdW5jdGlvbiBjaGFpbmVkRnVuY3Rpb24oKSB7XG4gICAgb25lLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdHdvLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbi8qKlxuICogYFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50YCBtYWludGFpbnMgYW4gYXV4aWxpYXJ5IGxpZmUgY3ljbGUgc3RhdGUgaW5cbiAqIGB0aGlzLl9jb21wb3NpdGVMaWZlQ3ljbGVTdGF0ZWAgKHdoaWNoIGNhbiBiZSBudWxsKS5cbiAqXG4gKiBUaGlzIGlzIGRpZmZlcmVudCBmcm9tIHRoZSBsaWZlIGN5Y2xlIHN0YXRlIG1haW50YWluZWQgYnkgYFJlYWN0Q29tcG9uZW50YCBpblxuICogYHRoaXMuX2xpZmVDeWNsZVN0YXRlYC4gVGhlIGZvbGxvd2luZyBkaWFncmFtIHNob3dzIGhvdyB0aGUgc3RhdGVzIG92ZXJsYXAgaW5cbiAqIHRpbWUuIFRoZXJlIGFyZSB0aW1lcyB3aGVuIHRoZSBDb21wb3NpdGVMaWZlQ3ljbGUgaXMgbnVsbCAtIGF0IHRob3NlIHRpbWVzIGl0XG4gKiBpcyBvbmx5IG1lYW5pbmdmdWwgdG8gbG9vayBhdCBDb21wb25lbnRMaWZlQ3ljbGUgYWxvbmUuXG4gKlxuICogVG9wIFJvdzogUmVhY3RDb21wb25lbnQuQ29tcG9uZW50TGlmZUN5Y2xlXG4gKiBMb3cgUm93OiBSZWFjdENvbXBvbmVudC5Db21wb3NpdGVMaWZlQ3ljbGVcbiAqXG4gKiArLS0tLS0tLSstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rLS0tLS0tLS0rXG4gKiB8ICBVTiAgIHwgICAgICAgICAgICAgTU9VTlRFRCAgICAgICAgICAgICB8ICAgVU4gICB8XG4gKiB8TU9VTlRFRHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1PVU5URUR8XG4gKiArLS0tLS0tLSstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rLS0tLS0tLS0rXG4gKiB8ICAgICAgIF4tLS0tLS0tLSsgICArLS0tLS0tLSsgICArLS0tLS0tLS1eICAgICAgICB8XG4gKiB8ICAgICAgIHwgICAgICAgIHwgICB8ICAgICAgIHwgICB8ICAgICAgICB8ICAgICAgICB8XG4gKiB8ICAgIDAtLXxNT1VOVElOR3wtMC18UkVDRUlWRXwtMC18ICAgVU4gICB8LS0tPjAgICB8XG4gKiB8ICAgICAgIHwgICAgICAgIHwgICB8UFJPUFMgIHwgICB8TU9VTlRJTkd8ICAgICAgICB8XG4gKiB8ICAgICAgIHwgICAgICAgIHwgICB8ICAgICAgIHwgICB8ICAgICAgICB8ICAgICAgICB8XG4gKiB8ICAgICAgIHwgICAgICAgIHwgICB8ICAgICAgIHwgICB8ICAgICAgICB8ICAgICAgICB8XG4gKiB8ICAgICAgICstLS0tLS0tLSsgICArLS0tLS0tLSsgICArLS0tLS0tLS0rICAgICAgICB8XG4gKiB8ICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICB8XG4gKiArLS0tLS0tLSstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rLS0tLS0tLS0rXG4gKi9cbnZhciBDb21wb3NpdGVMaWZlQ3ljbGUgPSBrZXlNaXJyb3Ioe1xuICAvKipcbiAgICogQ29tcG9uZW50cyBpbiB0aGUgcHJvY2VzcyBvZiBiZWluZyBtb3VudGVkIHJlc3BvbmQgdG8gc3RhdGUgY2hhbmdlc1xuICAgKiBkaWZmZXJlbnRseS5cbiAgICovXG4gIE1PVU5USU5HOiBudWxsLFxuICAvKipcbiAgICogQ29tcG9uZW50cyBpbiB0aGUgcHJvY2VzcyBvZiBiZWluZyB1bm1vdW50ZWQgYXJlIGd1YXJkZWQgYWdhaW5zdCBzdGF0ZVxuICAgKiBjaGFuZ2VzLlxuICAgKi9cbiAgVU5NT1VOVElORzogbnVsbCxcbiAgLyoqXG4gICAqIENvbXBvbmVudHMgdGhhdCBhcmUgbW91bnRlZCBhbmQgcmVjZWl2aW5nIG5ldyBwcm9wcyByZXNwb25kIHRvIHN0YXRlXG4gICAqIGNoYW5nZXMgZGlmZmVyZW50bHkuXG4gICAqL1xuICBSRUNFSVZJTkdfUFJPUFM6IG51bGxcbn0pO1xuXG4vKipcbiAqIEBsZW5kcyB7UmVhY3RDb21wb3NpdGVDb21wb25lbnQucHJvdG90eXBlfVxuICovXG52YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnRNaXhpbiA9IHtcblxuICAvKipcbiAgICogQmFzZSBjb25zdHJ1Y3RvciBmb3IgYWxsIGNvbXBvc2l0ZSBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50XG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIC8vIENoaWxkcmVuIGNhbiBiZSBlaXRoZXIgYW4gYXJyYXkgb3IgbW9yZSB0aGFuIG9uZSBhcmd1bWVudFxuICAgIFJlYWN0Q29tcG9uZW50Lk1peGluLmNvbnN0cnVjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIFJlYWN0T3duZXIuTWl4aW4uY29uc3RydWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICB0aGlzLnN0YXRlID0gbnVsbDtcbiAgICB0aGlzLl9wZW5kaW5nU3RhdGUgPSBudWxsO1xuXG4gICAgLy8gVGhpcyBpcyB0aGUgcHVibGljIHBvc3QtcHJvY2Vzc2VkIGNvbnRleHQuIFRoZSByZWFsIGNvbnRleHQgYW5kIHBlbmRpbmdcbiAgICAvLyBjb250ZXh0IGxpdmVzIG9uIHRoZSBlbGVtZW50LlxuICAgIHRoaXMuY29udGV4dCA9IG51bGw7XG5cbiAgICB0aGlzLl9jb21wb3NpdGVMaWZlQ3ljbGVTdGF0ZSA9IG51bGw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCB0aGlzIGNvbXBvc2l0ZSBjb21wb25lbnQgaXMgbW91bnRlZC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBtb3VudGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICogQGZpbmFsXG4gICAqL1xuICBpc01vdW50ZWQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBSZWFjdENvbXBvbmVudC5NaXhpbi5pc01vdW50ZWQuY2FsbCh0aGlzKSAmJlxuICAgICAgdGhpcy5fY29tcG9zaXRlTGlmZUN5Y2xlU3RhdGUgIT09IENvbXBvc2l0ZUxpZmVDeWNsZS5NT1VOVElORztcbiAgfSxcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGNvbXBvbmVudCwgcmVuZGVycyBtYXJrdXAsIGFuZCByZWdpc3RlcnMgZXZlbnQgbGlzdGVuZXJzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcm9vdElEIERPTSBJRCBvZiB0aGUgcm9vdCBub2RlLlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb258UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtudW1iZXJ9IG1vdW50RGVwdGggbnVtYmVyIG9mIGNvbXBvbmVudHMgaW4gdGhlIG93bmVyIGhpZXJhcmNoeVxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfSBSZW5kZXJlZCBtYXJrdXAgdG8gYmUgaW5zZXJ0ZWQgaW50byB0aGUgRE9NLlxuICAgKiBAZmluYWxcbiAgICogQGludGVybmFsXG4gICAqL1xuICBtb3VudENvbXBvbmVudDogUmVhY3RQZXJmLm1lYXN1cmUoXG4gICAgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JyxcbiAgICAnbW91bnRDb21wb25lbnQnLFxuICAgIGZ1bmN0aW9uKHJvb3RJRCwgdHJhbnNhY3Rpb24sIG1vdW50RGVwdGgpIHtcbiAgICAgIFJlYWN0Q29tcG9uZW50Lk1peGluLm1vdW50Q29tcG9uZW50LmNhbGwoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHJvb3RJRCxcbiAgICAgICAgdHJhbnNhY3Rpb24sXG4gICAgICAgIG1vdW50RGVwdGhcbiAgICAgICk7XG4gICAgICB0aGlzLl9jb21wb3NpdGVMaWZlQ3ljbGVTdGF0ZSA9IENvbXBvc2l0ZUxpZmVDeWNsZS5NT1VOVElORztcblxuICAgICAgaWYgKHRoaXMuX19yZWFjdEF1dG9CaW5kTWFwKSB7XG4gICAgICAgIHRoaXMuX2JpbmRBdXRvQmluZE1ldGhvZHMoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jb250ZXh0ID0gdGhpcy5fcHJvY2Vzc0NvbnRleHQodGhpcy5fY3VycmVudEVsZW1lbnQuX2NvbnRleHQpO1xuICAgICAgdGhpcy5wcm9wcyA9IHRoaXMuX3Byb2Nlc3NQcm9wcyh0aGlzLnByb3BzKTtcblxuICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMuZ2V0SW5pdGlhbFN0YXRlID8gdGhpcy5nZXRJbml0aWFsU3RhdGUoKSA6IG51bGw7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICB0eXBlb2YgdGhpcy5zdGF0ZSA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkodGhpcy5zdGF0ZSksXG4gICAgICAgICclcy5nZXRJbml0aWFsU3RhdGUoKTogbXVzdCByZXR1cm4gYW4gb2JqZWN0IG9yIG51bGwnLFxuICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCdcbiAgICAgICkgOiBpbnZhcmlhbnQodHlwZW9mIHRoaXMuc3RhdGUgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHRoaXMuc3RhdGUpKSk7XG5cbiAgICAgIHRoaXMuX3BlbmRpbmdTdGF0ZSA9IG51bGw7XG4gICAgICB0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGUgPSBmYWxzZTtcblxuICAgICAgaWYgKHRoaXMuY29tcG9uZW50V2lsbE1vdW50KSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50V2lsbE1vdW50KCk7XG4gICAgICAgIC8vIFdoZW4gbW91bnRpbmcsIGNhbGxzIHRvIGBzZXRTdGF0ZWAgYnkgYGNvbXBvbmVudFdpbGxNb3VudGAgd2lsbCBzZXRcbiAgICAgICAgLy8gYHRoaXMuX3BlbmRpbmdTdGF0ZWAgd2l0aG91dCB0cmlnZ2VyaW5nIGEgcmUtcmVuZGVyLlxuICAgICAgICBpZiAodGhpcy5fcGVuZGluZ1N0YXRlKSB7XG4gICAgICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMuX3BlbmRpbmdTdGF0ZTtcbiAgICAgICAgICB0aGlzLl9wZW5kaW5nU3RhdGUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50ID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChcbiAgICAgICAgdGhpcy5fcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50KCksXG4gICAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGUgLy8gVGhlIHdyYXBwaW5nIHR5cGVcbiAgICAgICk7XG5cbiAgICAgIC8vIERvbmUgd2l0aCBtb3VudGluZywgYHNldFN0YXRlYCB3aWxsIG5vdyB0cmlnZ2VyIFVJIGNoYW5nZXMuXG4gICAgICB0aGlzLl9jb21wb3NpdGVMaWZlQ3ljbGVTdGF0ZSA9IG51bGw7XG4gICAgICB2YXIgbWFya3VwID0gdGhpcy5fcmVuZGVyZWRDb21wb25lbnQubW91bnRDb21wb25lbnQoXG4gICAgICAgIHJvb3RJRCxcbiAgICAgICAgdHJhbnNhY3Rpb24sXG4gICAgICAgIG1vdW50RGVwdGggKyAxXG4gICAgICApO1xuICAgICAgaWYgKHRoaXMuY29tcG9uZW50RGlkTW91bnQpIHtcbiAgICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZSh0aGlzLmNvbXBvbmVudERpZE1vdW50LCB0aGlzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXJrdXA7XG4gICAgfVxuICApLFxuXG4gIC8qKlxuICAgKiBSZWxlYXNlcyBhbnkgcmVzb3VyY2VzIGFsbG9jYXRlZCBieSBgbW91bnRDb21wb25lbnRgLlxuICAgKlxuICAgKiBAZmluYWxcbiAgICogQGludGVybmFsXG4gICAqL1xuICB1bm1vdW50Q29tcG9uZW50OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9jb21wb3NpdGVMaWZlQ3ljbGVTdGF0ZSA9IENvbXBvc2l0ZUxpZmVDeWNsZS5VTk1PVU5USU5HO1xuICAgIGlmICh0aGlzLmNvbXBvbmVudFdpbGxVbm1vdW50KSB7XG4gICAgICB0aGlzLmNvbXBvbmVudFdpbGxVbm1vdW50KCk7XG4gICAgfVxuICAgIHRoaXMuX2NvbXBvc2l0ZUxpZmVDeWNsZVN0YXRlID0gbnVsbDtcblxuICAgIHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50LnVubW91bnRDb21wb25lbnQoKTtcbiAgICB0aGlzLl9yZW5kZXJlZENvbXBvbmVudCA9IG51bGw7XG5cbiAgICBSZWFjdENvbXBvbmVudC5NaXhpbi51bm1vdW50Q29tcG9uZW50LmNhbGwodGhpcyk7XG5cbiAgICAvLyBTb21lIGV4aXN0aW5nIGNvbXBvbmVudHMgcmVseSBvbiB0aGlzLnByb3BzIGV2ZW4gYWZ0ZXIgdGhleSd2ZSBiZWVuXG4gICAgLy8gZGVzdHJveWVkIChpbiBldmVudCBoYW5kbGVycykuXG4gICAgLy8gVE9ETzogdGhpcy5wcm9wcyA9IG51bGw7XG4gICAgLy8gVE9ETzogdGhpcy5zdGF0ZSA9IG51bGw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHN0YXRlLiBBbHdheXMgdXNlIHRoaXMgb3IgYHJlcGxhY2VTdGF0ZWAgdG8gbXV0YXRlXG4gICAqIHN0YXRlLiBZb3Ugc2hvdWxkIHRyZWF0IGB0aGlzLnN0YXRlYCBhcyBpbW11dGFibGUuXG4gICAqXG4gICAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGB0aGlzLnN0YXRlYCB3aWxsIGJlIGltbWVkaWF0ZWx5IHVwZGF0ZWQsIHNvXG4gICAqIGFjY2Vzc2luZyBgdGhpcy5zdGF0ZWAgYWZ0ZXIgY2FsbGluZyB0aGlzIG1ldGhvZCBtYXkgcmV0dXJuIHRoZSBvbGQgdmFsdWUuXG4gICAqXG4gICAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGNhbGxzIHRvIGBzZXRTdGF0ZWAgd2lsbCBydW4gc3luY2hyb25vdXNseSxcbiAgICogYXMgdGhleSBtYXkgZXZlbnR1YWxseSBiZSBiYXRjaGVkIHRvZ2V0aGVyLiAgWW91IGNhbiBwcm92aWRlIGFuIG9wdGlvbmFsXG4gICAqIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBleGVjdXRlZCB3aGVuIHRoZSBjYWxsIHRvIHNldFN0YXRlIGlzIGFjdHVhbGx5XG4gICAqIGNvbXBsZXRlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcnRpYWxTdGF0ZSBOZXh0IHBhcnRpYWwgc3RhdGUgdG8gYmUgbWVyZ2VkIHdpdGggc3RhdGUuXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsZWQgYWZ0ZXIgc3RhdGUgaXMgdXBkYXRlZC5cbiAgICogQGZpbmFsXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHNldFN0YXRlOiBmdW5jdGlvbihwYXJ0aWFsU3RhdGUsIGNhbGxiYWNrKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIHR5cGVvZiBwYXJ0aWFsU3RhdGUgPT09ICdvYmplY3QnIHx8IHBhcnRpYWxTdGF0ZSA9PSBudWxsLFxuICAgICAgJ3NldFN0YXRlKC4uLik6IHRha2VzIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMgdG8gdXBkYXRlLidcbiAgICApIDogaW52YXJpYW50KHR5cGVvZiBwYXJ0aWFsU3RhdGUgPT09ICdvYmplY3QnIHx8IHBhcnRpYWxTdGF0ZSA9PSBudWxsKSk7XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVil7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgcGFydGlhbFN0YXRlICE9IG51bGwsXG4gICAgICAgICdzZXRTdGF0ZSguLi4pOiBZb3UgcGFzc2VkIGFuIHVuZGVmaW5lZCBvciBudWxsIHN0YXRlIG9iamVjdDsgJyArXG4gICAgICAgICdpbnN0ZWFkLCB1c2UgZm9yY2VVcGRhdGUoKS4nXG4gICAgICApIDogbnVsbCk7XG4gICAgfVxuICAgIC8vIE1lcmdlIHdpdGggYF9wZW5kaW5nU3RhdGVgIGlmIGl0IGV4aXN0cywgb3RoZXJ3aXNlIHdpdGggZXhpc3Rpbmcgc3RhdGUuXG4gICAgdGhpcy5yZXBsYWNlU3RhdGUoXG4gICAgICBhc3NpZ24oe30sIHRoaXMuX3BlbmRpbmdTdGF0ZSB8fCB0aGlzLnN0YXRlLCBwYXJ0aWFsU3RhdGUpLFxuICAgICAgY2FsbGJhY2tcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhbGwgb2YgdGhlIHN0YXRlLiBBbHdheXMgdXNlIHRoaXMgb3IgYHNldFN0YXRlYCB0byBtdXRhdGUgc3RhdGUuXG4gICAqIFlvdSBzaG91bGQgdHJlYXQgYHRoaXMuc3RhdGVgIGFzIGltbXV0YWJsZS5cbiAgICpcbiAgICogVGhlcmUgaXMgbm8gZ3VhcmFudGVlIHRoYXQgYHRoaXMuc3RhdGVgIHdpbGwgYmUgaW1tZWRpYXRlbHkgdXBkYXRlZCwgc29cbiAgICogYWNjZXNzaW5nIGB0aGlzLnN0YXRlYCBhZnRlciBjYWxsaW5nIHRoaXMgbWV0aG9kIG1heSByZXR1cm4gdGhlIG9sZCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbXBsZXRlU3RhdGUgTmV4dCBzdGF0ZS5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBzdGF0ZSBpcyB1cGRhdGVkLlxuICAgKiBAZmluYWxcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgcmVwbGFjZVN0YXRlOiBmdW5jdGlvbihjb21wbGV0ZVN0YXRlLCBjYWxsYmFjaykge1xuICAgIHZhbGlkYXRlTGlmZUN5Y2xlT25SZXBsYWNlU3RhdGUodGhpcyk7XG4gICAgdGhpcy5fcGVuZGluZ1N0YXRlID0gY29tcGxldGVTdGF0ZTtcbiAgICBpZiAodGhpcy5fY29tcG9zaXRlTGlmZUN5Y2xlU3RhdGUgIT09IENvbXBvc2l0ZUxpZmVDeWNsZS5NT1VOVElORykge1xuICAgICAgLy8gSWYgd2UncmUgaW4gYSBjb21wb25lbnRXaWxsTW91bnQgaGFuZGxlciwgZG9uJ3QgZW5xdWV1ZSBhIHJlcmVuZGVyXG4gICAgICAvLyBiZWNhdXNlIFJlYWN0VXBkYXRlcyBhc3N1bWVzIHdlJ3JlIGluIGEgYnJvd3NlciBjb250ZXh0ICh3aGljaCBpcyB3cm9uZ1xuICAgICAgLy8gZm9yIHNlcnZlciByZW5kZXJpbmcpIGFuZCB3ZSdyZSBhYm91dCB0byBkbyBhIHJlbmRlciBhbnl3YXkuXG4gICAgICAvLyBUT0RPOiBUaGUgY2FsbGJhY2sgaGVyZSBpcyBpZ25vcmVkIHdoZW4gc2V0U3RhdGUgaXMgY2FsbGVkIGZyb21cbiAgICAgIC8vIGNvbXBvbmVudFdpbGxNb3VudC4gRWl0aGVyIGZpeCBpdCBvciBkaXNhbGxvdyBkb2luZyBzbyBjb21wbGV0ZWx5IGluXG4gICAgICAvLyBmYXZvciBvZiBnZXRJbml0aWFsU3RhdGUuXG4gICAgICBSZWFjdFVwZGF0ZXMuZW5xdWV1ZVVwZGF0ZSh0aGlzLCBjYWxsYmFjayk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBGaWx0ZXJzIHRoZSBjb250ZXh0IG9iamVjdCB0byBvbmx5IGNvbnRhaW4ga2V5cyBzcGVjaWZpZWQgaW5cbiAgICogYGNvbnRleHRUeXBlc2AsIGFuZCBhc3NlcnRzIHRoYXQgdGhleSBhcmUgdmFsaWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAqIEByZXR1cm4gez9vYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcHJvY2Vzc0NvbnRleHQ6IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICB2YXIgbWFza2VkQ29udGV4dCA9IG51bGw7XG4gICAgdmFyIGNvbnRleHRUeXBlcyA9IHRoaXMuY29uc3RydWN0b3IuY29udGV4dFR5cGVzO1xuICAgIGlmIChjb250ZXh0VHlwZXMpIHtcbiAgICAgIG1hc2tlZENvbnRleHQgPSB7fTtcbiAgICAgIGZvciAodmFyIGNvbnRleHROYW1lIGluIGNvbnRleHRUeXBlcykge1xuICAgICAgICBtYXNrZWRDb250ZXh0W2NvbnRleHROYW1lXSA9IGNvbnRleHRbY29udGV4dE5hbWVdO1xuICAgICAgfVxuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICB0aGlzLl9jaGVja1Byb3BUeXBlcyhcbiAgICAgICAgICBjb250ZXh0VHlwZXMsXG4gICAgICAgICAgbWFza2VkQ29udGV4dCxcbiAgICAgICAgICBSZWFjdFByb3BUeXBlTG9jYXRpb25zLmNvbnRleHRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1hc2tlZENvbnRleHQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjdXJyZW50Q29udGV4dFxuICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcHJvY2Vzc0NoaWxkQ29udGV4dDogZnVuY3Rpb24oY3VycmVudENvbnRleHQpIHtcbiAgICB2YXIgY2hpbGRDb250ZXh0ID0gdGhpcy5nZXRDaGlsZENvbnRleHQgJiYgdGhpcy5nZXRDaGlsZENvbnRleHQoKTtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSB0aGlzLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCc7XG4gICAgaWYgKGNoaWxkQ29udGV4dCkge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgdHlwZW9mIHRoaXMuY29uc3RydWN0b3IuY2hpbGRDb250ZXh0VHlwZXMgPT09ICdvYmplY3QnLFxuICAgICAgICAnJXMuZ2V0Q2hpbGRDb250ZXh0KCk6IGNoaWxkQ29udGV4dFR5cGVzIG11c3QgYmUgZGVmaW5lZCBpbiBvcmRlciB0byAnICtcbiAgICAgICAgJ3VzZSBnZXRDaGlsZENvbnRleHQoKS4nLFxuICAgICAgICBkaXNwbGF5TmFtZVxuICAgICAgKSA6IGludmFyaWFudCh0eXBlb2YgdGhpcy5jb25zdHJ1Y3Rvci5jaGlsZENvbnRleHRUeXBlcyA9PT0gJ29iamVjdCcpKTtcbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgdGhpcy5fY2hlY2tQcm9wVHlwZXMoXG4gICAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5jaGlsZENvbnRleHRUeXBlcyxcbiAgICAgICAgICBjaGlsZENvbnRleHQsXG4gICAgICAgICAgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5jaGlsZENvbnRleHRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIG5hbWUgaW4gY2hpbGRDb250ZXh0KSB7XG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICAgbmFtZSBpbiB0aGlzLmNvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzLFxuICAgICAgICAgICclcy5nZXRDaGlsZENvbnRleHQoKToga2V5IFwiJXNcIiBpcyBub3QgZGVmaW5lZCBpbiBjaGlsZENvbnRleHRUeXBlcy4nLFxuICAgICAgICAgIGRpc3BsYXlOYW1lLFxuICAgICAgICAgIG5hbWVcbiAgICAgICAgKSA6IGludmFyaWFudChuYW1lIGluIHRoaXMuY29uc3RydWN0b3IuY2hpbGRDb250ZXh0VHlwZXMpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhc3NpZ24oe30sIGN1cnJlbnRDb250ZXh0LCBjaGlsZENvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gY3VycmVudENvbnRleHQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFByb2Nlc3NlcyBwcm9wcyBieSBzZXR0aW5nIGRlZmF1bHQgdmFsdWVzIGZvciB1bnNwZWNpZmllZCBwcm9wcyBhbmRcbiAgICogYXNzZXJ0aW5nIHRoYXQgdGhlIHByb3BzIGFyZSB2YWxpZC4gRG9lcyBub3QgbXV0YXRlIGl0cyBhcmd1bWVudDsgcmV0dXJuc1xuICAgKiBhIG5ldyBwcm9wcyBvYmplY3Qgd2l0aCBkZWZhdWx0cyBtZXJnZWQgaW4uXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuZXdQcm9wc1xuICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcHJvY2Vzc1Byb3BzOiBmdW5jdGlvbihuZXdQcm9wcykge1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIHZhciBwcm9wVHlwZXMgPSB0aGlzLmNvbnN0cnVjdG9yLnByb3BUeXBlcztcbiAgICAgIGlmIChwcm9wVHlwZXMpIHtcbiAgICAgICAgdGhpcy5fY2hlY2tQcm9wVHlwZXMocHJvcFR5cGVzLCBuZXdQcm9wcywgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5wcm9wKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ld1Byb3BzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBc3NlcnQgdGhhdCB0aGUgcHJvcHMgYXJlIHZhbGlkXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wVHlwZXMgTWFwIG9mIHByb3AgbmFtZSB0byBhIFJlYWN0UHJvcFR5cGVcbiAgICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhdGlvbiBlLmcuIFwicHJvcFwiLCBcImNvbnRleHRcIiwgXCJjaGlsZCBjb250ZXh0XCJcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9jaGVja1Byb3BUeXBlczogZnVuY3Rpb24ocHJvcFR5cGVzLCBwcm9wcywgbG9jYXRpb24pIHtcbiAgICAvLyBUT0RPOiBTdG9wIHZhbGlkYXRpbmcgcHJvcCB0eXBlcyBoZXJlIGFuZCBvbmx5IHVzZSB0aGUgZWxlbWVudFxuICAgIC8vIHZhbGlkYXRpb24uXG4gICAgdmFyIGNvbXBvbmVudE5hbWUgPSB0aGlzLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lO1xuICAgIGZvciAodmFyIHByb3BOYW1lIGluIHByb3BUeXBlcykge1xuICAgICAgaWYgKHByb3BUeXBlcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgdmFyIGVycm9yID1cbiAgICAgICAgICBwcm9wVHlwZXNbcHJvcE5hbWVdKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pO1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIC8vIFdlIG1heSB3YW50IHRvIGV4dGVuZCB0aGlzIGxvZ2ljIGZvciBzaW1pbGFyIGVycm9ycyBpblxuICAgICAgICAgIC8vIHJlbmRlckNvbXBvbmVudCBjYWxscywgc28gSSdtIGFic3RyYWN0aW5nIGl0IGF3YXkgaW50b1xuICAgICAgICAgIC8vIGEgZnVuY3Rpb24gdG8gbWluaW1pemUgcmVmYWN0b3JpbmcgaW4gdGhlIGZ1dHVyZVxuICAgICAgICAgIHZhciBhZGRlbmR1bSA9IGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSh0aGlzKTtcbiAgICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhmYWxzZSwgZXJyb3IubWVzc2FnZSArIGFkZGVuZHVtKSA6IG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBJZiBhbnkgb2YgYF9wZW5kaW5nRWxlbWVudGAsIGBfcGVuZGluZ1N0YXRlYCwgb3IgYF9wZW5kaW5nRm9yY2VVcGRhdGVgXG4gICAqIGlzIHNldCwgdXBkYXRlIHRoZSBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQGludGVybmFsXG4gICAqL1xuICBwZXJmb3JtVXBkYXRlSWZOZWNlc3Nhcnk6IGZ1bmN0aW9uKHRyYW5zYWN0aW9uKSB7XG4gICAgdmFyIGNvbXBvc2l0ZUxpZmVDeWNsZVN0YXRlID0gdGhpcy5fY29tcG9zaXRlTGlmZUN5Y2xlU3RhdGU7XG4gICAgLy8gRG8gbm90IHRyaWdnZXIgYSBzdGF0ZSB0cmFuc2l0aW9uIGlmIHdlIGFyZSBpbiB0aGUgbWlkZGxlIG9mIG1vdW50aW5nIG9yXG4gICAgLy8gcmVjZWl2aW5nIHByb3BzIGJlY2F1c2UgYm90aCBvZiB0aG9zZSB3aWxsIGFscmVhZHkgYmUgZG9pbmcgdGhpcy5cbiAgICBpZiAoY29tcG9zaXRlTGlmZUN5Y2xlU3RhdGUgPT09IENvbXBvc2l0ZUxpZmVDeWNsZS5NT1VOVElORyB8fFxuICAgICAgICBjb21wb3NpdGVMaWZlQ3ljbGVTdGF0ZSA9PT0gQ29tcG9zaXRlTGlmZUN5Y2xlLlJFQ0VJVklOR19QUk9QUykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9wZW5kaW5nRWxlbWVudCA9PSBudWxsICYmXG4gICAgICAgIHRoaXMuX3BlbmRpbmdTdGF0ZSA9PSBudWxsICYmXG4gICAgICAgICF0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbmV4dENvbnRleHQgPSB0aGlzLmNvbnRleHQ7XG4gICAgdmFyIG5leHRQcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIG5leHRFbGVtZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQ7XG4gICAgaWYgKHRoaXMuX3BlbmRpbmdFbGVtZW50ICE9IG51bGwpIHtcbiAgICAgIG5leHRFbGVtZW50ID0gdGhpcy5fcGVuZGluZ0VsZW1lbnQ7XG4gICAgICBuZXh0Q29udGV4dCA9IHRoaXMuX3Byb2Nlc3NDb250ZXh0KG5leHRFbGVtZW50Ll9jb250ZXh0KTtcbiAgICAgIG5leHRQcm9wcyA9IHRoaXMuX3Byb2Nlc3NQcm9wcyhuZXh0RWxlbWVudC5wcm9wcyk7XG4gICAgICB0aGlzLl9wZW5kaW5nRWxlbWVudCA9IG51bGw7XG5cbiAgICAgIHRoaXMuX2NvbXBvc2l0ZUxpZmVDeWNsZVN0YXRlID0gQ29tcG9zaXRlTGlmZUN5Y2xlLlJFQ0VJVklOR19QUk9QUztcbiAgICAgIGlmICh0aGlzLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcywgbmV4dENvbnRleHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2NvbXBvc2l0ZUxpZmVDeWNsZVN0YXRlID0gbnVsbDtcblxuICAgIHZhciBuZXh0U3RhdGUgPSB0aGlzLl9wZW5kaW5nU3RhdGUgfHwgdGhpcy5zdGF0ZTtcbiAgICB0aGlzLl9wZW5kaW5nU3RhdGUgPSBudWxsO1xuXG4gICAgdmFyIHNob3VsZFVwZGF0ZSA9XG4gICAgICB0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGUgfHxcbiAgICAgICF0aGlzLnNob3VsZENvbXBvbmVudFVwZGF0ZSB8fFxuICAgICAgdGhpcy5zaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUsIG5leHRDb250ZXh0KTtcblxuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIGlmICh0eXBlb2Ygc2hvdWxkVXBkYXRlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAodGhpcy5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnKSArXG4gICAgICAgICAgJy5zaG91bGRDb21wb25lbnRVcGRhdGUoKTogUmV0dXJuZWQgdW5kZWZpbmVkIGluc3RlYWQgb2YgYSAnICtcbiAgICAgICAgICAnYm9vbGVhbiB2YWx1ZS4gTWFrZSBzdXJlIHRvIHJldHVybiB0cnVlIG9yIGZhbHNlLidcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkVXBkYXRlKSB7XG4gICAgICB0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGUgPSBmYWxzZTtcbiAgICAgIC8vIFdpbGwgc2V0IGB0aGlzLnByb3BzYCwgYHRoaXMuc3RhdGVgIGFuZCBgdGhpcy5jb250ZXh0YC5cbiAgICAgIHRoaXMuX3BlcmZvcm1Db21wb25lbnRVcGRhdGUoXG4gICAgICAgIG5leHRFbGVtZW50LFxuICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgIG5leHRTdGF0ZSxcbiAgICAgICAgbmV4dENvbnRleHQsXG4gICAgICAgIHRyYW5zYWN0aW9uXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiBpdCdzIGRldGVybWluZWQgdGhhdCBhIGNvbXBvbmVudCBzaG91bGQgbm90IHVwZGF0ZSwgd2Ugc3RpbGwgd2FudFxuICAgICAgLy8gdG8gc2V0IHByb3BzIGFuZCBzdGF0ZS5cbiAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gbmV4dEVsZW1lbnQ7XG4gICAgICB0aGlzLnByb3BzID0gbmV4dFByb3BzO1xuICAgICAgdGhpcy5zdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICAgIHRoaXMuY29udGV4dCA9IG5leHRDb250ZXh0O1xuXG4gICAgICAvLyBPd25lciBjYW5ub3QgY2hhbmdlIGJlY2F1c2Ugc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQgZG9lc24ndCBhbGxvd1xuICAgICAgLy8gaXQuIFRPRE86IFJlbW92ZSB0aGlzLl9vd25lciBjb21wbGV0ZWx5LlxuICAgICAgdGhpcy5fb3duZXIgPSBuZXh0RWxlbWVudC5fb3duZXI7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBNZXJnZXMgbmV3IHByb3BzIGFuZCBzdGF0ZSwgbm90aWZpZXMgZGVsZWdhdGUgbWV0aG9kcyBvZiB1cGRhdGUgYW5kXG4gICAqIHBlcmZvcm1zIHVwZGF0ZS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IG5leHRFbGVtZW50IE5leHQgZWxlbWVudFxuICAgKiBAcGFyYW0ge29iamVjdH0gbmV4dFByb3BzIE5leHQgcHVibGljIG9iamVjdCB0byBzZXQgYXMgcHJvcGVydGllcy5cbiAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0U3RhdGUgTmV4dCBvYmplY3QgdG8gc2V0IGFzIHN0YXRlLlxuICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRDb250ZXh0IE5leHQgcHVibGljIG9iamVjdCB0byBzZXQgYXMgY29udGV4dC5cbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3BlcmZvcm1Db21wb25lbnRVcGRhdGU6IGZ1bmN0aW9uKFxuICAgIG5leHRFbGVtZW50LFxuICAgIG5leHRQcm9wcyxcbiAgICBuZXh0U3RhdGUsXG4gICAgbmV4dENvbnRleHQsXG4gICAgdHJhbnNhY3Rpb25cbiAgKSB7XG4gICAgdmFyIHByZXZFbGVtZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQ7XG4gICAgdmFyIHByZXZQcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHByZXZTdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgdmFyIHByZXZDb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuXG4gICAgaWYgKHRoaXMuY29tcG9uZW50V2lsbFVwZGF0ZSkge1xuICAgICAgdGhpcy5jb21wb25lbnRXaWxsVXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlLCBuZXh0Q29udGV4dCk7XG4gICAgfVxuXG4gICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBuZXh0RWxlbWVudDtcbiAgICB0aGlzLnByb3BzID0gbmV4dFByb3BzO1xuICAgIHRoaXMuc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgdGhpcy5jb250ZXh0ID0gbmV4dENvbnRleHQ7XG5cbiAgICAvLyBPd25lciBjYW5ub3QgY2hhbmdlIGJlY2F1c2Ugc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQgZG9lc24ndCBhbGxvd1xuICAgIC8vIGl0LiBUT0RPOiBSZW1vdmUgdGhpcy5fb3duZXIgY29tcGxldGVseS5cbiAgICB0aGlzLl9vd25lciA9IG5leHRFbGVtZW50Ll9vd25lcjtcblxuICAgIHRoaXMudXBkYXRlQ29tcG9uZW50KFxuICAgICAgdHJhbnNhY3Rpb24sXG4gICAgICBwcmV2RWxlbWVudFxuICAgICk7XG5cbiAgICBpZiAodGhpcy5jb21wb25lbnREaWRVcGRhdGUpIHtcbiAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUoXG4gICAgICAgIHRoaXMuY29tcG9uZW50RGlkVXBkYXRlLmJpbmQodGhpcywgcHJldlByb3BzLCBwcmV2U3RhdGUsIHByZXZDb250ZXh0KSxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9XG4gIH0sXG5cbiAgcmVjZWl2ZUNvbXBvbmVudDogZnVuY3Rpb24obmV4dEVsZW1lbnQsIHRyYW5zYWN0aW9uKSB7XG4gICAgaWYgKG5leHRFbGVtZW50ID09PSB0aGlzLl9jdXJyZW50RWxlbWVudCAmJlxuICAgICAgICBuZXh0RWxlbWVudC5fb3duZXIgIT0gbnVsbCkge1xuICAgICAgLy8gU2luY2UgZWxlbWVudHMgYXJlIGltbXV0YWJsZSBhZnRlciB0aGUgb3duZXIgaXMgcmVuZGVyZWQsXG4gICAgICAvLyB3ZSBjYW4gZG8gYSBjaGVhcCBpZGVudGl0eSBjb21wYXJlIGhlcmUgdG8gZGV0ZXJtaW5lIGlmIHRoaXMgaXMgYVxuICAgICAgLy8gc3VwZXJmbHVvdXMgcmVjb25jaWxlLiBJdCdzIHBvc3NpYmxlIGZvciBzdGF0ZSB0byBiZSBtdXRhYmxlIGJ1dCBzdWNoXG4gICAgICAvLyBjaGFuZ2Ugc2hvdWxkIHRyaWdnZXIgYW4gdXBkYXRlIG9mIHRoZSBvd25lciB3aGljaCB3b3VsZCByZWNyZWF0ZVxuICAgICAgLy8gdGhlIGVsZW1lbnQuIFdlIGV4cGxpY2l0bHkgY2hlY2sgZm9yIHRoZSBleGlzdGVuY2Ugb2YgYW4gb3duZXIgc2luY2VcbiAgICAgIC8vIGl0J3MgcG9zc2libGUgZm9yIGEgZWxlbWVudCBjcmVhdGVkIG91dHNpZGUgYSBjb21wb3NpdGUgdG8gYmVcbiAgICAgIC8vIGRlZXBseSBtdXRhdGVkIGFuZCByZXVzZWQuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgUmVhY3RDb21wb25lbnQuTWl4aW4ucmVjZWl2ZUNvbXBvbmVudC5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgIG5leHRFbGVtZW50LFxuICAgICAgdHJhbnNhY3Rpb25cbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBjb21wb25lbnQncyBjdXJyZW50bHkgbW91bnRlZCBET00gcmVwcmVzZW50YXRpb24uXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIHRoaXMgaW1wbGVtZW50cyBSZWFjdCdzIHJlbmRlcmluZyBhbmQgcmVjb25jaWxpYXRpb24gYWxnb3JpdGhtLlxuICAgKiBTb3BoaXN0aWNhdGVkIGNsaWVudHMgbWF5IHdpc2ggdG8gb3ZlcnJpZGUgdGhpcy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gcHJldkVsZW1lbnRcbiAgICogQGludGVybmFsXG4gICAqIEBvdmVycmlkYWJsZVxuICAgKi9cbiAgdXBkYXRlQ29tcG9uZW50OiBSZWFjdFBlcmYubWVhc3VyZShcbiAgICAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnLFxuICAgICd1cGRhdGVDb21wb25lbnQnLFxuICAgIGZ1bmN0aW9uKHRyYW5zYWN0aW9uLCBwcmV2UGFyZW50RWxlbWVudCkge1xuICAgICAgUmVhY3RDb21wb25lbnQuTWl4aW4udXBkYXRlQ29tcG9uZW50LmNhbGwoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHRyYW5zYWN0aW9uLFxuICAgICAgICBwcmV2UGFyZW50RWxlbWVudFxuICAgICAgKTtcblxuICAgICAgdmFyIHByZXZDb21wb25lbnRJbnN0YW5jZSA9IHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50O1xuICAgICAgdmFyIHByZXZFbGVtZW50ID0gcHJldkNvbXBvbmVudEluc3RhbmNlLl9jdXJyZW50RWxlbWVudDtcbiAgICAgIHZhciBuZXh0RWxlbWVudCA9IHRoaXMuX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudCgpO1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50KHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCkpIHtcbiAgICAgICAgcHJldkNvbXBvbmVudEluc3RhbmNlLnJlY2VpdmVDb21wb25lbnQobmV4dEVsZW1lbnQsIHRyYW5zYWN0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRoZXNlIHR3byBJRHMgYXJlIGFjdHVhbGx5IHRoZSBzYW1lISBCdXQgbm90aGluZyBzaG91bGQgcmVseSBvbiB0aGF0LlxuICAgICAgICB2YXIgdGhpc0lEID0gdGhpcy5fcm9vdE5vZGVJRDtcbiAgICAgICAgdmFyIHByZXZDb21wb25lbnRJRCA9IHByZXZDb21wb25lbnRJbnN0YW5jZS5fcm9vdE5vZGVJRDtcbiAgICAgICAgcHJldkNvbXBvbmVudEluc3RhbmNlLnVubW91bnRDb21wb25lbnQoKTtcbiAgICAgICAgdGhpcy5fcmVuZGVyZWRDb21wb25lbnQgPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KFxuICAgICAgICAgIG5leHRFbGVtZW50LFxuICAgICAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGVcbiAgICAgICAgKTtcbiAgICAgICAgdmFyIG5leHRNYXJrdXAgPSB0aGlzLl9yZW5kZXJlZENvbXBvbmVudC5tb3VudENvbXBvbmVudChcbiAgICAgICAgICB0aGlzSUQsXG4gICAgICAgICAgdHJhbnNhY3Rpb24sXG4gICAgICAgICAgdGhpcy5fbW91bnREZXB0aCArIDFcbiAgICAgICAgKTtcbiAgICAgICAgUmVhY3RDb21wb25lbnQuQmFja2VuZElET3BlcmF0aW9ucy5kYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQoXG4gICAgICAgICAgcHJldkNvbXBvbmVudElELFxuICAgICAgICAgIG5leHRNYXJrdXBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICksXG5cbiAgLyoqXG4gICAqIEZvcmNlcyBhbiB1cGRhdGUuIFRoaXMgc2hvdWxkIG9ubHkgYmUgaW52b2tlZCB3aGVuIGl0IGlzIGtub3duIHdpdGhcbiAgICogY2VydGFpbnR5IHRoYXQgd2UgYXJlICoqbm90KiogaW4gYSBET00gdHJhbnNhY3Rpb24uXG4gICAqXG4gICAqIFlvdSBtYXkgd2FudCB0byBjYWxsIHRoaXMgd2hlbiB5b3Uga25vdyB0aGF0IHNvbWUgZGVlcGVyIGFzcGVjdCBvZiB0aGVcbiAgICogY29tcG9uZW50J3Mgc3RhdGUgaGFzIGNoYW5nZWQgYnV0IGBzZXRTdGF0ZWAgd2FzIG5vdCBjYWxsZWQuXG4gICAqXG4gICAqIFRoaXMgd2lsbCBub3QgaW52b2tlIGBzaG91bGRVcGRhdGVDb21wb25lbnRgLCBidXQgaXQgd2lsbCBpbnZva2VcbiAgICogYGNvbXBvbmVudFdpbGxVcGRhdGVgIGFuZCBgY29tcG9uZW50RGlkVXBkYXRlYC5cbiAgICpcbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciB1cGRhdGUgaXMgY29tcGxldGUuXG4gICAqIEBmaW5hbFxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBmb3JjZVVwZGF0ZTogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICB2YXIgY29tcG9zaXRlTGlmZUN5Y2xlU3RhdGUgPSB0aGlzLl9jb21wb3NpdGVMaWZlQ3ljbGVTdGF0ZTtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgdGhpcy5pc01vdW50ZWQoKSB8fFxuICAgICAgICBjb21wb3NpdGVMaWZlQ3ljbGVTdGF0ZSA9PT0gQ29tcG9zaXRlTGlmZUN5Y2xlLk1PVU5USU5HLFxuICAgICAgJ2ZvcmNlVXBkYXRlKC4uLik6IENhbiBvbmx5IGZvcmNlIGFuIHVwZGF0ZSBvbiBtb3VudGVkIG9yIG1vdW50aW5nICcgK1xuICAgICAgICAnY29tcG9uZW50cy4nXG4gICAgKSA6IGludmFyaWFudCh0aGlzLmlzTW91bnRlZCgpIHx8XG4gICAgICBjb21wb3NpdGVMaWZlQ3ljbGVTdGF0ZSA9PT0gQ29tcG9zaXRlTGlmZUN5Y2xlLk1PVU5USU5HKSk7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIGNvbXBvc2l0ZUxpZmVDeWNsZVN0YXRlICE9PSBDb21wb3NpdGVMaWZlQ3ljbGUuVU5NT1VOVElORyAmJlxuICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9PSBudWxsLFxuICAgICAgJ2ZvcmNlVXBkYXRlKC4uLik6IENhbm5vdCBmb3JjZSBhbiB1cGRhdGUgd2hpbGUgdW5tb3VudGluZyBjb21wb25lbnQgJyArXG4gICAgICAnb3Igd2l0aGluIGEgYHJlbmRlcmAgZnVuY3Rpb24uJ1xuICAgICkgOiBpbnZhcmlhbnQoY29tcG9zaXRlTGlmZUN5Y2xlU3RhdGUgIT09IENvbXBvc2l0ZUxpZmVDeWNsZS5VTk1PVU5USU5HICYmXG4gICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9PSBudWxsKSk7XG4gICAgdGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlID0gdHJ1ZTtcbiAgICBSZWFjdFVwZGF0ZXMuZW5xdWV1ZVVwZGF0ZSh0aGlzLCBjYWxsYmFjayk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50OiBSZWFjdFBlcmYubWVhc3VyZShcbiAgICAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnLFxuICAgICdfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50JyxcbiAgICBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZW5kZXJlZENvbXBvbmVudDtcbiAgICAgIHZhciBwcmV2aW91c0NvbnRleHQgPSBSZWFjdENvbnRleHQuY3VycmVudDtcbiAgICAgIFJlYWN0Q29udGV4dC5jdXJyZW50ID0gdGhpcy5fcHJvY2Vzc0NoaWxkQ29udGV4dChcbiAgICAgICAgdGhpcy5fY3VycmVudEVsZW1lbnQuX2NvbnRleHRcbiAgICAgICk7XG4gICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gdGhpcztcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlbmRlcmVkQ29tcG9uZW50ID0gdGhpcy5yZW5kZXIoKTtcbiAgICAgICAgaWYgKHJlbmRlcmVkQ29tcG9uZW50ID09PSBudWxsIHx8IHJlbmRlcmVkQ29tcG9uZW50ID09PSBmYWxzZSkge1xuICAgICAgICAgIHJlbmRlcmVkQ29tcG9uZW50ID0gUmVhY3RFbXB0eUNvbXBvbmVudC5nZXRFbXB0eUNvbXBvbmVudCgpO1xuICAgICAgICAgIFJlYWN0RW1wdHlDb21wb25lbnQucmVnaXN0ZXJOdWxsQ29tcG9uZW50SUQodGhpcy5fcm9vdE5vZGVJRCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgUmVhY3RFbXB0eUNvbXBvbmVudC5kZXJlZ2lzdGVyTnVsbENvbXBvbmVudElEKHRoaXMuX3Jvb3ROb2RlSUQpO1xuICAgICAgICB9XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBSZWFjdENvbnRleHQuY3VycmVudCA9IHByZXZpb3VzQ29udGV4dDtcbiAgICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9IG51bGw7XG4gICAgICB9XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQocmVuZGVyZWRDb21wb25lbnQpLFxuICAgICAgICAnJXMucmVuZGVyKCk6IEEgdmFsaWQgUmVhY3RDb21wb25lbnQgbXVzdCBiZSByZXR1cm5lZC4gWW91IG1heSBoYXZlICcgK1xuICAgICAgICAgICdyZXR1cm5lZCB1bmRlZmluZWQsIGFuIGFycmF5IG9yIHNvbWUgb3RoZXIgaW52YWxpZCBvYmplY3QuJyxcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnXG4gICAgICApIDogaW52YXJpYW50KFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChyZW5kZXJlZENvbXBvbmVudCkpKTtcbiAgICAgIHJldHVybiByZW5kZXJlZENvbXBvbmVudDtcbiAgICB9XG4gICksXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYmluZEF1dG9CaW5kTWV0aG9kczogZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgYXV0b0JpbmRLZXkgaW4gdGhpcy5fX3JlYWN0QXV0b0JpbmRNYXApIHtcbiAgICAgIGlmICghdGhpcy5fX3JlYWN0QXV0b0JpbmRNYXAuaGFzT3duUHJvcGVydHkoYXV0b0JpbmRLZXkpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIG1ldGhvZCA9IHRoaXMuX19yZWFjdEF1dG9CaW5kTWFwW2F1dG9CaW5kS2V5XTtcbiAgICAgIHRoaXNbYXV0b0JpbmRLZXldID0gdGhpcy5fYmluZEF1dG9CaW5kTWV0aG9kKFJlYWN0RXJyb3JVdGlscy5ndWFyZChcbiAgICAgICAgbWV0aG9kLFxuICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lICsgJy4nICsgYXV0b0JpbmRLZXlcbiAgICAgICkpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQmluZHMgYSBtZXRob2QgdG8gdGhlIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gbWV0aG9kIE1ldGhvZCB0byBiZSBib3VuZC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9iaW5kQXV0b0JpbmRNZXRob2Q6IGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgIHZhciBjb21wb25lbnQgPSB0aGlzO1xuICAgIHZhciBib3VuZE1ldGhvZCA9IG1ldGhvZC5iaW5kKGNvbXBvbmVudCk7XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQ29udGV4dCA9IGNvbXBvbmVudDtcbiAgICAgIGJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZE1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZEFyZ3VtZW50cyA9IG51bGw7XG4gICAgICB2YXIgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudC5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZTtcbiAgICAgIHZhciBfYmluZCA9IGJvdW5kTWV0aG9kLmJpbmQ7XG4gICAgICBib3VuZE1ldGhvZC5iaW5kID0gZnVuY3Rpb24obmV3VGhpcyApIHtmb3IgKHZhciBhcmdzPVtdLCRfXzA9MSwkX18xPWFyZ3VtZW50cy5sZW5ndGg7JF9fMDwkX18xOyRfXzArKykgYXJncy5wdXNoKGFyZ3VtZW50c1skX18wXSk7XG4gICAgICAgIC8vIFVzZXIgaXMgdHJ5aW5nIHRvIGJpbmQoKSBhbiBhdXRvYm91bmQgbWV0aG9kOyB3ZSBlZmZlY3RpdmVseSB3aWxsXG4gICAgICAgIC8vIGlnbm9yZSB0aGUgdmFsdWUgb2YgXCJ0aGlzXCIgdGhhdCB0aGUgdXNlciBpcyB0cnlpbmcgdG8gdXNlLCBzb1xuICAgICAgICAvLyBsZXQncyB3YXJuLlxuICAgICAgICBpZiAobmV3VGhpcyAhPT0gY29tcG9uZW50ICYmIG5ld1RoaXMgIT09IG51bGwpIHtcbiAgICAgICAgICBtb25pdG9yQ29kZVVzZSgncmVhY3RfYmluZF93YXJuaW5nJywgeyBjb21wb25lbnQ6IGNvbXBvbmVudE5hbWUgfSk7XG4gICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgJ2JpbmQoKTogUmVhY3QgY29tcG9uZW50IG1ldGhvZHMgbWF5IG9ubHkgYmUgYm91bmQgdG8gdGhlICcgK1xuICAgICAgICAgICAgJ2NvbXBvbmVudCBpbnN0YW5jZS4gU2VlICcgKyBjb21wb25lbnROYW1lXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmICghYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBtb25pdG9yQ29kZVVzZSgncmVhY3RfYmluZF93YXJuaW5nJywgeyBjb21wb25lbnQ6IGNvbXBvbmVudE5hbWUgfSk7XG4gICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgJ2JpbmQoKTogWW91IGFyZSBiaW5kaW5nIGEgY29tcG9uZW50IG1ldGhvZCB0byB0aGUgY29tcG9uZW50LiAnICtcbiAgICAgICAgICAgICdSZWFjdCBkb2VzIHRoaXMgZm9yIHlvdSBhdXRvbWF0aWNhbGx5IGluIGEgaGlnaC1wZXJmb3JtYW5jZSAnICtcbiAgICAgICAgICAgICd3YXksIHNvIHlvdSBjYW4gc2FmZWx5IHJlbW92ZSB0aGlzIGNhbGwuIFNlZSAnICsgY29tcG9uZW50TmFtZVxuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIGJvdW5kTWV0aG9kO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZWJvdW5kTWV0aG9kID0gX2JpbmQuYXBwbHkoYm91bmRNZXRob2QsIGFyZ3VtZW50cyk7XG4gICAgICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQ29udGV4dCA9IGNvbXBvbmVudDtcbiAgICAgICAgcmVib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRNZXRob2QgPSBtZXRob2Q7XG4gICAgICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQXJndW1lbnRzID0gYXJncztcbiAgICAgICAgcmV0dXJuIHJlYm91bmRNZXRob2Q7XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gYm91bmRNZXRob2Q7XG4gIH1cbn07XG5cbnZhciBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudEJhc2UgPSBmdW5jdGlvbigpIHt9O1xuYXNzaWduKFxuICBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudEJhc2UucHJvdG90eXBlLFxuICBSZWFjdENvbXBvbmVudC5NaXhpbixcbiAgUmVhY3RPd25lci5NaXhpbixcbiAgUmVhY3RQcm9wVHJhbnNmZXJlci5NaXhpbixcbiAgUmVhY3RDb21wb3NpdGVDb21wb25lbnRNaXhpblxuKTtcblxuLyoqXG4gKiBNb2R1bGUgZm9yIGNyZWF0aW5nIGNvbXBvc2l0ZSBjb21wb25lbnRzLlxuICpcbiAqIEBjbGFzcyBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudFxuICogQGV4dGVuZHMgUmVhY3RDb21wb25lbnRcbiAqIEBleHRlbmRzIFJlYWN0T3duZXJcbiAqIEBleHRlbmRzIFJlYWN0UHJvcFRyYW5zZmVyZXJcbiAqL1xudmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50ID0ge1xuXG4gIExpZmVDeWNsZTogQ29tcG9zaXRlTGlmZUN5Y2xlLFxuXG4gIEJhc2U6IFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50QmFzZSxcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGNvbXBvc2l0ZSBjb21wb25lbnQgY2xhc3MgZ2l2ZW4gYSBjbGFzcyBzcGVjaWZpY2F0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gc3BlYyBDbGFzcyBzcGVjaWZpY2F0aW9uICh3aGljaCBtdXN0IGRlZmluZSBgcmVuZGVyYCkuXG4gICAqIEByZXR1cm4ge2Z1bmN0aW9ufSBDb21wb25lbnQgY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGNyZWF0ZUNsYXNzOiBmdW5jdGlvbihzcGVjKSB7XG4gICAgdmFyIENvbnN0cnVjdG9yID0gZnVuY3Rpb24ocHJvcHMpIHtcbiAgICAgIC8vIFRoaXMgY29uc3RydWN0b3IgaXMgb3ZlcnJpZGRlbiBieSBtb2Nrcy4gVGhlIGFyZ3VtZW50IGlzIHVzZWRcbiAgICAgIC8vIGJ5IG1vY2tzIHRvIGFzc2VydCBvbiB3aGF0IGdldHMgbW91bnRlZC4gVGhpcyB3aWxsIGxhdGVyIGJlIHVzZWRcbiAgICAgIC8vIGJ5IHRoZSBzdGFuZC1hbG9uZSBjbGFzcyBpbXBsZW1lbnRhdGlvbi5cbiAgICB9O1xuICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IG5ldyBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudEJhc2UoKTtcbiAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcjtcblxuICAgIGluamVjdGVkTWl4aW5zLmZvckVhY2goXG4gICAgICBtaXhTcGVjSW50b0NvbXBvbmVudC5iaW5kKG51bGwsIENvbnN0cnVjdG9yKVxuICAgICk7XG5cbiAgICBtaXhTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3Rvciwgc3BlYyk7XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSBkZWZhdWx0UHJvcHMgcHJvcGVydHkgYWZ0ZXIgYWxsIG1peGlucyBoYXZlIGJlZW4gbWVyZ2VkXG4gICAgaWYgKENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcykge1xuICAgICAgQ29uc3RydWN0b3IuZGVmYXVsdFByb3BzID0gQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKCk7XG4gICAgfVxuXG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZS5yZW5kZXIsXG4gICAgICAnY3JlYXRlQ2xhc3MoLi4uKTogQ2xhc3Mgc3BlY2lmaWNhdGlvbiBtdXN0IGltcGxlbWVudCBhIGByZW5kZXJgIG1ldGhvZC4nXG4gICAgKSA6IGludmFyaWFudChDb25zdHJ1Y3Rvci5wcm90b3R5cGUucmVuZGVyKSk7XG5cbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICBpZiAoQ29uc3RydWN0b3IucHJvdG90eXBlLmNvbXBvbmVudFNob3VsZFVwZGF0ZSkge1xuICAgICAgICBtb25pdG9yQ29kZVVzZShcbiAgICAgICAgICAncmVhY3RfY29tcG9uZW50X3Nob3VsZF91cGRhdGVfd2FybmluZycsXG4gICAgICAgICAgeyBjb21wb25lbnQ6IHNwZWMuZGlzcGxheU5hbWUgfVxuICAgICAgICApO1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgKHNwZWMuZGlzcGxheU5hbWUgfHwgJ0EgY29tcG9uZW50JykgKyAnIGhhcyBhIG1ldGhvZCBjYWxsZWQgJyArXG4gICAgICAgICAgJ2NvbXBvbmVudFNob3VsZFVwZGF0ZSgpLiBEaWQgeW91IG1lYW4gc2hvdWxkQ29tcG9uZW50VXBkYXRlKCk/ICcgK1xuICAgICAgICAgICdUaGUgbmFtZSBpcyBwaHJhc2VkIGFzIGEgcXVlc3Rpb24gYmVjYXVzZSB0aGUgZnVuY3Rpb24gaXMgJyArXG4gICAgICAgICAgJ2V4cGVjdGVkIHRvIHJldHVybiBhIHZhbHVlLidcbiAgICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVkdWNlIHRpbWUgc3BlbnQgZG9pbmcgbG9va3VwcyBieSBzZXR0aW5nIHRoZXNlIG9uIHRoZSBwcm90b3R5cGUuXG4gICAgZm9yICh2YXIgbWV0aG9kTmFtZSBpbiBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudEludGVyZmFjZSkge1xuICAgICAgaWYgKCFDb25zdHJ1Y3Rvci5wcm90b3R5cGVbbWV0aG9kTmFtZV0pIHtcbiAgICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlW21ldGhvZE5hbWVdID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICByZXR1cm4gUmVhY3RMZWdhY3lFbGVtZW50LndyYXBGYWN0b3J5KFxuICAgICAgICBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY3JlYXRlRmFjdG9yeShDb25zdHJ1Y3RvcilcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBSZWFjdExlZ2FjeUVsZW1lbnQud3JhcEZhY3RvcnkoXG4gICAgICBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeShDb25zdHJ1Y3RvcilcbiAgICApO1xuICB9LFxuXG4gIGluamVjdGlvbjoge1xuICAgIGluamVjdE1peGluOiBmdW5jdGlvbihtaXhpbikge1xuICAgICAgaW5qZWN0ZWRNaXhpbnMucHVzaChtaXhpbik7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9PYmplY3QuYXNzaWduXCI6OTUsXCIuL1JlYWN0Q29tcG9uZW50XCI6MTAxLFwiLi9SZWFjdENvbnRleHRcIjoxMDQsXCIuL1JlYWN0Q3VycmVudE93bmVyXCI6MTA1LFwiLi9SZWFjdEVsZW1lbnRcIjoxMjEsXCIuL1JlYWN0RWxlbWVudFZhbGlkYXRvclwiOjEyMixcIi4vUmVhY3RFbXB0eUNvbXBvbmVudFwiOjEyMyxcIi4vUmVhY3RFcnJvclV0aWxzXCI6MTI0LFwiLi9SZWFjdExlZ2FjeUVsZW1lbnRcIjoxMzAsXCIuL1JlYWN0T3duZXJcIjoxMzYsXCIuL1JlYWN0UGVyZlwiOjEzNyxcIi4vUmVhY3RQcm9wVHJhbnNmZXJlclwiOjEzOCxcIi4vUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNcIjoxMzksXCIuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbnNcIjoxNDAsXCIuL1JlYWN0VXBkYXRlc1wiOjE0OCxcIi4vaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudFwiOjE5NSxcIi4vaW52YXJpYW50XCI6MTk2LFwiLi9rZXlNaXJyb3JcIjoyMDIsXCIuL2tleU9mXCI6MjAzLFwiLi9tYXBPYmplY3RcIjoyMDQsXCIuL21vbml0b3JDb2RlVXNlXCI6MjA2LFwiLi9zaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudFwiOjIxMixcIi4vd2FybmluZ1wiOjIxNSxcIl9wcm9jZXNzXCI6MTl9XSwxMDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Q29udGV4dFxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4vT2JqZWN0LmFzc2lnblwiKTtcblxuLyoqXG4gKiBLZWVwcyB0cmFjayBvZiB0aGUgY3VycmVudCBjb250ZXh0LlxuICpcbiAqIFRoZSBjb250ZXh0IGlzIGF1dG9tYXRpY2FsbHkgcGFzc2VkIGRvd24gdGhlIGNvbXBvbmVudCBvd25lcnNoaXAgaGllcmFyY2h5XG4gKiBhbmQgaXMgYWNjZXNzaWJsZSB2aWEgYHRoaXMuY29udGV4dGAgb24gUmVhY3RDb21wb3NpdGVDb21wb25lbnRzLlxuICovXG52YXIgUmVhY3RDb250ZXh0ID0ge1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHR5cGUge29iamVjdH1cbiAgICovXG4gIGN1cnJlbnQ6IHt9LFxuXG4gIC8qKlxuICAgKiBUZW1wb3JhcmlseSBleHRlbmRzIHRoZSBjdXJyZW50IGNvbnRleHQgd2hpbGUgZXhlY3V0aW5nIHNjb3BlZENhbGxiYWNrLlxuICAgKlxuICAgKiBBIHR5cGljYWwgdXNlIGNhc2UgbWlnaHQgbG9vayBsaWtlXG4gICAqXG4gICAqICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgKiAgICB2YXIgY2hpbGRyZW4gPSBSZWFjdENvbnRleHQud2l0aENvbnRleHQoe2ZvbzogJ2Zvbyd9LCAoKSA9PiAoXG4gICAqXG4gICAqICAgICkpO1xuICAgKiAgICByZXR1cm4gPGRpdj57Y2hpbGRyZW59PC9kaXY+O1xuICAgKiAgfVxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmV3Q29udGV4dCBOZXcgY29udGV4dCB0byBtZXJnZSBpbnRvIHRoZSBleGlzdGluZyBjb250ZXh0XG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IHNjb3BlZENhbGxiYWNrIENhbGxiYWNrIHRvIHJ1biB3aXRoIHRoZSBuZXcgY29udGV4dFxuICAgKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudHxhcnJheTxSZWFjdENvbXBvbmVudD59XG4gICAqL1xuICB3aXRoQ29udGV4dDogZnVuY3Rpb24obmV3Q29udGV4dCwgc2NvcGVkQ2FsbGJhY2spIHtcbiAgICB2YXIgcmVzdWx0O1xuICAgIHZhciBwcmV2aW91c0NvbnRleHQgPSBSZWFjdENvbnRleHQuY3VycmVudDtcbiAgICBSZWFjdENvbnRleHQuY3VycmVudCA9IGFzc2lnbih7fSwgcHJldmlvdXNDb250ZXh0LCBuZXdDb250ZXh0KTtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gc2NvcGVkQ2FsbGJhY2soKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgUmVhY3RDb250ZXh0LmN1cnJlbnQgPSBwcmV2aW91c0NvbnRleHQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbnRleHQ7XG5cbn0se1wiLi9PYmplY3QuYXNzaWduXCI6OTV9XSwxMDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Q3VycmVudE93bmVyXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogS2VlcHMgdHJhY2sgb2YgdGhlIGN1cnJlbnQgb3duZXIuXG4gKlxuICogVGhlIGN1cnJlbnQgb3duZXIgaXMgdGhlIGNvbXBvbmVudCB3aG8gc2hvdWxkIG93biBhbnkgY29tcG9uZW50cyB0aGF0IGFyZVxuICogY3VycmVudGx5IGJlaW5nIGNvbnN0cnVjdGVkLlxuICpcbiAqIFRoZSBkZXB0aCBpbmRpY2F0ZSBob3cgbWFueSBjb21wb3NpdGUgY29tcG9uZW50cyBhcmUgYWJvdmUgdGhpcyByZW5kZXIgbGV2ZWwuXG4gKi9cbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIEB0eXBlIHtSZWFjdENvbXBvbmVudH1cbiAgICovXG4gIGN1cnJlbnQ6IG51bGxcblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEN1cnJlbnRPd25lcjtcblxufSx7fV0sMTA2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01cbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RFbGVtZW50VmFsaWRhdG9yID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50VmFsaWRhdG9yXCIpO1xudmFyIFJlYWN0TGVnYWN5RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0TGVnYWN5RWxlbWVudFwiKTtcblxudmFyIG1hcE9iamVjdCA9IHJlcXVpcmUoXCIuL21hcE9iamVjdFwiKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBmYWN0b3J5IHRoYXQgY3JlYXRlcyBIVE1MIHRhZyBlbGVtZW50cy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRhZyBuYW1lIChlLmcuIGBkaXZgKS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURPTUZhY3RvcnkodGFnKSB7XG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICByZXR1cm4gUmVhY3RMZWdhY3lFbGVtZW50Lm1hcmtOb25MZWdhY3lGYWN0b3J5KFxuICAgICAgUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNyZWF0ZUZhY3RvcnkodGFnKVxuICAgICk7XG4gIH1cbiAgcmV0dXJuIFJlYWN0TGVnYWN5RWxlbWVudC5tYXJrTm9uTGVnYWN5RmFjdG9yeShcbiAgICBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSh0YWcpXG4gICk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcHBpbmcgZnJvbSBzdXBwb3J0ZWQgSFRNTCB0YWdzIHRvIGBSZWFjdERPTUNvbXBvbmVudGAgY2xhc3Nlcy5cbiAqIFRoaXMgaXMgYWxzbyBhY2Nlc3NpYmxlIHZpYSBgUmVhY3QuRE9NYC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbnZhciBSZWFjdERPTSA9IG1hcE9iamVjdCh7XG4gIGE6ICdhJyxcbiAgYWJicjogJ2FiYnInLFxuICBhZGRyZXNzOiAnYWRkcmVzcycsXG4gIGFyZWE6ICdhcmVhJyxcbiAgYXJ0aWNsZTogJ2FydGljbGUnLFxuICBhc2lkZTogJ2FzaWRlJyxcbiAgYXVkaW86ICdhdWRpbycsXG4gIGI6ICdiJyxcbiAgYmFzZTogJ2Jhc2UnLFxuICBiZGk6ICdiZGknLFxuICBiZG86ICdiZG8nLFxuICBiaWc6ICdiaWcnLFxuICBibG9ja3F1b3RlOiAnYmxvY2txdW90ZScsXG4gIGJvZHk6ICdib2R5JyxcbiAgYnI6ICdicicsXG4gIGJ1dHRvbjogJ2J1dHRvbicsXG4gIGNhbnZhczogJ2NhbnZhcycsXG4gIGNhcHRpb246ICdjYXB0aW9uJyxcbiAgY2l0ZTogJ2NpdGUnLFxuICBjb2RlOiAnY29kZScsXG4gIGNvbDogJ2NvbCcsXG4gIGNvbGdyb3VwOiAnY29sZ3JvdXAnLFxuICBkYXRhOiAnZGF0YScsXG4gIGRhdGFsaXN0OiAnZGF0YWxpc3QnLFxuICBkZDogJ2RkJyxcbiAgZGVsOiAnZGVsJyxcbiAgZGV0YWlsczogJ2RldGFpbHMnLFxuICBkZm46ICdkZm4nLFxuICBkaWFsb2c6ICdkaWFsb2cnLFxuICBkaXY6ICdkaXYnLFxuICBkbDogJ2RsJyxcbiAgZHQ6ICdkdCcsXG4gIGVtOiAnZW0nLFxuICBlbWJlZDogJ2VtYmVkJyxcbiAgZmllbGRzZXQ6ICdmaWVsZHNldCcsXG4gIGZpZ2NhcHRpb246ICdmaWdjYXB0aW9uJyxcbiAgZmlndXJlOiAnZmlndXJlJyxcbiAgZm9vdGVyOiAnZm9vdGVyJyxcbiAgZm9ybTogJ2Zvcm0nLFxuICBoMTogJ2gxJyxcbiAgaDI6ICdoMicsXG4gIGgzOiAnaDMnLFxuICBoNDogJ2g0JyxcbiAgaDU6ICdoNScsXG4gIGg2OiAnaDYnLFxuICBoZWFkOiAnaGVhZCcsXG4gIGhlYWRlcjogJ2hlYWRlcicsXG4gIGhyOiAnaHInLFxuICBodG1sOiAnaHRtbCcsXG4gIGk6ICdpJyxcbiAgaWZyYW1lOiAnaWZyYW1lJyxcbiAgaW1nOiAnaW1nJyxcbiAgaW5wdXQ6ICdpbnB1dCcsXG4gIGluczogJ2lucycsXG4gIGtiZDogJ2tiZCcsXG4gIGtleWdlbjogJ2tleWdlbicsXG4gIGxhYmVsOiAnbGFiZWwnLFxuICBsZWdlbmQ6ICdsZWdlbmQnLFxuICBsaTogJ2xpJyxcbiAgbGluazogJ2xpbmsnLFxuICBtYWluOiAnbWFpbicsXG4gIG1hcDogJ21hcCcsXG4gIG1hcms6ICdtYXJrJyxcbiAgbWVudTogJ21lbnUnLFxuICBtZW51aXRlbTogJ21lbnVpdGVtJyxcbiAgbWV0YTogJ21ldGEnLFxuICBtZXRlcjogJ21ldGVyJyxcbiAgbmF2OiAnbmF2JyxcbiAgbm9zY3JpcHQ6ICdub3NjcmlwdCcsXG4gIG9iamVjdDogJ29iamVjdCcsXG4gIG9sOiAnb2wnLFxuICBvcHRncm91cDogJ29wdGdyb3VwJyxcbiAgb3B0aW9uOiAnb3B0aW9uJyxcbiAgb3V0cHV0OiAnb3V0cHV0JyxcbiAgcDogJ3AnLFxuICBwYXJhbTogJ3BhcmFtJyxcbiAgcGljdHVyZTogJ3BpY3R1cmUnLFxuICBwcmU6ICdwcmUnLFxuICBwcm9ncmVzczogJ3Byb2dyZXNzJyxcbiAgcTogJ3EnLFxuICBycDogJ3JwJyxcbiAgcnQ6ICdydCcsXG4gIHJ1Ynk6ICdydWJ5JyxcbiAgczogJ3MnLFxuICBzYW1wOiAnc2FtcCcsXG4gIHNjcmlwdDogJ3NjcmlwdCcsXG4gIHNlY3Rpb246ICdzZWN0aW9uJyxcbiAgc2VsZWN0OiAnc2VsZWN0JyxcbiAgc21hbGw6ICdzbWFsbCcsXG4gIHNvdXJjZTogJ3NvdXJjZScsXG4gIHNwYW46ICdzcGFuJyxcbiAgc3Ryb25nOiAnc3Ryb25nJyxcbiAgc3R5bGU6ICdzdHlsZScsXG4gIHN1YjogJ3N1YicsXG4gIHN1bW1hcnk6ICdzdW1tYXJ5JyxcbiAgc3VwOiAnc3VwJyxcbiAgdGFibGU6ICd0YWJsZScsXG4gIHRib2R5OiAndGJvZHknLFxuICB0ZDogJ3RkJyxcbiAgdGV4dGFyZWE6ICd0ZXh0YXJlYScsXG4gIHRmb290OiAndGZvb3QnLFxuICB0aDogJ3RoJyxcbiAgdGhlYWQ6ICd0aGVhZCcsXG4gIHRpbWU6ICd0aW1lJyxcbiAgdGl0bGU6ICd0aXRsZScsXG4gIHRyOiAndHInLFxuICB0cmFjazogJ3RyYWNrJyxcbiAgdTogJ3UnLFxuICB1bDogJ3VsJyxcbiAgJ3Zhcic6ICd2YXInLFxuICB2aWRlbzogJ3ZpZGVvJyxcbiAgd2JyOiAnd2JyJyxcblxuICAvLyBTVkdcbiAgY2lyY2xlOiAnY2lyY2xlJyxcbiAgZGVmczogJ2RlZnMnLFxuICBlbGxpcHNlOiAnZWxsaXBzZScsXG4gIGc6ICdnJyxcbiAgbGluZTogJ2xpbmUnLFxuICBsaW5lYXJHcmFkaWVudDogJ2xpbmVhckdyYWRpZW50JyxcbiAgbWFzazogJ21hc2snLFxuICBwYXRoOiAncGF0aCcsXG4gIHBhdHRlcm46ICdwYXR0ZXJuJyxcbiAgcG9seWdvbjogJ3BvbHlnb24nLFxuICBwb2x5bGluZTogJ3BvbHlsaW5lJyxcbiAgcmFkaWFsR3JhZGllbnQ6ICdyYWRpYWxHcmFkaWVudCcsXG4gIHJlY3Q6ICdyZWN0JyxcbiAgc3RvcDogJ3N0b3AnLFxuICBzdmc6ICdzdmcnLFxuICB0ZXh0OiAndGV4dCcsXG4gIHRzcGFuOiAndHNwYW4nXG5cbn0sIGNyZWF0ZURPTUZhY3RvcnkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9SZWFjdEVsZW1lbnRcIjoxMjEsXCIuL1JlYWN0RWxlbWVudFZhbGlkYXRvclwiOjEyMixcIi4vUmVhY3RMZWdhY3lFbGVtZW50XCI6MTMwLFwiLi9tYXBPYmplY3RcIjoyMDQsXCJfcHJvY2Vzc1wiOjE5fV0sMTA3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTUJ1dHRvblxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgQXV0b0ZvY3VzTWl4aW4gPSByZXF1aXJlKFwiLi9BdXRvRm9jdXNNaXhpblwiKTtcbnZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IHJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCIpO1xudmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0RE9NID0gcmVxdWlyZShcIi4vUmVhY3RET01cIik7XG5cbnZhciBrZXlNaXJyb3IgPSByZXF1aXJlKFwiLi9rZXlNaXJyb3JcIik7XG5cbi8vIFN0b3JlIGEgcmVmZXJlbmNlIHRvIHRoZSA8YnV0dG9uPiBgUmVhY3RET01Db21wb25lbnRgLiBUT0RPOiB1c2Ugc3RyaW5nXG52YXIgYnV0dG9uID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkoUmVhY3RET00uYnV0dG9uLnR5cGUpO1xuXG52YXIgbW91c2VMaXN0ZW5lck5hbWVzID0ga2V5TWlycm9yKHtcbiAgb25DbGljazogdHJ1ZSxcbiAgb25Eb3VibGVDbGljazogdHJ1ZSxcbiAgb25Nb3VzZURvd246IHRydWUsXG4gIG9uTW91c2VNb3ZlOiB0cnVlLFxuICBvbk1vdXNlVXA6IHRydWUsXG4gIG9uQ2xpY2tDYXB0dXJlOiB0cnVlLFxuICBvbkRvdWJsZUNsaWNrQ2FwdHVyZTogdHJ1ZSxcbiAgb25Nb3VzZURvd25DYXB0dXJlOiB0cnVlLFxuICBvbk1vdXNlTW92ZUNhcHR1cmU6IHRydWUsXG4gIG9uTW91c2VVcENhcHR1cmU6IHRydWVcbn0pO1xuXG4vKipcbiAqIEltcGxlbWVudHMgYSA8YnV0dG9uPiBuYXRpdmUgY29tcG9uZW50IHRoYXQgZG9lcyBub3QgcmVjZWl2ZSBtb3VzZSBldmVudHNcbiAqIHdoZW4gYGRpc2FibGVkYCBpcyBzZXQuXG4gKi9cbnZhciBSZWFjdERPTUJ1dHRvbiA9IFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdSZWFjdERPTUJ1dHRvbicsXG5cbiAgbWl4aW5zOiBbQXV0b0ZvY3VzTWl4aW4sIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXSxcblxuICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwcm9wcyA9IHt9O1xuXG4gICAgLy8gQ29weSB0aGUgcHJvcHM7IGV4Y2VwdCB0aGUgbW91c2UgbGlzdGVuZXJzIGlmIHdlJ3JlIGRpc2FibGVkXG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMucHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLmhhc093blByb3BlcnR5KGtleSkgJiZcbiAgICAgICAgICAoIXRoaXMucHJvcHMuZGlzYWJsZWQgfHwgIW1vdXNlTGlzdGVuZXJOYW1lc1trZXldKSkge1xuICAgICAgICBwcm9wc1trZXldID0gdGhpcy5wcm9wc1trZXldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBidXR0b24ocHJvcHMsIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NQnV0dG9uO1xuXG59LHtcIi4vQXV0b0ZvY3VzTWl4aW5cIjo3MCxcIi4vUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cIjo5OCxcIi4vUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIjoxMDMsXCIuL1JlYWN0RE9NXCI6MTA2LFwiLi9SZWFjdEVsZW1lbnRcIjoxMjEsXCIuL2tleU1pcnJvclwiOjIwMn1dLDEwODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NQ29tcG9uZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgQ1NTUHJvcGVydHlPcGVyYXRpb25zID0gcmVxdWlyZShcIi4vQ1NTUHJvcGVydHlPcGVyYXRpb25zXCIpO1xudmFyIERPTVByb3BlcnR5ID0gcmVxdWlyZShcIi4vRE9NUHJvcGVydHlcIik7XG52YXIgRE9NUHJvcGVydHlPcGVyYXRpb25zID0gcmVxdWlyZShcIi4vRE9NUHJvcGVydHlPcGVyYXRpb25zXCIpO1xudmFyIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cIik7XG52YXIgUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdENvbXBvbmVudFwiKTtcbnZhciBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJcIik7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoXCIuL1JlYWN0TW91bnRcIik7XG52YXIgUmVhY3RNdWx0aUNoaWxkID0gcmVxdWlyZShcIi4vUmVhY3RNdWx0aUNoaWxkXCIpO1xudmFyIFJlYWN0UGVyZiA9IHJlcXVpcmUoXCIuL1JlYWN0UGVyZlwiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgZXNjYXBlVGV4dEZvckJyb3dzZXIgPSByZXF1aXJlKFwiLi9lc2NhcGVUZXh0Rm9yQnJvd3NlclwiKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG52YXIgaXNFdmVudFN1cHBvcnRlZCA9IHJlcXVpcmUoXCIuL2lzRXZlbnRTdXBwb3J0ZWRcIik7XG52YXIga2V5T2YgPSByZXF1aXJlKFwiLi9rZXlPZlwiKTtcbnZhciBtb25pdG9yQ29kZVVzZSA9IHJlcXVpcmUoXCIuL21vbml0b3JDb2RlVXNlXCIpO1xuXG52YXIgZGVsZXRlTGlzdGVuZXIgPSBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuZGVsZXRlTGlzdGVuZXI7XG52YXIgbGlzdGVuVG8gPSBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIubGlzdGVuVG87XG52YXIgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMgPSBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM7XG5cbi8vIEZvciBxdWlja2x5IG1hdGNoaW5nIGNoaWxkcmVuIHR5cGUsIHRvIHRlc3QgaWYgY2FuIGJlIHRyZWF0ZWQgYXMgY29udGVudC5cbnZhciBDT05URU5UX1RZUEVTID0geydzdHJpbmcnOiB0cnVlLCAnbnVtYmVyJzogdHJ1ZX07XG5cbnZhciBTVFlMRSA9IGtleU9mKHtzdHlsZTogbnVsbH0pO1xuXG52YXIgRUxFTUVOVF9OT0RFX1RZUEUgPSAxO1xuXG4vKipcbiAqIEBwYXJhbSB7P29iamVjdH0gcHJvcHNcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0VmFsaWRQcm9wcyhwcm9wcykge1xuICBpZiAoIXByb3BzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIE5vdGUgdGhlIHVzZSBvZiBgPT1gIHdoaWNoIGNoZWNrcyBmb3IgbnVsbCBvciB1bmRlZmluZWQuXG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgcHJvcHMuY2hpbGRyZW4gPT0gbnVsbCB8fCBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCA9PSBudWxsLFxuICAgICdDYW4gb25seSBzZXQgb25lIG9mIGBjaGlsZHJlbmAgb3IgYHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYC4nXG4gICkgOiBpbnZhcmlhbnQocHJvcHMuY2hpbGRyZW4gPT0gbnVsbCB8fCBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCA9PSBudWxsKSk7XG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICBpZiAocHJvcHMuY29udGVudEVkaXRhYmxlICYmIHByb3BzLmNoaWxkcmVuICE9IG51bGwpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ0EgY29tcG9uZW50IGlzIGBjb250ZW50RWRpdGFibGVgIGFuZCBjb250YWlucyBgY2hpbGRyZW5gIG1hbmFnZWQgYnkgJyArXG4gICAgICAgICdSZWFjdC4gSXQgaXMgbm93IHlvdXIgcmVzcG9uc2liaWxpdHkgdG8gZ3VhcmFudGVlIHRoYXQgbm9uZSBvZiB0aG9zZSAnK1xuICAgICAgICAnbm9kZXMgYXJlIHVuZXhwZWN0ZWRseSBtb2RpZmllZCBvciBkdXBsaWNhdGVkLiBUaGlzIGlzIHByb2JhYmx5IG5vdCAnICtcbiAgICAgICAgJ2ludGVudGlvbmFsLidcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgcHJvcHMuc3R5bGUgPT0gbnVsbCB8fCB0eXBlb2YgcHJvcHMuc3R5bGUgPT09ICdvYmplY3QnLFxuICAgICdUaGUgYHN0eWxlYCBwcm9wIGV4cGVjdHMgYSBtYXBwaW5nIGZyb20gc3R5bGUgcHJvcGVydGllcyB0byB2YWx1ZXMsICcgK1xuICAgICdub3QgYSBzdHJpbmcuJ1xuICApIDogaW52YXJpYW50KHByb3BzLnN0eWxlID09IG51bGwgfHwgdHlwZW9mIHByb3BzLnN0eWxlID09PSAnb2JqZWN0JykpO1xufVxuXG5mdW5jdGlvbiBwdXRMaXN0ZW5lcihpZCwgcmVnaXN0cmF0aW9uTmFtZSwgbGlzdGVuZXIsIHRyYW5zYWN0aW9uKSB7XG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAvLyBJRTggaGFzIG5vIEFQSSBmb3IgZXZlbnQgY2FwdHVyaW5nIGFuZCB0aGUgYG9uU2Nyb2xsYCBldmVudCBkb2Vzbid0XG4gICAgLy8gYnViYmxlLlxuICAgIGlmIChyZWdpc3RyYXRpb25OYW1lID09PSAnb25TY3JvbGwnICYmXG4gICAgICAgICFpc0V2ZW50U3VwcG9ydGVkKCdzY3JvbGwnLCB0cnVlKSkge1xuICAgICAgbW9uaXRvckNvZGVVc2UoJ3JlYWN0X25vX3Njcm9sbF9ldmVudCcpO1xuICAgICAgY29uc29sZS53YXJuKCdUaGlzIGJyb3dzZXIgZG9lc25cXCd0IHN1cHBvcnQgdGhlIGBvblNjcm9sbGAgZXZlbnQnKTtcbiAgICB9XG4gIH1cbiAgdmFyIGNvbnRhaW5lciA9IFJlYWN0TW91bnQuZmluZFJlYWN0Q29udGFpbmVyRm9ySUQoaWQpO1xuICBpZiAoY29udGFpbmVyKSB7XG4gICAgdmFyIGRvYyA9IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFX1RZUEUgP1xuICAgICAgY29udGFpbmVyLm93bmVyRG9jdW1lbnQgOlxuICAgICAgY29udGFpbmVyO1xuICAgIGxpc3RlblRvKHJlZ2lzdHJhdGlvbk5hbWUsIGRvYyk7XG4gIH1cbiAgdHJhbnNhY3Rpb24uZ2V0UHV0TGlzdGVuZXJRdWV1ZSgpLmVucXVldWVQdXRMaXN0ZW5lcihcbiAgICBpZCxcbiAgICByZWdpc3RyYXRpb25OYW1lLFxuICAgIGxpc3RlbmVyXG4gICk7XG59XG5cbi8vIEZvciBIVE1MLCBjZXJ0YWluIHRhZ3Mgc2hvdWxkIG9taXQgdGhlaXIgY2xvc2UgdGFnLiBXZSBrZWVwIGEgd2hpdGVsaXN0IGZvclxuLy8gdGhvc2Ugc3BlY2lhbCBjYXNlZCB0YWdzLlxuXG52YXIgb21pdHRlZENsb3NlVGFncyA9IHtcbiAgJ2FyZWEnOiB0cnVlLFxuICAnYmFzZSc6IHRydWUsXG4gICdicic6IHRydWUsXG4gICdjb2wnOiB0cnVlLFxuICAnZW1iZWQnOiB0cnVlLFxuICAnaHInOiB0cnVlLFxuICAnaW1nJzogdHJ1ZSxcbiAgJ2lucHV0JzogdHJ1ZSxcbiAgJ2tleWdlbic6IHRydWUsXG4gICdsaW5rJzogdHJ1ZSxcbiAgJ21ldGEnOiB0cnVlLFxuICAncGFyYW0nOiB0cnVlLFxuICAnc291cmNlJzogdHJ1ZSxcbiAgJ3RyYWNrJzogdHJ1ZSxcbiAgJ3dicic6IHRydWVcbiAgLy8gTk9URTogbWVudWl0ZW0ncyBjbG9zZSB0YWcgc2hvdWxkIGJlIG9taXR0ZWQsIGJ1dCB0aGF0IGNhdXNlcyBwcm9ibGVtcy5cbn07XG5cbi8vIFdlIGFjY2VwdCBhbnkgdGFnIHRvIGJlIHJlbmRlcmVkIGJ1dCBzaW5jZSB0aGlzIGdldHMgaW5qZWN0ZWQgaW50byBhYml0cmFyeVxuLy8gSFRNTCwgd2Ugd2FudCB0byBtYWtlIHN1cmUgdGhhdCBpdCdzIGEgc2FmZSB0YWcuXG4vLyBodHRwOi8vd3d3LnczLm9yZy9UUi9SRUMteG1sLyNOVC1OYW1lXG5cbnZhciBWQUxJRF9UQUdfUkVHRVggPSAvXlthLXpBLVpdW2EtekEtWjpfXFwuXFwtXFxkXSokLzsgLy8gU2ltcGxpZmllZCBzdWJzZXRcbnZhciB2YWxpZGF0ZWRUYWdDYWNoZSA9IHt9O1xudmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlRGFuZ2Vyb3VzVGFnKHRhZykge1xuICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwodmFsaWRhdGVkVGFnQ2FjaGUsIHRhZykpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFZBTElEX1RBR19SRUdFWC50ZXN0KHRhZyksICdJbnZhbGlkIHRhZzogJXMnLCB0YWcpIDogaW52YXJpYW50KFZBTElEX1RBR19SRUdFWC50ZXN0KHRhZykpKTtcbiAgICB2YWxpZGF0ZWRUYWdDYWNoZVt0YWddID0gdHJ1ZTtcbiAgfVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgUmVhY3QgY2xhc3MgdGhhdCBpcyBpZGVtcG90ZW50IGFuZCBjYXBhYmxlIG9mIGNvbnRhaW5pbmcgb3RoZXJcbiAqIFJlYWN0IGNvbXBvbmVudHMuIEl0IGFjY2VwdHMgZXZlbnQgbGlzdGVuZXJzIGFuZCBET00gcHJvcGVydGllcyB0aGF0IGFyZVxuICogdmFsaWQgYWNjb3JkaW5nIHRvIGBET01Qcm9wZXJ0eWAuXG4gKlxuICogIC0gRXZlbnQgbGlzdGVuZXJzOiBgb25DbGlja2AsIGBvbk1vdXNlRG93bmAsIGV0Yy5cbiAqICAtIERPTSBwcm9wZXJ0aWVzOiBgY2xhc3NOYW1lYCwgYG5hbWVgLCBgdGl0bGVgLCBldGMuXG4gKlxuICogVGhlIGBzdHlsZWAgcHJvcGVydHkgZnVuY3Rpb25zIGRpZmZlcmVudGx5IGZyb20gdGhlIERPTSBBUEkuIEl0IGFjY2VwdHMgYW5cbiAqIG9iamVjdCBtYXBwaW5nIG9mIHN0eWxlIHByb3BlcnRpZXMgdG8gdmFsdWVzLlxuICpcbiAqIEBjb25zdHJ1Y3RvciBSZWFjdERPTUNvbXBvbmVudFxuICogQGV4dGVuZHMgUmVhY3RDb21wb25lbnRcbiAqIEBleHRlbmRzIFJlYWN0TXVsdGlDaGlsZFxuICovXG5mdW5jdGlvbiBSZWFjdERPTUNvbXBvbmVudCh0YWcpIHtcbiAgdmFsaWRhdGVEYW5nZXJvdXNUYWcodGFnKTtcbiAgdGhpcy5fdGFnID0gdGFnO1xuICB0aGlzLnRhZ05hbWUgPSB0YWcudG9VcHBlckNhc2UoKTtcbn1cblxuUmVhY3RET01Db21wb25lbnQuZGlzcGxheU5hbWUgPSAnUmVhY3RET01Db21wb25lbnQnO1xuXG5SZWFjdERPTUNvbXBvbmVudC5NaXhpbiA9IHtcblxuICAvKipcbiAgICogR2VuZXJhdGVzIHJvb3QgdGFnIG1hcmt1cCB0aGVuIHJlY3Vyc2VzLiBUaGlzIG1ldGhvZCBoYXMgc2lkZSBlZmZlY3RzIGFuZFxuICAgKiBpcyBub3QgaWRlbXBvdGVudC5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByb290SUQgVGhlIHJvb3QgRE9NIElEIGZvciB0aGlzIG5vZGUuXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbnxSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge251bWJlcn0gbW91bnREZXB0aCBudW1iZXIgb2YgY29tcG9uZW50cyBpbiB0aGUgb3duZXIgaGllcmFyY2h5XG4gICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGNvbXB1dGVkIG1hcmt1cC5cbiAgICovXG4gIG1vdW50Q29tcG9uZW50OiBSZWFjdFBlcmYubWVhc3VyZShcbiAgICAnUmVhY3RET01Db21wb25lbnQnLFxuICAgICdtb3VudENvbXBvbmVudCcsXG4gICAgZnVuY3Rpb24ocm9vdElELCB0cmFuc2FjdGlvbiwgbW91bnREZXB0aCkge1xuICAgICAgUmVhY3RDb21wb25lbnQuTWl4aW4ubW91bnRDb21wb25lbnQuY2FsbChcbiAgICAgICAgdGhpcyxcbiAgICAgICAgcm9vdElELFxuICAgICAgICB0cmFuc2FjdGlvbixcbiAgICAgICAgbW91bnREZXB0aFxuICAgICAgKTtcbiAgICAgIGFzc2VydFZhbGlkUHJvcHModGhpcy5wcm9wcyk7XG4gICAgICB2YXIgY2xvc2VUYWcgPSBvbWl0dGVkQ2xvc2VUYWdzW3RoaXMuX3RhZ10gPyAnJyA6ICc8LycgKyB0aGlzLl90YWcgKyAnPic7XG4gICAgICByZXR1cm4gKFxuICAgICAgICB0aGlzLl9jcmVhdGVPcGVuVGFnTWFya3VwQW5kUHV0TGlzdGVuZXJzKHRyYW5zYWN0aW9uKSArXG4gICAgICAgIHRoaXMuX2NyZWF0ZUNvbnRlbnRNYXJrdXAodHJhbnNhY3Rpb24pICtcbiAgICAgICAgY2xvc2VUYWdcbiAgICAgICk7XG4gICAgfVxuICApLFxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIG1hcmt1cCBmb3IgdGhlIG9wZW4gdGFnIGFuZCBhbGwgYXR0cmlidXRlcy5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgaGFzIHNpZGUgZWZmZWN0cyBiZWNhdXNlIGV2ZW50cyBnZXQgcmVnaXN0ZXJlZC5cbiAgICpcbiAgICogSXRlcmF0aW5nIG92ZXIgb2JqZWN0IHByb3BlcnRpZXMgaXMgZmFzdGVyIHRoYW4gaXRlcmF0aW5nIG92ZXIgYXJyYXlzLlxuICAgKiBAc2VlIGh0dHA6Ly9qc3BlcmYuY29tL29iai12cy1hcnItaXRlcmF0aW9uXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbnxSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IE1hcmt1cCBvZiBvcGVuaW5nIHRhZy5cbiAgICovXG4gIF9jcmVhdGVPcGVuVGFnTWFya3VwQW5kUHV0TGlzdGVuZXJzOiBmdW5jdGlvbih0cmFuc2FjdGlvbikge1xuICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHJldCA9ICc8JyArIHRoaXMuX3RhZztcblxuICAgIGZvciAodmFyIHByb3BLZXkgaW4gcHJvcHMpIHtcbiAgICAgIGlmICghcHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcEtleV07XG4gICAgICBpZiAocHJvcFZhbHVlID09IG51bGwpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAocmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgICAgcHV0TGlzdGVuZXIodGhpcy5fcm9vdE5vZGVJRCwgcHJvcEtleSwgcHJvcFZhbHVlLCB0cmFuc2FjdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocHJvcEtleSA9PT0gU1RZTEUpIHtcbiAgICAgICAgICBpZiAocHJvcFZhbHVlKSB7XG4gICAgICAgICAgICBwcm9wVmFsdWUgPSBwcm9wcy5zdHlsZSA9IGFzc2lnbih7fSwgcHJvcHMuc3R5bGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwcm9wVmFsdWUgPSBDU1NQcm9wZXJ0eU9wZXJhdGlvbnMuY3JlYXRlTWFya3VwRm9yU3R5bGVzKHByb3BWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1hcmt1cCA9XG4gICAgICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvclByb3BlcnR5KHByb3BLZXksIHByb3BWYWx1ZSk7XG4gICAgICAgIGlmIChtYXJrdXApIHtcbiAgICAgICAgICByZXQgKz0gJyAnICsgbWFya3VwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRm9yIHN0YXRpYyBwYWdlcywgbm8gbmVlZCB0byBwdXQgUmVhY3QgSUQgYW5kIGNoZWNrc3VtLiBTYXZlcyBsb3RzIG9mXG4gICAgLy8gYnl0ZXMuXG4gICAgaWYgKHRyYW5zYWN0aW9uLnJlbmRlclRvU3RhdGljTWFya3VwKSB7XG4gICAgICByZXR1cm4gcmV0ICsgJz4nO1xuICAgIH1cblxuICAgIHZhciBtYXJrdXBGb3JJRCA9IERPTVByb3BlcnR5T3BlcmF0aW9ucy5jcmVhdGVNYXJrdXBGb3JJRCh0aGlzLl9yb290Tm9kZUlEKTtcbiAgICByZXR1cm4gcmV0ICsgJyAnICsgbWFya3VwRm9ySUQgKyAnPic7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgbWFya3VwIGZvciB0aGUgY29udGVudCBiZXR3ZWVuIHRoZSB0YWdzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb258UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHJldHVybiB7c3RyaW5nfSBDb250ZW50IG1hcmt1cC5cbiAgICovXG4gIF9jcmVhdGVDb250ZW50TWFya3VwOiBmdW5jdGlvbih0cmFuc2FjdGlvbikge1xuICAgIC8vIEludGVudGlvbmFsIHVzZSBvZiAhPSB0byBhdm9pZCBjYXRjaGluZyB6ZXJvL2ZhbHNlLlxuICAgIHZhciBpbm5lckhUTUwgPSB0aGlzLnByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MO1xuICAgIGlmIChpbm5lckhUTUwgIT0gbnVsbCkge1xuICAgICAgaWYgKGlubmVySFRNTC5fX2h0bWwgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gaW5uZXJIVE1MLl9faHRtbDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNvbnRlbnRUb1VzZSA9XG4gICAgICAgIENPTlRFTlRfVFlQRVNbdHlwZW9mIHRoaXMucHJvcHMuY2hpbGRyZW5dID8gdGhpcy5wcm9wcy5jaGlsZHJlbiA6IG51bGw7XG4gICAgICB2YXIgY2hpbGRyZW5Ub1VzZSA9IGNvbnRlbnRUb1VzZSAhPSBudWxsID8gbnVsbCA6IHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgICBpZiAoY29udGVudFRvVXNlICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGVzY2FwZVRleHRGb3JCcm93c2VyKGNvbnRlbnRUb1VzZSk7XG4gICAgICB9IGVsc2UgaWYgKGNoaWxkcmVuVG9Vc2UgIT0gbnVsbCkge1xuICAgICAgICB2YXIgbW91bnRJbWFnZXMgPSB0aGlzLm1vdW50Q2hpbGRyZW4oXG4gICAgICAgICAgY2hpbGRyZW5Ub1VzZSxcbiAgICAgICAgICB0cmFuc2FjdGlvblxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gbW91bnRJbWFnZXMuam9pbignJyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfSxcblxuICByZWNlaXZlQ29tcG9uZW50OiBmdW5jdGlvbihuZXh0RWxlbWVudCwgdHJhbnNhY3Rpb24pIHtcbiAgICBpZiAobmV4dEVsZW1lbnQgPT09IHRoaXMuX2N1cnJlbnRFbGVtZW50ICYmXG4gICAgICAgIG5leHRFbGVtZW50Ll9vd25lciAhPSBudWxsKSB7XG4gICAgICAvLyBTaW5jZSBlbGVtZW50cyBhcmUgaW1tdXRhYmxlIGFmdGVyIHRoZSBvd25lciBpcyByZW5kZXJlZCxcbiAgICAgIC8vIHdlIGNhbiBkbyBhIGNoZWFwIGlkZW50aXR5IGNvbXBhcmUgaGVyZSB0byBkZXRlcm1pbmUgaWYgdGhpcyBpcyBhXG4gICAgICAvLyBzdXBlcmZsdW91cyByZWNvbmNpbGUuIEl0J3MgcG9zc2libGUgZm9yIHN0YXRlIHRvIGJlIG11dGFibGUgYnV0IHN1Y2hcbiAgICAgIC8vIGNoYW5nZSBzaG91bGQgdHJpZ2dlciBhbiB1cGRhdGUgb2YgdGhlIG93bmVyIHdoaWNoIHdvdWxkIHJlY3JlYXRlXG4gICAgICAvLyB0aGUgZWxlbWVudC4gV2UgZXhwbGljaXRseSBjaGVjayBmb3IgdGhlIGV4aXN0ZW5jZSBvZiBhbiBvd25lciBzaW5jZVxuICAgICAgLy8gaXQncyBwb3NzaWJsZSBmb3IgYSBlbGVtZW50IGNyZWF0ZWQgb3V0c2lkZSBhIGNvbXBvc2l0ZSB0byBiZVxuICAgICAgLy8gZGVlcGx5IG11dGF0ZWQgYW5kIHJldXNlZC5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBSZWFjdENvbXBvbmVudC5NaXhpbi5yZWNlaXZlQ29tcG9uZW50LmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgbmV4dEVsZW1lbnQsXG4gICAgICB0cmFuc2FjdGlvblxuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYSBuYXRpdmUgRE9NIGNvbXBvbmVudCBhZnRlciBpdCBoYXMgYWxyZWFkeSBiZWVuIGFsbG9jYXRlZCBhbmRcbiAgICogYXR0YWNoZWQgdG8gdGhlIERPTS4gUmVjb25jaWxlcyB0aGUgcm9vdCBET00gbm9kZSwgdGhlbiByZWN1cnNlcy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gcHJldkVsZW1lbnRcbiAgICogQGludGVybmFsXG4gICAqIEBvdmVycmlkYWJsZVxuICAgKi9cbiAgdXBkYXRlQ29tcG9uZW50OiBSZWFjdFBlcmYubWVhc3VyZShcbiAgICAnUmVhY3RET01Db21wb25lbnQnLFxuICAgICd1cGRhdGVDb21wb25lbnQnLFxuICAgIGZ1bmN0aW9uKHRyYW5zYWN0aW9uLCBwcmV2RWxlbWVudCkge1xuICAgICAgYXNzZXJ0VmFsaWRQcm9wcyh0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcyk7XG4gICAgICBSZWFjdENvbXBvbmVudC5NaXhpbi51cGRhdGVDb21wb25lbnQuY2FsbChcbiAgICAgICAgdGhpcyxcbiAgICAgICAgdHJhbnNhY3Rpb24sXG4gICAgICAgIHByZXZFbGVtZW50XG4gICAgICApO1xuICAgICAgdGhpcy5fdXBkYXRlRE9NUHJvcGVydGllcyhwcmV2RWxlbWVudC5wcm9wcywgdHJhbnNhY3Rpb24pO1xuICAgICAgdGhpcy5fdXBkYXRlRE9NQ2hpbGRyZW4ocHJldkVsZW1lbnQucHJvcHMsIHRyYW5zYWN0aW9uKTtcbiAgICB9XG4gICksXG5cbiAgLyoqXG4gICAqIFJlY29uY2lsZXMgdGhlIHByb3BlcnRpZXMgYnkgZGV0ZWN0aW5nIGRpZmZlcmVuY2VzIGluIHByb3BlcnR5IHZhbHVlcyBhbmRcbiAgICogdXBkYXRpbmcgdGhlIERPTSBhcyBuZWNlc3NhcnkuIFRoaXMgZnVuY3Rpb24gaXMgcHJvYmFibHkgdGhlIHNpbmdsZSBtb3N0XG4gICAqIGNyaXRpY2FsIHBhdGggZm9yIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbi5cbiAgICpcbiAgICogVE9ETzogQmVuY2htYXJrIHdoZXRoZXIgY2hlY2tpbmcgZm9yIGNoYW5nZWQgdmFsdWVzIGluIG1lbW9yeSBhY3R1YWxseVxuICAgKiAgICAgICBpbXByb3ZlcyBwZXJmb3JtYW5jZSAoZXNwZWNpYWxseSBzdGF0aWNhbGx5IHBvc2l0aW9uZWQgZWxlbWVudHMpLlxuICAgKiBUT0RPOiBCZW5jaG1hcmsgdGhlIGVmZmVjdHMgb2YgcHV0dGluZyB0aGlzIGF0IHRoZSB0b3Agc2luY2UgOTklIG9mIHByb3BzXG4gICAqICAgICAgIGRvIG5vdCBjaGFuZ2UgZm9yIGEgZ2l2ZW4gcmVjb25jaWxpYXRpb24uXG4gICAqIFRPRE86IEJlbmNobWFyayBhcmVhcyB0aGF0IGNhbiBiZSBpbXByb3ZlZCB3aXRoIGNhY2hpbmcuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBsYXN0UHJvcHNcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKi9cbiAgX3VwZGF0ZURPTVByb3BlcnRpZXM6IGZ1bmN0aW9uKGxhc3RQcm9wcywgdHJhbnNhY3Rpb24pIHtcbiAgICB2YXIgbmV4dFByb3BzID0gdGhpcy5wcm9wcztcbiAgICB2YXIgcHJvcEtleTtcbiAgICB2YXIgc3R5bGVOYW1lO1xuICAgIHZhciBzdHlsZVVwZGF0ZXM7XG4gICAgZm9yIChwcm9wS2V5IGluIGxhc3RQcm9wcykge1xuICAgICAgaWYgKG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSB8fFxuICAgICAgICAgIWxhc3RQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wS2V5ID09PSBTVFlMRSkge1xuICAgICAgICB2YXIgbGFzdFN0eWxlID0gbGFzdFByb3BzW3Byb3BLZXldO1xuICAgICAgICBmb3IgKHN0eWxlTmFtZSBpbiBsYXN0U3R5bGUpIHtcbiAgICAgICAgICBpZiAobGFzdFN0eWxlLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkpIHtcbiAgICAgICAgICAgIHN0eWxlVXBkYXRlcyA9IHN0eWxlVXBkYXRlcyB8fCB7fTtcbiAgICAgICAgICAgIHN0eWxlVXBkYXRlc1tzdHlsZU5hbWVdID0gJyc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgIGRlbGV0ZUxpc3RlbmVyKHRoaXMuX3Jvb3ROb2RlSUQsIHByb3BLZXkpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBET01Qcm9wZXJ0eS5pc1N0YW5kYXJkTmFtZVtwcm9wS2V5XSB8fFxuICAgICAgICAgIERPTVByb3BlcnR5LmlzQ3VzdG9tQXR0cmlidXRlKHByb3BLZXkpKSB7XG4gICAgICAgIFJlYWN0Q29tcG9uZW50LkJhY2tlbmRJRE9wZXJhdGlvbnMuZGVsZXRlUHJvcGVydHlCeUlEKFxuICAgICAgICAgIHRoaXMuX3Jvb3ROb2RlSUQsXG4gICAgICAgICAgcHJvcEtleVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHByb3BLZXkgaW4gbmV4dFByb3BzKSB7XG4gICAgICB2YXIgbmV4dFByb3AgPSBuZXh0UHJvcHNbcHJvcEtleV07XG4gICAgICB2YXIgbGFzdFByb3AgPSBsYXN0UHJvcHNbcHJvcEtleV07XG4gICAgICBpZiAoIW5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSB8fCBuZXh0UHJvcCA9PT0gbGFzdFByb3ApIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAocHJvcEtleSA9PT0gU1RZTEUpIHtcbiAgICAgICAgaWYgKG5leHRQcm9wKSB7XG4gICAgICAgICAgbmV4dFByb3AgPSBuZXh0UHJvcHMuc3R5bGUgPSBhc3NpZ24oe30sIG5leHRQcm9wKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGFzdFByb3ApIHtcbiAgICAgICAgICAvLyBVbnNldCBzdHlsZXMgb24gYGxhc3RQcm9wYCBidXQgbm90IG9uIGBuZXh0UHJvcGAuXG4gICAgICAgICAgZm9yIChzdHlsZU5hbWUgaW4gbGFzdFByb3ApIHtcbiAgICAgICAgICAgIGlmIChsYXN0UHJvcC5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpICYmXG4gICAgICAgICAgICAgICAgKCFuZXh0UHJvcCB8fCAhbmV4dFByb3AuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkpIHtcbiAgICAgICAgICAgICAgc3R5bGVVcGRhdGVzID0gc3R5bGVVcGRhdGVzIHx8IHt9O1xuICAgICAgICAgICAgICBzdHlsZVVwZGF0ZXNbc3R5bGVOYW1lXSA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBVcGRhdGUgc3R5bGVzIHRoYXQgY2hhbmdlZCBzaW5jZSBgbGFzdFByb3BgLlxuICAgICAgICAgIGZvciAoc3R5bGVOYW1lIGluIG5leHRQcm9wKSB7XG4gICAgICAgICAgICBpZiAobmV4dFByb3AuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSAmJlxuICAgICAgICAgICAgICAgIGxhc3RQcm9wW3N0eWxlTmFtZV0gIT09IG5leHRQcm9wW3N0eWxlTmFtZV0pIHtcbiAgICAgICAgICAgICAgc3R5bGVVcGRhdGVzID0gc3R5bGVVcGRhdGVzIHx8IHt9O1xuICAgICAgICAgICAgICBzdHlsZVVwZGF0ZXNbc3R5bGVOYW1lXSA9IG5leHRQcm9wW3N0eWxlTmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFJlbGllcyBvbiBgdXBkYXRlU3R5bGVzQnlJRGAgbm90IG11dGF0aW5nIGBzdHlsZVVwZGF0ZXNgLlxuICAgICAgICAgIHN0eWxlVXBkYXRlcyA9IG5leHRQcm9wO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgIHB1dExpc3RlbmVyKHRoaXMuX3Jvb3ROb2RlSUQsIHByb3BLZXksIG5leHRQcm9wLCB0cmFuc2FjdGlvbik7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIERPTVByb3BlcnR5LmlzU3RhbmRhcmROYW1lW3Byb3BLZXldIHx8XG4gICAgICAgICAgRE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUocHJvcEtleSkpIHtcbiAgICAgICAgUmVhY3RDb21wb25lbnQuQmFja2VuZElET3BlcmF0aW9ucy51cGRhdGVQcm9wZXJ0eUJ5SUQoXG4gICAgICAgICAgdGhpcy5fcm9vdE5vZGVJRCxcbiAgICAgICAgICBwcm9wS2V5LFxuICAgICAgICAgIG5leHRQcm9wXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzdHlsZVVwZGF0ZXMpIHtcbiAgICAgIFJlYWN0Q29tcG9uZW50LkJhY2tlbmRJRE9wZXJhdGlvbnMudXBkYXRlU3R5bGVzQnlJRChcbiAgICAgICAgdGhpcy5fcm9vdE5vZGVJRCxcbiAgICAgICAgc3R5bGVVcGRhdGVzXG4gICAgICApO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogUmVjb25jaWxlcyB0aGUgY2hpbGRyZW4gd2l0aCB0aGUgdmFyaW91cyBwcm9wZXJ0aWVzIHRoYXQgYWZmZWN0IHRoZVxuICAgKiBjaGlsZHJlbiBjb250ZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gbGFzdFByb3BzXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICovXG4gIF91cGRhdGVET01DaGlsZHJlbjogZnVuY3Rpb24obGFzdFByb3BzLCB0cmFuc2FjdGlvbikge1xuICAgIHZhciBuZXh0UHJvcHMgPSB0aGlzLnByb3BzO1xuXG4gICAgdmFyIGxhc3RDb250ZW50ID1cbiAgICAgIENPTlRFTlRfVFlQRVNbdHlwZW9mIGxhc3RQcm9wcy5jaGlsZHJlbl0gPyBsYXN0UHJvcHMuY2hpbGRyZW4gOiBudWxsO1xuICAgIHZhciBuZXh0Q29udGVudCA9XG4gICAgICBDT05URU5UX1RZUEVTW3R5cGVvZiBuZXh0UHJvcHMuY2hpbGRyZW5dID8gbmV4dFByb3BzLmNoaWxkcmVuIDogbnVsbDtcblxuICAgIHZhciBsYXN0SHRtbCA9XG4gICAgICBsYXN0UHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgJiZcbiAgICAgIGxhc3RQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWw7XG4gICAgdmFyIG5leHRIdG1sID1cbiAgICAgIG5leHRQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCAmJlxuICAgICAgbmV4dFByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbDtcblxuICAgIC8vIE5vdGUgdGhlIHVzZSBvZiBgIT1gIHdoaWNoIGNoZWNrcyBmb3IgbnVsbCBvciB1bmRlZmluZWQuXG4gICAgdmFyIGxhc3RDaGlsZHJlbiA9IGxhc3RDb250ZW50ICE9IG51bGwgPyBudWxsIDogbGFzdFByb3BzLmNoaWxkcmVuO1xuICAgIHZhciBuZXh0Q2hpbGRyZW4gPSBuZXh0Q29udGVudCAhPSBudWxsID8gbnVsbCA6IG5leHRQcm9wcy5jaGlsZHJlbjtcblxuICAgIC8vIElmIHdlJ3JlIHN3aXRjaGluZyBmcm9tIGNoaWxkcmVuIHRvIGNvbnRlbnQvaHRtbCBvciB2aWNlIHZlcnNhLCByZW1vdmVcbiAgICAvLyB0aGUgb2xkIGNvbnRlbnRcbiAgICB2YXIgbGFzdEhhc0NvbnRlbnRPckh0bWwgPSBsYXN0Q29udGVudCAhPSBudWxsIHx8IGxhc3RIdG1sICE9IG51bGw7XG4gICAgdmFyIG5leHRIYXNDb250ZW50T3JIdG1sID0gbmV4dENvbnRlbnQgIT0gbnVsbCB8fCBuZXh0SHRtbCAhPSBudWxsO1xuICAgIGlmIChsYXN0Q2hpbGRyZW4gIT0gbnVsbCAmJiBuZXh0Q2hpbGRyZW4gPT0gbnVsbCkge1xuICAgICAgdGhpcy51cGRhdGVDaGlsZHJlbihudWxsLCB0cmFuc2FjdGlvbik7XG4gICAgfSBlbHNlIGlmIChsYXN0SGFzQ29udGVudE9ySHRtbCAmJiAhbmV4dEhhc0NvbnRlbnRPckh0bWwpIHtcbiAgICAgIHRoaXMudXBkYXRlVGV4dENvbnRlbnQoJycpO1xuICAgIH1cblxuICAgIGlmIChuZXh0Q29udGVudCAhPSBudWxsKSB7XG4gICAgICBpZiAobGFzdENvbnRlbnQgIT09IG5leHRDb250ZW50KSB7XG4gICAgICAgIHRoaXMudXBkYXRlVGV4dENvbnRlbnQoJycgKyBuZXh0Q29udGVudCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuZXh0SHRtbCAhPSBudWxsKSB7XG4gICAgICBpZiAobGFzdEh0bWwgIT09IG5leHRIdG1sKSB7XG4gICAgICAgIFJlYWN0Q29tcG9uZW50LkJhY2tlbmRJRE9wZXJhdGlvbnMudXBkYXRlSW5uZXJIVE1MQnlJRChcbiAgICAgICAgICB0aGlzLl9yb290Tm9kZUlELFxuICAgICAgICAgIG5leHRIdG1sXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuZXh0Q2hpbGRyZW4gIT0gbnVsbCkge1xuICAgICAgdGhpcy51cGRhdGVDaGlsZHJlbihuZXh0Q2hpbGRyZW4sIHRyYW5zYWN0aW9uKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFsbCBldmVudCByZWdpc3RyYXRpb25zIGZvciB0aGlzIGluc3RhbmNlLiBEb2VzIG5vdCByZW1vdmUgZnJvbVxuICAgKiB0aGUgRE9NLiBUaGF0IG11c3QgYmUgZG9uZSBieSB0aGUgcGFyZW50LlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHVubW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudW5tb3VudENoaWxkcmVuKCk7XG4gICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmRlbGV0ZUFsbExpc3RlbmVycyh0aGlzLl9yb290Tm9kZUlEKTtcbiAgICBSZWFjdENvbXBvbmVudC5NaXhpbi51bm1vdW50Q29tcG9uZW50LmNhbGwodGhpcyk7XG4gIH1cblxufTtcblxuYXNzaWduKFxuICBSZWFjdERPTUNvbXBvbmVudC5wcm90b3R5cGUsXG4gIFJlYWN0Q29tcG9uZW50Lk1peGluLFxuICBSZWFjdERPTUNvbXBvbmVudC5NaXhpbixcbiAgUmVhY3RNdWx0aUNoaWxkLk1peGluLFxuICBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpblxuKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUNvbXBvbmVudDtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vQ1NTUHJvcGVydHlPcGVyYXRpb25zXCI6NzMsXCIuL0RPTVByb3BlcnR5XCI6NzksXCIuL0RPTVByb3BlcnR5T3BlcmF0aW9uc1wiOjgwLFwiLi9PYmplY3QuYXNzaWduXCI6OTUsXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCI6OTgsXCIuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlclwiOjk5LFwiLi9SZWFjdENvbXBvbmVudFwiOjEwMSxcIi4vUmVhY3RNb3VudFwiOjEzMixcIi4vUmVhY3RNdWx0aUNoaWxkXCI6MTMzLFwiLi9SZWFjdFBlcmZcIjoxMzcsXCIuL2VzY2FwZVRleHRGb3JCcm93c2VyXCI6MTc5LFwiLi9pbnZhcmlhbnRcIjoxOTYsXCIuL2lzRXZlbnRTdXBwb3J0ZWRcIjoxOTcsXCIuL2tleU9mXCI6MjAzLFwiLi9tb25pdG9yQ29kZVVzZVwiOjIwNixcIl9wcm9jZXNzXCI6MTl9XSwxMDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NRm9ybVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcbnZhciBMb2NhbEV2ZW50VHJhcE1peGluID0gcmVxdWlyZShcIi4vTG9jYWxFdmVudFRyYXBNaXhpblwiKTtcbnZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IHJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCIpO1xudmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0RE9NID0gcmVxdWlyZShcIi4vUmVhY3RET01cIik7XG5cbi8vIFN0b3JlIGEgcmVmZXJlbmNlIHRvIHRoZSA8Zm9ybT4gYFJlYWN0RE9NQ29tcG9uZW50YC4gVE9ETzogdXNlIHN0cmluZ1xudmFyIGZvcm0gPSBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeShSZWFjdERPTS5mb3JtLnR5cGUpO1xuXG4vKipcbiAqIFNpbmNlIG9uU3VibWl0IGRvZXNuJ3QgYnViYmxlIE9SIGNhcHR1cmUgb24gdGhlIHRvcCBsZXZlbCBpbiBJRTgsIHdlIG5lZWRcbiAqIHRvIGNhcHR1cmUgaXQgb24gdGhlIDxmb3JtPiBlbGVtZW50IGl0c2VsZi4gVGhlcmUgYXJlIGxvdHMgb2YgaGFja3Mgd2UgY291bGRcbiAqIGRvIHRvIGFjY29tcGxpc2ggdGhpcywgYnV0IHRoZSBtb3N0IHJlbGlhYmxlIGlzIHRvIG1ha2UgPGZvcm0+IGFcbiAqIGNvbXBvc2l0ZSBjb21wb25lbnQgYW5kIHVzZSBgY29tcG9uZW50RGlkTW91bnRgIHRvIGF0dGFjaCB0aGUgZXZlbnQgaGFuZGxlcnMuXG4gKi9cbnZhciBSZWFjdERPTUZvcm0gPSBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnUmVhY3RET01Gb3JtJyxcblxuICBtaXhpbnM6IFtSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiwgTG9jYWxFdmVudFRyYXBNaXhpbl0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAvLyBUT0RPOiBJbnN0ZWFkIG9mIHVzaW5nIGBSZWFjdERPTWAgZGlyZWN0bHksIHdlIHNob3VsZCB1c2UgSlNYLiBIb3dldmVyLFxuICAgIC8vIGBqc2hpbnRgIGZhaWxzIHRvIHBhcnNlIEpTWCBzbyBpbiBvcmRlciBmb3IgbGludGluZyB0byB3b3JrIGluIHRoZSBvcGVuXG4gICAgLy8gc291cmNlIHJlcG8sIHdlIG5lZWQgdG8ganVzdCB1c2UgYFJlYWN0RE9NLmZvcm1gLlxuICAgIHJldHVybiBmb3JtKHRoaXMucHJvcHMpO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRyYXBCdWJibGVkRXZlbnQoRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcy50b3BSZXNldCwgJ3Jlc2V0Jyk7XG4gICAgdGhpcy50cmFwQnViYmxlZEV2ZW50KEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXMudG9wU3VibWl0LCAnc3VibWl0Jyk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NRm9ybTtcblxufSx7XCIuL0V2ZW50Q29uc3RhbnRzXCI6ODQsXCIuL0xvY2FsRXZlbnRUcmFwTWl4aW5cIjo5MyxcIi4vUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cIjo5OCxcIi4vUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIjoxMDMsXCIuL1JlYWN0RE9NXCI6MTA2LFwiLi9SZWFjdEVsZW1lbnRcIjoxMjF9XSwxMTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTUlET3BlcmF0aW9uc1xuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4vKmpzbGludCBldmlsOiB0cnVlICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgQ1NTUHJvcGVydHlPcGVyYXRpb25zID0gcmVxdWlyZShcIi4vQ1NTUHJvcGVydHlPcGVyYXRpb25zXCIpO1xudmFyIERPTUNoaWxkcmVuT3BlcmF0aW9ucyA9IHJlcXVpcmUoXCIuL0RPTUNoaWxkcmVuT3BlcmF0aW9uc1wiKTtcbnZhciBET01Qcm9wZXJ0eU9wZXJhdGlvbnMgPSByZXF1aXJlKFwiLi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnNcIik7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoXCIuL1JlYWN0TW91bnRcIik7XG52YXIgUmVhY3RQZXJmID0gcmVxdWlyZShcIi4vUmVhY3RQZXJmXCIpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xudmFyIHNldElubmVySFRNTCA9IHJlcXVpcmUoXCIuL3NldElubmVySFRNTFwiKTtcblxuLyoqXG4gKiBFcnJvcnMgZm9yIHByb3BlcnRpZXMgdGhhdCBzaG91bGQgbm90IGJlIHVwZGF0ZWQgd2l0aCBgdXBkYXRlUHJvcGVydHlCeUlkKClgLlxuICpcbiAqIEB0eXBlIHtvYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgSU5WQUxJRF9QUk9QRVJUWV9FUlJPUlMgPSB7XG4gIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOlxuICAgICdgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgIG11c3QgYmUgc2V0IHVzaW5nIGB1cGRhdGVJbm5lckhUTUxCeUlEKClgLicsXG4gIHN0eWxlOiAnYHN0eWxlYCBtdXN0IGJlIHNldCB1c2luZyBgdXBkYXRlU3R5bGVzQnlJRCgpYC4nXG59O1xuXG4vKipcbiAqIE9wZXJhdGlvbnMgdXNlZCB0byBwcm9jZXNzIHVwZGF0ZXMgdG8gRE9NIG5vZGVzLiBUaGlzIGlzIG1hZGUgaW5qZWN0YWJsZSB2aWFcbiAqIGBSZWFjdENvbXBvbmVudC5CYWNrZW5kSURPcGVyYXRpb25zYC5cbiAqL1xudmFyIFJlYWN0RE9NSURPcGVyYXRpb25zID0ge1xuXG4gIC8qKlxuICAgKiBVcGRhdGVzIGEgRE9NIG5vZGUgd2l0aCBuZXcgcHJvcGVydHkgdmFsdWVzLiBUaGlzIHNob3VsZCBvbmx5IGJlIHVzZWQgdG9cbiAgICogdXBkYXRlIERPTSBwcm9wZXJ0aWVzIGluIGBET01Qcm9wZXJ0eWAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiB0aGUgbm9kZSB0byB1cGRhdGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEEgdmFsaWQgcHJvcGVydHkgbmFtZSwgc2VlIGBET01Qcm9wZXJ0eWAuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgTmV3IHZhbHVlIG9mIHRoZSBwcm9wZXJ0eS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB1cGRhdGVQcm9wZXJ0eUJ5SUQ6IFJlYWN0UGVyZi5tZWFzdXJlKFxuICAgICdSZWFjdERPTUlET3BlcmF0aW9ucycsXG4gICAgJ3VwZGF0ZVByb3BlcnR5QnlJRCcsXG4gICAgZnVuY3Rpb24oaWQsIG5hbWUsIHZhbHVlKSB7XG4gICAgICB2YXIgbm9kZSA9IFJlYWN0TW91bnQuZ2V0Tm9kZShpZCk7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAhSU5WQUxJRF9QUk9QRVJUWV9FUlJPUlMuaGFzT3duUHJvcGVydHkobmFtZSksXG4gICAgICAgICd1cGRhdGVQcm9wZXJ0eUJ5SUQoLi4uKTogJXMnLFxuICAgICAgICBJTlZBTElEX1BST1BFUlRZX0VSUk9SU1tuYW1lXVxuICAgICAgKSA6IGludmFyaWFudCghSU5WQUxJRF9QUk9QRVJUWV9FUlJPUlMuaGFzT3duUHJvcGVydHkobmFtZSkpKTtcblxuICAgICAgLy8gSWYgd2UncmUgdXBkYXRpbmcgdG8gbnVsbCBvciB1bmRlZmluZWQsIHdlIHNob3VsZCByZW1vdmUgdGhlIHByb3BlcnR5XG4gICAgICAvLyBmcm9tIHRoZSBET00gbm9kZSBpbnN0ZWFkIG9mIGluYWR2ZXJ0YW50bHkgc2V0dGluZyB0byBhIHN0cmluZy4gVGhpc1xuICAgICAgLy8gYnJpbmdzIHVzIGluIGxpbmUgd2l0aCB0aGUgc2FtZSBiZWhhdmlvciB3ZSBoYXZlIG9uIGluaXRpYWwgcmVuZGVyLlxuICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLnNldFZhbHVlRm9yUHJvcGVydHkobm9kZSwgbmFtZSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLmRlbGV0ZVZhbHVlRm9yUHJvcGVydHkobm9kZSwgbmFtZSk7XG4gICAgICB9XG4gICAgfVxuICApLFxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIGEgRE9NIG5vZGUgdG8gcmVtb3ZlIGEgcHJvcGVydHkuIFRoaXMgc2hvdWxkIG9ubHkgYmUgdXNlZCB0byByZW1vdmVcbiAgICogRE9NIHByb3BlcnRpZXMgaW4gYERPTVByb3BlcnR5YC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBub2RlIHRvIHVwZGF0ZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQSBwcm9wZXJ0eSBuYW1lIHRvIHJlbW92ZSwgc2VlIGBET01Qcm9wZXJ0eWAuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZGVsZXRlUHJvcGVydHlCeUlEOiBSZWFjdFBlcmYubWVhc3VyZShcbiAgICAnUmVhY3RET01JRE9wZXJhdGlvbnMnLFxuICAgICdkZWxldGVQcm9wZXJ0eUJ5SUQnLFxuICAgIGZ1bmN0aW9uKGlkLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgdmFyIG5vZGUgPSBSZWFjdE1vdW50LmdldE5vZGUoaWQpO1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgIUlOVkFMSURfUFJPUEVSVFlfRVJST1JTLmhhc093blByb3BlcnR5KG5hbWUpLFxuICAgICAgICAndXBkYXRlUHJvcGVydHlCeUlEKC4uLik6ICVzJyxcbiAgICAgICAgSU5WQUxJRF9QUk9QRVJUWV9FUlJPUlNbbmFtZV1cbiAgICAgICkgOiBpbnZhcmlhbnQoIUlOVkFMSURfUFJPUEVSVFlfRVJST1JTLmhhc093blByb3BlcnR5KG5hbWUpKSk7XG4gICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuZGVsZXRlVmFsdWVGb3JQcm9wZXJ0eShub2RlLCBuYW1lLCB2YWx1ZSk7XG4gICAgfVxuICApLFxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIGEgRE9NIG5vZGUgd2l0aCBuZXcgc3R5bGUgdmFsdWVzLiBJZiBhIHZhbHVlIGlzIHNwZWNpZmllZCBhcyAnJyxcbiAgICogdGhlIGNvcnJlc3BvbmRpbmcgc3R5bGUgcHJvcGVydHkgd2lsbCBiZSB1bnNldC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBub2RlIHRvIHVwZGF0ZS5cbiAgICogQHBhcmFtIHtvYmplY3R9IHN0eWxlcyBNYXBwaW5nIGZyb20gc3R5bGVzIHRvIHZhbHVlcy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB1cGRhdGVTdHlsZXNCeUlEOiBSZWFjdFBlcmYubWVhc3VyZShcbiAgICAnUmVhY3RET01JRE9wZXJhdGlvbnMnLFxuICAgICd1cGRhdGVTdHlsZXNCeUlEJyxcbiAgICBmdW5jdGlvbihpZCwgc3R5bGVzKSB7XG4gICAgICB2YXIgbm9kZSA9IFJlYWN0TW91bnQuZ2V0Tm9kZShpZCk7XG4gICAgICBDU1NQcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JTdHlsZXMobm9kZSwgc3R5bGVzKTtcbiAgICB9XG4gICksXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYSBET00gbm9kZSdzIGlubmVySFRNTC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIHRoZSBub2RlIHRvIHVwZGF0ZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGh0bWwgQW4gSFRNTCBzdHJpbmcuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdXBkYXRlSW5uZXJIVE1MQnlJRDogUmVhY3RQZXJmLm1lYXN1cmUoXG4gICAgJ1JlYWN0RE9NSURPcGVyYXRpb25zJyxcbiAgICAndXBkYXRlSW5uZXJIVE1MQnlJRCcsXG4gICAgZnVuY3Rpb24oaWQsIGh0bWwpIHtcbiAgICAgIHZhciBub2RlID0gUmVhY3RNb3VudC5nZXROb2RlKGlkKTtcbiAgICAgIHNldElubmVySFRNTChub2RlLCBodG1sKTtcbiAgICB9XG4gICksXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYSBET00gbm9kZSdzIHRleHQgY29udGVudCBzZXQgYnkgYHByb3BzLmNvbnRlbnRgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgSUQgb2YgdGhlIG5vZGUgdG8gdXBkYXRlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCBUZXh0IGNvbnRlbnQuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdXBkYXRlVGV4dENvbnRlbnRCeUlEOiBSZWFjdFBlcmYubWVhc3VyZShcbiAgICAnUmVhY3RET01JRE9wZXJhdGlvbnMnLFxuICAgICd1cGRhdGVUZXh0Q29udGVudEJ5SUQnLFxuICAgIGZ1bmN0aW9uKGlkLCBjb250ZW50KSB7XG4gICAgICB2YXIgbm9kZSA9IFJlYWN0TW91bnQuZ2V0Tm9kZShpZCk7XG4gICAgICBET01DaGlsZHJlbk9wZXJhdGlvbnMudXBkYXRlVGV4dENvbnRlbnQobm9kZSwgY29udGVudCk7XG4gICAgfVxuICApLFxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhIERPTSBub2RlIHRoYXQgZXhpc3RzIGluIHRoZSBkb2N1bWVudCB3aXRoIG1hcmt1cC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIElEIG9mIGNoaWxkIHRvIGJlIHJlcGxhY2VkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIERhbmdlcm91cyBtYXJrdXAgdG8gaW5qZWN0IGluIHBsYWNlIG9mIGNoaWxkLlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHNlZSB7RGFuZ2VyLmRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwfVxuICAgKi9cbiAgZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEOiBSZWFjdFBlcmYubWVhc3VyZShcbiAgICAnUmVhY3RET01JRE9wZXJhdGlvbnMnLFxuICAgICdkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cEJ5SUQnLFxuICAgIGZ1bmN0aW9uKGlkLCBtYXJrdXApIHtcbiAgICAgIHZhciBub2RlID0gUmVhY3RNb3VudC5nZXROb2RlKGlkKTtcbiAgICAgIERPTUNoaWxkcmVuT3BlcmF0aW9ucy5kYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cChub2RlLCBtYXJrdXApO1xuICAgIH1cbiAgKSxcblxuICAvKipcbiAgICogVXBkYXRlcyBhIGNvbXBvbmVudCdzIGNoaWxkcmVuIGJ5IHByb2Nlc3NpbmcgYSBzZXJpZXMgb2YgdXBkYXRlcy5cbiAgICpcbiAgICogQHBhcmFtIHthcnJheTxvYmplY3Q+fSB1cGRhdGVzIExpc3Qgb2YgdXBkYXRlIGNvbmZpZ3VyYXRpb25zLlxuICAgKiBAcGFyYW0ge2FycmF5PHN0cmluZz59IG1hcmt1cCBMaXN0IG9mIG1hcmt1cCBzdHJpbmdzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGRhbmdlcm91c2x5UHJvY2Vzc0NoaWxkcmVuVXBkYXRlczogUmVhY3RQZXJmLm1lYXN1cmUoXG4gICAgJ1JlYWN0RE9NSURPcGVyYXRpb25zJyxcbiAgICAnZGFuZ2Vyb3VzbHlQcm9jZXNzQ2hpbGRyZW5VcGRhdGVzJyxcbiAgICBmdW5jdGlvbih1cGRhdGVzLCBtYXJrdXApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdXBkYXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB1cGRhdGVzW2ldLnBhcmVudE5vZGUgPSBSZWFjdE1vdW50LmdldE5vZGUodXBkYXRlc1tpXS5wYXJlbnRJRCk7XG4gICAgICB9XG4gICAgICBET01DaGlsZHJlbk9wZXJhdGlvbnMucHJvY2Vzc1VwZGF0ZXModXBkYXRlcywgbWFya3VwKTtcbiAgICB9XG4gIClcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01JRE9wZXJhdGlvbnM7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL0NTU1Byb3BlcnR5T3BlcmF0aW9uc1wiOjczLFwiLi9ET01DaGlsZHJlbk9wZXJhdGlvbnNcIjo3OCxcIi4vRE9NUHJvcGVydHlPcGVyYXRpb25zXCI6ODAsXCIuL1JlYWN0TW91bnRcIjoxMzIsXCIuL1JlYWN0UGVyZlwiOjEzNyxcIi4vaW52YXJpYW50XCI6MTk2LFwiLi9zZXRJbm5lckhUTUxcIjoyMTAsXCJfcHJvY2Vzc1wiOjE5fV0sMTExOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTUltZ1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcbnZhciBMb2NhbEV2ZW50VHJhcE1peGluID0gcmVxdWlyZShcIi4vTG9jYWxFdmVudFRyYXBNaXhpblwiKTtcbnZhciBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbiA9IHJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCIpO1xudmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0RE9NID0gcmVxdWlyZShcIi4vUmVhY3RET01cIik7XG5cbi8vIFN0b3JlIGEgcmVmZXJlbmNlIHRvIHRoZSA8aW1nPiBgUmVhY3RET01Db21wb25lbnRgLiBUT0RPOiB1c2Ugc3RyaW5nXG52YXIgaW1nID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkoUmVhY3RET00uaW1nLnR5cGUpO1xuXG4vKipcbiAqIFNpbmNlIG9uTG9hZCBkb2Vzbid0IGJ1YmJsZSBPUiBjYXB0dXJlIG9uIHRoZSB0b3AgbGV2ZWwgaW4gSUU4LCB3ZSBuZWVkIHRvXG4gKiBjYXB0dXJlIGl0IG9uIHRoZSA8aW1nPiBlbGVtZW50IGl0c2VsZi4gVGhlcmUgYXJlIGxvdHMgb2YgaGFja3Mgd2UgY291bGQgZG9cbiAqIHRvIGFjY29tcGxpc2ggdGhpcywgYnV0IHRoZSBtb3N0IHJlbGlhYmxlIGlzIHRvIG1ha2UgPGltZz4gYSBjb21wb3NpdGVcbiAqIGNvbXBvbmVudCBhbmQgdXNlIGBjb21wb25lbnREaWRNb3VudGAgdG8gYXR0YWNoIHRoZSBldmVudCBoYW5kbGVycy5cbiAqL1xudmFyIFJlYWN0RE9NSW1nID0gUmVhY3RDb21wb3NpdGVDb21wb25lbnQuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1JlYWN0RE9NSW1nJyxcbiAgdGFnTmFtZTogJ0lNRycsXG5cbiAgbWl4aW5zOiBbUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4sIExvY2FsRXZlbnRUcmFwTWl4aW5dLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGltZyh0aGlzLnByb3BzKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50cmFwQnViYmxlZEV2ZW50KEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXMudG9wTG9hZCwgJ2xvYWQnKTtcbiAgICB0aGlzLnRyYXBCdWJibGVkRXZlbnQoRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcy50b3BFcnJvciwgJ2Vycm9yJyk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NSW1nO1xuXG59LHtcIi4vRXZlbnRDb25zdGFudHNcIjo4NCxcIi4vTG9jYWxFdmVudFRyYXBNaXhpblwiOjkzLFwiLi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpblwiOjk4LFwiLi9SZWFjdENvbXBvc2l0ZUNvbXBvbmVudFwiOjEwMyxcIi4vUmVhY3RET01cIjoxMDYsXCIuL1JlYWN0RWxlbWVudFwiOjEyMX1dLDExMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NSW5wdXRcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEF1dG9Gb2N1c01peGluID0gcmVxdWlyZShcIi4vQXV0b0ZvY3VzTWl4aW5cIik7XG52YXIgRE9NUHJvcGVydHlPcGVyYXRpb25zID0gcmVxdWlyZShcIi4vRE9NUHJvcGVydHlPcGVyYXRpb25zXCIpO1xudmFyIExpbmtlZFZhbHVlVXRpbHMgPSByZXF1aXJlKFwiLi9MaW5rZWRWYWx1ZVV0aWxzXCIpO1xudmFyIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cIik7XG52YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdENvbXBvc2l0ZUNvbXBvbmVudFwiKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RET00gPSByZXF1aXJlKFwiLi9SZWFjdERPTVwiKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZShcIi4vUmVhY3RNb3VudFwiKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZXNcIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxuLy8gU3RvcmUgYSByZWZlcmVuY2UgdG8gdGhlIDxpbnB1dD4gYFJlYWN0RE9NQ29tcG9uZW50YC4gVE9ETzogdXNlIHN0cmluZ1xudmFyIGlucHV0ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkoUmVhY3RET00uaW5wdXQudHlwZSk7XG5cbnZhciBpbnN0YW5jZXNCeVJlYWN0SUQgPSB7fTtcblxuZnVuY3Rpb24gZm9yY2VVcGRhdGVJZk1vdW50ZWQoKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIGlmICh0aGlzLmlzTW91bnRlZCgpKSB7XG4gICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICB9XG59XG5cbi8qKlxuICogSW1wbGVtZW50cyBhbiA8aW5wdXQ+IG5hdGl2ZSBjb21wb25lbnQgdGhhdCBhbGxvd3Mgc2V0dGluZyB0aGVzZSBvcHRpb25hbFxuICogcHJvcHM6IGBjaGVja2VkYCwgYHZhbHVlYCwgYGRlZmF1bHRDaGVja2VkYCwgYW5kIGBkZWZhdWx0VmFsdWVgLlxuICpcbiAqIElmIGBjaGVja2VkYCBvciBgdmFsdWVgIGFyZSBub3Qgc3VwcGxpZWQgKG9yIG51bGwvdW5kZWZpbmVkKSwgdXNlciBhY3Rpb25zXG4gKiB0aGF0IGFmZmVjdCB0aGUgY2hlY2tlZCBzdGF0ZSBvciB2YWx1ZSB3aWxsIHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgZWxlbWVudC5cbiAqXG4gKiBJZiB0aGV5IGFyZSBzdXBwbGllZCAoYW5kIG5vdCBudWxsL3VuZGVmaW5lZCksIHRoZSByZW5kZXJlZCBlbGVtZW50IHdpbGwgbm90XG4gKiB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIGVsZW1lbnQuIEluc3RlYWQsIHRoZSBwcm9wcyBtdXN0IGNoYW5nZSBpbiBvcmRlciBmb3JcbiAqIHRoZSByZW5kZXJlZCBlbGVtZW50IHRvIGJlIHVwZGF0ZWQuXG4gKlxuICogVGhlIHJlbmRlcmVkIGVsZW1lbnQgd2lsbCBiZSBpbml0aWFsaXplZCBhcyB1bmNoZWNrZWQgKG9yIGBkZWZhdWx0Q2hlY2tlZGApXG4gKiB3aXRoIGFuIGVtcHR5IHZhbHVlIChvciBgZGVmYXVsdFZhbHVlYCkuXG4gKlxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDEyL1dELWh0bWw1LTIwMTIxMDI1L3RoZS1pbnB1dC1lbGVtZW50Lmh0bWxcbiAqL1xudmFyIFJlYWN0RE9NSW5wdXQgPSBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnUmVhY3RET01JbnB1dCcsXG5cbiAgbWl4aW5zOiBbQXV0b0ZvY3VzTWl4aW4sIExpbmtlZFZhbHVlVXRpbHMuTWl4aW4sIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkZWZhdWx0VmFsdWUgPSB0aGlzLnByb3BzLmRlZmF1bHRWYWx1ZTtcbiAgICByZXR1cm4ge1xuICAgICAgaW5pdGlhbENoZWNrZWQ6IHRoaXMucHJvcHMuZGVmYXVsdENoZWNrZWQgfHwgZmFsc2UsXG4gICAgICBpbml0aWFsVmFsdWU6IGRlZmF1bHRWYWx1ZSAhPSBudWxsID8gZGVmYXVsdFZhbHVlIDogbnVsbFxuICAgIH07XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAvLyBDbG9uZSBgdGhpcy5wcm9wc2Agc28gd2UgZG9uJ3QgbXV0YXRlIHRoZSBpbnB1dC5cbiAgICB2YXIgcHJvcHMgPSBhc3NpZ24oe30sIHRoaXMucHJvcHMpO1xuXG4gICAgcHJvcHMuZGVmYXVsdENoZWNrZWQgPSBudWxsO1xuICAgIHByb3BzLmRlZmF1bHRWYWx1ZSA9IG51bGw7XG5cbiAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHRoaXMpO1xuICAgIHByb3BzLnZhbHVlID0gdmFsdWUgIT0gbnVsbCA/IHZhbHVlIDogdGhpcy5zdGF0ZS5pbml0aWFsVmFsdWU7XG5cbiAgICB2YXIgY2hlY2tlZCA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0Q2hlY2tlZCh0aGlzKTtcbiAgICBwcm9wcy5jaGVja2VkID0gY2hlY2tlZCAhPSBudWxsID8gY2hlY2tlZCA6IHRoaXMuc3RhdGUuaW5pdGlhbENoZWNrZWQ7XG5cbiAgICBwcm9wcy5vbkNoYW5nZSA9IHRoaXMuX2hhbmRsZUNoYW5nZTtcblxuICAgIHJldHVybiBpbnB1dChwcm9wcywgdGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpZCA9IFJlYWN0TW91bnQuZ2V0SUQodGhpcy5nZXRET01Ob2RlKCkpO1xuICAgIGluc3RhbmNlc0J5UmVhY3RJRFtpZF0gPSB0aGlzO1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcm9vdE5vZGUgPSB0aGlzLmdldERPTU5vZGUoKTtcbiAgICB2YXIgaWQgPSBSZWFjdE1vdW50LmdldElEKHJvb3ROb2RlKTtcbiAgICBkZWxldGUgaW5zdGFuY2VzQnlSZWFjdElEW2lkXTtcbiAgfSxcblxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uKHByZXZQcm9wcywgcHJldlN0YXRlLCBwcmV2Q29udGV4dCkge1xuICAgIHZhciByb290Tm9kZSA9IHRoaXMuZ2V0RE9NTm9kZSgpO1xuICAgIGlmICh0aGlzLnByb3BzLmNoZWNrZWQgIT0gbnVsbCkge1xuICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLnNldFZhbHVlRm9yUHJvcGVydHkoXG4gICAgICAgIHJvb3ROb2RlLFxuICAgICAgICAnY2hlY2tlZCcsXG4gICAgICAgIHRoaXMucHJvcHMuY2hlY2tlZCB8fCBmYWxzZVxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHRoaXMpO1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAvLyBDYXN0IGB2YWx1ZWAgdG8gYSBzdHJpbmcgdG8gZW5zdXJlIHRoZSB2YWx1ZSBpcyBzZXQgY29ycmVjdGx5LiBXaGlsZVxuICAgICAgLy8gYnJvd3NlcnMgdHlwaWNhbGx5IGRvIHRoaXMgYXMgbmVjZXNzYXJ5LCBqc2RvbSBkb2Vzbid0LlxuICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLnNldFZhbHVlRm9yUHJvcGVydHkocm9vdE5vZGUsICd2YWx1ZScsICcnICsgdmFsdWUpO1xuICAgIH1cbiAgfSxcblxuICBfaGFuZGxlQ2hhbmdlOiBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciByZXR1cm5WYWx1ZTtcbiAgICB2YXIgb25DaGFuZ2UgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldE9uQ2hhbmdlKHRoaXMpO1xuICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgcmV0dXJuVmFsdWUgPSBvbkNoYW5nZS5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9XG4gICAgLy8gSGVyZSB3ZSB1c2UgYXNhcCB0byB3YWl0IHVudGlsIGFsbCB1cGRhdGVzIGhhdmUgcHJvcGFnYXRlZCwgd2hpY2hcbiAgICAvLyBpcyBpbXBvcnRhbnQgd2hlbiB1c2luZyBjb250cm9sbGVkIGNvbXBvbmVudHMgd2l0aGluIGxheWVyczpcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzE2OThcbiAgICBSZWFjdFVwZGF0ZXMuYXNhcChmb3JjZVVwZGF0ZUlmTW91bnRlZCwgdGhpcyk7XG5cbiAgICB2YXIgbmFtZSA9IHRoaXMucHJvcHMubmFtZTtcbiAgICBpZiAodGhpcy5wcm9wcy50eXBlID09PSAncmFkaW8nICYmIG5hbWUgIT0gbnVsbCkge1xuICAgICAgdmFyIHJvb3ROb2RlID0gdGhpcy5nZXRET01Ob2RlKCk7XG4gICAgICB2YXIgcXVlcnlSb290ID0gcm9vdE5vZGU7XG5cbiAgICAgIHdoaWxlIChxdWVyeVJvb3QucGFyZW50Tm9kZSkge1xuICAgICAgICBxdWVyeVJvb3QgPSBxdWVyeVJvb3QucGFyZW50Tm9kZTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgYHJvb3ROb2RlLmZvcm1gIHdhcyBub24tbnVsbCwgdGhlbiB3ZSBjb3VsZCB0cnkgYGZvcm0uZWxlbWVudHNgLFxuICAgICAgLy8gYnV0IHRoYXQgc29tZXRpbWVzIGJlaGF2ZXMgc3RyYW5nZWx5IGluIElFOC4gV2UgY291bGQgYWxzbyB0cnkgdXNpbmdcbiAgICAgIC8vIGBmb3JtLmdldEVsZW1lbnRzQnlOYW1lYCwgYnV0IHRoYXQgd2lsbCBvbmx5IHJldHVybiBkaXJlY3QgY2hpbGRyZW5cbiAgICAgIC8vIGFuZCB3b24ndCBpbmNsdWRlIGlucHV0cyB0aGF0IHVzZSB0aGUgSFRNTDUgYGZvcm09YCBhdHRyaWJ1dGUuIFNpbmNlXG4gICAgICAvLyB0aGUgaW5wdXQgbWlnaHQgbm90IGV2ZW4gYmUgaW4gYSBmb3JtLCBsZXQncyBqdXN0IHVzZSB0aGUgZ2xvYmFsXG4gICAgICAvLyBgcXVlcnlTZWxlY3RvckFsbGAgdG8gZW5zdXJlIHdlIGRvbid0IG1pc3MgYW55dGhpbmcuXG4gICAgICB2YXIgZ3JvdXAgPSBxdWVyeVJvb3QucXVlcnlTZWxlY3RvckFsbChcbiAgICAgICAgJ2lucHV0W25hbWU9JyArIEpTT04uc3RyaW5naWZ5KCcnICsgbmFtZSkgKyAnXVt0eXBlPVwicmFkaW9cIl0nKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGdyb3VwTGVuID0gZ3JvdXAubGVuZ3RoOyBpIDwgZ3JvdXBMZW47IGkrKykge1xuICAgICAgICB2YXIgb3RoZXJOb2RlID0gZ3JvdXBbaV07XG4gICAgICAgIGlmIChvdGhlck5vZGUgPT09IHJvb3ROb2RlIHx8XG4gICAgICAgICAgICBvdGhlck5vZGUuZm9ybSAhPT0gcm9vdE5vZGUuZm9ybSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvdGhlcklEID0gUmVhY3RNb3VudC5nZXRJRChvdGhlck5vZGUpO1xuICAgICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICAgIG90aGVySUQsXG4gICAgICAgICAgJ1JlYWN0RE9NSW5wdXQ6IE1peGluZyBSZWFjdCBhbmQgbm9uLVJlYWN0IHJhZGlvIGlucHV0cyB3aXRoIHRoZSAnICtcbiAgICAgICAgICAnc2FtZSBgbmFtZWAgaXMgbm90IHN1cHBvcnRlZC4nXG4gICAgICAgICkgOiBpbnZhcmlhbnQob3RoZXJJRCkpO1xuICAgICAgICB2YXIgb3RoZXJJbnN0YW5jZSA9IGluc3RhbmNlc0J5UmVhY3RJRFtvdGhlcklEXTtcbiAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgICBvdGhlckluc3RhbmNlLFxuICAgICAgICAgICdSZWFjdERPTUlucHV0OiBVbmtub3duIHJhZGlvIGJ1dHRvbiBJRCAlcy4nLFxuICAgICAgICAgIG90aGVySURcbiAgICAgICAgKSA6IGludmFyaWFudChvdGhlckluc3RhbmNlKSk7XG4gICAgICAgIC8vIElmIHRoaXMgaXMgYSBjb250cm9sbGVkIHJhZGlvIGJ1dHRvbiBncm91cCwgZm9yY2luZyB0aGUgaW5wdXQgdGhhdFxuICAgICAgICAvLyB3YXMgcHJldmlvdXNseSBjaGVja2VkIHRvIHVwZGF0ZSB3aWxsIGNhdXNlIGl0IHRvIGJlIGNvbWUgcmUtY2hlY2tlZFxuICAgICAgICAvLyBhcyBhcHByb3ByaWF0ZS5cbiAgICAgICAgUmVhY3RVcGRhdGVzLmFzYXAoZm9yY2VVcGRhdGVJZk1vdW50ZWQsIG90aGVySW5zdGFuY2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUlucHV0O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9BdXRvRm9jdXNNaXhpblwiOjcwLFwiLi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnNcIjo4MCxcIi4vTGlua2VkVmFsdWVVdGlsc1wiOjkyLFwiLi9PYmplY3QuYXNzaWduXCI6OTUsXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCI6OTgsXCIuL1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50XCI6MTAzLFwiLi9SZWFjdERPTVwiOjEwNixcIi4vUmVhY3RFbGVtZW50XCI6MTIxLFwiLi9SZWFjdE1vdW50XCI6MTMyLFwiLi9SZWFjdFVwZGF0ZXNcIjoxNDgsXCIuL2ludmFyaWFudFwiOjE5NixcIl9wcm9jZXNzXCI6MTl9XSwxMTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTU9wdGlvblxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4gPSByZXF1aXJlKFwiLi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpblwiKTtcbnZhciBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50XCIpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcbnZhciBSZWFjdERPTSA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NXCIpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbi8vIFN0b3JlIGEgcmVmZXJlbmNlIHRvIHRoZSA8b3B0aW9uPiBgUmVhY3RET01Db21wb25lbnRgLiBUT0RPOiB1c2Ugc3RyaW5nXG52YXIgb3B0aW9uID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkoUmVhY3RET00ub3B0aW9uLnR5cGUpO1xuXG4vKipcbiAqIEltcGxlbWVudHMgYW4gPG9wdGlvbj4gbmF0aXZlIGNvbXBvbmVudCB0aGF0IHdhcm5zIHdoZW4gYHNlbGVjdGVkYCBpcyBzZXQuXG4gKi9cbnZhciBSZWFjdERPTU9wdGlvbiA9IFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdSZWFjdERPTU9wdGlvbicsXG5cbiAgbWl4aW5zOiBbUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5dLFxuXG4gIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgLy8gVE9ETyAoeXVuZ3N0ZXJzKTogUmVtb3ZlIHN1cHBvcnQgZm9yIGBzZWxlY3RlZGAgaW4gPG9wdGlvbj4uXG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgIHRoaXMucHJvcHMuc2VsZWN0ZWQgPT0gbnVsbCxcbiAgICAgICAgJ1VzZSB0aGUgYGRlZmF1bHRWYWx1ZWAgb3IgYHZhbHVlYCBwcm9wcyBvbiA8c2VsZWN0PiBpbnN0ZWFkIG9mICcgK1xuICAgICAgICAnc2V0dGluZyBgc2VsZWN0ZWRgIG9uIDxvcHRpb24+LidcbiAgICAgICkgOiBudWxsKTtcbiAgICB9XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gb3B0aW9uKHRoaXMucHJvcHMsIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NT3B0aW9uO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpblwiOjk4LFwiLi9SZWFjdENvbXBvc2l0ZUNvbXBvbmVudFwiOjEwMyxcIi4vUmVhY3RET01cIjoxMDYsXCIuL1JlYWN0RWxlbWVudFwiOjEyMSxcIi4vd2FybmluZ1wiOjIxNSxcIl9wcm9jZXNzXCI6MTl9XSwxMTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NU2VsZWN0XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBBdXRvRm9jdXNNaXhpbiA9IHJlcXVpcmUoXCIuL0F1dG9Gb2N1c01peGluXCIpO1xudmFyIExpbmtlZFZhbHVlVXRpbHMgPSByZXF1aXJlKFwiLi9MaW5rZWRWYWx1ZVV0aWxzXCIpO1xudmFyIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cIik7XG52YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdENvbXBvc2l0ZUNvbXBvbmVudFwiKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RET00gPSByZXF1aXJlKFwiLi9SZWFjdERPTVwiKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZXNcIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xuXG4vLyBTdG9yZSBhIHJlZmVyZW5jZSB0byB0aGUgPHNlbGVjdD4gYFJlYWN0RE9NQ29tcG9uZW50YC4gVE9ETzogdXNlIHN0cmluZ1xudmFyIHNlbGVjdCA9IFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5KFJlYWN0RE9NLnNlbGVjdC50eXBlKTtcblxuZnVuY3Rpb24gdXBkYXRlV2l0aFBlbmRpbmdWYWx1ZUlmTW91bnRlZCgpIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgaWYgKHRoaXMuaXNNb3VudGVkKCkpIHtcbiAgICB0aGlzLnNldFN0YXRlKHt2YWx1ZTogdGhpcy5fcGVuZGluZ1ZhbHVlfSk7XG4gICAgdGhpcy5fcGVuZGluZ1ZhbHVlID0gMDtcbiAgfVxufVxuXG4vKipcbiAqIFZhbGlkYXRpb24gZnVuY3Rpb24gZm9yIGB2YWx1ZWAgYW5kIGBkZWZhdWx0VmFsdWVgLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2VsZWN0VmFsdWVUeXBlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb3BzLm11bHRpcGxlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgIChcIlRoZSBgXCIgKyBwcm9wTmFtZSArIFwiYCBwcm9wIHN1cHBsaWVkIHRvIDxzZWxlY3Q+IG11c3QgYmUgYW4gYXJyYXkgaWYgXCIpICtcbiAgICAgICAgKFwiYG11bHRpcGxlYCBpcyB0cnVlLlwiKVxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgKFwiVGhlIGBcIiArIHByb3BOYW1lICsgXCJgIHByb3Agc3VwcGxpZWQgdG8gPHNlbGVjdD4gbXVzdCBiZSBhIHNjYWxhciBcIikgK1xuICAgICAgICAoXCJ2YWx1ZSBpZiBgbXVsdGlwbGVgIGlzIGZhbHNlLlwiKVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBJZiBgdmFsdWVgIGlzIHN1cHBsaWVkLCB1cGRhdGVzIDxvcHRpb24+IGVsZW1lbnRzIG9uIG1vdW50IGFuZCB1cGRhdGUuXG4gKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjb21wb25lbnQgSW5zdGFuY2Ugb2YgUmVhY3RET01TZWxlY3RcbiAqIEBwYXJhbSB7Pyp9IHByb3BWYWx1ZSBGb3IgdW5jb250cm9sbGVkIGNvbXBvbmVudHMsIG51bGwvdW5kZWZpbmVkLiBGb3JcbiAqIGNvbnRyb2xsZWQgY29tcG9uZW50cywgYSBzdHJpbmcgKG9yIHdpdGggYG11bHRpcGxlYCwgYSBsaXN0IG9mIHN0cmluZ3MpLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gdXBkYXRlT3B0aW9ucyhjb21wb25lbnQsIHByb3BWYWx1ZSkge1xuICB2YXIgbXVsdGlwbGUgPSBjb21wb25lbnQucHJvcHMubXVsdGlwbGU7XG4gIHZhciB2YWx1ZSA9IHByb3BWYWx1ZSAhPSBudWxsID8gcHJvcFZhbHVlIDogY29tcG9uZW50LnN0YXRlLnZhbHVlO1xuICB2YXIgb3B0aW9ucyA9IGNvbXBvbmVudC5nZXRET01Ob2RlKCkub3B0aW9ucztcbiAgdmFyIHNlbGVjdGVkVmFsdWUsIGksIGw7XG4gIGlmIChtdWx0aXBsZSkge1xuICAgIHNlbGVjdGVkVmFsdWUgPSB7fTtcbiAgICBmb3IgKGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICBzZWxlY3RlZFZhbHVlWycnICsgdmFsdWVbaV1dID0gdHJ1ZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc2VsZWN0ZWRWYWx1ZSA9ICcnICsgdmFsdWU7XG4gIH1cbiAgZm9yIChpID0gMCwgbCA9IG9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIHNlbGVjdGVkID0gbXVsdGlwbGUgP1xuICAgICAgc2VsZWN0ZWRWYWx1ZS5oYXNPd25Qcm9wZXJ0eShvcHRpb25zW2ldLnZhbHVlKSA6XG4gICAgICBvcHRpb25zW2ldLnZhbHVlID09PSBzZWxlY3RlZFZhbHVlO1xuXG4gICAgaWYgKHNlbGVjdGVkICE9PSBvcHRpb25zW2ldLnNlbGVjdGVkKSB7XG4gICAgICBvcHRpb25zW2ldLnNlbGVjdGVkID0gc2VsZWN0ZWQ7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogSW1wbGVtZW50cyBhIDxzZWxlY3Q+IG5hdGl2ZSBjb21wb25lbnQgdGhhdCBhbGxvd3Mgb3B0aW9uYWxseSBzZXR0aW5nIHRoZVxuICogcHJvcHMgYHZhbHVlYCBhbmQgYGRlZmF1bHRWYWx1ZWAuIElmIGBtdWx0aXBsZWAgaXMgZmFsc2UsIHRoZSBwcm9wIG11c3QgYmUgYVxuICogc3RyaW5nLiBJZiBgbXVsdGlwbGVgIGlzIHRydWUsIHRoZSBwcm9wIG11c3QgYmUgYW4gYXJyYXkgb2Ygc3RyaW5ncy5cbiAqXG4gKiBJZiBgdmFsdWVgIGlzIG5vdCBzdXBwbGllZCAob3IgbnVsbC91bmRlZmluZWQpLCB1c2VyIGFjdGlvbnMgdGhhdCBjaGFuZ2UgdGhlXG4gKiBzZWxlY3RlZCBvcHRpb24gd2lsbCB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG4gKlxuICogSWYgaXQgaXMgc3VwcGxpZWQgKGFuZCBub3QgbnVsbC91bmRlZmluZWQpLCB0aGUgcmVuZGVyZWQgb3B0aW9ucyB3aWxsIG5vdFxuICogdXBkYXRlIGluIHJlc3BvbnNlIHRvIHVzZXIgYWN0aW9ucy4gSW5zdGVhZCwgdGhlIGB2YWx1ZWAgcHJvcCBtdXN0IGNoYW5nZSBpblxuICogb3JkZXIgZm9yIHRoZSByZW5kZXJlZCBvcHRpb25zIHRvIHVwZGF0ZS5cbiAqXG4gKiBJZiBgZGVmYXVsdFZhbHVlYCBpcyBwcm92aWRlZCwgYW55IG9wdGlvbnMgd2l0aCB0aGUgc3VwcGxpZWQgdmFsdWVzIHdpbGwgYmVcbiAqIHNlbGVjdGVkLlxuICovXG52YXIgUmVhY3RET01TZWxlY3QgPSBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnUmVhY3RET01TZWxlY3QnLFxuXG4gIG1peGluczogW0F1dG9Gb2N1c01peGluLCBMaW5rZWRWYWx1ZVV0aWxzLk1peGluLCBSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbl0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgZGVmYXVsdFZhbHVlOiBzZWxlY3RWYWx1ZVR5cGUsXG4gICAgdmFsdWU6IHNlbGVjdFZhbHVlVHlwZVxuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHt2YWx1ZTogdGhpcy5wcm9wcy5kZWZhdWx0VmFsdWUgfHwgKHRoaXMucHJvcHMubXVsdGlwbGUgPyBbXSA6ICcnKX07XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wZW5kaW5nVmFsdWUgPSBudWxsO1xuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IGZ1bmN0aW9uKG5leHRQcm9wcykge1xuICAgIGlmICghdGhpcy5wcm9wcy5tdWx0aXBsZSAmJiBuZXh0UHJvcHMubXVsdGlwbGUpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe3ZhbHVlOiBbdGhpcy5zdGF0ZS52YWx1ZV19KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMubXVsdGlwbGUgJiYgIW5leHRQcm9wcy5tdWx0aXBsZSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7dmFsdWU6IHRoaXMuc3RhdGUudmFsdWVbMF19KTtcbiAgICB9XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAvLyBDbG9uZSBgdGhpcy5wcm9wc2Agc28gd2UgZG9uJ3QgbXV0YXRlIHRoZSBpbnB1dC5cbiAgICB2YXIgcHJvcHMgPSBhc3NpZ24oe30sIHRoaXMucHJvcHMpO1xuXG4gICAgcHJvcHMub25DaGFuZ2UgPSB0aGlzLl9oYW5kbGVDaGFuZ2U7XG4gICAgcHJvcHMudmFsdWUgPSBudWxsO1xuXG4gICAgcmV0dXJuIHNlbGVjdChwcm9wcywgdGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIHVwZGF0ZU9wdGlvbnModGhpcywgTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZSh0aGlzKSk7XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbihwcmV2UHJvcHMpIHtcbiAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHRoaXMpO1xuICAgIHZhciBwcmV2TXVsdGlwbGUgPSAhIXByZXZQcm9wcy5tdWx0aXBsZTtcbiAgICB2YXIgbXVsdGlwbGUgPSAhIXRoaXMucHJvcHMubXVsdGlwbGU7XG4gICAgaWYgKHZhbHVlICE9IG51bGwgfHwgcHJldk11bHRpcGxlICE9PSBtdWx0aXBsZSkge1xuICAgICAgdXBkYXRlT3B0aW9ucyh0aGlzLCB2YWx1ZSk7XG4gICAgfVxuICB9LFxuXG4gIF9oYW5kbGVDaGFuZ2U6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIHJldHVyblZhbHVlO1xuICAgIHZhciBvbkNoYW5nZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0T25DaGFuZ2UodGhpcyk7XG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICByZXR1cm5WYWx1ZSA9IG9uQ2hhbmdlLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH1cblxuICAgIHZhciBzZWxlY3RlZFZhbHVlO1xuICAgIGlmICh0aGlzLnByb3BzLm11bHRpcGxlKSB7XG4gICAgICBzZWxlY3RlZFZhbHVlID0gW107XG4gICAgICB2YXIgb3B0aW9ucyA9IGV2ZW50LnRhcmdldC5vcHRpb25zO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvcHRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAob3B0aW9uc1tpXS5zZWxlY3RlZCkge1xuICAgICAgICAgIHNlbGVjdGVkVmFsdWUucHVzaChvcHRpb25zW2ldLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3RlZFZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgIH1cblxuICAgIHRoaXMuX3BlbmRpbmdWYWx1ZSA9IHNlbGVjdGVkVmFsdWU7XG4gICAgUmVhY3RVcGRhdGVzLmFzYXAodXBkYXRlV2l0aFBlbmRpbmdWYWx1ZUlmTW91bnRlZCwgdGhpcyk7XG4gICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NU2VsZWN0O1xuXG59LHtcIi4vQXV0b0ZvY3VzTWl4aW5cIjo3MCxcIi4vTGlua2VkVmFsdWVVdGlsc1wiOjkyLFwiLi9PYmplY3QuYXNzaWduXCI6OTUsXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCI6OTgsXCIuL1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50XCI6MTAzLFwiLi9SZWFjdERPTVwiOjEwNixcIi4vUmVhY3RFbGVtZW50XCI6MTIxLFwiLi9SZWFjdFVwZGF0ZXNcIjoxNDh9XSwxMTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NU2VsZWN0aW9uXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xuXG52YXIgZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldCA9IHJlcXVpcmUoXCIuL2dldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXRcIik7XG52YXIgZ2V0VGV4dENvbnRlbnRBY2Nlc3NvciA9IHJlcXVpcmUoXCIuL2dldFRleHRDb250ZW50QWNjZXNzb3JcIik7XG5cbi8qKlxuICogV2hpbGUgYGlzQ29sbGFwc2VkYCBpcyBhdmFpbGFibGUgb24gdGhlIFNlbGVjdGlvbiBvYmplY3QgYW5kIGBjb2xsYXBzZWRgXG4gKiBpcyBhdmFpbGFibGUgb24gdGhlIFJhbmdlIG9iamVjdCwgSUUxMSBzb21ldGltZXMgZ2V0cyB0aGVtIHdyb25nLlxuICogSWYgdGhlIGFuY2hvci9mb2N1cyBub2RlcyBhbmQgb2Zmc2V0cyBhcmUgdGhlIHNhbWUsIHRoZSByYW5nZSBpcyBjb2xsYXBzZWQuXG4gKi9cbmZ1bmN0aW9uIGlzQ29sbGFwc2VkKGFuY2hvck5vZGUsIGFuY2hvck9mZnNldCwgZm9jdXNOb2RlLCBmb2N1c09mZnNldCkge1xuICByZXR1cm4gYW5jaG9yTm9kZSA9PT0gZm9jdXNOb2RlICYmIGFuY2hvck9mZnNldCA9PT0gZm9jdXNPZmZzZXQ7XG59XG5cbi8qKlxuICogR2V0IHRoZSBhcHByb3ByaWF0ZSBhbmNob3IgYW5kIGZvY3VzIG5vZGUvb2Zmc2V0IHBhaXJzIGZvciBJRS5cbiAqXG4gKiBUaGUgY2F0Y2ggaGVyZSBpcyB0aGF0IElFJ3Mgc2VsZWN0aW9uIEFQSSBkb2Vzbid0IHByb3ZpZGUgaW5mb3JtYXRpb25cbiAqIGFib3V0IHdoZXRoZXIgdGhlIHNlbGVjdGlvbiBpcyBmb3J3YXJkIG9yIGJhY2t3YXJkLCBzbyB3ZSBoYXZlIHRvXG4gKiBiZWhhdmUgYXMgdGhvdWdoIGl0J3MgYWx3YXlzIGZvcndhcmQuXG4gKlxuICogSUUgdGV4dCBkaWZmZXJzIGZyb20gbW9kZXJuIHNlbGVjdGlvbiBpbiB0aGF0IGl0IGJlaGF2ZXMgYXMgdGhvdWdoXG4gKiBibG9jayBlbGVtZW50cyBlbmQgd2l0aCBhIG5ldyBsaW5lLiBUaGlzIG1lYW5zIGNoYXJhY3RlciBvZmZzZXRzIHdpbGxcbiAqIGRpZmZlciBiZXR3ZWVuIHRoZSB0d28gQVBJcy5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0SUVPZmZzZXRzKG5vZGUpIHtcbiAgdmFyIHNlbGVjdGlvbiA9IGRvY3VtZW50LnNlbGVjdGlvbjtcbiAgdmFyIHNlbGVjdGVkUmFuZ2UgPSBzZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcbiAgdmFyIHNlbGVjdGVkTGVuZ3RoID0gc2VsZWN0ZWRSYW5nZS50ZXh0Lmxlbmd0aDtcblxuICAvLyBEdXBsaWNhdGUgc2VsZWN0aW9uIHNvIHdlIGNhbiBtb3ZlIHJhbmdlIHdpdGhvdXQgYnJlYWtpbmcgdXNlciBzZWxlY3Rpb24uXG4gIHZhciBmcm9tU3RhcnQgPSBzZWxlY3RlZFJhbmdlLmR1cGxpY2F0ZSgpO1xuICBmcm9tU3RhcnQubW92ZVRvRWxlbWVudFRleHQobm9kZSk7XG4gIGZyb21TdGFydC5zZXRFbmRQb2ludCgnRW5kVG9TdGFydCcsIHNlbGVjdGVkUmFuZ2UpO1xuXG4gIHZhciBzdGFydE9mZnNldCA9IGZyb21TdGFydC50ZXh0Lmxlbmd0aDtcbiAgdmFyIGVuZE9mZnNldCA9IHN0YXJ0T2Zmc2V0ICsgc2VsZWN0ZWRMZW5ndGg7XG5cbiAgcmV0dXJuIHtcbiAgICBzdGFydDogc3RhcnRPZmZzZXQsXG4gICAgZW5kOiBlbmRPZmZzZXRcbiAgfTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm4gez9vYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldE1vZGVybk9mZnNldHMobm9kZSkge1xuICB2YXIgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbiAmJiB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG5cbiAgaWYgKCFzZWxlY3Rpb24gfHwgc2VsZWN0aW9uLnJhbmdlQ291bnQgPT09IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBhbmNob3JOb2RlID0gc2VsZWN0aW9uLmFuY2hvck5vZGU7XG4gIHZhciBhbmNob3JPZmZzZXQgPSBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0O1xuICB2YXIgZm9jdXNOb2RlID0gc2VsZWN0aW9uLmZvY3VzTm9kZTtcbiAgdmFyIGZvY3VzT2Zmc2V0ID0gc2VsZWN0aW9uLmZvY3VzT2Zmc2V0O1xuXG4gIHZhciBjdXJyZW50UmFuZ2UgPSBzZWxlY3Rpb24uZ2V0UmFuZ2VBdCgwKTtcblxuICAvLyBJZiB0aGUgbm9kZSBhbmQgb2Zmc2V0IHZhbHVlcyBhcmUgdGhlIHNhbWUsIHRoZSBzZWxlY3Rpb24gaXMgY29sbGFwc2VkLlxuICAvLyBgU2VsZWN0aW9uLmlzQ29sbGFwc2VkYCBpcyBhdmFpbGFibGUgbmF0aXZlbHksIGJ1dCBJRSBzb21ldGltZXMgZ2V0c1xuICAvLyB0aGlzIHZhbHVlIHdyb25nLlxuICB2YXIgaXNTZWxlY3Rpb25Db2xsYXBzZWQgPSBpc0NvbGxhcHNlZChcbiAgICBzZWxlY3Rpb24uYW5jaG9yTm9kZSxcbiAgICBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0LFxuICAgIHNlbGVjdGlvbi5mb2N1c05vZGUsXG4gICAgc2VsZWN0aW9uLmZvY3VzT2Zmc2V0XG4gICk7XG5cbiAgdmFyIHJhbmdlTGVuZ3RoID0gaXNTZWxlY3Rpb25Db2xsYXBzZWQgPyAwIDogY3VycmVudFJhbmdlLnRvU3RyaW5nKCkubGVuZ3RoO1xuXG4gIHZhciB0ZW1wUmFuZ2UgPSBjdXJyZW50UmFuZ2UuY2xvbmVSYW5nZSgpO1xuICB0ZW1wUmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKG5vZGUpO1xuICB0ZW1wUmFuZ2Uuc2V0RW5kKGN1cnJlbnRSYW5nZS5zdGFydENvbnRhaW5lciwgY3VycmVudFJhbmdlLnN0YXJ0T2Zmc2V0KTtcblxuICB2YXIgaXNUZW1wUmFuZ2VDb2xsYXBzZWQgPSBpc0NvbGxhcHNlZChcbiAgICB0ZW1wUmFuZ2Uuc3RhcnRDb250YWluZXIsXG4gICAgdGVtcFJhbmdlLnN0YXJ0T2Zmc2V0LFxuICAgIHRlbXBSYW5nZS5lbmRDb250YWluZXIsXG4gICAgdGVtcFJhbmdlLmVuZE9mZnNldFxuICApO1xuXG4gIHZhciBzdGFydCA9IGlzVGVtcFJhbmdlQ29sbGFwc2VkID8gMCA6IHRlbXBSYW5nZS50b1N0cmluZygpLmxlbmd0aDtcbiAgdmFyIGVuZCA9IHN0YXJ0ICsgcmFuZ2VMZW5ndGg7XG5cbiAgLy8gRGV0ZWN0IHdoZXRoZXIgdGhlIHNlbGVjdGlvbiBpcyBiYWNrd2FyZC5cbiAgdmFyIGRldGVjdGlvblJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgZGV0ZWN0aW9uUmFuZ2Uuc2V0U3RhcnQoYW5jaG9yTm9kZSwgYW5jaG9yT2Zmc2V0KTtcbiAgZGV0ZWN0aW9uUmFuZ2Uuc2V0RW5kKGZvY3VzTm9kZSwgZm9jdXNPZmZzZXQpO1xuICB2YXIgaXNCYWNrd2FyZCA9IGRldGVjdGlvblJhbmdlLmNvbGxhcHNlZDtcblxuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBpc0JhY2t3YXJkID8gZW5kIDogc3RhcnQsXG4gICAgZW5kOiBpc0JhY2t3YXJkID8gc3RhcnQgOiBlbmRcbiAgfTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IG5vZGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvZmZzZXRzXG4gKi9cbmZ1bmN0aW9uIHNldElFT2Zmc2V0cyhub2RlLCBvZmZzZXRzKSB7XG4gIHZhciByYW5nZSA9IGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpLmR1cGxpY2F0ZSgpO1xuICB2YXIgc3RhcnQsIGVuZDtcblxuICBpZiAodHlwZW9mIG9mZnNldHMuZW5kID09PSAndW5kZWZpbmVkJykge1xuICAgIHN0YXJ0ID0gb2Zmc2V0cy5zdGFydDtcbiAgICBlbmQgPSBzdGFydDtcbiAgfSBlbHNlIGlmIChvZmZzZXRzLnN0YXJ0ID4gb2Zmc2V0cy5lbmQpIHtcbiAgICBzdGFydCA9IG9mZnNldHMuZW5kO1xuICAgIGVuZCA9IG9mZnNldHMuc3RhcnQ7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnQgPSBvZmZzZXRzLnN0YXJ0O1xuICAgIGVuZCA9IG9mZnNldHMuZW5kO1xuICB9XG5cbiAgcmFuZ2UubW92ZVRvRWxlbWVudFRleHQobm9kZSk7XG4gIHJhbmdlLm1vdmVTdGFydCgnY2hhcmFjdGVyJywgc3RhcnQpO1xuICByYW5nZS5zZXRFbmRQb2ludCgnRW5kVG9TdGFydCcsIHJhbmdlKTtcbiAgcmFuZ2UubW92ZUVuZCgnY2hhcmFjdGVyJywgZW5kIC0gc3RhcnQpO1xuICByYW5nZS5zZWxlY3QoKTtcbn1cblxuLyoqXG4gKiBJbiBtb2Rlcm4gbm9uLUlFIGJyb3dzZXJzLCB3ZSBjYW4gc3VwcG9ydCBib3RoIGZvcndhcmQgYW5kIGJhY2t3YXJkXG4gKiBzZWxlY3Rpb25zLlxuICpcbiAqIE5vdGU6IElFMTArIHN1cHBvcnRzIHRoZSBTZWxlY3Rpb24gb2JqZWN0LCBidXQgaXQgZG9lcyBub3Qgc3VwcG9ydFxuICogdGhlIGBleHRlbmRgIG1ldGhvZCwgd2hpY2ggbWVhbnMgdGhhdCBldmVuIGluIG1vZGVybiBJRSwgaXQncyBub3QgcG9zc2libGVcbiAqIHRvIHByb2dyYW1hdGljYWxseSBjcmVhdGUgYSBiYWNrd2FyZCBzZWxlY3Rpb24uIFRodXMsIGZvciBhbGwgSUVcbiAqIHZlcnNpb25zLCB3ZSB1c2UgdGhlIG9sZCBJRSBBUEkgdG8gY3JlYXRlIG91ciBzZWxlY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gbm9kZVxuICogQHBhcmFtIHtvYmplY3R9IG9mZnNldHNcbiAqL1xuZnVuY3Rpb24gc2V0TW9kZXJuT2Zmc2V0cyhub2RlLCBvZmZzZXRzKSB7XG4gIGlmICghd2luZG93LmdldFNlbGVjdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gIHZhciBsZW5ndGggPSBub2RlW2dldFRleHRDb250ZW50QWNjZXNzb3IoKV0ubGVuZ3RoO1xuICB2YXIgc3RhcnQgPSBNYXRoLm1pbihvZmZzZXRzLnN0YXJ0LCBsZW5ndGgpO1xuICB2YXIgZW5kID0gdHlwZW9mIG9mZnNldHMuZW5kID09PSAndW5kZWZpbmVkJyA/XG4gICAgICAgICAgICBzdGFydCA6IE1hdGgubWluKG9mZnNldHMuZW5kLCBsZW5ndGgpO1xuXG4gIC8vIElFIDExIHVzZXMgbW9kZXJuIHNlbGVjdGlvbiwgYnV0IGRvZXNuJ3Qgc3VwcG9ydCB0aGUgZXh0ZW5kIG1ldGhvZC5cbiAgLy8gRmxpcCBiYWNrd2FyZCBzZWxlY3Rpb25zLCBzbyB3ZSBjYW4gc2V0IHdpdGggYSBzaW5nbGUgcmFuZ2UuXG4gIGlmICghc2VsZWN0aW9uLmV4dGVuZCAmJiBzdGFydCA+IGVuZCkge1xuICAgIHZhciB0ZW1wID0gZW5kO1xuICAgIGVuZCA9IHN0YXJ0O1xuICAgIHN0YXJ0ID0gdGVtcDtcbiAgfVxuXG4gIHZhciBzdGFydE1hcmtlciA9IGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQobm9kZSwgc3RhcnQpO1xuICB2YXIgZW5kTWFya2VyID0gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChub2RlLCBlbmQpO1xuXG4gIGlmIChzdGFydE1hcmtlciAmJiBlbmRNYXJrZXIpIHtcbiAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgIHJhbmdlLnNldFN0YXJ0KHN0YXJ0TWFya2VyLm5vZGUsIHN0YXJ0TWFya2VyLm9mZnNldCk7XG4gICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuXG4gICAgaWYgKHN0YXJ0ID4gZW5kKSB7XG4gICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xuICAgICAgc2VsZWN0aW9uLmV4dGVuZChlbmRNYXJrZXIubm9kZSwgZW5kTWFya2VyLm9mZnNldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJhbmdlLnNldEVuZChlbmRNYXJrZXIubm9kZSwgZW5kTWFya2VyLm9mZnNldCk7XG4gICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgdXNlSUVPZmZzZXRzID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmIGRvY3VtZW50LnNlbGVjdGlvbjtcblxudmFyIFJlYWN0RE9NU2VsZWN0aW9uID0ge1xuICAvKipcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gICAqL1xuICBnZXRPZmZzZXRzOiB1c2VJRU9mZnNldHMgPyBnZXRJRU9mZnNldHMgOiBnZXRNb2Rlcm5PZmZzZXRzLFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IG5vZGVcbiAgICogQHBhcmFtIHtvYmplY3R9IG9mZnNldHNcbiAgICovXG4gIHNldE9mZnNldHM6IHVzZUlFT2Zmc2V0cyA/IHNldElFT2Zmc2V0cyA6IHNldE1vZGVybk9mZnNldHNcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01TZWxlY3Rpb247XG5cbn0se1wiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOjkwLFwiLi9nZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0XCI6MTg5LFwiLi9nZXRUZXh0Q29udGVudEFjY2Vzc29yXCI6MTkxfV0sMTE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RET01UZXh0YXJlYVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgQXV0b0ZvY3VzTWl4aW4gPSByZXF1aXJlKFwiLi9BdXRvRm9jdXNNaXhpblwiKTtcbnZhciBET01Qcm9wZXJ0eU9wZXJhdGlvbnMgPSByZXF1aXJlKFwiLi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnNcIik7XG52YXIgTGlua2VkVmFsdWVVdGlscyA9IHJlcXVpcmUoXCIuL0xpbmtlZFZhbHVlVXRpbHNcIik7XG52YXIgUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW4gPSByZXF1aXJlKFwiLi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpblwiKTtcbnZhciBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50XCIpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcbnZhciBSZWFjdERPTSA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NXCIpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoXCIuL1JlYWN0VXBkYXRlc1wiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbi8vIFN0b3JlIGEgcmVmZXJlbmNlIHRvIHRoZSA8dGV4dGFyZWE+IGBSZWFjdERPTUNvbXBvbmVudGAuIFRPRE86IHVzZSBzdHJpbmdcbnZhciB0ZXh0YXJlYSA9IFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5KFJlYWN0RE9NLnRleHRhcmVhLnR5cGUpO1xuXG5mdW5jdGlvbiBmb3JjZVVwZGF0ZUlmTW91bnRlZCgpIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgaWYgKHRoaXMuaXNNb3VudGVkKCkpIHtcbiAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBJbXBsZW1lbnRzIGEgPHRleHRhcmVhPiBuYXRpdmUgY29tcG9uZW50IHRoYXQgYWxsb3dzIHNldHRpbmcgYHZhbHVlYCwgYW5kXG4gKiBgZGVmYXVsdFZhbHVlYC4gVGhpcyBkaWZmZXJzIGZyb20gdGhlIHRyYWRpdGlvbmFsIERPTSBBUEkgYmVjYXVzZSB2YWx1ZSBpc1xuICogdXN1YWxseSBzZXQgYXMgUENEQVRBIGNoaWxkcmVuLlxuICpcbiAqIElmIGB2YWx1ZWAgaXMgbm90IHN1cHBsaWVkIChvciBudWxsL3VuZGVmaW5lZCksIHVzZXIgYWN0aW9ucyB0aGF0IGFmZmVjdCB0aGVcbiAqIHZhbHVlIHdpbGwgdHJpZ2dlciB1cGRhdGVzIHRvIHRoZSBlbGVtZW50LlxuICpcbiAqIElmIGB2YWx1ZWAgaXMgc3VwcGxpZWQgKGFuZCBub3QgbnVsbC91bmRlZmluZWQpLCB0aGUgcmVuZGVyZWQgZWxlbWVudCB3aWxsXG4gKiBub3QgdHJpZ2dlciB1cGRhdGVzIHRvIHRoZSBlbGVtZW50LiBJbnN0ZWFkLCB0aGUgYHZhbHVlYCBwcm9wIG11c3QgY2hhbmdlIGluXG4gKiBvcmRlciBmb3IgdGhlIHJlbmRlcmVkIGVsZW1lbnQgdG8gYmUgdXBkYXRlZC5cbiAqXG4gKiBUaGUgcmVuZGVyZWQgZWxlbWVudCB3aWxsIGJlIGluaXRpYWxpemVkIHdpdGggYW4gZW1wdHkgdmFsdWUsIHRoZSBwcm9wXG4gKiBgZGVmYXVsdFZhbHVlYCBpZiBzcGVjaWZpZWQsIG9yIHRoZSBjaGlsZHJlbiBjb250ZW50IChkZXByZWNhdGVkKS5cbiAqL1xudmFyIFJlYWN0RE9NVGV4dGFyZWEgPSBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnUmVhY3RET01UZXh0YXJlYScsXG5cbiAgbWl4aW5zOiBbQXV0b0ZvY3VzTWl4aW4sIExpbmtlZFZhbHVlVXRpbHMuTWl4aW4sIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkZWZhdWx0VmFsdWUgPSB0aGlzLnByb3BzLmRlZmF1bHRWYWx1ZTtcbiAgICAvLyBUT0RPICh5dW5nc3RlcnMpOiBSZW1vdmUgc3VwcG9ydCBmb3IgY2hpbGRyZW4gY29udGVudCBpbiA8dGV4dGFyZWE+LlxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgaWYgKGNoaWxkcmVuICE9IG51bGwpIHtcbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgJ1VzZSB0aGUgYGRlZmF1bHRWYWx1ZWAgb3IgYHZhbHVlYCBwcm9wcyBpbnN0ZWFkIG9mIHNldHRpbmcgJyArXG4gICAgICAgICAgJ2NoaWxkcmVuIG9uIDx0ZXh0YXJlYT4uJ1xuICAgICAgICApIDogbnVsbCk7XG4gICAgICB9XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICBkZWZhdWx0VmFsdWUgPT0gbnVsbCxcbiAgICAgICAgJ0lmIHlvdSBzdXBwbHkgYGRlZmF1bHRWYWx1ZWAgb24gYSA8dGV4dGFyZWE+LCBkbyBub3QgcGFzcyBjaGlsZHJlbi4nXG4gICAgICApIDogaW52YXJpYW50KGRlZmF1bHRWYWx1ZSA9PSBudWxsKSk7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgICBjaGlsZHJlbi5sZW5ndGggPD0gMSxcbiAgICAgICAgICAnPHRleHRhcmVhPiBjYW4gb25seSBoYXZlIGF0IG1vc3Qgb25lIGNoaWxkLidcbiAgICAgICAgKSA6IGludmFyaWFudChjaGlsZHJlbi5sZW5ndGggPD0gMSkpO1xuICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuWzBdO1xuICAgICAgfVxuXG4gICAgICBkZWZhdWx0VmFsdWUgPSAnJyArIGNoaWxkcmVuO1xuICAgIH1cbiAgICBpZiAoZGVmYXVsdFZhbHVlID09IG51bGwpIHtcbiAgICAgIGRlZmF1bHRWYWx1ZSA9ICcnO1xuICAgIH1cbiAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHRoaXMpO1xuICAgIHJldHVybiB7XG4gICAgICAvLyBXZSBzYXZlIHRoZSBpbml0aWFsIHZhbHVlIHNvIHRoYXQgYFJlYWN0RE9NQ29tcG9uZW50YCBkb2Vzbid0IHVwZGF0ZVxuICAgICAgLy8gYHRleHRDb250ZW50YCAodW5uZWNlc3Nhcnkgc2luY2Ugd2UgdXBkYXRlIHZhbHVlKS5cbiAgICAgIC8vIFRoZSBpbml0aWFsIHZhbHVlIGNhbiBiZSBhIGJvb2xlYW4gb3Igb2JqZWN0IHNvIHRoYXQncyB3aHkgaXQnc1xuICAgICAgLy8gZm9yY2VkIHRvIGJlIGEgc3RyaW5nLlxuICAgICAgaW5pdGlhbFZhbHVlOiAnJyArICh2YWx1ZSAhPSBudWxsID8gdmFsdWUgOiBkZWZhdWx0VmFsdWUpXG4gICAgfTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgIC8vIENsb25lIGB0aGlzLnByb3BzYCBzbyB3ZSBkb24ndCBtdXRhdGUgdGhlIGlucHV0LlxuICAgIHZhciBwcm9wcyA9IGFzc2lnbih7fSwgdGhpcy5wcm9wcyk7XG5cbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgPT0gbnVsbCxcbiAgICAgICdgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgIGRvZXMgbm90IG1ha2Ugc2Vuc2Ugb24gPHRleHRhcmVhPi4nXG4gICAgKSA6IGludmFyaWFudChwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCA9PSBudWxsKSk7XG5cbiAgICBwcm9wcy5kZWZhdWx0VmFsdWUgPSBudWxsO1xuICAgIHByb3BzLnZhbHVlID0gbnVsbDtcbiAgICBwcm9wcy5vbkNoYW5nZSA9IHRoaXMuX2hhbmRsZUNoYW5nZTtcblxuICAgIC8vIEFsd2F5cyBzZXQgY2hpbGRyZW4gdG8gdGhlIHNhbWUgdGhpbmcuIEluIElFOSwgdGhlIHNlbGVjdGlvbiByYW5nZSB3aWxsXG4gICAgLy8gZ2V0IHJlc2V0IGlmIGB0ZXh0Q29udGVudGAgaXMgbXV0YXRlZC5cbiAgICByZXR1cm4gdGV4dGFyZWEocHJvcHMsIHRoaXMuc3RhdGUuaW5pdGlhbFZhbHVlKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uKHByZXZQcm9wcywgcHJldlN0YXRlLCBwcmV2Q29udGV4dCkge1xuICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUodGhpcyk7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgIHZhciByb290Tm9kZSA9IHRoaXMuZ2V0RE9NTm9kZSgpO1xuICAgICAgLy8gQ2FzdCBgdmFsdWVgIHRvIGEgc3RyaW5nIHRvIGVuc3VyZSB0aGUgdmFsdWUgaXMgc2V0IGNvcnJlY3RseS4gV2hpbGVcbiAgICAgIC8vIGJyb3dzZXJzIHR5cGljYWxseSBkbyB0aGlzIGFzIG5lY2Vzc2FyeSwganNkb20gZG9lc24ndC5cbiAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5zZXRWYWx1ZUZvclByb3BlcnR5KHJvb3ROb2RlLCAndmFsdWUnLCAnJyArIHZhbHVlKTtcbiAgICB9XG4gIH0sXG5cbiAgX2hhbmRsZUNoYW5nZTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgcmV0dXJuVmFsdWU7XG4gICAgdmFyIG9uQ2hhbmdlID0gTGlua2VkVmFsdWVVdGlscy5nZXRPbkNoYW5nZSh0aGlzKTtcbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIHJldHVyblZhbHVlID0gb25DaGFuZ2UuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfVxuICAgIFJlYWN0VXBkYXRlcy5hc2FwKGZvcmNlVXBkYXRlSWZNb3VudGVkLCB0aGlzKTtcbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01UZXh0YXJlYTtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vQXV0b0ZvY3VzTWl4aW5cIjo3MCxcIi4vRE9NUHJvcGVydHlPcGVyYXRpb25zXCI6ODAsXCIuL0xpbmtlZFZhbHVlVXRpbHNcIjo5MixcIi4vT2JqZWN0LmFzc2lnblwiOjk1LFwiLi9SZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpblwiOjk4LFwiLi9SZWFjdENvbXBvc2l0ZUNvbXBvbmVudFwiOjEwMyxcIi4vUmVhY3RET01cIjoxMDYsXCIuL1JlYWN0RWxlbWVudFwiOjEyMSxcIi4vUmVhY3RVcGRhdGVzXCI6MTQ4LFwiLi9pbnZhcmlhbnRcIjoxOTYsXCIuL3dhcm5pbmdcIjoyMTUsXCJfcHJvY2Vzc1wiOjE5fV0sMTE3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZXNcIik7XG52YXIgVHJhbnNhY3Rpb24gPSByZXF1aXJlKFwiLi9UcmFuc2FjdGlvblwiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoXCIuL2VtcHR5RnVuY3Rpb25cIik7XG5cbnZhciBSRVNFVF9CQVRDSEVEX1VQREFURVMgPSB7XG4gIGluaXRpYWxpemU6IGVtcHR5RnVuY3Rpb24sXG4gIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzID0gZmFsc2U7XG4gIH1cbn07XG5cbnZhciBGTFVTSF9CQVRDSEVEX1VQREFURVMgPSB7XG4gIGluaXRpYWxpemU6IGVtcHR5RnVuY3Rpb24sXG4gIGNsb3NlOiBSZWFjdFVwZGF0ZXMuZmx1c2hCYXRjaGVkVXBkYXRlcy5iaW5kKFJlYWN0VXBkYXRlcylcbn07XG5cbnZhciBUUkFOU0FDVElPTl9XUkFQUEVSUyA9IFtGTFVTSF9CQVRDSEVEX1VQREFURVMsIFJFU0VUX0JBVENIRURfVVBEQVRFU107XG5cbmZ1bmN0aW9uIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3lUcmFuc2FjdGlvbigpIHtcbiAgdGhpcy5yZWluaXRpYWxpemVUcmFuc2FjdGlvbigpO1xufVxuXG5hc3NpZ24oXG4gIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3lUcmFuc2FjdGlvbi5wcm90b3R5cGUsXG4gIFRyYW5zYWN0aW9uLk1peGluLFxuICB7XG4gICAgZ2V0VHJhbnNhY3Rpb25XcmFwcGVyczogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gVFJBTlNBQ1RJT05fV1JBUFBFUlM7XG4gICAgfVxuICB9XG4pO1xuXG52YXIgdHJhbnNhY3Rpb24gPSBuZXcgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVRyYW5zYWN0aW9uKCk7XG5cbnZhciBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5ID0ge1xuICBpc0JhdGNoaW5nVXBkYXRlczogZmFsc2UsXG5cbiAgLyoqXG4gICAqIENhbGwgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uIGluIGEgY29udGV4dCB3aXRoaW4gd2hpY2ggY2FsbHMgdG8gYHNldFN0YXRlYFxuICAgKiBhbmQgZnJpZW5kcyBhcmUgYmF0Y2hlZCBzdWNoIHRoYXQgY29tcG9uZW50cyBhcmVuJ3QgdXBkYXRlZCB1bm5lY2Vzc2FyaWx5LlxuICAgKi9cbiAgYmF0Y2hlZFVwZGF0ZXM6IGZ1bmN0aW9uKGNhbGxiYWNrLCBhLCBiKSB7XG4gICAgdmFyIGFscmVhZHlCYXRjaGluZ1VwZGF0ZXMgPSBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzO1xuXG4gICAgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcyA9IHRydWU7XG5cbiAgICAvLyBUaGUgY29kZSBpcyB3cml0dGVuIHRoaXMgd2F5IHRvIGF2b2lkIGV4dHJhIGFsbG9jYXRpb25zXG4gICAgaWYgKGFscmVhZHlCYXRjaGluZ1VwZGF0ZXMpIHtcbiAgICAgIGNhbGxiYWNrKGEsIGIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmFuc2FjdGlvbi5wZXJmb3JtKGNhbGxiYWNrLCBudWxsLCBhLCBiKTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneTtcblxufSx7XCIuL09iamVjdC5hc3NpZ25cIjo5NSxcIi4vUmVhY3RVcGRhdGVzXCI6MTQ4LFwiLi9UcmFuc2FjdGlvblwiOjE2NCxcIi4vZW1wdHlGdW5jdGlvblwiOjE3N31dLDExODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RGVmYXVsdEluamVjdGlvblxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgQmVmb3JlSW5wdXRFdmVudFBsdWdpbiA9IHJlcXVpcmUoXCIuL0JlZm9yZUlucHV0RXZlbnRQbHVnaW5cIik7XG52YXIgQ2hhbmdlRXZlbnRQbHVnaW4gPSByZXF1aXJlKFwiLi9DaGFuZ2VFdmVudFBsdWdpblwiKTtcbnZhciBDbGllbnRSZWFjdFJvb3RJbmRleCA9IHJlcXVpcmUoXCIuL0NsaWVudFJlYWN0Um9vdEluZGV4XCIpO1xudmFyIENvbXBvc2l0aW9uRXZlbnRQbHVnaW4gPSByZXF1aXJlKFwiLi9Db21wb3NpdGlvbkV2ZW50UGx1Z2luXCIpO1xudmFyIERlZmF1bHRFdmVudFBsdWdpbk9yZGVyID0gcmVxdWlyZShcIi4vRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXJcIik7XG52YXIgRW50ZXJMZWF2ZUV2ZW50UGx1Z2luID0gcmVxdWlyZShcIi4vRW50ZXJMZWF2ZUV2ZW50UGx1Z2luXCIpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG52YXIgSFRNTERPTVByb3BlcnR5Q29uZmlnID0gcmVxdWlyZShcIi4vSFRNTERPTVByb3BlcnR5Q29uZmlnXCIpO1xudmFyIE1vYmlsZVNhZmFyaUNsaWNrRXZlbnRQbHVnaW4gPSByZXF1aXJlKFwiLi9Nb2JpbGVTYWZhcmlDbGlja0V2ZW50UGx1Z2luXCIpO1xudmFyIFJlYWN0QnJvd3NlckNvbXBvbmVudE1peGluID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyQ29tcG9uZW50TWl4aW5cIik7XG52YXIgUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQgPVxuICByZXF1aXJlKFwiLi9SZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudFwiKTtcbnZhciBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5ID0gcmVxdWlyZShcIi4vUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVwiKTtcbnZhciBSZWFjdERPTUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NQ29tcG9uZW50XCIpO1xudmFyIFJlYWN0RE9NQnV0dG9uID0gcmVxdWlyZShcIi4vUmVhY3RET01CdXR0b25cIik7XG52YXIgUmVhY3RET01Gb3JtID0gcmVxdWlyZShcIi4vUmVhY3RET01Gb3JtXCIpO1xudmFyIFJlYWN0RE9NSW1nID0gcmVxdWlyZShcIi4vUmVhY3RET01JbWdcIik7XG52YXIgUmVhY3RET01JbnB1dCA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NSW5wdXRcIik7XG52YXIgUmVhY3RET01PcHRpb24gPSByZXF1aXJlKFwiLi9SZWFjdERPTU9wdGlvblwiKTtcbnZhciBSZWFjdERPTVNlbGVjdCA9IHJlcXVpcmUoXCIuL1JlYWN0RE9NU2VsZWN0XCIpO1xudmFyIFJlYWN0RE9NVGV4dGFyZWEgPSByZXF1aXJlKFwiLi9SZWFjdERPTVRleHRhcmVhXCIpO1xudmFyIFJlYWN0RXZlbnRMaXN0ZW5lciA9IHJlcXVpcmUoXCIuL1JlYWN0RXZlbnRMaXN0ZW5lclwiKTtcbnZhciBSZWFjdEluamVjdGlvbiA9IHJlcXVpcmUoXCIuL1JlYWN0SW5qZWN0aW9uXCIpO1xudmFyIFJlYWN0SW5zdGFuY2VIYW5kbGVzID0gcmVxdWlyZShcIi4vUmVhY3RJbnN0YW5jZUhhbmRsZXNcIik7XG52YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoXCIuL1JlYWN0TW91bnRcIik7XG52YXIgU2VsZWN0RXZlbnRQbHVnaW4gPSByZXF1aXJlKFwiLi9TZWxlY3RFdmVudFBsdWdpblwiKTtcbnZhciBTZXJ2ZXJSZWFjdFJvb3RJbmRleCA9IHJlcXVpcmUoXCIuL1NlcnZlclJlYWN0Um9vdEluZGV4XCIpO1xudmFyIFNpbXBsZUV2ZW50UGx1Z2luID0gcmVxdWlyZShcIi4vU2ltcGxlRXZlbnRQbHVnaW5cIik7XG52YXIgU1ZHRE9NUHJvcGVydHlDb25maWcgPSByZXF1aXJlKFwiLi9TVkdET01Qcm9wZXJ0eUNvbmZpZ1wiKTtcblxudmFyIGNyZWF0ZUZ1bGxQYWdlQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vY3JlYXRlRnVsbFBhZ2VDb21wb25lbnRcIik7XG5cbmZ1bmN0aW9uIGluamVjdCgpIHtcbiAgUmVhY3RJbmplY3Rpb24uRXZlbnRFbWl0dGVyLmluamVjdFJlYWN0RXZlbnRMaXN0ZW5lcihcbiAgICBSZWFjdEV2ZW50TGlzdGVuZXJcbiAgKTtcblxuICAvKipcbiAgICogSW5qZWN0IG1vZHVsZXMgZm9yIHJlc29sdmluZyBET00gaGllcmFyY2h5IGFuZCBwbHVnaW4gb3JkZXJpbmcuXG4gICAqL1xuICBSZWFjdEluamVjdGlvbi5FdmVudFBsdWdpbkh1Yi5pbmplY3RFdmVudFBsdWdpbk9yZGVyKERlZmF1bHRFdmVudFBsdWdpbk9yZGVyKTtcbiAgUmVhY3RJbmplY3Rpb24uRXZlbnRQbHVnaW5IdWIuaW5qZWN0SW5zdGFuY2VIYW5kbGUoUmVhY3RJbnN0YW5jZUhhbmRsZXMpO1xuICBSZWFjdEluamVjdGlvbi5FdmVudFBsdWdpbkh1Yi5pbmplY3RNb3VudChSZWFjdE1vdW50KTtcblxuICAvKipcbiAgICogU29tZSBpbXBvcnRhbnQgZXZlbnQgcGx1Z2lucyBpbmNsdWRlZCBieSBkZWZhdWx0ICh3aXRob3V0IGhhdmluZyB0byByZXF1aXJlXG4gICAqIHRoZW0pLlxuICAgKi9cbiAgUmVhY3RJbmplY3Rpb24uRXZlbnRQbHVnaW5IdWIuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtcbiAgICBTaW1wbGVFdmVudFBsdWdpbjogU2ltcGxlRXZlbnRQbHVnaW4sXG4gICAgRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOiBFbnRlckxlYXZlRXZlbnRQbHVnaW4sXG4gICAgQ2hhbmdlRXZlbnRQbHVnaW46IENoYW5nZUV2ZW50UGx1Z2luLFxuICAgIENvbXBvc2l0aW9uRXZlbnRQbHVnaW46IENvbXBvc2l0aW9uRXZlbnRQbHVnaW4sXG4gICAgTW9iaWxlU2FmYXJpQ2xpY2tFdmVudFBsdWdpbjogTW9iaWxlU2FmYXJpQ2xpY2tFdmVudFBsdWdpbixcbiAgICBTZWxlY3RFdmVudFBsdWdpbjogU2VsZWN0RXZlbnRQbHVnaW4sXG4gICAgQmVmb3JlSW5wdXRFdmVudFBsdWdpbjogQmVmb3JlSW5wdXRFdmVudFBsdWdpblxuICB9KTtcblxuICBSZWFjdEluamVjdGlvbi5OYXRpdmVDb21wb25lbnQuaW5qZWN0R2VuZXJpY0NvbXBvbmVudENsYXNzKFxuICAgIFJlYWN0RE9NQ29tcG9uZW50XG4gICk7XG5cbiAgUmVhY3RJbmplY3Rpb24uTmF0aXZlQ29tcG9uZW50LmluamVjdENvbXBvbmVudENsYXNzZXMoe1xuICAgICdidXR0b24nOiBSZWFjdERPTUJ1dHRvbixcbiAgICAnZm9ybSc6IFJlYWN0RE9NRm9ybSxcbiAgICAnaW1nJzogUmVhY3RET01JbWcsXG4gICAgJ2lucHV0JzogUmVhY3RET01JbnB1dCxcbiAgICAnb3B0aW9uJzogUmVhY3RET01PcHRpb24sXG4gICAgJ3NlbGVjdCc6IFJlYWN0RE9NU2VsZWN0LFxuICAgICd0ZXh0YXJlYSc6IFJlYWN0RE9NVGV4dGFyZWEsXG5cbiAgICAnaHRtbCc6IGNyZWF0ZUZ1bGxQYWdlQ29tcG9uZW50KCdodG1sJyksXG4gICAgJ2hlYWQnOiBjcmVhdGVGdWxsUGFnZUNvbXBvbmVudCgnaGVhZCcpLFxuICAgICdib2R5JzogY3JlYXRlRnVsbFBhZ2VDb21wb25lbnQoJ2JvZHknKVxuICB9KTtcblxuICAvLyBUaGlzIG5lZWRzIHRvIGhhcHBlbiBhZnRlciBjcmVhdGVGdWxsUGFnZUNvbXBvbmVudCgpIG90aGVyd2lzZSB0aGUgbWl4aW5cbiAgLy8gZ2V0cyBkb3VibGUgaW5qZWN0ZWQuXG4gIFJlYWN0SW5qZWN0aW9uLkNvbXBvc2l0ZUNvbXBvbmVudC5pbmplY3RNaXhpbihSZWFjdEJyb3dzZXJDb21wb25lbnRNaXhpbik7XG5cbiAgUmVhY3RJbmplY3Rpb24uRE9NUHJvcGVydHkuaW5qZWN0RE9NUHJvcGVydHlDb25maWcoSFRNTERPTVByb3BlcnR5Q29uZmlnKTtcbiAgUmVhY3RJbmplY3Rpb24uRE9NUHJvcGVydHkuaW5qZWN0RE9NUHJvcGVydHlDb25maWcoU1ZHRE9NUHJvcGVydHlDb25maWcpO1xuXG4gIFJlYWN0SW5qZWN0aW9uLkVtcHR5Q29tcG9uZW50LmluamVjdEVtcHR5Q29tcG9uZW50KCdub3NjcmlwdCcpO1xuXG4gIFJlYWN0SW5qZWN0aW9uLlVwZGF0ZXMuaW5qZWN0UmVjb25jaWxlVHJhbnNhY3Rpb24oXG4gICAgUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvblxuICApO1xuICBSZWFjdEluamVjdGlvbi5VcGRhdGVzLmluamVjdEJhdGNoaW5nU3RyYXRlZ3koXG4gICAgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVxuICApO1xuXG4gIFJlYWN0SW5qZWN0aW9uLlJvb3RJbmRleC5pbmplY3RDcmVhdGVSZWFjdFJvb3RJbmRleChcbiAgICBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gP1xuICAgICAgQ2xpZW50UmVhY3RSb290SW5kZXguY3JlYXRlUmVhY3RSb290SW5kZXggOlxuICAgICAgU2VydmVyUmVhY3RSb290SW5kZXguY3JlYXRlUmVhY3RSb290SW5kZXhcbiAgKTtcblxuICBSZWFjdEluamVjdGlvbi5Db21wb25lbnQuaW5qZWN0RW52aXJvbm1lbnQoUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQpO1xuXG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICB2YXIgdXJsID0gKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJiB3aW5kb3cubG9jYXRpb24uaHJlZikgfHwgJyc7XG4gICAgaWYgKCgvWz8mXXJlYWN0X3BlcmZcXGIvKS50ZXN0KHVybCkpIHtcbiAgICAgIHZhciBSZWFjdERlZmF1bHRQZXJmID0gcmVxdWlyZShcIi4vUmVhY3REZWZhdWx0UGVyZlwiKTtcbiAgICAgIFJlYWN0RGVmYXVsdFBlcmYuc3RhcnQoKTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGluamVjdDogaW5qZWN0XG59O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9CZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCI6NzEsXCIuL0NoYW5nZUV2ZW50UGx1Z2luXCI6NzUsXCIuL0NsaWVudFJlYWN0Um9vdEluZGV4XCI6NzYsXCIuL0NvbXBvc2l0aW9uRXZlbnRQbHVnaW5cIjo3NyxcIi4vRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXJcIjo4MixcIi4vRW50ZXJMZWF2ZUV2ZW50UGx1Z2luXCI6ODMsXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCI6OTAsXCIuL0hUTUxET01Qcm9wZXJ0eUNvbmZpZ1wiOjkxLFwiLi9Nb2JpbGVTYWZhcmlDbGlja0V2ZW50UGx1Z2luXCI6OTQsXCIuL1JlYWN0QnJvd3NlckNvbXBvbmVudE1peGluXCI6OTgsXCIuL1JlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50XCI6MTAyLFwiLi9SZWFjdERPTUJ1dHRvblwiOjEwNyxcIi4vUmVhY3RET01Db21wb25lbnRcIjoxMDgsXCIuL1JlYWN0RE9NRm9ybVwiOjEwOSxcIi4vUmVhY3RET01JbWdcIjoxMTEsXCIuL1JlYWN0RE9NSW5wdXRcIjoxMTIsXCIuL1JlYWN0RE9NT3B0aW9uXCI6MTEzLFwiLi9SZWFjdERPTVNlbGVjdFwiOjExNCxcIi4vUmVhY3RET01UZXh0YXJlYVwiOjExNixcIi4vUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVwiOjExNyxcIi4vUmVhY3REZWZhdWx0UGVyZlwiOjExOSxcIi4vUmVhY3RFdmVudExpc3RlbmVyXCI6MTI2LFwiLi9SZWFjdEluamVjdGlvblwiOjEyNyxcIi4vUmVhY3RJbnN0YW5jZUhhbmRsZXNcIjoxMjksXCIuL1JlYWN0TW91bnRcIjoxMzIsXCIuL1NWR0RPTVByb3BlcnR5Q29uZmlnXCI6MTQ5LFwiLi9TZWxlY3RFdmVudFBsdWdpblwiOjE1MCxcIi4vU2VydmVyUmVhY3RSb290SW5kZXhcIjoxNTEsXCIuL1NpbXBsZUV2ZW50UGx1Z2luXCI6MTUyLFwiLi9jcmVhdGVGdWxsUGFnZUNvbXBvbmVudFwiOjE3MixcIl9wcm9jZXNzXCI6MTl9XSwxMTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RGVmYXVsdFBlcmZcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoXCIuL0RPTVByb3BlcnR5XCIpO1xudmFyIFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcyA9IHJlcXVpcmUoXCIuL1JlYWN0RGVmYXVsdFBlcmZBbmFseXNpc1wiKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZShcIi4vUmVhY3RNb3VudFwiKTtcbnZhciBSZWFjdFBlcmYgPSByZXF1aXJlKFwiLi9SZWFjdFBlcmZcIik7XG5cbnZhciBwZXJmb3JtYW5jZU5vdyA9IHJlcXVpcmUoXCIuL3BlcmZvcm1hbmNlTm93XCIpO1xuXG5mdW5jdGlvbiByb3VuZEZsb2F0KHZhbCkge1xuICByZXR1cm4gTWF0aC5mbG9vcih2YWwgKiAxMDApIC8gMTAwO1xufVxuXG5mdW5jdGlvbiBhZGRWYWx1ZShvYmosIGtleSwgdmFsKSB7XG4gIG9ialtrZXldID0gKG9ialtrZXldIHx8IDApICsgdmFsO1xufVxuXG52YXIgUmVhY3REZWZhdWx0UGVyZiA9IHtcbiAgX2FsbE1lYXN1cmVtZW50czogW10sIC8vIGxhc3QgaXRlbSBpbiB0aGUgbGlzdCBpcyB0aGUgY3VycmVudCBvbmVcbiAgX21vdW50U3RhY2s6IFswXSxcbiAgX2luamVjdGVkOiBmYWxzZSxcblxuICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKCFSZWFjdERlZmF1bHRQZXJmLl9pbmplY3RlZCkge1xuICAgICAgUmVhY3RQZXJmLmluamVjdGlvbi5pbmplY3RNZWFzdXJlKFJlYWN0RGVmYXVsdFBlcmYubWVhc3VyZSk7XG4gICAgfVxuXG4gICAgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzLmxlbmd0aCA9IDA7XG4gICAgUmVhY3RQZXJmLmVuYWJsZU1lYXN1cmUgPSB0cnVlO1xuICB9LFxuXG4gIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgIFJlYWN0UGVyZi5lbmFibGVNZWFzdXJlID0gZmFsc2U7XG4gIH0sXG5cbiAgZ2V0TGFzdE1lYXN1cmVtZW50czogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFJlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50cztcbiAgfSxcblxuICBwcmludEV4Y2x1c2l2ZTogZnVuY3Rpb24obWVhc3VyZW1lbnRzKSB7XG4gICAgbWVhc3VyZW1lbnRzID0gbWVhc3VyZW1lbnRzIHx8IFJlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50cztcbiAgICB2YXIgc3VtbWFyeSA9IFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcy5nZXRFeGNsdXNpdmVTdW1tYXJ5KG1lYXN1cmVtZW50cyk7XG4gICAgY29uc29sZS50YWJsZShzdW1tYXJ5Lm1hcChmdW5jdGlvbihpdGVtKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAnQ29tcG9uZW50IGNsYXNzIG5hbWUnOiBpdGVtLmNvbXBvbmVudE5hbWUsXG4gICAgICAgICdUb3RhbCBpbmNsdXNpdmUgdGltZSAobXMpJzogcm91bmRGbG9hdChpdGVtLmluY2x1c2l2ZSksXG4gICAgICAgICdFeGNsdXNpdmUgbW91bnQgdGltZSAobXMpJzogcm91bmRGbG9hdChpdGVtLmV4Y2x1c2l2ZSksXG4gICAgICAgICdFeGNsdXNpdmUgcmVuZGVyIHRpbWUgKG1zKSc6IHJvdW5kRmxvYXQoaXRlbS5yZW5kZXIpLFxuICAgICAgICAnTW91bnQgdGltZSBwZXIgaW5zdGFuY2UgKG1zKSc6IHJvdW5kRmxvYXQoaXRlbS5leGNsdXNpdmUgLyBpdGVtLmNvdW50KSxcbiAgICAgICAgJ1JlbmRlciB0aW1lIHBlciBpbnN0YW5jZSAobXMpJzogcm91bmRGbG9hdChpdGVtLnJlbmRlciAvIGl0ZW0uY291bnQpLFxuICAgICAgICAnSW5zdGFuY2VzJzogaXRlbS5jb3VudFxuICAgICAgfTtcbiAgICB9KSk7XG4gICAgLy8gVE9ETzogUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmdldFRvdGFsVGltZSgpIGRvZXMgbm90IHJldHVybiB0aGUgY29ycmVjdFxuICAgIC8vIG51bWJlci5cbiAgfSxcblxuICBwcmludEluY2x1c2l2ZTogZnVuY3Rpb24obWVhc3VyZW1lbnRzKSB7XG4gICAgbWVhc3VyZW1lbnRzID0gbWVhc3VyZW1lbnRzIHx8IFJlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50cztcbiAgICB2YXIgc3VtbWFyeSA9IFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcy5nZXRJbmNsdXNpdmVTdW1tYXJ5KG1lYXN1cmVtZW50cyk7XG4gICAgY29uc29sZS50YWJsZShzdW1tYXJ5Lm1hcChmdW5jdGlvbihpdGVtKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAnT3duZXIgPiBjb21wb25lbnQnOiBpdGVtLmNvbXBvbmVudE5hbWUsXG4gICAgICAgICdJbmNsdXNpdmUgdGltZSAobXMpJzogcm91bmRGbG9hdChpdGVtLnRpbWUpLFxuICAgICAgICAnSW5zdGFuY2VzJzogaXRlbS5jb3VudFxuICAgICAgfTtcbiAgICB9KSk7XG4gICAgY29uc29sZS5sb2coXG4gICAgICAnVG90YWwgdGltZTonLFxuICAgICAgUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmdldFRvdGFsVGltZShtZWFzdXJlbWVudHMpLnRvRml4ZWQoMikgKyAnIG1zJ1xuICAgICk7XG4gIH0sXG5cbiAgZ2V0TWVhc3VyZW1lbnRzU3VtbWFyeU1hcDogZnVuY3Rpb24obWVhc3VyZW1lbnRzKSB7XG4gICAgdmFyIHN1bW1hcnkgPSBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuZ2V0SW5jbHVzaXZlU3VtbWFyeShcbiAgICAgIG1lYXN1cmVtZW50cyxcbiAgICAgIHRydWVcbiAgICApO1xuICAgIHJldHVybiBzdW1tYXJ5Lm1hcChmdW5jdGlvbihpdGVtKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAnT3duZXIgPiBjb21wb25lbnQnOiBpdGVtLmNvbXBvbmVudE5hbWUsXG4gICAgICAgICdXYXN0ZWQgdGltZSAobXMpJzogaXRlbS50aW1lLFxuICAgICAgICAnSW5zdGFuY2VzJzogaXRlbS5jb3VudFxuICAgICAgfTtcbiAgICB9KTtcbiAgfSxcblxuICBwcmludFdhc3RlZDogZnVuY3Rpb24obWVhc3VyZW1lbnRzKSB7XG4gICAgbWVhc3VyZW1lbnRzID0gbWVhc3VyZW1lbnRzIHx8IFJlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50cztcbiAgICBjb25zb2xlLnRhYmxlKFJlYWN0RGVmYXVsdFBlcmYuZ2V0TWVhc3VyZW1lbnRzU3VtbWFyeU1hcChtZWFzdXJlbWVudHMpKTtcbiAgICBjb25zb2xlLmxvZyhcbiAgICAgICdUb3RhbCB0aW1lOicsXG4gICAgICBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXMuZ2V0VG90YWxUaW1lKG1lYXN1cmVtZW50cykudG9GaXhlZCgyKSArICcgbXMnXG4gICAgKTtcbiAgfSxcblxuICBwcmludERPTTogZnVuY3Rpb24obWVhc3VyZW1lbnRzKSB7XG4gICAgbWVhc3VyZW1lbnRzID0gbWVhc3VyZW1lbnRzIHx8IFJlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50cztcbiAgICB2YXIgc3VtbWFyeSA9IFJlYWN0RGVmYXVsdFBlcmZBbmFseXNpcy5nZXRET01TdW1tYXJ5KG1lYXN1cmVtZW50cyk7XG4gICAgY29uc29sZS50YWJsZShzdW1tYXJ5Lm1hcChmdW5jdGlvbihpdGVtKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICByZXN1bHRbRE9NUHJvcGVydHkuSURfQVRUUklCVVRFX05BTUVdID0gaXRlbS5pZDtcbiAgICAgIHJlc3VsdFsndHlwZSddID0gaXRlbS50eXBlO1xuICAgICAgcmVzdWx0WydhcmdzJ10gPSBKU09OLnN0cmluZ2lmeShpdGVtLmFyZ3MpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KSk7XG4gICAgY29uc29sZS5sb2coXG4gICAgICAnVG90YWwgdGltZTonLFxuICAgICAgUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzLmdldFRvdGFsVGltZShtZWFzdXJlbWVudHMpLnRvRml4ZWQoMikgKyAnIG1zJ1xuICAgICk7XG4gIH0sXG5cbiAgX3JlY29yZFdyaXRlOiBmdW5jdGlvbihpZCwgZm5OYW1lLCB0b3RhbFRpbWUsIGFyZ3MpIHtcbiAgICAvLyBUT0RPOiB0b3RhbFRpbWUgaXNuJ3QgdGhhdCB1c2VmdWwgc2luY2UgaXQgZG9lc24ndCBjb3VudCBwYWludHMvcmVmbG93c1xuICAgIHZhciB3cml0ZXMgPVxuICAgICAgUmVhY3REZWZhdWx0UGVyZlxuICAgICAgICAuX2FsbE1lYXN1cmVtZW50c1tSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHMubGVuZ3RoIC0gMV1cbiAgICAgICAgLndyaXRlcztcbiAgICB3cml0ZXNbaWRdID0gd3JpdGVzW2lkXSB8fCBbXTtcbiAgICB3cml0ZXNbaWRdLnB1c2goe1xuICAgICAgdHlwZTogZm5OYW1lLFxuICAgICAgdGltZTogdG90YWxUaW1lLFxuICAgICAgYXJnczogYXJnc1xuICAgIH0pO1xuICB9LFxuXG4gIG1lYXN1cmU6IGZ1bmN0aW9uKG1vZHVsZU5hbWUsIGZuTmFtZSwgZnVuYykge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtmb3IgKHZhciBhcmdzPVtdLCRfXzA9MCwkX18xPWFyZ3VtZW50cy5sZW5ndGg7JF9fMDwkX18xOyRfXzArKykgYXJncy5wdXNoKGFyZ3VtZW50c1skX18wXSk7XG4gICAgICB2YXIgdG90YWxUaW1lO1xuICAgICAgdmFyIHJ2O1xuICAgICAgdmFyIHN0YXJ0O1xuXG4gICAgICBpZiAoZm5OYW1lID09PSAnX3JlbmRlck5ld1Jvb3RDb21wb25lbnQnIHx8XG4gICAgICAgICAgZm5OYW1lID09PSAnZmx1c2hCYXRjaGVkVXBkYXRlcycpIHtcbiAgICAgICAgLy8gQSBcIm1lYXN1cmVtZW50XCIgaXMgYSBzZXQgb2YgbWV0cmljcyByZWNvcmRlZCBmb3IgZWFjaCBmbHVzaC4gV2Ugd2FudFxuICAgICAgICAvLyB0byBncm91cCB0aGUgbWV0cmljcyBmb3IgYSBnaXZlbiBmbHVzaCB0b2dldGhlciBzbyB3ZSBjYW4gbG9vayBhdCB0aGVcbiAgICAgICAgLy8gY29tcG9uZW50cyB0aGF0IHJlbmRlcmVkIGFuZCB0aGUgRE9NIG9wZXJhdGlvbnMgdGhhdCBhY3R1YWxseVxuICAgICAgICAvLyBoYXBwZW5lZCB0byBkZXRlcm1pbmUgdGhlIGFtb3VudCBvZiBcIndhc3RlZCB3b3JrXCIgcGVyZm9ybWVkLlxuICAgICAgICBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHMucHVzaCh7XG4gICAgICAgICAgZXhjbHVzaXZlOiB7fSxcbiAgICAgICAgICBpbmNsdXNpdmU6IHt9LFxuICAgICAgICAgIHJlbmRlcjoge30sXG4gICAgICAgICAgY291bnRzOiB7fSxcbiAgICAgICAgICB3cml0ZXM6IHt9LFxuICAgICAgICAgIGRpc3BsYXlOYW1lczoge30sXG4gICAgICAgICAgdG90YWxUaW1lOiAwXG4gICAgICAgIH0pO1xuICAgICAgICBzdGFydCA9IHBlcmZvcm1hbmNlTm93KCk7XG4gICAgICAgIHJ2ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgUmVhY3REZWZhdWx0UGVyZi5fYWxsTWVhc3VyZW1lbnRzW1xuICAgICAgICAgIFJlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50cy5sZW5ndGggLSAxXG4gICAgICAgIF0udG90YWxUaW1lID0gcGVyZm9ybWFuY2VOb3coKSAtIHN0YXJ0O1xuICAgICAgICByZXR1cm4gcnY7XG4gICAgICB9IGVsc2UgaWYgKG1vZHVsZU5hbWUgPT09ICdSZWFjdERPTUlET3BlcmF0aW9ucycgfHxcbiAgICAgICAgbW9kdWxlTmFtZSA9PT0gJ1JlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50Jykge1xuICAgICAgICBzdGFydCA9IHBlcmZvcm1hbmNlTm93KCk7XG4gICAgICAgIHJ2ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgdG90YWxUaW1lID0gcGVyZm9ybWFuY2VOb3coKSAtIHN0YXJ0O1xuXG4gICAgICAgIGlmIChmbk5hbWUgPT09ICdtb3VudEltYWdlSW50b05vZGUnKSB7XG4gICAgICAgICAgdmFyIG1vdW50SUQgPSBSZWFjdE1vdW50LmdldElEKGFyZ3NbMV0pO1xuICAgICAgICAgIFJlYWN0RGVmYXVsdFBlcmYuX3JlY29yZFdyaXRlKG1vdW50SUQsIGZuTmFtZSwgdG90YWxUaW1lLCBhcmdzWzBdKTtcbiAgICAgICAgfSBlbHNlIGlmIChmbk5hbWUgPT09ICdkYW5nZXJvdXNseVByb2Nlc3NDaGlsZHJlblVwZGF0ZXMnKSB7XG4gICAgICAgICAgLy8gc3BlY2lhbCBmb3JtYXRcbiAgICAgICAgICBhcmdzWzBdLmZvckVhY2goZnVuY3Rpb24odXBkYXRlKSB7XG4gICAgICAgICAgICB2YXIgd3JpdGVBcmdzID0ge307XG4gICAgICAgICAgICBpZiAodXBkYXRlLmZyb21JbmRleCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICB3cml0ZUFyZ3MuZnJvbUluZGV4ID0gdXBkYXRlLmZyb21JbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1cGRhdGUudG9JbmRleCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICB3cml0ZUFyZ3MudG9JbmRleCA9IHVwZGF0ZS50b0luZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVwZGF0ZS50ZXh0Q29udGVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICB3cml0ZUFyZ3MudGV4dENvbnRlbnQgPSB1cGRhdGUudGV4dENvbnRlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodXBkYXRlLm1hcmt1cEluZGV4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHdyaXRlQXJncy5tYXJrdXAgPSBhcmdzWzFdW3VwZGF0ZS5tYXJrdXBJbmRleF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBSZWFjdERlZmF1bHRQZXJmLl9yZWNvcmRXcml0ZShcbiAgICAgICAgICAgICAgdXBkYXRlLnBhcmVudElELFxuICAgICAgICAgICAgICB1cGRhdGUudHlwZSxcbiAgICAgICAgICAgICAgdG90YWxUaW1lLFxuICAgICAgICAgICAgICB3cml0ZUFyZ3NcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gYmFzaWMgZm9ybWF0XG4gICAgICAgICAgUmVhY3REZWZhdWx0UGVyZi5fcmVjb3JkV3JpdGUoXG4gICAgICAgICAgICBhcmdzWzBdLFxuICAgICAgICAgICAgZm5OYW1lLFxuICAgICAgICAgICAgdG90YWxUaW1lLFxuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncywgMSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBydjtcbiAgICAgIH0gZWxzZSBpZiAobW9kdWxlTmFtZSA9PT0gJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JyAmJiAoXG4gICAgICAgIGZuTmFtZSA9PT0gJ21vdW50Q29tcG9uZW50JyB8fFxuICAgICAgICBmbk5hbWUgPT09ICd1cGRhdGVDb21wb25lbnQnIHx8IC8vIFRPRE86IHJlY2VpdmVDb21wb25lbnQoKT9cbiAgICAgICAgZm5OYW1lID09PSAnX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudCcpKSB7XG5cbiAgICAgICAgdmFyIHJvb3ROb2RlSUQgPSBmbk5hbWUgPT09ICdtb3VudENvbXBvbmVudCcgP1xuICAgICAgICAgIGFyZ3NbMF0gOlxuICAgICAgICAgIHRoaXMuX3Jvb3ROb2RlSUQ7XG4gICAgICAgIHZhciBpc1JlbmRlciA9IGZuTmFtZSA9PT0gJ19yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQnO1xuICAgICAgICB2YXIgaXNNb3VudCA9IGZuTmFtZSA9PT0gJ21vdW50Q29tcG9uZW50JztcblxuICAgICAgICB2YXIgbW91bnRTdGFjayA9IFJlYWN0RGVmYXVsdFBlcmYuX21vdW50U3RhY2s7XG4gICAgICAgIHZhciBlbnRyeSA9IFJlYWN0RGVmYXVsdFBlcmYuX2FsbE1lYXN1cmVtZW50c1tcbiAgICAgICAgICBSZWFjdERlZmF1bHRQZXJmLl9hbGxNZWFzdXJlbWVudHMubGVuZ3RoIC0gMVxuICAgICAgICBdO1xuXG4gICAgICAgIGlmIChpc1JlbmRlcikge1xuICAgICAgICAgIGFkZFZhbHVlKGVudHJ5LmNvdW50cywgcm9vdE5vZGVJRCwgMSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNNb3VudCkge1xuICAgICAgICAgIG1vdW50U3RhY2sucHVzaCgwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXJ0ID0gcGVyZm9ybWFuY2VOb3coKTtcbiAgICAgICAgcnYgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB0b3RhbFRpbWUgPSBwZXJmb3JtYW5jZU5vdygpIC0gc3RhcnQ7XG5cbiAgICAgICAgaWYgKGlzUmVuZGVyKSB7XG4gICAgICAgICAgYWRkVmFsdWUoZW50cnkucmVuZGVyLCByb290Tm9kZUlELCB0b3RhbFRpbWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzTW91bnQpIHtcbiAgICAgICAgICB2YXIgc3ViTW91bnRUaW1lID0gbW91bnRTdGFjay5wb3AoKTtcbiAgICAgICAgICBtb3VudFN0YWNrW21vdW50U3RhY2subGVuZ3RoIC0gMV0gKz0gdG90YWxUaW1lO1xuICAgICAgICAgIGFkZFZhbHVlKGVudHJ5LmV4Y2x1c2l2ZSwgcm9vdE5vZGVJRCwgdG90YWxUaW1lIC0gc3ViTW91bnRUaW1lKTtcbiAgICAgICAgICBhZGRWYWx1ZShlbnRyeS5pbmNsdXNpdmUsIHJvb3ROb2RlSUQsIHRvdGFsVGltZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkVmFsdWUoZW50cnkuaW5jbHVzaXZlLCByb290Tm9kZUlELCB0b3RhbFRpbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZW50cnkuZGlzcGxheU5hbWVzW3Jvb3ROb2RlSURdID0ge1xuICAgICAgICAgIGN1cnJlbnQ6IHRoaXMuY29uc3RydWN0b3IuZGlzcGxheU5hbWUsXG4gICAgICAgICAgb3duZXI6IHRoaXMuX293bmVyID8gdGhpcy5fb3duZXIuY29uc3RydWN0b3IuZGlzcGxheU5hbWUgOiAnPHJvb3Q+J1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBydjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3REZWZhdWx0UGVyZjtcblxufSx7XCIuL0RPTVByb3BlcnR5XCI6NzksXCIuL1JlYWN0RGVmYXVsdFBlcmZBbmFseXNpc1wiOjEyMCxcIi4vUmVhY3RNb3VudFwiOjEzMixcIi4vUmVhY3RQZXJmXCI6MTM3LFwiLi9wZXJmb3JtYW5jZU5vd1wiOjIwOX1dLDEyMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzXG4gKi9cblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG5cbi8vIERvbid0IHRyeSB0byBzYXZlIHVzZXJzIGxlc3MgdGhhbiAxLjJtcyAoYSBudW1iZXIgSSBtYWRlIHVwKVxudmFyIERPTlRfQ0FSRV9USFJFU0hPTEQgPSAxLjI7XG52YXIgRE9NX09QRVJBVElPTl9UWVBFUyA9IHtcbiAgJ21vdW50SW1hZ2VJbnRvTm9kZSc6ICdzZXQgaW5uZXJIVE1MJyxcbiAgSU5TRVJUX01BUktVUDogJ3NldCBpbm5lckhUTUwnLFxuICBNT1ZFX0VYSVNUSU5HOiAnbW92ZScsXG4gIFJFTU9WRV9OT0RFOiAncmVtb3ZlJyxcbiAgVEVYVF9DT05URU5UOiAnc2V0IHRleHRDb250ZW50JyxcbiAgJ3VwZGF0ZVByb3BlcnR5QnlJRCc6ICd1cGRhdGUgYXR0cmlidXRlJyxcbiAgJ2RlbGV0ZVByb3BlcnR5QnlJRCc6ICdkZWxldGUgYXR0cmlidXRlJyxcbiAgJ3VwZGF0ZVN0eWxlc0J5SUQnOiAndXBkYXRlIHN0eWxlcycsXG4gICd1cGRhdGVJbm5lckhUTUxCeUlEJzogJ3NldCBpbm5lckhUTUwnLFxuICAnZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXBCeUlEJzogJ3JlcGxhY2UnXG59O1xuXG5mdW5jdGlvbiBnZXRUb3RhbFRpbWUobWVhc3VyZW1lbnRzKSB7XG4gIC8vIFRPRE86IHJldHVybiBudW1iZXIgb2YgRE9NIG9wcz8gY291bGQgYmUgbWlzbGVhZGluZy5cbiAgLy8gVE9ETzogbWVhc3VyZSBkcm9wcGVkIGZyYW1lcyBhZnRlciByZWNvbmNpbGU/XG4gIC8vIFRPRE86IGxvZyB0b3RhbCB0aW1lIG9mIGVhY2ggcmVjb25jaWxlIGFuZCB0aGUgdG9wLWxldmVsIGNvbXBvbmVudFxuICAvLyBjbGFzcyB0aGF0IHRyaWdnZXJlZCBpdC5cbiAgdmFyIHRvdGFsVGltZSA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWVhc3VyZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG1lYXN1cmVtZW50ID0gbWVhc3VyZW1lbnRzW2ldO1xuICAgIHRvdGFsVGltZSArPSBtZWFzdXJlbWVudC50b3RhbFRpbWU7XG4gIH1cbiAgcmV0dXJuIHRvdGFsVGltZTtcbn1cblxuZnVuY3Rpb24gZ2V0RE9NU3VtbWFyeShtZWFzdXJlbWVudHMpIHtcbiAgdmFyIGl0ZW1zID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWVhc3VyZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG1lYXN1cmVtZW50ID0gbWVhc3VyZW1lbnRzW2ldO1xuICAgIHZhciBpZDtcblxuICAgIGZvciAoaWQgaW4gbWVhc3VyZW1lbnQud3JpdGVzKSB7XG4gICAgICBtZWFzdXJlbWVudC53cml0ZXNbaWRdLmZvckVhY2goZnVuY3Rpb24od3JpdGUpIHtcbiAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgIHR5cGU6IERPTV9PUEVSQVRJT05fVFlQRVNbd3JpdGUudHlwZV0gfHwgd3JpdGUudHlwZSxcbiAgICAgICAgICBhcmdzOiB3cml0ZS5hcmdzXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBpdGVtcztcbn1cblxuZnVuY3Rpb24gZ2V0RXhjbHVzaXZlU3VtbWFyeShtZWFzdXJlbWVudHMpIHtcbiAgdmFyIGNhbmRpZGF0ZXMgPSB7fTtcbiAgdmFyIGRpc3BsYXlOYW1lO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWVhc3VyZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG1lYXN1cmVtZW50ID0gbWVhc3VyZW1lbnRzW2ldO1xuICAgIHZhciBhbGxJRHMgPSBhc3NpZ24oXG4gICAgICB7fSxcbiAgICAgIG1lYXN1cmVtZW50LmV4Y2x1c2l2ZSxcbiAgICAgIG1lYXN1cmVtZW50LmluY2x1c2l2ZVxuICAgICk7XG5cbiAgICBmb3IgKHZhciBpZCBpbiBhbGxJRHMpIHtcbiAgICAgIGRpc3BsYXlOYW1lID0gbWVhc3VyZW1lbnQuZGlzcGxheU5hbWVzW2lkXS5jdXJyZW50O1xuXG4gICAgICBjYW5kaWRhdGVzW2Rpc3BsYXlOYW1lXSA9IGNhbmRpZGF0ZXNbZGlzcGxheU5hbWVdIHx8IHtcbiAgICAgICAgY29tcG9uZW50TmFtZTogZGlzcGxheU5hbWUsXG4gICAgICAgIGluY2x1c2l2ZTogMCxcbiAgICAgICAgZXhjbHVzaXZlOiAwLFxuICAgICAgICByZW5kZXI6IDAsXG4gICAgICAgIGNvdW50OiAwXG4gICAgICB9O1xuICAgICAgaWYgKG1lYXN1cmVtZW50LnJlbmRlcltpZF0pIHtcbiAgICAgICAgY2FuZGlkYXRlc1tkaXNwbGF5TmFtZV0ucmVuZGVyICs9IG1lYXN1cmVtZW50LnJlbmRlcltpZF07XG4gICAgICB9XG4gICAgICBpZiAobWVhc3VyZW1lbnQuZXhjbHVzaXZlW2lkXSkge1xuICAgICAgICBjYW5kaWRhdGVzW2Rpc3BsYXlOYW1lXS5leGNsdXNpdmUgKz0gbWVhc3VyZW1lbnQuZXhjbHVzaXZlW2lkXTtcbiAgICAgIH1cbiAgICAgIGlmIChtZWFzdXJlbWVudC5pbmNsdXNpdmVbaWRdKSB7XG4gICAgICAgIGNhbmRpZGF0ZXNbZGlzcGxheU5hbWVdLmluY2x1c2l2ZSArPSBtZWFzdXJlbWVudC5pbmNsdXNpdmVbaWRdO1xuICAgICAgfVxuICAgICAgaWYgKG1lYXN1cmVtZW50LmNvdW50c1tpZF0pIHtcbiAgICAgICAgY2FuZGlkYXRlc1tkaXNwbGF5TmFtZV0uY291bnQgKz0gbWVhc3VyZW1lbnQuY291bnRzW2lkXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBOb3cgbWFrZSBhIHNvcnRlZCBhcnJheSB3aXRoIHRoZSByZXN1bHRzLlxuICB2YXIgYXJyID0gW107XG4gIGZvciAoZGlzcGxheU5hbWUgaW4gY2FuZGlkYXRlcykge1xuICAgIGlmIChjYW5kaWRhdGVzW2Rpc3BsYXlOYW1lXS5leGNsdXNpdmUgPj0gRE9OVF9DQVJFX1RIUkVTSE9MRCkge1xuICAgICAgYXJyLnB1c2goY2FuZGlkYXRlc1tkaXNwbGF5TmFtZV0pO1xuICAgIH1cbiAgfVxuXG4gIGFyci5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYi5leGNsdXNpdmUgLSBhLmV4Y2x1c2l2ZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGFycjtcbn1cblxuZnVuY3Rpb24gZ2V0SW5jbHVzaXZlU3VtbWFyeShtZWFzdXJlbWVudHMsIG9ubHlDbGVhbikge1xuICB2YXIgY2FuZGlkYXRlcyA9IHt9O1xuICB2YXIgaW5jbHVzaXZlS2V5O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWVhc3VyZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG1lYXN1cmVtZW50ID0gbWVhc3VyZW1lbnRzW2ldO1xuICAgIHZhciBhbGxJRHMgPSBhc3NpZ24oXG4gICAgICB7fSxcbiAgICAgIG1lYXN1cmVtZW50LmV4Y2x1c2l2ZSxcbiAgICAgIG1lYXN1cmVtZW50LmluY2x1c2l2ZVxuICAgICk7XG4gICAgdmFyIGNsZWFuQ29tcG9uZW50cztcblxuICAgIGlmIChvbmx5Q2xlYW4pIHtcbiAgICAgIGNsZWFuQ29tcG9uZW50cyA9IGdldFVuY2hhbmdlZENvbXBvbmVudHMobWVhc3VyZW1lbnQpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGlkIGluIGFsbElEcykge1xuICAgICAgaWYgKG9ubHlDbGVhbiAmJiAhY2xlYW5Db21wb25lbnRzW2lkXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRpc3BsYXlOYW1lID0gbWVhc3VyZW1lbnQuZGlzcGxheU5hbWVzW2lkXTtcblxuICAgICAgLy8gSW5jbHVzaXZlIHRpbWUgaXMgbm90IHVzZWZ1bCBmb3IgbWFueSBjb21wb25lbnRzIHdpdGhvdXQga25vd2luZyB3aGVyZVxuICAgICAgLy8gdGhleSBhcmUgaW5zdGFudGlhdGVkLiBTbyB3ZSBhZ2dyZWdhdGUgaW5jbHVzaXZlIHRpbWUgd2l0aCBib3RoIHRoZVxuICAgICAgLy8gb3duZXIgYW5kIGN1cnJlbnQgZGlzcGxheU5hbWUgYXMgdGhlIGtleS5cbiAgICAgIGluY2x1c2l2ZUtleSA9IGRpc3BsYXlOYW1lLm93bmVyICsgJyA+ICcgKyBkaXNwbGF5TmFtZS5jdXJyZW50O1xuXG4gICAgICBjYW5kaWRhdGVzW2luY2x1c2l2ZUtleV0gPSBjYW5kaWRhdGVzW2luY2x1c2l2ZUtleV0gfHwge1xuICAgICAgICBjb21wb25lbnROYW1lOiBpbmNsdXNpdmVLZXksXG4gICAgICAgIHRpbWU6IDAsXG4gICAgICAgIGNvdW50OiAwXG4gICAgICB9O1xuXG4gICAgICBpZiAobWVhc3VyZW1lbnQuaW5jbHVzaXZlW2lkXSkge1xuICAgICAgICBjYW5kaWRhdGVzW2luY2x1c2l2ZUtleV0udGltZSArPSBtZWFzdXJlbWVudC5pbmNsdXNpdmVbaWRdO1xuICAgICAgfVxuICAgICAgaWYgKG1lYXN1cmVtZW50LmNvdW50c1tpZF0pIHtcbiAgICAgICAgY2FuZGlkYXRlc1tpbmNsdXNpdmVLZXldLmNvdW50ICs9IG1lYXN1cmVtZW50LmNvdW50c1tpZF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gTm93IG1ha2UgYSBzb3J0ZWQgYXJyYXkgd2l0aCB0aGUgcmVzdWx0cy5cbiAgdmFyIGFyciA9IFtdO1xuICBmb3IgKGluY2x1c2l2ZUtleSBpbiBjYW5kaWRhdGVzKSB7XG4gICAgaWYgKGNhbmRpZGF0ZXNbaW5jbHVzaXZlS2V5XS50aW1lID49IERPTlRfQ0FSRV9USFJFU0hPTEQpIHtcbiAgICAgIGFyci5wdXNoKGNhbmRpZGF0ZXNbaW5jbHVzaXZlS2V5XSk7XG4gICAgfVxuICB9XG5cbiAgYXJyLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBiLnRpbWUgLSBhLnRpbWU7XG4gIH0pO1xuXG4gIHJldHVybiBhcnI7XG59XG5cbmZ1bmN0aW9uIGdldFVuY2hhbmdlZENvbXBvbmVudHMobWVhc3VyZW1lbnQpIHtcbiAgLy8gRm9yIGEgZ2l2ZW4gcmVjb25jaWxlLCBsb29rIGF0IHdoaWNoIGNvbXBvbmVudHMgZGlkIG5vdCBhY3R1YWxseVxuICAvLyByZW5kZXIgYW55dGhpbmcgdG8gdGhlIERPTSBhbmQgcmV0dXJuIGEgbWFwcGluZyBvZiB0aGVpciBJRCB0b1xuICAvLyB0aGUgYW1vdW50IG9mIHRpbWUgaXQgdG9vayB0byByZW5kZXIgdGhlIGVudGlyZSBzdWJ0cmVlLlxuICB2YXIgY2xlYW5Db21wb25lbnRzID0ge307XG4gIHZhciBkaXJ0eUxlYWZJRHMgPSBPYmplY3Qua2V5cyhtZWFzdXJlbWVudC53cml0ZXMpO1xuICB2YXIgYWxsSURzID0gYXNzaWduKHt9LCBtZWFzdXJlbWVudC5leGNsdXNpdmUsIG1lYXN1cmVtZW50LmluY2x1c2l2ZSk7XG5cbiAgZm9yICh2YXIgaWQgaW4gYWxsSURzKSB7XG4gICAgdmFyIGlzRGlydHkgPSBmYWxzZTtcbiAgICAvLyBGb3IgZWFjaCBjb21wb25lbnQgdGhhdCByZW5kZXJlZCwgc2VlIGlmIGEgY29tcG9uZW50IHRoYXQgdHJpZ2dlcmVkXG4gICAgLy8gYSBET00gb3AgaXMgaW4gaXRzIHN1YnRyZWUuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJ0eUxlYWZJRHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChkaXJ0eUxlYWZJRHNbaV0uaW5kZXhPZihpZCkgPT09IDApIHtcbiAgICAgICAgaXNEaXJ0eSA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWlzRGlydHkgJiYgbWVhc3VyZW1lbnQuY291bnRzW2lkXSA+IDApIHtcbiAgICAgIGNsZWFuQ29tcG9uZW50c1tpZF0gPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY2xlYW5Db21wb25lbnRzO1xufVxuXG52YXIgUmVhY3REZWZhdWx0UGVyZkFuYWx5c2lzID0ge1xuICBnZXRFeGNsdXNpdmVTdW1tYXJ5OiBnZXRFeGNsdXNpdmVTdW1tYXJ5LFxuICBnZXRJbmNsdXNpdmVTdW1tYXJ5OiBnZXRJbmNsdXNpdmVTdW1tYXJ5LFxuICBnZXRET01TdW1tYXJ5OiBnZXRET01TdW1tYXJ5LFxuICBnZXRUb3RhbFRpbWU6IGdldFRvdGFsVGltZVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERlZmF1bHRQZXJmQW5hbHlzaXM7XG5cbn0se1wiLi9PYmplY3QuYXNzaWduXCI6OTV9XSwxMjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RFbGVtZW50XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSZWFjdENvbnRleHQgPSByZXF1aXJlKFwiLi9SZWFjdENvbnRleHRcIik7XG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKFwiLi9SZWFjdEN1cnJlbnRPd25lclwiKTtcblxudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG52YXIgUkVTRVJWRURfUFJPUFMgPSB7XG4gIGtleTogdHJ1ZSxcbiAgcmVmOiB0cnVlXG59O1xuXG4vKipcbiAqIFdhcm4gZm9yIG11dGF0aW9ucy5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqIEBwYXJhbSB7b2JqZWN0fSBvYmplY3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAqL1xuZnVuY3Rpb24gZGVmaW5lV2FybmluZ1Byb3BlcnR5KG9iamVjdCwga2V5KSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuXG4gICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5fc3RvcmUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fc3RvcmVba2V5XTtcbiAgICB9LFxuXG4gICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAnRG9uXFwndCBzZXQgdGhlICcgKyBrZXkgKyAnIHByb3BlcnR5IG9mIHRoZSBjb21wb25lbnQuICcgK1xuICAgICAgICAnTXV0YXRlIHRoZSBleGlzdGluZyBwcm9wcyBvYmplY3QgaW5zdGVhZC4nXG4gICAgICApIDogbnVsbCk7XG4gICAgICB0aGlzLl9zdG9yZVtrZXldID0gdmFsdWU7XG4gICAgfVxuXG4gIH0pO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgdXBkYXRlZCB0byB0cnVlIGlmIHRoZSBtZW1icmFuZSBpcyBzdWNjZXNzZnVsbHkgY3JlYXRlZC5cbiAqL1xudmFyIHVzZU11dGF0aW9uTWVtYnJhbmUgPSBmYWxzZTtcblxuLyoqXG4gKiBXYXJuIGZvciBtdXRhdGlvbnMuXG4gKlxuICogQGludGVybmFsXG4gKiBAcGFyYW0ge29iamVjdH0gZWxlbWVudFxuICovXG5mdW5jdGlvbiBkZWZpbmVNdXRhdGlvbk1lbWJyYW5lKHByb3RvdHlwZSkge1xuICB0cnkge1xuICAgIHZhciBwc2V1ZG9Gcm96ZW5Qcm9wZXJ0aWVzID0ge1xuICAgICAgcHJvcHM6IHRydWVcbiAgICB9O1xuICAgIGZvciAodmFyIGtleSBpbiBwc2V1ZG9Gcm96ZW5Qcm9wZXJ0aWVzKSB7XG4gICAgICBkZWZpbmVXYXJuaW5nUHJvcGVydHkocHJvdG90eXBlLCBrZXkpO1xuICAgIH1cbiAgICB1c2VNdXRhdGlvbk1lbWJyYW5lID0gdHJ1ZTtcbiAgfSBjYXRjaCAoeCkge1xuICAgIC8vIElFIHdpbGwgZmFpbCBvbiBkZWZpbmVQcm9wZXJ0eVxuICB9XG59XG5cbi8qKlxuICogQmFzZSBjb25zdHJ1Y3RvciBmb3IgYWxsIFJlYWN0IGVsZW1lbnRzLiBUaGlzIGlzIG9ubHkgdXNlZCB0byBtYWtlIHRoaXNcbiAqIHdvcmsgd2l0aCBhIGR5bmFtaWMgaW5zdGFuY2VvZiBjaGVjay4gTm90aGluZyBzaG91bGQgbGl2ZSBvbiB0aGlzIHByb3RvdHlwZS5cbiAqXG4gKiBAcGFyYW0geyp9IHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gcmVmXG4gKiBAcGFyYW0geyp9IGtleVxuICogQHBhcmFtIHsqfSBwcm9wc1xuICogQGludGVybmFsXG4gKi9cbnZhciBSZWFjdEVsZW1lbnQgPSBmdW5jdGlvbih0eXBlLCBrZXksIHJlZiwgb3duZXIsIGNvbnRleHQsIHByb3BzKSB7XG4gIC8vIEJ1aWx0LWluIHByb3BlcnRpZXMgdGhhdCBiZWxvbmcgb24gdGhlIGVsZW1lbnRcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy5rZXkgPSBrZXk7XG4gIHRoaXMucmVmID0gcmVmO1xuXG4gIC8vIFJlY29yZCB0aGUgY29tcG9uZW50IHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyB0aGlzIGVsZW1lbnQuXG4gIHRoaXMuX293bmVyID0gb3duZXI7XG5cbiAgLy8gVE9ETzogRGVwcmVjYXRlIHdpdGhDb250ZXh0LCBhbmQgdGhlbiB0aGUgY29udGV4dCBiZWNvbWVzIGFjY2Vzc2libGVcbiAgLy8gdGhyb3VnaCB0aGUgb3duZXIuXG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuXG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAvLyBUaGUgdmFsaWRhdGlvbiBmbGFnIGFuZCBwcm9wcyBhcmUgY3VycmVudGx5IG11dGF0aXZlLiBXZSBwdXQgdGhlbSBvblxuICAgIC8vIGFuIGV4dGVybmFsIGJhY2tpbmcgc3RvcmUgc28gdGhhdCB3ZSBjYW4gZnJlZXplIHRoZSB3aG9sZSBvYmplY3QuXG4gICAgLy8gVGhpcyBjYW4gYmUgcmVwbGFjZWQgd2l0aCBhIFdlYWtNYXAgb25jZSB0aGV5IGFyZSBpbXBsZW1lbnRlZCBpblxuICAgIC8vIGNvbW1vbmx5IHVzZWQgZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzLlxuICAgIHRoaXMuX3N0b3JlID0geyB2YWxpZGF0ZWQ6IGZhbHNlLCBwcm9wczogcHJvcHMgfTtcblxuICAgIC8vIFdlJ3JlIG5vdCBhbGxvd2VkIHRvIHNldCBwcm9wcyBkaXJlY3RseSBvbiB0aGUgb2JqZWN0IHNvIHdlIGVhcmx5XG4gICAgLy8gcmV0dXJuIGFuZCByZWx5IG9uIHRoZSBwcm90b3R5cGUgbWVtYnJhbmUgdG8gZm9yd2FyZCB0byB0aGUgYmFja2luZ1xuICAgIC8vIHN0b3JlLlxuICAgIGlmICh1c2VNdXRhdGlvbk1lbWJyYW5lKSB7XG4gICAgICBPYmplY3QuZnJlZXplKHRoaXMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbn07XG5cbi8vIFdlIGludGVudGlvbmFsbHkgZG9uJ3QgZXhwb3NlIHRoZSBmdW5jdGlvbiBvbiB0aGUgY29uc3RydWN0b3IgcHJvcGVydHkuXG4vLyBSZWFjdEVsZW1lbnQgc2hvdWxkIGJlIGluZGlzdGluZ3Vpc2hhYmxlIGZyb20gYSBwbGFpbiBvYmplY3QuXG5SZWFjdEVsZW1lbnQucHJvdG90eXBlID0ge1xuICBfaXNSZWFjdEVsZW1lbnQ6IHRydWVcbn07XG5cbmlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgZGVmaW5lTXV0YXRpb25NZW1icmFuZShSZWFjdEVsZW1lbnQucHJvdG90eXBlKTtcbn1cblxuUmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbih0eXBlLCBjb25maWcsIGNoaWxkcmVuKSB7XG4gIHZhciBwcm9wTmFtZTtcblxuICAvLyBSZXNlcnZlZCBuYW1lcyBhcmUgZXh0cmFjdGVkXG4gIHZhciBwcm9wcyA9IHt9O1xuXG4gIHZhciBrZXkgPSBudWxsO1xuICB2YXIgcmVmID0gbnVsbDtcblxuICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICByZWYgPSBjb25maWcucmVmID09PSB1bmRlZmluZWQgPyBudWxsIDogY29uZmlnLnJlZjtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgY29uZmlnLmtleSAhPT0gbnVsbCxcbiAgICAgICAgJ2NyZWF0ZUVsZW1lbnQoLi4uKTogRW5jb3VudGVyZWQgY29tcG9uZW50IHdpdGggYSBga2V5YCBvZiBudWxsLiBJbiAnICtcbiAgICAgICAgJ2EgZnV0dXJlIHZlcnNpb24sIHRoaXMgd2lsbCBiZSB0cmVhdGVkIGFzIGVxdWl2YWxlbnQgdG8gdGhlIHN0cmluZyAnICtcbiAgICAgICAgJ1xcJ251bGxcXCc7IGluc3RlYWQsIHByb3ZpZGUgYW4gZXhwbGljaXQga2V5IG9yIHVzZSB1bmRlZmluZWQuJ1xuICAgICAgKSA6IG51bGwpO1xuICAgIH1cbiAgICAvLyBUT0RPOiBDaGFuZ2UgdGhpcyBiYWNrIHRvIGBjb25maWcua2V5ID09PSB1bmRlZmluZWRgXG4gICAga2V5ID0gY29uZmlnLmtleSA9PSBudWxsID8gbnVsbCA6ICcnICsgY29uZmlnLmtleTtcbiAgICAvLyBSZW1haW5pbmcgcHJvcGVydGllcyBhcmUgYWRkZWQgdG8gYSBuZXcgcHJvcHMgb2JqZWN0XG4gICAgZm9yIChwcm9wTmFtZSBpbiBjb25maWcpIHtcbiAgICAgIGlmIChjb25maWcuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpICYmXG4gICAgICAgICAgIVJFU0VSVkVEX1BST1BTLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBjb25maWdbcHJvcE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENoaWxkcmVuIGNhbiBiZSBtb3JlIHRoYW4gb25lIGFyZ3VtZW50LCBhbmQgdGhvc2UgYXJlIHRyYW5zZmVycmVkIG9udG9cbiAgLy8gdGhlIG5ld2x5IGFsbG9jYXRlZCBwcm9wcyBvYmplY3QuXG4gIHZhciBjaGlsZHJlbkxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICBpZiAoY2hpbGRyZW5MZW5ndGggPT09IDEpIHtcbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB9IGVsc2UgaWYgKGNoaWxkcmVuTGVuZ3RoID4gMSkge1xuICAgIHZhciBjaGlsZEFycmF5ID0gQXJyYXkoY2hpbGRyZW5MZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7IGkrKykge1xuICAgICAgY2hpbGRBcnJheVtpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgfVxuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRBcnJheTtcbiAgfVxuXG4gIC8vIFJlc29sdmUgZGVmYXVsdCBwcm9wc1xuICBpZiAodHlwZSAmJiB0eXBlLmRlZmF1bHRQcm9wcykge1xuICAgIHZhciBkZWZhdWx0UHJvcHMgPSB0eXBlLmRlZmF1bHRQcm9wcztcbiAgICBmb3IgKHByb3BOYW1lIGluIGRlZmF1bHRQcm9wcykge1xuICAgICAgaWYgKHR5cGVvZiBwcm9wc1twcm9wTmFtZV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWFjdEVsZW1lbnQoXG4gICAgdHlwZSxcbiAgICBrZXksXG4gICAgcmVmLFxuICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQsXG4gICAgUmVhY3RDb250ZXh0LmN1cnJlbnQsXG4gICAgcHJvcHNcbiAgKTtcbn07XG5cblJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5ID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIgZmFjdG9yeSA9IFJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50LmJpbmQobnVsbCwgdHlwZSk7XG4gIC8vIEV4cG9zZSB0aGUgdHlwZSBvbiB0aGUgZmFjdG9yeSBhbmQgdGhlIHByb3RvdHlwZSBzbyB0aGF0IGl0IGNhbiBiZVxuICAvLyBlYXNpbHkgYWNjZXNzZWQgb24gZWxlbWVudHMuIEUuZy4gPEZvbyAvPi50eXBlID09PSBGb28udHlwZS5cbiAgLy8gVGhpcyBzaG91bGQgbm90IGJlIG5hbWVkIGBjb25zdHJ1Y3RvcmAgc2luY2UgdGhpcyBtYXkgbm90IGJlIHRoZSBmdW5jdGlvblxuICAvLyB0aGF0IGNyZWF0ZWQgdGhlIGVsZW1lbnQsIGFuZCBpdCBtYXkgbm90IGV2ZW4gYmUgYSBjb25zdHJ1Y3Rvci5cbiAgZmFjdG9yeS50eXBlID0gdHlwZTtcbiAgcmV0dXJuIGZhY3Rvcnk7XG59O1xuXG5SZWFjdEVsZW1lbnQuY2xvbmVBbmRSZXBsYWNlUHJvcHMgPSBmdW5jdGlvbihvbGRFbGVtZW50LCBuZXdQcm9wcykge1xuICB2YXIgbmV3RWxlbWVudCA9IG5ldyBSZWFjdEVsZW1lbnQoXG4gICAgb2xkRWxlbWVudC50eXBlLFxuICAgIG9sZEVsZW1lbnQua2V5LFxuICAgIG9sZEVsZW1lbnQucmVmLFxuICAgIG9sZEVsZW1lbnQuX293bmVyLFxuICAgIG9sZEVsZW1lbnQuX2NvbnRleHQsXG4gICAgbmV3UHJvcHNcbiAgKTtcblxuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgLy8gSWYgdGhlIGtleSBvbiB0aGUgb3JpZ2luYWwgaXMgdmFsaWQsIHRoZW4gdGhlIGNsb25lIGlzIHZhbGlkXG4gICAgbmV3RWxlbWVudC5fc3RvcmUudmFsaWRhdGVkID0gb2xkRWxlbWVudC5fc3RvcmUudmFsaWRhdGVkO1xuICB9XG4gIHJldHVybiBuZXdFbGVtZW50O1xufTtcblxuLyoqXG4gKiBAcGFyYW0gez9vYmplY3R9IG9iamVjdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgb2JqZWN0YCBpcyBhIHZhbGlkIGNvbXBvbmVudC5cbiAqIEBmaW5hbFxuICovXG5SZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgLy8gUmVhY3RUZXN0VXRpbHMgaXMgb2Z0ZW4gdXNlZCBvdXRzaWRlIG9mIGJlZm9yZUVhY2ggd2hlcmUgYXMgUmVhY3QgaXNcbiAgLy8gd2l0aGluIGl0LiBUaGlzIGxlYWRzIHRvIHR3byBkaWZmZXJlbnQgaW5zdGFuY2VzIG9mIFJlYWN0IG9uIHRoZSBzYW1lXG4gIC8vIHBhZ2UuIFRvIGlkZW50aWZ5IGEgZWxlbWVudCBmcm9tIGEgZGlmZmVyZW50IFJlYWN0IGluc3RhbmNlIHdlIHVzZVxuICAvLyBhIGZsYWcgaW5zdGVhZCBvZiBhbiBpbnN0YW5jZW9mIGNoZWNrLlxuICB2YXIgaXNFbGVtZW50ID0gISEob2JqZWN0ICYmIG9iamVjdC5faXNSZWFjdEVsZW1lbnQpO1xuICAvLyBpZiAoaXNFbGVtZW50ICYmICEob2JqZWN0IGluc3RhbmNlb2YgUmVhY3RFbGVtZW50KSkge1xuICAvLyBUaGlzIGlzIGFuIGluZGljYXRvciB0aGF0IHlvdSdyZSB1c2luZyBtdWx0aXBsZSB2ZXJzaW9ucyBvZiBSZWFjdCBhdCB0aGVcbiAgLy8gc2FtZSB0aW1lLiBUaGlzIHdpbGwgc2NyZXcgd2l0aCBvd25lcnNoaXAgYW5kIHN0dWZmLiBGaXggaXQsIHBsZWFzZS5cbiAgLy8gVE9ETzogV2UgY291bGQgcG9zc2libHkgd2FybiBoZXJlLlxuICAvLyB9XG4gIHJldHVybiBpc0VsZW1lbnQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RWxlbWVudDtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vUmVhY3RDb250ZXh0XCI6MTA0LFwiLi9SZWFjdEN1cnJlbnRPd25lclwiOjEwNSxcIi4vd2FybmluZ1wiOjIxNSxcIl9wcm9jZXNzXCI6MTl9XSwxMjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RFbGVtZW50VmFsaWRhdG9yXG4gKi9cblxuLyoqXG4gKiBSZWFjdEVsZW1lbnRWYWxpZGF0b3IgcHJvdmlkZXMgYSB3cmFwcGVyIGFyb3VuZCBhIGVsZW1lbnQgZmFjdG9yeVxuICogd2hpY2ggdmFsaWRhdGVzIHRoZSBwcm9wcyBwYXNzZWQgdG8gdGhlIGVsZW1lbnQuIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmVcbiAqIHVzZWQgb25seSBpbiBERVYgYW5kIGNvdWxkIGJlIHJlcGxhY2VkIGJ5IGEgc3RhdGljIHR5cGUgY2hlY2tlciBmb3IgbGFuZ3VhZ2VzXG4gKiB0aGF0IHN1cHBvcnQgaXQuXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucyA9IHJlcXVpcmUoXCIuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbnNcIik7XG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKFwiLi9SZWFjdEN1cnJlbnRPd25lclwiKTtcblxudmFyIG1vbml0b3JDb2RlVXNlID0gcmVxdWlyZShcIi4vbW9uaXRvckNvZGVVc2VcIik7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbi8qKlxuICogV2FybiBpZiB0aGVyZSdzIG5vIGtleSBleHBsaWNpdGx5IHNldCBvbiBkeW5hbWljIGFycmF5cyBvZiBjaGlsZHJlbiBvclxuICogb2JqZWN0IGtleXMgYXJlIG5vdCB2YWxpZC4gVGhpcyBhbGxvd3MgdXMgdG8ga2VlcCB0cmFjayBvZiBjaGlsZHJlbiBiZXR3ZWVuXG4gKiB1cGRhdGVzLlxuICovXG52YXIgb3duZXJIYXNLZXlVc2VXYXJuaW5nID0ge1xuICAncmVhY3Rfa2V5X3dhcm5pbmcnOiB7fSxcbiAgJ3JlYWN0X251bWVyaWNfa2V5X3dhcm5pbmcnOiB7fVxufTtcbnZhciBvd25lckhhc01vbml0b3JlZE9iamVjdE1hcCA9IHt9O1xuXG52YXIgbG9nZ2VkVHlwZUZhaWx1cmVzID0ge307XG5cbnZhciBOVU1FUklDX1BST1BFUlRZX1JFR0VYID0gL15cXGQrJC87XG5cbi8qKlxuICogR2V0cyB0aGUgY3VycmVudCBvd25lcidzIGRpc3BsYXlOYW1lIGZvciB1c2UgaW4gd2FybmluZ3MuXG4gKlxuICogQGludGVybmFsXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBEaXNwbGF5IG5hbWUgb3IgdW5kZWZpbmVkXG4gKi9cbmZ1bmN0aW9uIGdldEN1cnJlbnRPd25lckRpc3BsYXlOYW1lKCkge1xuICB2YXIgY3VycmVudCA9IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQ7XG4gIHJldHVybiBjdXJyZW50ICYmIGN1cnJlbnQuY29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIFdhcm4gaWYgdGhlIGNvbXBvbmVudCBkb2Vzbid0IGhhdmUgYW4gZXhwbGljaXQga2V5IGFzc2lnbmVkIHRvIGl0LlxuICogVGhpcyBjb21wb25lbnQgaXMgaW4gYW4gYXJyYXkuIFRoZSBhcnJheSBjb3VsZCBncm93IGFuZCBzaHJpbmsgb3IgYmVcbiAqIHJlb3JkZXJlZC4gQWxsIGNoaWxkcmVuIHRoYXQgaGF2ZW4ndCBhbHJlYWR5IGJlZW4gdmFsaWRhdGVkIGFyZSByZXF1aXJlZCB0b1xuICogaGF2ZSBhIFwia2V5XCIgcHJvcGVydHkgYXNzaWduZWQgdG8gaXQuXG4gKlxuICogQGludGVybmFsXG4gKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjb21wb25lbnQgQ29tcG9uZW50IHRoYXQgcmVxdWlyZXMgYSBrZXkuXG4gKiBAcGFyYW0geyp9IHBhcmVudFR5cGUgY29tcG9uZW50J3MgcGFyZW50J3MgdHlwZS5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVFeHBsaWNpdEtleShjb21wb25lbnQsIHBhcmVudFR5cGUpIHtcbiAgaWYgKGNvbXBvbmVudC5fc3RvcmUudmFsaWRhdGVkIHx8IGNvbXBvbmVudC5rZXkgIT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb21wb25lbnQuX3N0b3JlLnZhbGlkYXRlZCA9IHRydWU7XG5cbiAgd2FybkFuZE1vbml0b3JGb3JLZXlVc2UoXG4gICAgJ3JlYWN0X2tleV93YXJuaW5nJyxcbiAgICAnRWFjaCBjaGlsZCBpbiBhbiBhcnJheSBzaG91bGQgaGF2ZSBhIHVuaXF1ZSBcImtleVwiIHByb3AuJyxcbiAgICBjb21wb25lbnQsXG4gICAgcGFyZW50VHlwZVxuICApO1xufVxuXG4vKipcbiAqIFdhcm4gaWYgdGhlIGtleSBpcyBiZWluZyBkZWZpbmVkIGFzIGFuIG9iamVjdCBwcm9wZXJ0eSBidXQgaGFzIGFuIGluY29ycmVjdFxuICogdmFsdWUuXG4gKlxuICogQGludGVybmFsXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBrZXkuXG4gKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjb21wb25lbnQgQ29tcG9uZW50IHRoYXQgcmVxdWlyZXMgYSBrZXkuXG4gKiBAcGFyYW0geyp9IHBhcmVudFR5cGUgY29tcG9uZW50J3MgcGFyZW50J3MgdHlwZS5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVQcm9wZXJ0eUtleShuYW1lLCBjb21wb25lbnQsIHBhcmVudFR5cGUpIHtcbiAgaWYgKCFOVU1FUklDX1BST1BFUlRZX1JFR0VYLnRlc3QobmFtZSkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgd2FybkFuZE1vbml0b3JGb3JLZXlVc2UoXG4gICAgJ3JlYWN0X251bWVyaWNfa2V5X3dhcm5pbmcnLFxuICAgICdDaGlsZCBvYmplY3RzIHNob3VsZCBoYXZlIG5vbi1udW1lcmljIGtleXMgc28gb3JkZXJpbmcgaXMgcHJlc2VydmVkLicsXG4gICAgY29tcG9uZW50LFxuICAgIHBhcmVudFR5cGVcbiAgKTtcbn1cblxuLyoqXG4gKiBTaGFyZWQgd2FybmluZyBhbmQgbW9uaXRvcmluZyBjb2RlIGZvciB0aGUga2V5IHdhcm5pbmdzLlxuICpcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIHtzdHJpbmd9IHdhcm5pbmdJRCBUaGUgaWQgdXNlZCB3aGVuIGxvZ2dpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgYmFzZSB3YXJuaW5nIHRoYXQgZ2V0cyBvdXRwdXQuXG4gKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjb21wb25lbnQgQ29tcG9uZW50IHRoYXQgcmVxdWlyZXMgYSBrZXkuXG4gKiBAcGFyYW0geyp9IHBhcmVudFR5cGUgY29tcG9uZW50J3MgcGFyZW50J3MgdHlwZS5cbiAqL1xuZnVuY3Rpb24gd2FybkFuZE1vbml0b3JGb3JLZXlVc2Uod2FybmluZ0lELCBtZXNzYWdlLCBjb21wb25lbnQsIHBhcmVudFR5cGUpIHtcbiAgdmFyIG93bmVyTmFtZSA9IGdldEN1cnJlbnRPd25lckRpc3BsYXlOYW1lKCk7XG4gIHZhciBwYXJlbnROYW1lID0gcGFyZW50VHlwZS5kaXNwbGF5TmFtZTtcblxuICB2YXIgdXNlTmFtZSA9IG93bmVyTmFtZSB8fCBwYXJlbnROYW1lO1xuICB2YXIgbWVtb2l6ZXIgPSBvd25lckhhc0tleVVzZVdhcm5pbmdbd2FybmluZ0lEXTtcbiAgaWYgKG1lbW9pemVyLmhhc093blByb3BlcnR5KHVzZU5hbWUpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIG1lbW9pemVyW3VzZU5hbWVdID0gdHJ1ZTtcblxuICBtZXNzYWdlICs9IG93bmVyTmFtZSA/XG4gICAgKFwiIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIFwiICsgb3duZXJOYW1lICsgXCIuXCIpIDpcbiAgICAoXCIgQ2hlY2sgdGhlIHJlbmRlckNvbXBvbmVudCBjYWxsIHVzaW5nIDxcIiArIHBhcmVudE5hbWUgKyBcIj4uXCIpO1xuXG4gIC8vIFVzdWFsbHkgdGhlIGN1cnJlbnQgb3duZXIgaXMgdGhlIG9mZmVuZGVyLCBidXQgaWYgaXQgYWNjZXB0cyBjaGlsZHJlbiBhcyBhXG4gIC8vIHByb3BlcnR5LCBpdCBtYXkgYmUgdGhlIGNyZWF0b3Igb2YgdGhlIGNoaWxkIHRoYXQncyByZXNwb25zaWJsZSBmb3JcbiAgLy8gYXNzaWduaW5nIGl0IGEga2V5LlxuICB2YXIgY2hpbGRPd25lck5hbWUgPSBudWxsO1xuICBpZiAoY29tcG9uZW50Ll9vd25lciAmJiBjb21wb25lbnQuX293bmVyICE9PSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50KSB7XG4gICAgLy8gTmFtZSBvZiB0aGUgY29tcG9uZW50IHRoYXQgb3JpZ2luYWxseSBjcmVhdGVkIHRoaXMgY2hpbGQuXG4gICAgY2hpbGRPd25lck5hbWUgPSBjb21wb25lbnQuX293bmVyLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lO1xuXG4gICAgbWVzc2FnZSArPSAoXCIgSXQgd2FzIHBhc3NlZCBhIGNoaWxkIGZyb20gXCIgKyBjaGlsZE93bmVyTmFtZSArIFwiLlwiKTtcbiAgfVxuXG4gIG1lc3NhZ2UgKz0gJyBTZWUgaHR0cDovL2ZiLm1lL3JlYWN0LXdhcm5pbmcta2V5cyBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nO1xuICBtb25pdG9yQ29kZVVzZSh3YXJuaW5nSUQsIHtcbiAgICBjb21wb25lbnQ6IHVzZU5hbWUsXG4gICAgY29tcG9uZW50T3duZXI6IGNoaWxkT3duZXJOYW1lXG4gIH0pO1xuICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG59XG5cbi8qKlxuICogTG9nIHRoYXQgd2UncmUgdXNpbmcgYW4gb2JqZWN0IG1hcC4gV2UncmUgY29uc2lkZXJpbmcgZGVwcmVjYXRpbmcgdGhpc1xuICogZmVhdHVyZSBhbmQgcmVwbGFjZSBpdCB3aXRoIHByb3BlciBNYXAgYW5kIEltbXV0YWJsZU1hcCBkYXRhIHN0cnVjdHVyZXMuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIG1vbml0b3JVc2VPZk9iamVjdE1hcCgpIHtcbiAgdmFyIGN1cnJlbnROYW1lID0gZ2V0Q3VycmVudE93bmVyRGlzcGxheU5hbWUoKSB8fCAnJztcbiAgaWYgKG93bmVySGFzTW9uaXRvcmVkT2JqZWN0TWFwLmhhc093blByb3BlcnR5KGN1cnJlbnROYW1lKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBvd25lckhhc01vbml0b3JlZE9iamVjdE1hcFtjdXJyZW50TmFtZV0gPSB0cnVlO1xuICBtb25pdG9yQ29kZVVzZSgncmVhY3Rfb2JqZWN0X21hcF9jaGlsZHJlbicpO1xufVxuXG4vKipcbiAqIEVuc3VyZSB0aGF0IGV2ZXJ5IGNvbXBvbmVudCBlaXRoZXIgaXMgcGFzc2VkIGluIGEgc3RhdGljIGxvY2F0aW9uLCBpbiBhblxuICogYXJyYXkgd2l0aCBhbiBleHBsaWNpdCBrZXlzIHByb3BlcnR5IGRlZmluZWQsIG9yIGluIGFuIG9iamVjdCBsaXRlcmFsXG4gKiB3aXRoIHZhbGlkIGtleSBwcm9wZXJ0eS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqIEBwYXJhbSB7Kn0gY29tcG9uZW50IFN0YXRpY2FsbHkgcGFzc2VkIGNoaWxkIG9mIGFueSB0eXBlLlxuICogQHBhcmFtIHsqfSBwYXJlbnRUeXBlIGNvbXBvbmVudCdzIHBhcmVudCdzIHR5cGUuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZUNoaWxkS2V5cyhjb21wb25lbnQsIHBhcmVudFR5cGUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoY29tcG9uZW50KSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29tcG9uZW50Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSBjb21wb25lbnRbaV07XG4gICAgICBpZiAoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICB2YWxpZGF0ZUV4cGxpY2l0S2V5KGNoaWxkLCBwYXJlbnRUeXBlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGNvbXBvbmVudCkpIHtcbiAgICAvLyBUaGlzIGNvbXBvbmVudCB3YXMgcGFzc2VkIGluIGEgdmFsaWQgbG9jYXRpb24uXG4gICAgY29tcG9uZW50Ll9zdG9yZS52YWxpZGF0ZWQgPSB0cnVlO1xuICB9IGVsc2UgaWYgKGNvbXBvbmVudCAmJiB0eXBlb2YgY29tcG9uZW50ID09PSAnb2JqZWN0Jykge1xuICAgIG1vbml0b3JVc2VPZk9iamVjdE1hcCgpO1xuICAgIGZvciAodmFyIG5hbWUgaW4gY29tcG9uZW50KSB7XG4gICAgICB2YWxpZGF0ZVByb3BlcnR5S2V5KG5hbWUsIGNvbXBvbmVudFtuYW1lXSwgcGFyZW50VHlwZSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQXNzZXJ0IHRoYXQgdGhlIHByb3BzIGFyZSB2YWxpZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb21wb25lbnROYW1lIE5hbWUgb2YgdGhlIGNvbXBvbmVudCBmb3IgZXJyb3IgbWVzc2FnZXMuXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcFR5cGVzIE1hcCBvZiBwcm9wIG5hbWUgdG8gYSBSZWFjdFByb3BUeXBlXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhdGlvbiBlLmcuIFwicHJvcFwiLCBcImNvbnRleHRcIiwgXCJjaGlsZCBjb250ZXh0XCJcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNoZWNrUHJvcFR5cGVzKGNvbXBvbmVudE5hbWUsIHByb3BUeXBlcywgcHJvcHMsIGxvY2F0aW9uKSB7XG4gIGZvciAodmFyIHByb3BOYW1lIGluIHByb3BUeXBlcykge1xuICAgIGlmIChwcm9wVHlwZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICB2YXIgZXJyb3I7XG4gICAgICAvLyBQcm9wIHR5cGUgdmFsaWRhdGlvbiBtYXkgdGhyb3cuIEluIGNhc2UgdGhleSBkbywgd2UgZG9uJ3Qgd2FudCB0b1xuICAgICAgLy8gZmFpbCB0aGUgcmVuZGVyIHBoYXNlIHdoZXJlIGl0IGRpZG4ndCBmYWlsIGJlZm9yZS4gU28gd2UgbG9nIGl0LlxuICAgICAgLy8gQWZ0ZXIgdGhlc2UgaGF2ZSBiZWVuIGNsZWFuZWQgdXAsIHdlJ2xsIGxldCB0aGVtIHRocm93LlxuICAgICAgdHJ5IHtcbiAgICAgICAgZXJyb3IgPSBwcm9wVHlwZXNbcHJvcE5hbWVdKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgZXJyb3IgPSBleDtcbiAgICAgIH1cbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmICEoZXJyb3IubWVzc2FnZSBpbiBsb2dnZWRUeXBlRmFpbHVyZXMpKSB7XG4gICAgICAgIC8vIE9ubHkgbW9uaXRvciB0aGlzIGZhaWx1cmUgb25jZSBiZWNhdXNlIHRoZXJlIHRlbmRzIHRvIGJlIGEgbG90IG9mIHRoZVxuICAgICAgICAvLyBzYW1lIGVycm9yLlxuICAgICAgICBsb2dnZWRUeXBlRmFpbHVyZXNbZXJyb3IubWVzc2FnZV0gPSB0cnVlO1xuICAgICAgICAvLyBUaGlzIHdpbGwgc29vbiB1c2UgdGhlIHdhcm5pbmcgbW9kdWxlXG4gICAgICAgIG1vbml0b3JDb2RlVXNlKFxuICAgICAgICAgICdyZWFjdF9mYWlsZWRfZGVzY3JpcHRvcl90eXBlX2NoZWNrJyxcbiAgICAgICAgICB7IG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgUmVhY3RFbGVtZW50VmFsaWRhdG9yID0ge1xuXG4gIGNyZWF0ZUVsZW1lbnQ6IGZ1bmN0aW9uKHR5cGUsIHByb3BzLCBjaGlsZHJlbikge1xuICAgIC8vIFdlIHdhcm4gaW4gdGhpcyBjYXNlIGJ1dCBkb24ndCB0aHJvdy4gV2UgZXhwZWN0IHRoZSBlbGVtZW50IGNyZWF0aW9uIHRvXG4gICAgLy8gc3VjY2VlZCBhbmQgdGhlcmUgd2lsbCBsaWtlbHkgYmUgZXJyb3JzIGluIHJlbmRlci5cbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgIHR5cGUgIT0gbnVsbCxcbiAgICAgICdSZWFjdC5jcmVhdGVFbGVtZW50OiB0eXBlIHNob3VsZCBub3QgYmUgbnVsbCBvciB1bmRlZmluZWQuIEl0IHNob3VsZCAnICtcbiAgICAgICAgJ2JlIGEgc3RyaW5nIChmb3IgRE9NIGVsZW1lbnRzKSBvciBhIFJlYWN0Q2xhc3MgKGZvciBjb21wb3NpdGUgJyArXG4gICAgICAgICdjb21wb25lbnRzKS4nXG4gICAgKSA6IG51bGwpO1xuXG4gICAgdmFyIGVsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRWxlbWVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgLy8gVGhlIHJlc3VsdCBjYW4gYmUgbnVsbGlzaCBpZiBhIG1vY2sgb3IgYSBjdXN0b20gZnVuY3Rpb24gaXMgdXNlZC5cbiAgICAvLyBUT0RPOiBEcm9wIHRoaXMgd2hlbiB0aGVzZSBhcmUgbm8gbG9uZ2VyIGFsbG93ZWQgYXMgdGhlIHR5cGUgYXJndW1lbnQuXG4gICAgaWYgKGVsZW1lbnQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbGlkYXRlQ2hpbGRLZXlzKGFyZ3VtZW50c1tpXSwgdHlwZSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGUpIHtcbiAgICAgIHZhciBuYW1lID0gdHlwZS5kaXNwbGF5TmFtZTtcbiAgICAgIGlmICh0eXBlLnByb3BUeXBlcykge1xuICAgICAgICBjaGVja1Byb3BUeXBlcyhcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIHR5cGUucHJvcFR5cGVzLFxuICAgICAgICAgIGVsZW1lbnQucHJvcHMsXG4gICAgICAgICAgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5wcm9wXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZS5jb250ZXh0VHlwZXMpIHtcbiAgICAgICAgY2hlY2tQcm9wVHlwZXMoXG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICB0eXBlLmNvbnRleHRUeXBlcyxcbiAgICAgICAgICBlbGVtZW50Ll9jb250ZXh0LFxuICAgICAgICAgIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMuY29udGV4dFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfSxcblxuICBjcmVhdGVGYWN0b3J5OiBmdW5jdGlvbih0eXBlKSB7XG4gICAgdmFyIHZhbGlkYXRlZEZhY3RvcnkgPSBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY3JlYXRlRWxlbWVudC5iaW5kKFxuICAgICAgbnVsbCxcbiAgICAgIHR5cGVcbiAgICApO1xuICAgIHZhbGlkYXRlZEZhY3RvcnkudHlwZSA9IHR5cGU7XG4gICAgcmV0dXJuIHZhbGlkYXRlZEZhY3Rvcnk7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEVsZW1lbnRWYWxpZGF0b3I7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL1JlYWN0Q3VycmVudE93bmVyXCI6MTA1LFwiLi9SZWFjdEVsZW1lbnRcIjoxMjEsXCIuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbnNcIjoxNDAsXCIuL21vbml0b3JDb2RlVXNlXCI6MjA2LFwiLi93YXJuaW5nXCI6MjE1LFwiX3Byb2Nlc3NcIjoxOX1dLDEyMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEVtcHR5Q29tcG9uZW50XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbnZhciBjb21wb25lbnQ7XG4vLyBUaGlzIHJlZ2lzdHJ5IGtlZXBzIHRyYWNrIG9mIHRoZSBSZWFjdCBJRHMgb2YgdGhlIGNvbXBvbmVudHMgdGhhdCByZW5kZXJlZCB0b1xuLy8gYG51bGxgIChpbiByZWFsaXR5IGEgcGxhY2Vob2xkZXIgc3VjaCBhcyBgbm9zY3JpcHRgKVxudmFyIG51bGxDb21wb25lbnRJZHNSZWdpc3RyeSA9IHt9O1xuXG52YXIgUmVhY3RFbXB0eUNvbXBvbmVudEluamVjdGlvbiA9IHtcbiAgaW5qZWN0RW1wdHlDb21wb25lbnQ6IGZ1bmN0aW9uKGVtcHR5Q29tcG9uZW50KSB7XG4gICAgY29tcG9uZW50ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkoZW1wdHlDb21wb25lbnQpO1xuICB9XG59O1xuXG4vKipcbiAqIEByZXR1cm4ge1JlYWN0Q29tcG9uZW50fSBjb21wb25lbnQgVGhlIGluamVjdGVkIGVtcHR5IGNvbXBvbmVudC5cbiAqL1xuZnVuY3Rpb24gZ2V0RW1wdHlDb21wb25lbnQoKSB7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgY29tcG9uZW50LFxuICAgICdUcnlpbmcgdG8gcmV0dXJuIG51bGwgZnJvbSBhIHJlbmRlciwgYnV0IG5vIG51bGwgcGxhY2Vob2xkZXIgY29tcG9uZW50ICcgK1xuICAgICd3YXMgaW5qZWN0ZWQuJ1xuICApIDogaW52YXJpYW50KGNvbXBvbmVudCkpO1xuICByZXR1cm4gY29tcG9uZW50KCk7XG59XG5cbi8qKlxuICogTWFyayB0aGUgY29tcG9uZW50IGFzIGhhdmluZyByZW5kZXJlZCB0byBudWxsLlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIENvbXBvbmVudCdzIGBfcm9vdE5vZGVJRGAuXG4gKi9cbmZ1bmN0aW9uIHJlZ2lzdGVyTnVsbENvbXBvbmVudElEKGlkKSB7XG4gIG51bGxDb21wb25lbnRJZHNSZWdpc3RyeVtpZF0gPSB0cnVlO1xufVxuXG4vKipcbiAqIFVubWFyayB0aGUgY29tcG9uZW50IGFzIGhhdmluZyByZW5kZXJlZCB0byBudWxsOiBpdCByZW5kZXJzIHRvIHNvbWV0aGluZyBub3cuXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgQ29tcG9uZW50J3MgYF9yb290Tm9kZUlEYC5cbiAqL1xuZnVuY3Rpb24gZGVyZWdpc3Rlck51bGxDb21wb25lbnRJRChpZCkge1xuICBkZWxldGUgbnVsbENvbXBvbmVudElkc1JlZ2lzdHJ5W2lkXTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgQ29tcG9uZW50J3MgYF9yb290Tm9kZUlEYC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGNvbXBvbmVudCBpcyByZW5kZXJlZCB0byBudWxsLlxuICovXG5mdW5jdGlvbiBpc051bGxDb21wb25lbnRJRChpZCkge1xuICByZXR1cm4gbnVsbENvbXBvbmVudElkc1JlZ2lzdHJ5W2lkXTtcbn1cblxudmFyIFJlYWN0RW1wdHlDb21wb25lbnQgPSB7XG4gIGRlcmVnaXN0ZXJOdWxsQ29tcG9uZW50SUQ6IGRlcmVnaXN0ZXJOdWxsQ29tcG9uZW50SUQsXG4gIGdldEVtcHR5Q29tcG9uZW50OiBnZXRFbXB0eUNvbXBvbmVudCxcbiAgaW5qZWN0aW9uOiBSZWFjdEVtcHR5Q29tcG9uZW50SW5qZWN0aW9uLFxuICBpc051bGxDb21wb25lbnRJRDogaXNOdWxsQ29tcG9uZW50SUQsXG4gIHJlZ2lzdGVyTnVsbENvbXBvbmVudElEOiByZWdpc3Rlck51bGxDb21wb25lbnRJRFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEVtcHR5Q29tcG9uZW50O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9SZWFjdEVsZW1lbnRcIjoxMjEsXCIuL2ludmFyaWFudFwiOjE5NixcIl9wcm9jZXNzXCI6MTl9XSwxMjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RXJyb3JVdGlsc1xuICogQHR5cGVjaGVja3NcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIFJlYWN0RXJyb3JVdGlscyA9IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBndWFyZGVkIHZlcnNpb24gb2YgYSBmdW5jdGlvbi4gVGhpcyBpcyBzdXBwb3NlZCB0byBtYWtlIGRlYnVnZ2luZ1xuICAgKiBvZiBldmVudCBoYW5kbGVycyBlYXNpZXIuIFRvIGFpZCBkZWJ1Z2dpbmcgd2l0aCB0aGUgYnJvd3NlcidzIGRlYnVnZ2VyLFxuICAgKiB0aGlzIGN1cnJlbnRseSBzaW1wbHkgcmV0dXJucyB0aGUgb3JpZ2luYWwgZnVuY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmMgRnVuY3Rpb24gdG8gYmUgZXhlY3V0ZWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGd1YXJkXG4gICAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICAgKi9cbiAgZ3VhcmQ6IGZ1bmN0aW9uKGZ1bmMsIG5hbWUpIHtcbiAgICByZXR1cm4gZnVuYztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEVycm9yVXRpbHM7XG5cbn0se31dLDEyNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RFdmVudEVtaXR0ZXJNaXhpblxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRXZlbnRQbHVnaW5IdWIgPSByZXF1aXJlKFwiLi9FdmVudFBsdWdpbkh1YlwiKTtcblxuZnVuY3Rpb24gcnVuRXZlbnRRdWV1ZUluQmF0Y2goZXZlbnRzKSB7XG4gIEV2ZW50UGx1Z2luSHViLmVucXVldWVFdmVudHMoZXZlbnRzKTtcbiAgRXZlbnRQbHVnaW5IdWIucHJvY2Vzc0V2ZW50UXVldWUoKTtcbn1cblxudmFyIFJlYWN0RXZlbnRFbWl0dGVyTWl4aW4gPSB7XG5cbiAgLyoqXG4gICAqIFN0cmVhbXMgYSBmaXJlZCB0b3AtbGV2ZWwgZXZlbnQgdG8gYEV2ZW50UGx1Z2luSHViYCB3aGVyZSBwbHVnaW5zIGhhdmUgdGhlXG4gICAqIG9wcG9ydHVuaXR5IHRvIGNyZWF0ZSBgUmVhY3RFdmVudGBzIHRvIGJlIGRpc3BhdGNoZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAgICogQHBhcmFtIHtvYmplY3R9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVGFyZ2V0SUQgSUQgb2YgYHRvcExldmVsVGFyZ2V0YC5cbiAgICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBlbnZpcm9ubWVudCBldmVudC5cbiAgICovXG4gIGhhbmRsZVRvcExldmVsOiBmdW5jdGlvbihcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgIG5hdGl2ZUV2ZW50KSB7XG4gICAgdmFyIGV2ZW50cyA9IEV2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHMoXG4gICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICB0b3BMZXZlbFRhcmdldCxcbiAgICAgIHRvcExldmVsVGFyZ2V0SUQsXG4gICAgICBuYXRpdmVFdmVudFxuICAgICk7XG5cbiAgICBydW5FdmVudFF1ZXVlSW5CYXRjaChldmVudHMpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RXZlbnRFbWl0dGVyTWl4aW47XG5cbn0se1wiLi9FdmVudFBsdWdpbkh1YlwiOjg2fV0sMTI2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEV2ZW50TGlzdGVuZXJcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBFdmVudExpc3RlbmVyID0gcmVxdWlyZShcIi4vRXZlbnRMaXN0ZW5lclwiKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZShcIi4vUG9vbGVkQ2xhc3NcIik7XG52YXIgUmVhY3RJbnN0YW5jZUhhbmRsZXMgPSByZXF1aXJlKFwiLi9SZWFjdEluc3RhbmNlSGFuZGxlc1wiKTtcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZShcIi4vUmVhY3RNb3VudFwiKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKFwiLi9SZWFjdFVwZGF0ZXNcIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGdldEV2ZW50VGFyZ2V0ID0gcmVxdWlyZShcIi4vZ2V0RXZlbnRUYXJnZXRcIik7XG52YXIgZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb24gPSByZXF1aXJlKFwiLi9nZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvblwiKTtcblxuLyoqXG4gKiBGaW5kcyB0aGUgcGFyZW50IFJlYWN0IGNvbXBvbmVudCBvZiBgbm9kZWAuXG4gKlxuICogQHBhcmFtIHsqfSBub2RlXG4gKiBAcmV0dXJuIHs/RE9NRXZlbnRUYXJnZXR9IFBhcmVudCBjb250YWluZXIsIG9yIGBudWxsYCBpZiB0aGUgc3BlY2lmaWVkIG5vZGVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgbm90IG5lc3RlZC5cbiAqL1xuZnVuY3Rpb24gZmluZFBhcmVudChub2RlKSB7XG4gIC8vIFRPRE86IEl0IG1heSBiZSBhIGdvb2QgaWRlYSB0byBjYWNoZSB0aGlzIHRvIHByZXZlbnQgdW5uZWNlc3NhcnkgRE9NXG4gIC8vIHRyYXZlcnNhbCwgYnV0IGNhY2hpbmcgaXMgZGlmZmljdWx0IHRvIGRvIGNvcnJlY3RseSB3aXRob3V0IHVzaW5nIGFcbiAgLy8gbXV0YXRpb24gb2JzZXJ2ZXIgdG8gbGlzdGVuIGZvciBhbGwgRE9NIGNoYW5nZXMuXG4gIHZhciBub2RlSUQgPSBSZWFjdE1vdW50LmdldElEKG5vZGUpO1xuICB2YXIgcm9vdElEID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuZ2V0UmVhY3RSb290SURGcm9tTm9kZUlEKG5vZGVJRCk7XG4gIHZhciBjb250YWluZXIgPSBSZWFjdE1vdW50LmZpbmRSZWFjdENvbnRhaW5lckZvcklEKHJvb3RJRCk7XG4gIHZhciBwYXJlbnQgPSBSZWFjdE1vdW50LmdldEZpcnN0UmVhY3RET00oY29udGFpbmVyKTtcbiAgcmV0dXJuIHBhcmVudDtcbn1cblxuLy8gVXNlZCB0byBzdG9yZSBhbmNlc3RvciBoaWVyYXJjaHkgaW4gdG9wIGxldmVsIGNhbGxiYWNrXG5mdW5jdGlvbiBUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICB0aGlzLnRvcExldmVsVHlwZSA9IHRvcExldmVsVHlwZTtcbiAgdGhpcy5uYXRpdmVFdmVudCA9IG5hdGl2ZUV2ZW50O1xuICB0aGlzLmFuY2VzdG9ycyA9IFtdO1xufVxuYXNzaWduKFRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZy5wcm90b3R5cGUsIHtcbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50b3BMZXZlbFR5cGUgPSBudWxsO1xuICAgIHRoaXMubmF0aXZlRXZlbnQgPSBudWxsO1xuICAgIHRoaXMuYW5jZXN0b3JzLmxlbmd0aCA9IDA7XG4gIH1cbn0pO1xuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKFxuICBUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcsXG4gIFBvb2xlZENsYXNzLnR3b0FyZ3VtZW50UG9vbGVyXG4pO1xuXG5mdW5jdGlvbiBoYW5kbGVUb3BMZXZlbEltcGwoYm9va0tlZXBpbmcpIHtcbiAgdmFyIHRvcExldmVsVGFyZ2V0ID0gUmVhY3RNb3VudC5nZXRGaXJzdFJlYWN0RE9NKFxuICAgIGdldEV2ZW50VGFyZ2V0KGJvb2tLZWVwaW5nLm5hdGl2ZUV2ZW50KVxuICApIHx8IHdpbmRvdztcblxuICAvLyBMb29wIHRocm91Z2ggdGhlIGhpZXJhcmNoeSwgaW4gY2FzZSB0aGVyZSdzIGFueSBuZXN0ZWQgY29tcG9uZW50cy5cbiAgLy8gSXQncyBpbXBvcnRhbnQgdGhhdCB3ZSBidWlsZCB0aGUgYXJyYXkgb2YgYW5jZXN0b3JzIGJlZm9yZSBjYWxsaW5nIGFueVxuICAvLyBldmVudCBoYW5kbGVycywgYmVjYXVzZSBldmVudCBoYW5kbGVycyBjYW4gbW9kaWZ5IHRoZSBET00sIGxlYWRpbmcgdG9cbiAgLy8gaW5jb25zaXN0ZW5jaWVzIHdpdGggUmVhY3RNb3VudCdzIG5vZGUgY2FjaGUuIFNlZSAjMTEwNS5cbiAgdmFyIGFuY2VzdG9yID0gdG9wTGV2ZWxUYXJnZXQ7XG4gIHdoaWxlIChhbmNlc3Rvcikge1xuICAgIGJvb2tLZWVwaW5nLmFuY2VzdG9ycy5wdXNoKGFuY2VzdG9yKTtcbiAgICBhbmNlc3RvciA9IGZpbmRQYXJlbnQoYW5jZXN0b3IpO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBib29rS2VlcGluZy5hbmNlc3RvcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdG9wTGV2ZWxUYXJnZXQgPSBib29rS2VlcGluZy5hbmNlc3RvcnNbaV07XG4gICAgdmFyIHRvcExldmVsVGFyZ2V0SUQgPSBSZWFjdE1vdW50LmdldElEKHRvcExldmVsVGFyZ2V0KSB8fCAnJztcbiAgICBSZWFjdEV2ZW50TGlzdGVuZXIuX2hhbmRsZVRvcExldmVsKFxuICAgICAgYm9va0tlZXBpbmcudG9wTGV2ZWxUeXBlLFxuICAgICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgICB0b3BMZXZlbFRhcmdldElELFxuICAgICAgYm9va0tlZXBpbmcubmF0aXZlRXZlbnRcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNjcm9sbFZhbHVlTW9uaXRvcihjYikge1xuICB2YXIgc2Nyb2xsUG9zaXRpb24gPSBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbih3aW5kb3cpO1xuICBjYihzY3JvbGxQb3NpdGlvbik7XG59XG5cbnZhciBSZWFjdEV2ZW50TGlzdGVuZXIgPSB7XG4gIF9lbmFibGVkOiB0cnVlLFxuICBfaGFuZGxlVG9wTGV2ZWw6IG51bGwsXG5cbiAgV0lORE9XX0hBTkRMRTogRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gd2luZG93IDogbnVsbCxcblxuICBzZXRIYW5kbGVUb3BMZXZlbDogZnVuY3Rpb24oaGFuZGxlVG9wTGV2ZWwpIHtcbiAgICBSZWFjdEV2ZW50TGlzdGVuZXIuX2hhbmRsZVRvcExldmVsID0gaGFuZGxlVG9wTGV2ZWw7XG4gIH0sXG5cbiAgc2V0RW5hYmxlZDogZnVuY3Rpb24oZW5hYmxlZCkge1xuICAgIFJlYWN0RXZlbnRMaXN0ZW5lci5fZW5hYmxlZCA9ICEhZW5hYmxlZDtcbiAgfSxcblxuICBpc0VuYWJsZWQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBSZWFjdEV2ZW50TGlzdGVuZXIuX2VuYWJsZWQ7XG4gIH0sXG5cblxuICAvKipcbiAgICogVHJhcHMgdG9wLWxldmVsIGV2ZW50cyBieSB1c2luZyBldmVudCBidWJibGluZy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaGFuZGxlckJhc2VOYW1lIEV2ZW50IG5hbWUgKGUuZy4gXCJjbGlja1wiKS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGhhbmRsZSBFbGVtZW50IG9uIHdoaWNoIHRvIGF0dGFjaCBsaXN0ZW5lci5cbiAgICogQHJldHVybiB7b2JqZWN0fSBBbiBvYmplY3Qgd2l0aCBhIHJlbW92ZSBmdW5jdGlvbiB3aGljaCB3aWxsIGZvcmNlZnVsbHlcbiAgICogICAgICAgICAgICAgICAgICByZW1vdmUgdGhlIGxpc3RlbmVyLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHRyYXBCdWJibGVkRXZlbnQ6IGZ1bmN0aW9uKHRvcExldmVsVHlwZSwgaGFuZGxlckJhc2VOYW1lLCBoYW5kbGUpIHtcbiAgICB2YXIgZWxlbWVudCA9IGhhbmRsZTtcbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIEV2ZW50TGlzdGVuZXIubGlzdGVuKFxuICAgICAgZWxlbWVudCxcbiAgICAgIGhhbmRsZXJCYXNlTmFtZSxcbiAgICAgIFJlYWN0RXZlbnRMaXN0ZW5lci5kaXNwYXRjaEV2ZW50LmJpbmQobnVsbCwgdG9wTGV2ZWxUeXBlKVxuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRyYXBzIGEgdG9wLWxldmVsIGV2ZW50IGJ5IHVzaW5nIGV2ZW50IGNhcHR1cmluZy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaGFuZGxlckJhc2VOYW1lIEV2ZW50IG5hbWUgKGUuZy4gXCJjbGlja1wiKS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGhhbmRsZSBFbGVtZW50IG9uIHdoaWNoIHRvIGF0dGFjaCBsaXN0ZW5lci5cbiAgICogQHJldHVybiB7b2JqZWN0fSBBbiBvYmplY3Qgd2l0aCBhIHJlbW92ZSBmdW5jdGlvbiB3aGljaCB3aWxsIGZvcmNlZnVsbHlcbiAgICogICAgICAgICAgICAgICAgICByZW1vdmUgdGhlIGxpc3RlbmVyLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHRyYXBDYXB0dXJlZEV2ZW50OiBmdW5jdGlvbih0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgaGFuZGxlKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBoYW5kbGU7XG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBFdmVudExpc3RlbmVyLmNhcHR1cmUoXG4gICAgICBlbGVtZW50LFxuICAgICAgaGFuZGxlckJhc2VOYW1lLFxuICAgICAgUmVhY3RFdmVudExpc3RlbmVyLmRpc3BhdGNoRXZlbnQuYmluZChudWxsLCB0b3BMZXZlbFR5cGUpXG4gICAgKTtcbiAgfSxcblxuICBtb25pdG9yU2Nyb2xsVmFsdWU6IGZ1bmN0aW9uKHJlZnJlc2gpIHtcbiAgICB2YXIgY2FsbGJhY2sgPSBzY3JvbGxWYWx1ZU1vbml0b3IuYmluZChudWxsLCByZWZyZXNoKTtcbiAgICBFdmVudExpc3RlbmVyLmxpc3Rlbih3aW5kb3csICdzY3JvbGwnLCBjYWxsYmFjayk7XG4gICAgRXZlbnRMaXN0ZW5lci5saXN0ZW4od2luZG93LCAncmVzaXplJywgY2FsbGJhY2spO1xuICB9LFxuXG4gIGRpc3BhdGNoRXZlbnQ6IGZ1bmN0aW9uKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcbiAgICBpZiAoIVJlYWN0RXZlbnRMaXN0ZW5lci5fZW5hYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBib29rS2VlcGluZyA9IFRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZy5nZXRQb29sZWQoXG4gICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICBuYXRpdmVFdmVudFxuICAgICk7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEV2ZW50IHF1ZXVlIGJlaW5nIHByb2Nlc3NlZCBpbiB0aGUgc2FtZSBjeWNsZSBhbGxvd3NcbiAgICAgIC8vIGBwcmV2ZW50RGVmYXVsdGAuXG4gICAgICBSZWFjdFVwZGF0ZXMuYmF0Y2hlZFVwZGF0ZXMoaGFuZGxlVG9wTGV2ZWxJbXBsLCBib29rS2VlcGluZyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIFRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZy5yZWxlYXNlKGJvb2tLZWVwaW5nKTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RFdmVudExpc3RlbmVyO1xuXG59LHtcIi4vRXZlbnRMaXN0ZW5lclwiOjg1LFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOjkwLFwiLi9PYmplY3QuYXNzaWduXCI6OTUsXCIuL1Bvb2xlZENsYXNzXCI6OTYsXCIuL1JlYWN0SW5zdGFuY2VIYW5kbGVzXCI6MTI5LFwiLi9SZWFjdE1vdW50XCI6MTMyLFwiLi9SZWFjdFVwZGF0ZXNcIjoxNDgsXCIuL2dldEV2ZW50VGFyZ2V0XCI6MTg3LFwiLi9nZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvblwiOjE5Mn1dLDEyNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RJbmplY3Rpb25cbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIERPTVByb3BlcnR5ID0gcmVxdWlyZShcIi4vRE9NUHJvcGVydHlcIik7XG52YXIgRXZlbnRQbHVnaW5IdWIgPSByZXF1aXJlKFwiLi9FdmVudFBsdWdpbkh1YlwiKTtcbnZhciBSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0Q29tcG9uZW50XCIpO1xudmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIik7XG52YXIgUmVhY3RFbXB0eUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RW1wdHlDb21wb25lbnRcIik7XG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcIi4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXCIpO1xudmFyIFJlYWN0TmF0aXZlQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3ROYXRpdmVDb21wb25lbnRcIik7XG52YXIgUmVhY3RQZXJmID0gcmVxdWlyZShcIi4vUmVhY3RQZXJmXCIpO1xudmFyIFJlYWN0Um9vdEluZGV4ID0gcmVxdWlyZShcIi4vUmVhY3RSb290SW5kZXhcIik7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZShcIi4vUmVhY3RVcGRhdGVzXCIpO1xuXG52YXIgUmVhY3RJbmplY3Rpb24gPSB7XG4gIENvbXBvbmVudDogUmVhY3RDb21wb25lbnQuaW5qZWN0aW9uLFxuICBDb21wb3NpdGVDb21wb25lbnQ6IFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50LmluamVjdGlvbixcbiAgRE9NUHJvcGVydHk6IERPTVByb3BlcnR5LmluamVjdGlvbixcbiAgRW1wdHlDb21wb25lbnQ6IFJlYWN0RW1wdHlDb21wb25lbnQuaW5qZWN0aW9uLFxuICBFdmVudFBsdWdpbkh1YjogRXZlbnRQbHVnaW5IdWIuaW5qZWN0aW9uLFxuICBFdmVudEVtaXR0ZXI6IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5pbmplY3Rpb24sXG4gIE5hdGl2ZUNvbXBvbmVudDogUmVhY3ROYXRpdmVDb21wb25lbnQuaW5qZWN0aW9uLFxuICBQZXJmOiBSZWFjdFBlcmYuaW5qZWN0aW9uLFxuICBSb290SW5kZXg6IFJlYWN0Um9vdEluZGV4LmluamVjdGlvbixcbiAgVXBkYXRlczogUmVhY3RVcGRhdGVzLmluamVjdGlvblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEluamVjdGlvbjtcblxufSx7XCIuL0RPTVByb3BlcnR5XCI6NzksXCIuL0V2ZW50UGx1Z2luSHViXCI6ODYsXCIuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlclwiOjk5LFwiLi9SZWFjdENvbXBvbmVudFwiOjEwMSxcIi4vUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIjoxMDMsXCIuL1JlYWN0RW1wdHlDb21wb25lbnRcIjoxMjMsXCIuL1JlYWN0TmF0aXZlQ29tcG9uZW50XCI6MTM1LFwiLi9SZWFjdFBlcmZcIjoxMzcsXCIuL1JlYWN0Um9vdEluZGV4XCI6MTQ0LFwiLi9SZWFjdFVwZGF0ZXNcIjoxNDh9XSwxMjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0SW5wdXRTZWxlY3Rpb25cbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIFJlYWN0RE9NU2VsZWN0aW9uID0gcmVxdWlyZShcIi4vUmVhY3RET01TZWxlY3Rpb25cIik7XG5cbnZhciBjb250YWluc05vZGUgPSByZXF1aXJlKFwiLi9jb250YWluc05vZGVcIik7XG52YXIgZm9jdXNOb2RlID0gcmVxdWlyZShcIi4vZm9jdXNOb2RlXCIpO1xudmFyIGdldEFjdGl2ZUVsZW1lbnQgPSByZXF1aXJlKFwiLi9nZXRBY3RpdmVFbGVtZW50XCIpO1xuXG5mdW5jdGlvbiBpc0luRG9jdW1lbnQobm9kZSkge1xuICByZXR1cm4gY29udGFpbnNOb2RlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgbm9kZSk7XG59XG5cbi8qKlxuICogQFJlYWN0SW5wdXRTZWxlY3Rpb246IFJlYWN0IGlucHV0IHNlbGVjdGlvbiBtb2R1bGUuIEJhc2VkIG9uIFNlbGVjdGlvbi5qcyxcbiAqIGJ1dCBtb2RpZmllZCB0byBiZSBzdWl0YWJsZSBmb3IgcmVhY3QgYW5kIGhhcyBhIGNvdXBsZSBvZiBidWcgZml4ZXMgKGRvZXNuJ3RcbiAqIGFzc3VtZSBidXR0b25zIGhhdmUgcmFuZ2Ugc2VsZWN0aW9ucyBhbGxvd2VkKS5cbiAqIElucHV0IHNlbGVjdGlvbiBtb2R1bGUgZm9yIFJlYWN0LlxuICovXG52YXIgUmVhY3RJbnB1dFNlbGVjdGlvbiA9IHtcblxuICBoYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXM6IGZ1bmN0aW9uKGVsZW0pIHtcbiAgICByZXR1cm4gZWxlbSAmJiAoXG4gICAgICAoZWxlbS5ub2RlTmFtZSA9PT0gJ0lOUFVUJyAmJiBlbGVtLnR5cGUgPT09ICd0ZXh0JykgfHxcbiAgICAgIGVsZW0ubm9kZU5hbWUgPT09ICdURVhUQVJFQScgfHxcbiAgICAgIGVsZW0uY29udGVudEVkaXRhYmxlID09PSAndHJ1ZSdcbiAgICApO1xuICB9LFxuXG4gIGdldFNlbGVjdGlvbkluZm9ybWF0aW9uOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZm9jdXNlZEVsZW0gPSBnZXRBY3RpdmVFbGVtZW50KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvY3VzZWRFbGVtOiBmb2N1c2VkRWxlbSxcbiAgICAgIHNlbGVjdGlvblJhbmdlOlxuICAgICAgICAgIFJlYWN0SW5wdXRTZWxlY3Rpb24uaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKGZvY3VzZWRFbGVtKSA/XG4gICAgICAgICAgUmVhY3RJbnB1dFNlbGVjdGlvbi5nZXRTZWxlY3Rpb24oZm9jdXNlZEVsZW0pIDpcbiAgICAgICAgICBudWxsXG4gICAgfTtcbiAgfSxcblxuICAvKipcbiAgICogQHJlc3RvcmVTZWxlY3Rpb246IElmIGFueSBzZWxlY3Rpb24gaW5mb3JtYXRpb24gd2FzIHBvdGVudGlhbGx5IGxvc3QsXG4gICAqIHJlc3RvcmUgaXQuIFRoaXMgaXMgdXNlZnVsIHdoZW4gcGVyZm9ybWluZyBvcGVyYXRpb25zIHRoYXQgY291bGQgcmVtb3ZlIGRvbVxuICAgKiBub2RlcyBhbmQgcGxhY2UgdGhlbSBiYWNrIGluLCByZXN1bHRpbmcgaW4gZm9jdXMgYmVpbmcgbG9zdC5cbiAgICovXG4gIHJlc3RvcmVTZWxlY3Rpb246IGZ1bmN0aW9uKHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24pIHtcbiAgICB2YXIgY3VyRm9jdXNlZEVsZW0gPSBnZXRBY3RpdmVFbGVtZW50KCk7XG4gICAgdmFyIHByaW9yRm9jdXNlZEVsZW0gPSBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLmZvY3VzZWRFbGVtO1xuICAgIHZhciBwcmlvclNlbGVjdGlvblJhbmdlID0gcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbi5zZWxlY3Rpb25SYW5nZTtcbiAgICBpZiAoY3VyRm9jdXNlZEVsZW0gIT09IHByaW9yRm9jdXNlZEVsZW0gJiZcbiAgICAgICAgaXNJbkRvY3VtZW50KHByaW9yRm9jdXNlZEVsZW0pKSB7XG4gICAgICBpZiAoUmVhY3RJbnB1dFNlbGVjdGlvbi5oYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMocHJpb3JGb2N1c2VkRWxlbSkpIHtcbiAgICAgICAgUmVhY3RJbnB1dFNlbGVjdGlvbi5zZXRTZWxlY3Rpb24oXG4gICAgICAgICAgcHJpb3JGb2N1c2VkRWxlbSxcbiAgICAgICAgICBwcmlvclNlbGVjdGlvblJhbmdlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBmb2N1c05vZGUocHJpb3JGb2N1c2VkRWxlbSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAZ2V0U2VsZWN0aW9uOiBHZXRzIHRoZSBzZWxlY3Rpb24gYm91bmRzIG9mIGEgZm9jdXNlZCB0ZXh0YXJlYSwgaW5wdXQgb3JcbiAgICogY29udGVudEVkaXRhYmxlIG5vZGUuXG4gICAqIC1AaW5wdXQ6IExvb2sgdXAgc2VsZWN0aW9uIGJvdW5kcyBvZiB0aGlzIGlucHV0XG4gICAqIC1AcmV0dXJuIHtzdGFydDogc2VsZWN0aW9uU3RhcnQsIGVuZDogc2VsZWN0aW9uRW5kfVxuICAgKi9cbiAgZ2V0U2VsZWN0aW9uOiBmdW5jdGlvbihpbnB1dCkge1xuICAgIHZhciBzZWxlY3Rpb247XG5cbiAgICBpZiAoJ3NlbGVjdGlvblN0YXJ0JyBpbiBpbnB1dCkge1xuICAgICAgLy8gTW9kZXJuIGJyb3dzZXIgd2l0aCBpbnB1dCBvciB0ZXh0YXJlYS5cbiAgICAgIHNlbGVjdGlvbiA9IHtcbiAgICAgICAgc3RhcnQ6IGlucHV0LnNlbGVjdGlvblN0YXJ0LFxuICAgICAgICBlbmQ6IGlucHV0LnNlbGVjdGlvbkVuZFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50LnNlbGVjdGlvbiAmJiBpbnB1dC5ub2RlTmFtZSA9PT0gJ0lOUFVUJykge1xuICAgICAgLy8gSUU4IGlucHV0LlxuICAgICAgdmFyIHJhbmdlID0gZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7XG4gICAgICAvLyBUaGVyZSBjYW4gb25seSBiZSBvbmUgc2VsZWN0aW9uIHBlciBkb2N1bWVudCBpbiBJRSwgc28gaXQgbXVzdFxuICAgICAgLy8gYmUgaW4gb3VyIGVsZW1lbnQuXG4gICAgICBpZiAocmFuZ2UucGFyZW50RWxlbWVudCgpID09PSBpbnB1dCkge1xuICAgICAgICBzZWxlY3Rpb24gPSB7XG4gICAgICAgICAgc3RhcnQ6IC1yYW5nZS5tb3ZlU3RhcnQoJ2NoYXJhY3RlcicsIC1pbnB1dC52YWx1ZS5sZW5ndGgpLFxuICAgICAgICAgIGVuZDogLXJhbmdlLm1vdmVFbmQoJ2NoYXJhY3RlcicsIC1pbnB1dC52YWx1ZS5sZW5ndGgpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENvbnRlbnQgZWRpdGFibGUgb3Igb2xkIElFIHRleHRhcmVhLlxuICAgICAgc2VsZWN0aW9uID0gUmVhY3RET01TZWxlY3Rpb24uZ2V0T2Zmc2V0cyhpbnB1dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGVjdGlvbiB8fCB7c3RhcnQ6IDAsIGVuZDogMH07XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBzZXRTZWxlY3Rpb246IFNldHMgdGhlIHNlbGVjdGlvbiBib3VuZHMgb2YgYSB0ZXh0YXJlYSBvciBpbnB1dCBhbmQgZm9jdXNlc1xuICAgKiB0aGUgaW5wdXQuXG4gICAqIC1AaW5wdXQgICAgIFNldCBzZWxlY3Rpb24gYm91bmRzIG9mIHRoaXMgaW5wdXQgb3IgdGV4dGFyZWFcbiAgICogLUBvZmZzZXRzICAgT2JqZWN0IG9mIHNhbWUgZm9ybSB0aGF0IGlzIHJldHVybmVkIGZyb20gZ2V0KlxuICAgKi9cbiAgc2V0U2VsZWN0aW9uOiBmdW5jdGlvbihpbnB1dCwgb2Zmc2V0cykge1xuICAgIHZhciBzdGFydCA9IG9mZnNldHMuc3RhcnQ7XG4gICAgdmFyIGVuZCA9IG9mZnNldHMuZW5kO1xuICAgIGlmICh0eXBlb2YgZW5kID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZW5kID0gc3RhcnQ7XG4gICAgfVxuXG4gICAgaWYgKCdzZWxlY3Rpb25TdGFydCcgaW4gaW5wdXQpIHtcbiAgICAgIGlucHV0LnNlbGVjdGlvblN0YXJ0ID0gc3RhcnQ7XG4gICAgICBpbnB1dC5zZWxlY3Rpb25FbmQgPSBNYXRoLm1pbihlbmQsIGlucHV0LnZhbHVlLmxlbmd0aCk7XG4gICAgfSBlbHNlIGlmIChkb2N1bWVudC5zZWxlY3Rpb24gJiYgaW5wdXQubm9kZU5hbWUgPT09ICdJTlBVVCcpIHtcbiAgICAgIHZhciByYW5nZSA9IGlucHV0LmNyZWF0ZVRleHRSYW5nZSgpO1xuICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XG4gICAgICByYW5nZS5tb3ZlU3RhcnQoJ2NoYXJhY3RlcicsIHN0YXJ0KTtcbiAgICAgIHJhbmdlLm1vdmVFbmQoJ2NoYXJhY3RlcicsIGVuZCAtIHN0YXJ0KTtcbiAgICAgIHJhbmdlLnNlbGVjdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBSZWFjdERPTVNlbGVjdGlvbi5zZXRPZmZzZXRzKGlucHV0LCBvZmZzZXRzKTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RJbnB1dFNlbGVjdGlvbjtcblxufSx7XCIuL1JlYWN0RE9NU2VsZWN0aW9uXCI6MTE1LFwiLi9jb250YWluc05vZGVcIjoxNzAsXCIuL2ZvY3VzTm9kZVwiOjE4MSxcIi4vZ2V0QWN0aXZlRWxlbWVudFwiOjE4M31dLDEyOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0SW5zdGFuY2VIYW5kbGVzXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgUmVhY3RSb290SW5kZXggPSByZXF1aXJlKFwiLi9SZWFjdFJvb3RJbmRleFwiKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxudmFyIFNFUEFSQVRPUiA9ICcuJztcbnZhciBTRVBBUkFUT1JfTEVOR1RIID0gU0VQQVJBVE9SLmxlbmd0aDtcblxuLyoqXG4gKiBNYXhpbXVtIGRlcHRoIG9mIHRyYXZlcnNhbHMgYmVmb3JlIHdlIGNvbnNpZGVyIHRoZSBwb3NzaWJpbGl0eSBvZiBhIGJhZCBJRC5cbiAqL1xudmFyIE1BWF9UUkVFX0RFUFRIID0gMTAwO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBET00gSUQgcHJlZml4IHRvIHVzZSB3aGVuIG1vdW50aW5nIFJlYWN0IGNvbXBvbmVudHMuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEEgdW5pcXVlIGludGVnZXJcbiAqIEByZXR1cm4ge3N0cmluZ30gUmVhY3Qgcm9vdCBJRC5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBnZXRSZWFjdFJvb3RJRFN0cmluZyhpbmRleCkge1xuICByZXR1cm4gU0VQQVJBVE9SICsgaW5kZXgudG9TdHJpbmcoMzYpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGNoYXJhY3RlciBpbiB0aGUgc3VwcGxpZWQgSUQgaXMgYSBzZXBhcmF0b3Igb3IgdGhlIGVuZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgQSBSZWFjdCBET00gSUQuXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggb2YgdGhlIGNoYXJhY3RlciB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGNoYXJhY3RlciBpcyBhIHNlcGFyYXRvciBvciBlbmQgb2YgdGhlIElELlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gaXNCb3VuZGFyeShpZCwgaW5kZXgpIHtcbiAgcmV0dXJuIGlkLmNoYXJBdChpbmRleCkgPT09IFNFUEFSQVRPUiB8fCBpbmRleCA9PT0gaWQubGVuZ3RoO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgc3VwcGxpZWQgc3RyaW5nIGlzIGEgdmFsaWQgUmVhY3QgRE9NIElELlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBIFJlYWN0IERPTSBJRCwgbWF5YmUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBzdHJpbmcgaXMgYSB2YWxpZCBSZWFjdCBET00gSUQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBpc1ZhbGlkSUQoaWQpIHtcbiAgcmV0dXJuIGlkID09PSAnJyB8fCAoXG4gICAgaWQuY2hhckF0KDApID09PSBTRVBBUkFUT1IgJiYgaWQuY2hhckF0KGlkLmxlbmd0aCAtIDEpICE9PSBTRVBBUkFUT1JcbiAgKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGZpcnN0IElEIGlzIGFuIGFuY2VzdG9yIG9mIG9yIGVxdWFsIHRvIHRoZSBzZWNvbmQgSUQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGFuY2VzdG9ySURcbiAqIEBwYXJhbSB7c3RyaW5nfSBkZXNjZW5kYW50SURcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYGFuY2VzdG9ySURgIGlzIGFuIGFuY2VzdG9yIG9mIGBkZXNjZW5kYW50SURgLlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGlzQW5jZXN0b3JJRE9mKGFuY2VzdG9ySUQsIGRlc2NlbmRhbnRJRCkge1xuICByZXR1cm4gKFxuICAgIGRlc2NlbmRhbnRJRC5pbmRleE9mKGFuY2VzdG9ySUQpID09PSAwICYmXG4gICAgaXNCb3VuZGFyeShkZXNjZW5kYW50SUQsIGFuY2VzdG9ySUQubGVuZ3RoKVxuICApO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIHBhcmVudCBJRCBvZiB0aGUgc3VwcGxpZWQgUmVhY3QgRE9NIElELCBgaWRgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiBhIGNvbXBvbmVudC5cbiAqIEByZXR1cm4ge3N0cmluZ30gSUQgb2YgdGhlIHBhcmVudCwgb3IgYW4gZW1wdHkgc3RyaW5nLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZ2V0UGFyZW50SUQoaWQpIHtcbiAgcmV0dXJuIGlkID8gaWQuc3Vic3RyKDAsIGlkLmxhc3RJbmRleE9mKFNFUEFSQVRPUikpIDogJyc7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbmV4dCBET00gSUQgb24gdGhlIHRyZWUgcGF0aCBmcm9tIHRoZSBzdXBwbGllZCBgYW5jZXN0b3JJRGAgdG8gdGhlXG4gKiBzdXBwbGllZCBgZGVzdGluYXRpb25JRGAuIElmIHRoZXkgYXJlIGVxdWFsLCB0aGUgSUQgaXMgcmV0dXJuZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGFuY2VzdG9ySUQgSUQgb2YgYW4gYW5jZXN0b3Igbm9kZSBvZiBgZGVzdGluYXRpb25JRGAuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGVzdGluYXRpb25JRCBJRCBvZiB0aGUgZGVzdGluYXRpb24gbm9kZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gTmV4dCBJRCBvbiB0aGUgcGF0aCBmcm9tIGBhbmNlc3RvcklEYCB0byBgZGVzdGluYXRpb25JRGAuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBnZXROZXh0RGVzY2VuZGFudElEKGFuY2VzdG9ySUQsIGRlc3RpbmF0aW9uSUQpIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBpc1ZhbGlkSUQoYW5jZXN0b3JJRCkgJiYgaXNWYWxpZElEKGRlc3RpbmF0aW9uSUQpLFxuICAgICdnZXROZXh0RGVzY2VuZGFudElEKCVzLCAlcyk6IFJlY2VpdmVkIGFuIGludmFsaWQgUmVhY3QgRE9NIElELicsXG4gICAgYW5jZXN0b3JJRCxcbiAgICBkZXN0aW5hdGlvbklEXG4gICkgOiBpbnZhcmlhbnQoaXNWYWxpZElEKGFuY2VzdG9ySUQpICYmIGlzVmFsaWRJRChkZXN0aW5hdGlvbklEKSkpO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIGlzQW5jZXN0b3JJRE9mKGFuY2VzdG9ySUQsIGRlc3RpbmF0aW9uSUQpLFxuICAgICdnZXROZXh0RGVzY2VuZGFudElEKC4uLik6IFJlYWN0IGhhcyBtYWRlIGFuIGludmFsaWQgYXNzdW1wdGlvbiBhYm91dCAnICtcbiAgICAndGhlIERPTSBoaWVyYXJjaHkuIEV4cGVjdGVkIGAlc2AgdG8gYmUgYW4gYW5jZXN0b3Igb2YgYCVzYC4nLFxuICAgIGFuY2VzdG9ySUQsXG4gICAgZGVzdGluYXRpb25JRFxuICApIDogaW52YXJpYW50KGlzQW5jZXN0b3JJRE9mKGFuY2VzdG9ySUQsIGRlc3RpbmF0aW9uSUQpKSk7XG4gIGlmIChhbmNlc3RvcklEID09PSBkZXN0aW5hdGlvbklEKSB7XG4gICAgcmV0dXJuIGFuY2VzdG9ySUQ7XG4gIH1cbiAgLy8gU2tpcCBvdmVyIHRoZSBhbmNlc3RvciBhbmQgdGhlIGltbWVkaWF0ZSBzZXBhcmF0b3IuIFRyYXZlcnNlIHVudGlsIHdlIGhpdFxuICAvLyBhbm90aGVyIHNlcGFyYXRvciBvciB3ZSByZWFjaCB0aGUgZW5kIG9mIGBkZXN0aW5hdGlvbklEYC5cbiAgdmFyIHN0YXJ0ID0gYW5jZXN0b3JJRC5sZW5ndGggKyBTRVBBUkFUT1JfTEVOR1RIO1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBkZXN0aW5hdGlvbklELmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGlzQm91bmRhcnkoZGVzdGluYXRpb25JRCwgaSkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVzdGluYXRpb25JRC5zdWJzdHIoMCwgaSk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbmVhcmVzdCBjb21tb24gYW5jZXN0b3IgSUQgb2YgdHdvIElEcy5cbiAqXG4gKiBVc2luZyB0aGlzIElEIHNjaGVtZSwgdGhlIG5lYXJlc3QgY29tbW9uIGFuY2VzdG9yIElEIGlzIHRoZSBsb25nZXN0IGNvbW1vblxuICogcHJlZml4IG9mIHRoZSB0d28gSURzIHRoYXQgaW1tZWRpYXRlbHkgcHJlY2VkZWQgYSBcIm1hcmtlclwiIGluIGJvdGggc3RyaW5ncy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gb25lSURcbiAqIEBwYXJhbSB7c3RyaW5nfSB0d29JRFxuICogQHJldHVybiB7c3RyaW5nfSBOZWFyZXN0IGNvbW1vbiBhbmNlc3RvciBJRCwgb3IgdGhlIGVtcHR5IHN0cmluZyBpZiBub25lLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZ2V0Rmlyc3RDb21tb25BbmNlc3RvcklEKG9uZUlELCB0d29JRCkge1xuICB2YXIgbWluTGVuZ3RoID0gTWF0aC5taW4ob25lSUQubGVuZ3RoLCB0d29JRC5sZW5ndGgpO1xuICBpZiAobWluTGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIHZhciBsYXN0Q29tbW9uTWFya2VySW5kZXggPSAwO1xuICAvLyBVc2UgYDw9YCB0byB0cmF2ZXJzZSB1bnRpbCB0aGUgXCJFT0xcIiBvZiB0aGUgc2hvcnRlciBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDw9IG1pbkxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGlzQm91bmRhcnkob25lSUQsIGkpICYmIGlzQm91bmRhcnkodHdvSUQsIGkpKSB7XG4gICAgICBsYXN0Q29tbW9uTWFya2VySW5kZXggPSBpO1xuICAgIH0gZWxzZSBpZiAob25lSUQuY2hhckF0KGkpICE9PSB0d29JRC5jaGFyQXQoaSkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICB2YXIgbG9uZ2VzdENvbW1vbklEID0gb25lSUQuc3Vic3RyKDAsIGxhc3RDb21tb25NYXJrZXJJbmRleCk7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgaXNWYWxpZElEKGxvbmdlc3RDb21tb25JRCksXG4gICAgJ2dldEZpcnN0Q29tbW9uQW5jZXN0b3JJRCglcywgJXMpOiBFeHBlY3RlZCBhIHZhbGlkIFJlYWN0IERPTSBJRDogJXMnLFxuICAgIG9uZUlELFxuICAgIHR3b0lELFxuICAgIGxvbmdlc3RDb21tb25JRFxuICApIDogaW52YXJpYW50KGlzVmFsaWRJRChsb25nZXN0Q29tbW9uSUQpKSk7XG4gIHJldHVybiBsb25nZXN0Q29tbW9uSUQ7XG59XG5cbi8qKlxuICogVHJhdmVyc2VzIHRoZSBwYXJlbnQgcGF0aCBiZXR3ZWVuIHR3byBJRHMgKGVpdGhlciB1cCBvciBkb3duKS4gVGhlIElEcyBtdXN0XG4gKiBub3QgYmUgdGhlIHNhbWUsIGFuZCB0aGVyZSBtdXN0IGV4aXN0IGEgcGFyZW50IHBhdGggYmV0d2VlbiB0aGVtLiBJZiB0aGVcbiAqIGNhbGxiYWNrIHJldHVybnMgYGZhbHNlYCwgdHJhdmVyc2FsIGlzIHN0b3BwZWQuXG4gKlxuICogQHBhcmFtIHs/c3RyaW5nfSBzdGFydCBJRCBhdCB3aGljaCB0byBzdGFydCB0cmF2ZXJzYWwuXG4gKiBAcGFyYW0gez9zdHJpbmd9IHN0b3AgSUQgYXQgd2hpY2ggdG8gZW5kIHRyYXZlcnNhbC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiIENhbGxiYWNrIHRvIGludm9rZSBlYWNoIElEIHdpdGguXG4gKiBAcGFyYW0gez9ib29sZWFufSBza2lwRmlyc3QgV2hldGhlciBvciBub3QgdG8gc2tpcCB0aGUgZmlyc3Qgbm9kZS5cbiAqIEBwYXJhbSB7P2Jvb2xlYW59IHNraXBMYXN0IFdoZXRoZXIgb3Igbm90IHRvIHNraXAgdGhlIGxhc3Qgbm9kZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlUGFyZW50UGF0aChzdGFydCwgc3RvcCwgY2IsIGFyZywgc2tpcEZpcnN0LCBza2lwTGFzdCkge1xuICBzdGFydCA9IHN0YXJ0IHx8ICcnO1xuICBzdG9wID0gc3RvcCB8fCAnJztcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBzdGFydCAhPT0gc3RvcCxcbiAgICAndHJhdmVyc2VQYXJlbnRQYXRoKC4uLik6IENhbm5vdCB0cmF2ZXJzZSBmcm9tIGFuZCB0byB0aGUgc2FtZSBJRCwgYCVzYC4nLFxuICAgIHN0YXJ0XG4gICkgOiBpbnZhcmlhbnQoc3RhcnQgIT09IHN0b3ApKTtcbiAgdmFyIHRyYXZlcnNlVXAgPSBpc0FuY2VzdG9ySURPZihzdG9wLCBzdGFydCk7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgdHJhdmVyc2VVcCB8fCBpc0FuY2VzdG9ySURPZihzdGFydCwgc3RvcCksXG4gICAgJ3RyYXZlcnNlUGFyZW50UGF0aCglcywgJXMsIC4uLik6IENhbm5vdCB0cmF2ZXJzZSBmcm9tIHR3byBJRHMgdGhhdCBkbyAnICtcbiAgICAnbm90IGhhdmUgYSBwYXJlbnQgcGF0aC4nLFxuICAgIHN0YXJ0LFxuICAgIHN0b3BcbiAgKSA6IGludmFyaWFudCh0cmF2ZXJzZVVwIHx8IGlzQW5jZXN0b3JJRE9mKHN0YXJ0LCBzdG9wKSkpO1xuICAvLyBUcmF2ZXJzZSBmcm9tIGBzdGFydGAgdG8gYHN0b3BgIG9uZSBkZXB0aCBhdCBhIHRpbWUuXG4gIHZhciBkZXB0aCA9IDA7XG4gIHZhciB0cmF2ZXJzZSA9IHRyYXZlcnNlVXAgPyBnZXRQYXJlbnRJRCA6IGdldE5leHREZXNjZW5kYW50SUQ7XG4gIGZvciAodmFyIGlkID0gc3RhcnQ7IC8qIHVudGlsIGJyZWFrICovOyBpZCA9IHRyYXZlcnNlKGlkLCBzdG9wKSkge1xuICAgIHZhciByZXQ7XG4gICAgaWYgKCghc2tpcEZpcnN0IHx8IGlkICE9PSBzdGFydCkgJiYgKCFza2lwTGFzdCB8fCBpZCAhPT0gc3RvcCkpIHtcbiAgICAgIHJldCA9IGNiKGlkLCB0cmF2ZXJzZVVwLCBhcmcpO1xuICAgIH1cbiAgICBpZiAocmV0ID09PSBmYWxzZSB8fCBpZCA9PT0gc3RvcCkge1xuICAgICAgLy8gT25seSBicmVhayAvL2FmdGVyLy8gdmlzaXRpbmcgYHN0b3BgLlxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBkZXB0aCsrIDwgTUFYX1RSRUVfREVQVEgsXG4gICAgICAndHJhdmVyc2VQYXJlbnRQYXRoKCVzLCAlcywgLi4uKTogRGV0ZWN0ZWQgYW4gaW5maW5pdGUgbG9vcCB3aGlsZSAnICtcbiAgICAgICd0cmF2ZXJzaW5nIHRoZSBSZWFjdCBET00gSUQgdHJlZS4gVGhpcyBtYXkgYmUgZHVlIHRvIG1hbGZvcm1lZCBJRHM6ICVzJyxcbiAgICAgIHN0YXJ0LCBzdG9wXG4gICAgKSA6IGludmFyaWFudChkZXB0aCsrIDwgTUFYX1RSRUVfREVQVEgpKTtcbiAgfVxufVxuXG4vKipcbiAqIE1hbmFnZXMgdGhlIElEcyBhc3NpZ25lZCB0byBET00gcmVwcmVzZW50YXRpb25zIG9mIFJlYWN0IGNvbXBvbmVudHMuIFRoaXNcbiAqIHVzZXMgYSBzcGVjaWZpYyBzY2hlbWUgaW4gb3JkZXIgdG8gdHJhdmVyc2UgdGhlIERPTSBlZmZpY2llbnRseSAoZS5nLiBpblxuICogb3JkZXIgdG8gc2ltdWxhdGUgZXZlbnRzKS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIFJlYWN0SW5zdGFuY2VIYW5kbGVzID0ge1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgUmVhY3Qgcm9vdCBJRFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IEEgUmVhY3Qgcm9vdCBJRC5cbiAgICovXG4gIGNyZWF0ZVJlYWN0Um9vdElEOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZ2V0UmVhY3RSb290SURTdHJpbmcoUmVhY3RSb290SW5kZXguY3JlYXRlUmVhY3RSb290SW5kZXgoKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgYSBSZWFjdCBJRCBieSBqb2luaW5nIGEgcm9vdCBJRCB3aXRoIGEgbmFtZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJvb3RJRCBSb290IElEIG9mIGEgcGFyZW50IGNvbXBvbmVudC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQSBjb21wb25lbnQncyBuYW1lIChhcyBmbGF0dGVuZWQgY2hpbGRyZW4pLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IEEgUmVhY3QgSUQuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY3JlYXRlUmVhY3RJRDogZnVuY3Rpb24ocm9vdElELCBuYW1lKSB7XG4gICAgcmV0dXJuIHJvb3RJRCArIG5hbWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIERPTSBJRCBvZiB0aGUgUmVhY3QgY29tcG9uZW50IHRoYXQgaXMgdGhlIHJvb3Qgb2YgdGhlIHRyZWUgdGhhdFxuICAgKiBjb250YWlucyB0aGUgUmVhY3QgY29tcG9uZW50IHdpdGggdGhlIHN1cHBsaWVkIERPTSBJRC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIERPTSBJRCBvZiBhIFJlYWN0IGNvbXBvbmVudC5cbiAgICogQHJldHVybiB7P3N0cmluZ30gRE9NIElEIG9mIHRoZSBSZWFjdCBjb21wb25lbnQgdGhhdCBpcyB0aGUgcm9vdC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBnZXRSZWFjdFJvb3RJREZyb21Ob2RlSUQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgaWYgKGlkICYmIGlkLmNoYXJBdCgwKSA9PT0gU0VQQVJBVE9SICYmIGlkLmxlbmd0aCA+IDEpIHtcbiAgICAgIHZhciBpbmRleCA9IGlkLmluZGV4T2YoU0VQQVJBVE9SLCAxKTtcbiAgICAgIHJldHVybiBpbmRleCA+IC0xID8gaWQuc3Vic3RyKDAsIGluZGV4KSA6IGlkO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogVHJhdmVyc2VzIHRoZSBJRCBoaWVyYXJjaHkgYW5kIGludm9rZXMgdGhlIHN1cHBsaWVkIGBjYmAgb24gYW55IElEcyB0aGF0XG4gICAqIHNob3VsZCB3b3VsZCByZWNlaXZlIGEgYG1vdXNlRW50ZXJgIG9yIGBtb3VzZUxlYXZlYCBldmVudC5cbiAgICpcbiAgICogTk9URTogRG9lcyBub3QgaW52b2tlIHRoZSBjYWxsYmFjayBvbiB0aGUgbmVhcmVzdCBjb21tb24gYW5jZXN0b3IgYmVjYXVzZVxuICAgKiBub3RoaW5nIFwiZW50ZXJlZFwiIG9yIFwibGVmdFwiIHRoYXQgZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxlYXZlSUQgSUQgYmVpbmcgbGVmdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGVudGVySUQgSUQgYmVpbmcgZW50ZXJlZC5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2IgQ2FsbGJhY2sgdG8gaW52b2tlIG9uIGVhY2ggZW50ZXJlZC9sZWZ0IElELlxuICAgKiBAcGFyYW0geyp9IHVwQXJnIEFyZ3VtZW50IHRvIGludm9rZSB0aGUgY2FsbGJhY2sgd2l0aCBvbiBsZWZ0IElEcy5cbiAgICogQHBhcmFtIHsqfSBkb3duQXJnIEFyZ3VtZW50IHRvIGludm9rZSB0aGUgY2FsbGJhY2sgd2l0aCBvbiBlbnRlcmVkIElEcy5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB0cmF2ZXJzZUVudGVyTGVhdmU6IGZ1bmN0aW9uKGxlYXZlSUQsIGVudGVySUQsIGNiLCB1cEFyZywgZG93bkFyZykge1xuICAgIHZhciBhbmNlc3RvcklEID0gZ2V0Rmlyc3RDb21tb25BbmNlc3RvcklEKGxlYXZlSUQsIGVudGVySUQpO1xuICAgIGlmIChhbmNlc3RvcklEICE9PSBsZWF2ZUlEKSB7XG4gICAgICB0cmF2ZXJzZVBhcmVudFBhdGgobGVhdmVJRCwgYW5jZXN0b3JJRCwgY2IsIHVwQXJnLCBmYWxzZSwgdHJ1ZSk7XG4gICAgfVxuICAgIGlmIChhbmNlc3RvcklEICE9PSBlbnRlcklEKSB7XG4gICAgICB0cmF2ZXJzZVBhcmVudFBhdGgoYW5jZXN0b3JJRCwgZW50ZXJJRCwgY2IsIGRvd25BcmcsIHRydWUsIGZhbHNlKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNpbXVsYXRlcyB0aGUgdHJhdmVyc2FsIG9mIGEgdHdvLXBoYXNlLCBjYXB0dXJlL2J1YmJsZSBldmVudCBkaXNwYXRjaC5cbiAgICpcbiAgICogTk9URTogVGhpcyB0cmF2ZXJzYWwgaGFwcGVucyBvbiBJRHMgd2l0aG91dCB0b3VjaGluZyB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0SUQgSUQgb2YgdGhlIHRhcmdldCBub2RlLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYiBDYWxsYmFjayB0byBpbnZva2UuXG4gICAqIEBwYXJhbSB7Kn0gYXJnIEFyZ3VtZW50IHRvIGludm9rZSB0aGUgY2FsbGJhY2sgd2l0aC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB0cmF2ZXJzZVR3b1BoYXNlOiBmdW5jdGlvbih0YXJnZXRJRCwgY2IsIGFyZykge1xuICAgIGlmICh0YXJnZXRJRCkge1xuICAgICAgdHJhdmVyc2VQYXJlbnRQYXRoKCcnLCB0YXJnZXRJRCwgY2IsIGFyZywgdHJ1ZSwgZmFsc2UpO1xuICAgICAgdHJhdmVyc2VQYXJlbnRQYXRoKHRhcmdldElELCAnJywgY2IsIGFyZywgZmFsc2UsIHRydWUpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogVHJhdmVyc2UgYSBub2RlIElELCBjYWxsaW5nIHRoZSBzdXBwbGllZCBgY2JgIGZvciBlYWNoIGFuY2VzdG9yIElELiBGb3JcbiAgICogZXhhbXBsZSwgcGFzc2luZyBgLjAuJHJvdy0wLjFgIHdvdWxkIHJlc3VsdCBpbiBgY2JgIGdldHRpbmcgY2FsbGVkXG4gICAqIHdpdGggYC4wYCwgYC4wLiRyb3ctMGAsIGFuZCBgLjAuJHJvdy0wLjFgLlxuICAgKlxuICAgKiBOT1RFOiBUaGlzIHRyYXZlcnNhbCBoYXBwZW5zIG9uIElEcyB3aXRob3V0IHRvdWNoaW5nIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXRJRCBJRCBvZiB0aGUgdGFyZ2V0IG5vZGUuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiIENhbGxiYWNrIHRvIGludm9rZS5cbiAgICogQHBhcmFtIHsqfSBhcmcgQXJndW1lbnQgdG8gaW52b2tlIHRoZSBjYWxsYmFjayB3aXRoLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHRyYXZlcnNlQW5jZXN0b3JzOiBmdW5jdGlvbih0YXJnZXRJRCwgY2IsIGFyZykge1xuICAgIHRyYXZlcnNlUGFyZW50UGF0aCgnJywgdGFyZ2V0SUQsIGNiLCBhcmcsIHRydWUsIGZhbHNlKTtcbiAgfSxcblxuICAvKipcbiAgICogRXhwb3NlZCBmb3IgdW5pdCB0ZXN0aW5nLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldEZpcnN0Q29tbW9uQW5jZXN0b3JJRDogZ2V0Rmlyc3RDb21tb25BbmNlc3RvcklELFxuXG4gIC8qKlxuICAgKiBFeHBvc2VkIGZvciB1bml0IHRlc3RpbmcuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0TmV4dERlc2NlbmRhbnRJRDogZ2V0TmV4dERlc2NlbmRhbnRJRCxcblxuICBpc0FuY2VzdG9ySURPZjogaXNBbmNlc3RvcklET2YsXG5cbiAgU0VQQVJBVE9SOiBTRVBBUkFUT1JcblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEluc3RhbmNlSGFuZGxlcztcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vUmVhY3RSb290SW5kZXhcIjoxNDQsXCIuL2ludmFyaWFudFwiOjE5NixcIl9wcm9jZXNzXCI6MTl9XSwxMzA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RMZWdhY3lFbGVtZW50XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoXCIuL1JlYWN0Q3VycmVudE93bmVyXCIpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xudmFyIG1vbml0b3JDb2RlVXNlID0gcmVxdWlyZShcIi4vbW9uaXRvckNvZGVVc2VcIik7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbnZhciBsZWdhY3lGYWN0b3J5TG9ncyA9IHt9O1xuZnVuY3Rpb24gd2FybkZvckxlZ2FjeUZhY3RvcnlDYWxsKCkge1xuICBpZiAoIVJlYWN0TGVnYWN5RWxlbWVudEZhY3RvcnkuX2lzTGVnYWN5Q2FsbFdhcm5pbmdFbmFibGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBvd25lciA9IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQ7XG4gIHZhciBuYW1lID0gb3duZXIgJiYgb3duZXIuY29uc3RydWN0b3IgPyBvd25lci5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSA6ICcnO1xuICBpZiAoIW5hbWUpIHtcbiAgICBuYW1lID0gJ1NvbWV0aGluZyc7XG4gIH1cbiAgaWYgKGxlZ2FjeUZhY3RvcnlMb2dzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxlZ2FjeUZhY3RvcnlMb2dzW25hbWVdID0gdHJ1ZTtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgZmFsc2UsXG4gICAgbmFtZSArICcgaXMgY2FsbGluZyBhIFJlYWN0IGNvbXBvbmVudCBkaXJlY3RseS4gJyArXG4gICAgJ1VzZSBhIGZhY3Rvcnkgb3IgSlNYIGluc3RlYWQuIFNlZTogaHR0cDovL2ZiLm1lL3JlYWN0LWxlZ2FjeWZhY3RvcnknXG4gICkgOiBudWxsKTtcbiAgbW9uaXRvckNvZGVVc2UoJ3JlYWN0X2xlZ2FjeV9mYWN0b3J5X2NhbGwnLCB7IHZlcnNpb246IDMsIG5hbWU6IG5hbWUgfSk7XG59XG5cbmZ1bmN0aW9uIHdhcm5Gb3JQbGFpbkZ1bmN0aW9uVHlwZSh0eXBlKSB7XG4gIHZhciBpc1JlYWN0Q2xhc3MgPVxuICAgIHR5cGUucHJvdG90eXBlICYmXG4gICAgdHlwZW9mIHR5cGUucHJvdG90eXBlLm1vdW50Q29tcG9uZW50ID09PSAnZnVuY3Rpb24nICYmXG4gICAgdHlwZW9mIHR5cGUucHJvdG90eXBlLnJlY2VpdmVDb21wb25lbnQgPT09ICdmdW5jdGlvbic7XG4gIGlmIChpc1JlYWN0Q2xhc3MpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgIGZhbHNlLFxuICAgICAgJ0RpZCBub3QgZXhwZWN0IHRvIGdldCBhIFJlYWN0IGNsYXNzIGhlcmUuIFVzZSBgQ29tcG9uZW50YCBpbnN0ZWFkICcgK1xuICAgICAgJ29mIGBDb21wb25lbnQudHlwZWAgb3IgYHRoaXMuY29uc3RydWN0b3JgLidcbiAgICApIDogbnVsbCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCF0eXBlLl9yZWFjdFdhcm5lZEZvclRoaXNUeXBlKSB7XG4gICAgICB0cnkge1xuICAgICAgICB0eXBlLl9yZWFjdFdhcm5lZEZvclRoaXNUeXBlID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgLy8ganVzdCBpbmNhc2UgdGhpcyBpcyBhIGZyb3plbiBvYmplY3Qgb3Igc29tZSBzcGVjaWFsIG9iamVjdFxuICAgICAgfVxuICAgICAgbW9uaXRvckNvZGVVc2UoXG4gICAgICAgICdyZWFjdF9ub25fY29tcG9uZW50X2luX2pzeCcsXG4gICAgICAgIHsgdmVyc2lvbjogMywgbmFtZTogdHlwZS5uYW1lIH1cbiAgICAgICk7XG4gICAgfVxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgZmFsc2UsXG4gICAgICAnVGhpcyBKU1ggdXNlcyBhIHBsYWluIGZ1bmN0aW9uLiBPbmx5IFJlYWN0IGNvbXBvbmVudHMgYXJlICcgK1xuICAgICAgJ3ZhbGlkIGluIFJlYWN0XFwncyBKU1ggdHJhbnNmb3JtLidcbiAgICApIDogbnVsbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gd2FybkZvck5vbkxlZ2FjeUZhY3RvcnkodHlwZSkge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICBmYWxzZSxcbiAgICAnRG8gbm90IHBhc3MgUmVhY3QuRE9NLicgKyB0eXBlLnR5cGUgKyAnIHRvIEpTWCBvciBjcmVhdGVGYWN0b3J5LiAnICtcbiAgICAnVXNlIHRoZSBzdHJpbmcgXCInICsgdHlwZS50eXBlICsgJ1wiIGluc3RlYWQuJ1xuICApIDogbnVsbCk7XG59XG5cbi8qKlxuICogVHJhbnNmZXIgc3RhdGljIHByb3BlcnRpZXMgZnJvbSB0aGUgc291cmNlIHRvIHRoZSB0YXJnZXQuIEZ1bmN0aW9ucyBhcmVcbiAqIHJlYm91bmQgdG8gaGF2ZSB0aGlzIHJlZmxlY3QgdGhlIG9yaWdpbmFsIHNvdXJjZS5cbiAqL1xuZnVuY3Rpb24gcHJveHlTdGF0aWNNZXRob2RzKHRhcmdldCwgc291cmNlKSB7XG4gIGlmICh0eXBlb2Ygc291cmNlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVtrZXldO1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgYm91bmQgPSB2YWx1ZS5iaW5kKHNvdXJjZSk7XG4gICAgICAgIC8vIENvcHkgYW55IHByb3BlcnRpZXMgZGVmaW5lZCBvbiB0aGUgZnVuY3Rpb24sIHN1Y2ggYXMgYGlzUmVxdWlyZWRgIG9uXG4gICAgICAgIC8vIGEgUHJvcFR5cGVzIHZhbGlkYXRvci5cbiAgICAgICAgZm9yICh2YXIgayBpbiB2YWx1ZSkge1xuICAgICAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgYm91bmRba10gPSB2YWx1ZVtrXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0W2tleV0gPSBib3VuZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIFdlIHVzZSBhbiBvYmplY3QgaW5zdGVhZCBvZiBhIGJvb2xlYW4gYmVjYXVzZSBib29sZWFucyBhcmUgaWdub3JlZCBieSBvdXJcbi8vIG1vY2tpbmcgbGlicmFyaWVzIHdoZW4gdGhlc2UgZmFjdG9yaWVzIGdldHMgbW9ja2VkLlxudmFyIExFR0FDWV9NQVJLRVIgPSB7fTtcbnZhciBOT05fTEVHQUNZX01BUktFUiA9IHt9O1xuXG52YXIgUmVhY3RMZWdhY3lFbGVtZW50RmFjdG9yeSA9IHt9O1xuXG5SZWFjdExlZ2FjeUVsZW1lbnRGYWN0b3J5LndyYXBDcmVhdGVGYWN0b3J5ID0gZnVuY3Rpb24oY3JlYXRlRmFjdG9yeSkge1xuICB2YXIgbGVnYWN5Q3JlYXRlRmFjdG9yeSA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICBpZiAodHlwZW9mIHR5cGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIE5vbi1mdW5jdGlvbiB0eXBlcyBjYW5ub3QgYmUgbGVnYWN5IGZhY3Rvcmllc1xuICAgICAgcmV0dXJuIGNyZWF0ZUZhY3RvcnkodHlwZSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGUuaXNSZWFjdE5vbkxlZ2FjeUZhY3RvcnkpIHtcbiAgICAgIC8vIFRoaXMgaXMgcHJvYmFibHkgYSBmYWN0b3J5IGNyZWF0ZWQgYnkgUmVhY3RET00gd2UgdW53cmFwIGl0IHRvIGdldCB0b1xuICAgICAgLy8gdGhlIHVuZGVybHlpbmcgc3RyaW5nIHR5cGUuIEl0IHNob3VsZG4ndCBoYXZlIGJlZW4gcGFzc2VkIGhlcmUgc28gd2VcbiAgICAgIC8vIHdhcm4uXG4gICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgIHdhcm5Gb3JOb25MZWdhY3lGYWN0b3J5KHR5cGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZUZhY3RvcnkodHlwZS50eXBlKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZS5pc1JlYWN0TGVnYWN5RmFjdG9yeSkge1xuICAgICAgLy8gVGhpcyBpcyBwcm9iYWJseSBhIGxlZ2FjeSBmYWN0b3J5IGNyZWF0ZWQgYnkgUmVhY3RDb21wb3NpdGVDb21wb25lbnQuXG4gICAgICAvLyBXZSB1bndyYXAgaXQgdG8gZ2V0IHRvIHRoZSB1bmRlcmx5aW5nIGNsYXNzLlxuICAgICAgcmV0dXJuIGNyZWF0ZUZhY3RvcnkodHlwZS50eXBlKTtcbiAgICB9XG5cbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICB3YXJuRm9yUGxhaW5GdW5jdGlvblR5cGUodHlwZSk7XG4gICAgfVxuXG4gICAgLy8gVW5sZXNzIGl0J3MgYSBsZWdhY3kgZmFjdG9yeSwgdGhlbiB0aGlzIGlzIHByb2JhYmx5IGEgcGxhaW4gZnVuY3Rpb24sXG4gICAgLy8gdGhhdCBpcyBleHBlY3RpbmcgdG8gYmUgaW52b2tlZCBieSBKU1guIFdlIGNhbiBqdXN0IHJldHVybiBpdCBhcyBpcy5cbiAgICByZXR1cm4gdHlwZTtcbiAgfTtcbiAgcmV0dXJuIGxlZ2FjeUNyZWF0ZUZhY3Rvcnk7XG59O1xuXG5SZWFjdExlZ2FjeUVsZW1lbnRGYWN0b3J5LndyYXBDcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24oY3JlYXRlRWxlbWVudCkge1xuICB2YXIgbGVnYWN5Q3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uKHR5cGUsIHByb3BzLCBjaGlsZHJlbikge1xuICAgIGlmICh0eXBlb2YgdHlwZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gTm9uLWZ1bmN0aW9uIHR5cGVzIGNhbm5vdCBiZSBsZWdhY3kgZmFjdG9yaWVzXG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIHZhciBhcmdzO1xuXG4gICAgaWYgKHR5cGUuaXNSZWFjdE5vbkxlZ2FjeUZhY3RvcnkpIHtcbiAgICAgIC8vIFRoaXMgaXMgcHJvYmFibHkgYSBmYWN0b3J5IGNyZWF0ZWQgYnkgUmVhY3RET00gd2UgdW53cmFwIGl0IHRvIGdldCB0b1xuICAgICAgLy8gdGhlIHVuZGVybHlpbmcgc3RyaW5nIHR5cGUuIEl0IHNob3VsZG4ndCBoYXZlIGJlZW4gcGFzc2VkIGhlcmUgc28gd2VcbiAgICAgIC8vIHdhcm4uXG4gICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgIHdhcm5Gb3JOb25MZWdhY3lGYWN0b3J5KHR5cGUpO1xuICAgICAgfVxuICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG4gICAgICBhcmdzWzBdID0gdHlwZS50eXBlO1xuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGUuaXNSZWFjdExlZ2FjeUZhY3RvcnkpIHtcbiAgICAgIC8vIFRoaXMgaXMgcHJvYmFibHkgYSBsZWdhY3kgZmFjdG9yeSBjcmVhdGVkIGJ5IFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50LlxuICAgICAgLy8gV2UgdW53cmFwIGl0IHRvIGdldCB0byB0aGUgdW5kZXJseWluZyBjbGFzcy5cbiAgICAgIGlmICh0eXBlLl9pc01vY2tGdW5jdGlvbikge1xuICAgICAgICAvLyBJZiB0aGlzIGlzIGEgbW9jayBmdW5jdGlvbiwgcGVvcGxlIHdpbGwgZXhwZWN0IGl0IHRvIGJlIGNhbGxlZC4gV2VcbiAgICAgICAgLy8gd2lsbCBhY3R1YWxseSBjYWxsIHRoZSBvcmlnaW5hbCBtb2NrIGZhY3RvcnkgZnVuY3Rpb24gaW5zdGVhZC4gVGhpc1xuICAgICAgICAvLyBmdXR1cmUgcHJvb2ZzIHVuaXQgdGVzdGluZyB0aGF0IGFzc3VtZSB0aGF0IHRoZXNlIGFyZSBjbGFzc2VzLlxuICAgICAgICB0eXBlLnR5cGUuX21vY2tlZFJlYWN0Q2xhc3NDb25zdHJ1Y3RvciA9IHR5cGU7XG4gICAgICB9XG4gICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgICAgIGFyZ3NbMF0gPSB0eXBlLnR5cGU7XG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG5cbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICB3YXJuRm9yUGxhaW5GdW5jdGlvblR5cGUodHlwZSk7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBpcyBiZWluZyBjYWxsZWQgd2l0aCBhIHBsYWluIGZ1bmN0aW9uIHdlIHNob3VsZCBpbnZva2UgaXRcbiAgICAvLyBpbW1lZGlhdGVseSBhcyBpZiB0aGlzIHdhcyB1c2VkIHdpdGggbGVnYWN5IEpTWC5cbiAgICByZXR1cm4gdHlwZS5hcHBseShudWxsLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgfTtcbiAgcmV0dXJuIGxlZ2FjeUNyZWF0ZUVsZW1lbnQ7XG59O1xuXG5SZWFjdExlZ2FjeUVsZW1lbnRGYWN0b3J5LndyYXBGYWN0b3J5ID0gZnVuY3Rpb24oZmFjdG9yeSkge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIHR5cGVvZiBmYWN0b3J5ID09PSAnZnVuY3Rpb24nLFxuICAgICdUaGlzIGlzIHN1cHBvc2UgdG8gYWNjZXB0IGEgZWxlbWVudCBmYWN0b3J5J1xuICApIDogaW52YXJpYW50KHR5cGVvZiBmYWN0b3J5ID09PSAnZnVuY3Rpb24nKSk7XG4gIHZhciBsZWdhY3lFbGVtZW50RmFjdG9yeSA9IGZ1bmN0aW9uKGNvbmZpZywgY2hpbGRyZW4pIHtcbiAgICAvLyBUaGlzIGZhY3Rvcnkgc2hvdWxkIG5vdCBiZSBjYWxsZWQgd2hlbiBKU1ggaXMgdXNlZC4gVXNlIEpTWCBpbnN0ZWFkLlxuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIHdhcm5Gb3JMZWdhY3lGYWN0b3J5Q2FsbCgpO1xuICAgIH1cbiAgICByZXR1cm4gZmFjdG9yeS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xuICBwcm94eVN0YXRpY01ldGhvZHMobGVnYWN5RWxlbWVudEZhY3RvcnksIGZhY3RvcnkudHlwZSk7XG4gIGxlZ2FjeUVsZW1lbnRGYWN0b3J5LmlzUmVhY3RMZWdhY3lGYWN0b3J5ID0gTEVHQUNZX01BUktFUjtcbiAgbGVnYWN5RWxlbWVudEZhY3RvcnkudHlwZSA9IGZhY3RvcnkudHlwZTtcbiAgcmV0dXJuIGxlZ2FjeUVsZW1lbnRGYWN0b3J5O1xufTtcblxuLy8gVGhpcyBpcyB1c2VkIHRvIG1hcmsgYSBmYWN0b3J5IHRoYXQgd2lsbCByZW1haW4uIEUuZy4gd2UncmUgYWxsb3dlZCB0byBjYWxsXG4vLyBpdCBhcyBhIGZ1bmN0aW9uLiBIb3dldmVyLCB5b3UncmUgbm90IHN1cHBvc2UgdG8gcGFzcyBpdCB0byBjcmVhdGVFbGVtZW50XG4vLyBvciBjcmVhdGVGYWN0b3J5LCBzbyBpdCB3aWxsIHdhcm4geW91IGlmIHlvdSBkby5cblJlYWN0TGVnYWN5RWxlbWVudEZhY3RvcnkubWFya05vbkxlZ2FjeUZhY3RvcnkgPSBmdW5jdGlvbihmYWN0b3J5KSB7XG4gIGZhY3RvcnkuaXNSZWFjdE5vbkxlZ2FjeUZhY3RvcnkgPSBOT05fTEVHQUNZX01BUktFUjtcbiAgcmV0dXJuIGZhY3Rvcnk7XG59O1xuXG4vLyBDaGVja3MgaWYgYSBmYWN0b3J5IGZ1bmN0aW9uIGlzIGFjdHVhbGx5IGEgbGVnYWN5IGZhY3RvcnkgcHJldGVuZGluZyB0b1xuLy8gYmUgYSBjbGFzcy5cblJlYWN0TGVnYWN5RWxlbWVudEZhY3RvcnkuaXNWYWxpZEZhY3RvcnkgPSBmdW5jdGlvbihmYWN0b3J5KSB7XG4gIC8vIFRPRE86IFRoaXMgd2lsbCBiZSByZW1vdmVkIGFuZCBtb3ZlZCBpbnRvIGEgY2xhc3MgdmFsaWRhdG9yIG9yIHNvbWV0aGluZy5cbiAgcmV0dXJuIHR5cGVvZiBmYWN0b3J5ID09PSAnZnVuY3Rpb24nICYmXG4gICAgZmFjdG9yeS5pc1JlYWN0TGVnYWN5RmFjdG9yeSA9PT0gTEVHQUNZX01BUktFUjtcbn07XG5cblJlYWN0TGVnYWN5RWxlbWVudEZhY3RvcnkuaXNWYWxpZENsYXNzID0gZnVuY3Rpb24oZmFjdG9yeSkge1xuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICBmYWxzZSxcbiAgICAgICdpc1ZhbGlkQ2xhc3MgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHJlbGVhc2UuICcgK1xuICAgICAgJ1VzZSBhIG1vcmUgc3BlY2lmaWMgdmFsaWRhdG9yIGluc3RlYWQuJ1xuICAgICkgOiBudWxsKTtcbiAgfVxuICByZXR1cm4gUmVhY3RMZWdhY3lFbGVtZW50RmFjdG9yeS5pc1ZhbGlkRmFjdG9yeShmYWN0b3J5KTtcbn07XG5cblJlYWN0TGVnYWN5RWxlbWVudEZhY3RvcnkuX2lzTGVnYWN5Q2FsbFdhcm5pbmdFbmFibGVkID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdExlZ2FjeUVsZW1lbnRGYWN0b3J5O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9SZWFjdEN1cnJlbnRPd25lclwiOjEwNSxcIi4vaW52YXJpYW50XCI6MTk2LFwiLi9tb25pdG9yQ29kZVVzZVwiOjIwNixcIi4vd2FybmluZ1wiOjIxNSxcIl9wcm9jZXNzXCI6MTl9XSwxMzE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0TWFya3VwQ2hlY2tzdW1cbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFkbGVyMzIgPSByZXF1aXJlKFwiLi9hZGxlcjMyXCIpO1xuXG52YXIgUmVhY3RNYXJrdXBDaGVja3N1bSA9IHtcbiAgQ0hFQ0tTVU1fQVRUUl9OQU1FOiAnZGF0YS1yZWFjdC1jaGVja3N1bScsXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgTWFya3VwIHN0cmluZ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9IE1hcmt1cCBzdHJpbmcgd2l0aCBjaGVja3N1bSBhdHRyaWJ1dGUgYXR0YWNoZWRcbiAgICovXG4gIGFkZENoZWNrc3VtVG9NYXJrdXA6IGZ1bmN0aW9uKG1hcmt1cCkge1xuICAgIHZhciBjaGVja3N1bSA9IGFkbGVyMzIobWFya3VwKTtcbiAgICByZXR1cm4gbWFya3VwLnJlcGxhY2UoXG4gICAgICAnPicsXG4gICAgICAnICcgKyBSZWFjdE1hcmt1cENoZWNrc3VtLkNIRUNLU1VNX0FUVFJfTkFNRSArICc9XCInICsgY2hlY2tzdW0gKyAnXCI+J1xuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgdG8gdXNlXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCByb290IFJlYWN0IGVsZW1lbnRcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHdoZXRoZXIgb3Igbm90IHRoZSBtYXJrdXAgaXMgdGhlIHNhbWVcbiAgICovXG4gIGNhblJldXNlTWFya3VwOiBmdW5jdGlvbihtYXJrdXAsIGVsZW1lbnQpIHtcbiAgICB2YXIgZXhpc3RpbmdDaGVja3N1bSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFxuICAgICAgUmVhY3RNYXJrdXBDaGVja3N1bS5DSEVDS1NVTV9BVFRSX05BTUVcbiAgICApO1xuICAgIGV4aXN0aW5nQ2hlY2tzdW0gPSBleGlzdGluZ0NoZWNrc3VtICYmIHBhcnNlSW50KGV4aXN0aW5nQ2hlY2tzdW0sIDEwKTtcbiAgICB2YXIgbWFya3VwQ2hlY2tzdW0gPSBhZGxlcjMyKG1hcmt1cCk7XG4gICAgcmV0dXJuIG1hcmt1cENoZWNrc3VtID09PSBleGlzdGluZ0NoZWNrc3VtO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0TWFya3VwQ2hlY2tzdW07XG5cbn0se1wiLi9hZGxlcjMyXCI6MTY3fV0sMTMyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RNb3VudFxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRE9NUHJvcGVydHkgPSByZXF1aXJlKFwiLi9ET01Qcm9wZXJ0eVwiKTtcbnZhciBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJcIik7XG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKFwiLi9SZWFjdEN1cnJlbnRPd25lclwiKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RMZWdhY3lFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RMZWdhY3lFbGVtZW50XCIpO1xudmFyIFJlYWN0SW5zdGFuY2VIYW5kbGVzID0gcmVxdWlyZShcIi4vUmVhY3RJbnN0YW5jZUhhbmRsZXNcIik7XG52YXIgUmVhY3RQZXJmID0gcmVxdWlyZShcIi4vUmVhY3RQZXJmXCIpO1xuXG52YXIgY29udGFpbnNOb2RlID0gcmVxdWlyZShcIi4vY29udGFpbnNOb2RlXCIpO1xudmFyIGRlcHJlY2F0ZWQgPSByZXF1aXJlKFwiLi9kZXByZWNhdGVkXCIpO1xudmFyIGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lciA9IHJlcXVpcmUoXCIuL2dldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lclwiKTtcbnZhciBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudFwiKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG52YXIgc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKFwiLi9zaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudFwiKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxudmFyIGNyZWF0ZUVsZW1lbnQgPSBSZWFjdExlZ2FjeUVsZW1lbnQud3JhcENyZWF0ZUVsZW1lbnQoXG4gIFJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50XG4pO1xuXG52YXIgU0VQQVJBVE9SID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuU0VQQVJBVE9SO1xuXG52YXIgQVRUUl9OQU1FID0gRE9NUHJvcGVydHkuSURfQVRUUklCVVRFX05BTUU7XG52YXIgbm9kZUNhY2hlID0ge307XG5cbnZhciBFTEVNRU5UX05PREVfVFlQRSA9IDE7XG52YXIgRE9DX05PREVfVFlQRSA9IDk7XG5cbi8qKiBNYXBwaW5nIGZyb20gcmVhY3RSb290SUQgdG8gUmVhY3QgY29tcG9uZW50IGluc3RhbmNlLiAqL1xudmFyIGluc3RhbmNlc0J5UmVhY3RSb290SUQgPSB7fTtcblxuLyoqIE1hcHBpbmcgZnJvbSByZWFjdFJvb3RJRCB0byBgY29udGFpbmVyYCBub2Rlcy4gKi9cbnZhciBjb250YWluZXJzQnlSZWFjdFJvb3RJRCA9IHt9O1xuXG5pZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gIC8qKiBfX0RFVl9fLW9ubHkgbWFwcGluZyBmcm9tIHJlYWN0Um9vdElEIHRvIHJvb3QgZWxlbWVudHMuICovXG4gIHZhciByb290RWxlbWVudHNCeVJlYWN0Um9vdElEID0ge307XG59XG5cbi8vIFVzZWQgdG8gc3RvcmUgYnJlYWR0aC1maXJzdCBzZWFyY2ggc3RhdGUgaW4gZmluZENvbXBvbmVudFJvb3QuXG52YXIgZmluZENvbXBvbmVudFJvb3RSZXVzYWJsZUFycmF5ID0gW107XG5cbi8qKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgRE9NIGVsZW1lbnQgdGhhdCBtYXkgY29udGFpbiBhIFJlYWN0IGNvbXBvbmVudC5cbiAqIEByZXR1cm4gez9zdHJpbmd9IEEgXCJyZWFjdFJvb3RcIiBJRCwgaWYgYSBSZWFjdCBjb21wb25lbnQgaXMgcmVuZGVyZWQuXG4gKi9cbmZ1bmN0aW9uIGdldFJlYWN0Um9vdElEKGNvbnRhaW5lcikge1xuICB2YXIgcm9vdEVsZW1lbnQgPSBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIoY29udGFpbmVyKTtcbiAgcmV0dXJuIHJvb3RFbGVtZW50ICYmIFJlYWN0TW91bnQuZ2V0SUQocm9vdEVsZW1lbnQpO1xufVxuXG4vKipcbiAqIEFjY2Vzc2luZyBub2RlW0FUVFJfTkFNRV0gb3IgY2FsbGluZyBnZXRBdHRyaWJ1dGUoQVRUUl9OQU1FKSBvbiBhIGZvcm1cbiAqIGVsZW1lbnQgY2FuIHJldHVybiBpdHMgY29udHJvbCB3aG9zZSBuYW1lIG9yIElEIGVxdWFscyBBVFRSX05BTUUuIEFsbFxuICogRE9NIG5vZGVzIHN1cHBvcnQgYGdldEF0dHJpYnV0ZU5vZGVgIGJ1dCB0aGlzIGNhbiBhbHNvIGdldCBjYWxsZWQgb25cbiAqIG90aGVyIG9iamVjdHMgc28ganVzdCByZXR1cm4gJycgaWYgd2UncmUgZ2l2ZW4gc29tZXRoaW5nIG90aGVyIHRoYW4gYVxuICogRE9NIG5vZGUgKHN1Y2ggYXMgd2luZG93KS5cbiAqXG4gKiBAcGFyYW0gez9ET01FbGVtZW50fERPTVdpbmRvd3xET01Eb2N1bWVudHxET01UZXh0Tm9kZX0gbm9kZSBET00gbm9kZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gSUQgb2YgdGhlIHN1cHBsaWVkIGBkb21Ob2RlYC5cbiAqL1xuZnVuY3Rpb24gZ2V0SUQobm9kZSkge1xuICB2YXIgaWQgPSBpbnRlcm5hbEdldElEKG5vZGUpO1xuICBpZiAoaWQpIHtcbiAgICBpZiAobm9kZUNhY2hlLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgdmFyIGNhY2hlZCA9IG5vZGVDYWNoZVtpZF07XG4gICAgICBpZiAoY2FjaGVkICE9PSBub2RlKSB7XG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICAgIWlzVmFsaWQoY2FjaGVkLCBpZCksXG4gICAgICAgICAgJ1JlYWN0TW91bnQ6IFR3byB2YWxpZCBidXQgdW5lcXVhbCBub2RlcyB3aXRoIHRoZSBzYW1lIGAlc2A6ICVzJyxcbiAgICAgICAgICBBVFRSX05BTUUsIGlkXG4gICAgICAgICkgOiBpbnZhcmlhbnQoIWlzVmFsaWQoY2FjaGVkLCBpZCkpKTtcblxuICAgICAgICBub2RlQ2FjaGVbaWRdID0gbm9kZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZUNhY2hlW2lkXSA9IG5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGlkO1xufVxuXG5mdW5jdGlvbiBpbnRlcm5hbEdldElEKG5vZGUpIHtcbiAgLy8gSWYgbm9kZSBpcyBzb21ldGhpbmcgbGlrZSBhIHdpbmRvdywgZG9jdW1lbnQsIG9yIHRleHQgbm9kZSwgbm9uZSBvZlxuICAvLyB3aGljaCBzdXBwb3J0IGF0dHJpYnV0ZXMgb3IgYSAuZ2V0QXR0cmlidXRlIG1ldGhvZCwgZ3JhY2VmdWxseSByZXR1cm5cbiAgLy8gdGhlIGVtcHR5IHN0cmluZywgYXMgaWYgdGhlIGF0dHJpYnV0ZSB3ZXJlIG1pc3NpbmcuXG4gIHJldHVybiBub2RlICYmIG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKEFUVFJfTkFNRSkgfHwgJyc7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgUmVhY3Qtc3BlY2lmaWMgSUQgb2YgdGhlIGdpdmVuIG5vZGUuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlIFRoZSBET00gbm9kZSB3aG9zZSBJRCB3aWxsIGJlIHNldC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgdmFsdWUgb2YgdGhlIElEIGF0dHJpYnV0ZS5cbiAqL1xuZnVuY3Rpb24gc2V0SUQobm9kZSwgaWQpIHtcbiAgdmFyIG9sZElEID0gaW50ZXJuYWxHZXRJRChub2RlKTtcbiAgaWYgKG9sZElEICE9PSBpZCkge1xuICAgIGRlbGV0ZSBub2RlQ2FjaGVbb2xkSURdO1xuICB9XG4gIG5vZGUuc2V0QXR0cmlidXRlKEFUVFJfTkFNRSwgaWQpO1xuICBub2RlQ2FjaGVbaWRdID0gbm9kZTtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgbm9kZSB3aXRoIHRoZSBzdXBwbGllZCBSZWFjdC1nZW5lcmF0ZWQgRE9NIElELlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBIFJlYWN0LWdlbmVyYXRlZCBET00gSUQuXG4gKiBAcmV0dXJuIHtET01FbGVtZW50fSBET00gbm9kZSB3aXRoIHRoZSBzdXBwbGVkIGBpZGAuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gZ2V0Tm9kZShpZCkge1xuICBpZiAoIW5vZGVDYWNoZS5oYXNPd25Qcm9wZXJ0eShpZCkgfHwgIWlzVmFsaWQobm9kZUNhY2hlW2lkXSwgaWQpKSB7XG4gICAgbm9kZUNhY2hlW2lkXSA9IFJlYWN0TW91bnQuZmluZFJlYWN0Tm9kZUJ5SUQoaWQpO1xuICB9XG4gIHJldHVybiBub2RlQ2FjaGVbaWRdO1xufVxuXG4vKipcbiAqIEEgbm9kZSBpcyBcInZhbGlkXCIgaWYgaXQgaXMgY29udGFpbmVkIGJ5IGEgY3VycmVudGx5IG1vdW50ZWQgY29udGFpbmVyLlxuICpcbiAqIFRoaXMgbWVhbnMgdGhhdCB0aGUgbm9kZSBkb2VzIG5vdCBoYXZlIHRvIGJlIGNvbnRhaW5lZCBieSBhIGRvY3VtZW50IGluXG4gKiBvcmRlciB0byBiZSBjb25zaWRlcmVkIHZhbGlkLlxuICpcbiAqIEBwYXJhbSB7P0RPTUVsZW1lbnR9IG5vZGUgVGhlIGNhbmRpZGF0ZSBET00gbm9kZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgZXhwZWN0ZWQgSUQgb2YgdGhlIG5vZGUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBub2RlIGlzIGNvbnRhaW5lZCBieSBhIG1vdW50ZWQgY29udGFpbmVyLlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkKG5vZGUsIGlkKSB7XG4gIGlmIChub2RlKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIGludGVybmFsR2V0SUQobm9kZSkgPT09IGlkLFxuICAgICAgJ1JlYWN0TW91bnQ6IFVuZXhwZWN0ZWQgbW9kaWZpY2F0aW9uIG9mIGAlc2AnLFxuICAgICAgQVRUUl9OQU1FXG4gICAgKSA6IGludmFyaWFudChpbnRlcm5hbEdldElEKG5vZGUpID09PSBpZCkpO1xuXG4gICAgdmFyIGNvbnRhaW5lciA9IFJlYWN0TW91bnQuZmluZFJlYWN0Q29udGFpbmVyRm9ySUQoaWQpO1xuICAgIGlmIChjb250YWluZXIgJiYgY29udGFpbnNOb2RlKGNvbnRhaW5lciwgbm9kZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBDYXVzZXMgdGhlIGNhY2hlIHRvIGZvcmdldCBhYm91dCBvbmUgUmVhY3Qtc3BlY2lmaWMgSUQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBJRCB0byBmb3JnZXQuXG4gKi9cbmZ1bmN0aW9uIHB1cmdlSUQoaWQpIHtcbiAgZGVsZXRlIG5vZGVDYWNoZVtpZF07XG59XG5cbnZhciBkZWVwZXN0Tm9kZVNvRmFyID0gbnVsbDtcbmZ1bmN0aW9uIGZpbmREZWVwZXN0Q2FjaGVkQW5jZXN0b3JJbXBsKGFuY2VzdG9ySUQpIHtcbiAgdmFyIGFuY2VzdG9yID0gbm9kZUNhY2hlW2FuY2VzdG9ySURdO1xuICBpZiAoYW5jZXN0b3IgJiYgaXNWYWxpZChhbmNlc3RvciwgYW5jZXN0b3JJRCkpIHtcbiAgICBkZWVwZXN0Tm9kZVNvRmFyID0gYW5jZXN0b3I7XG4gIH0gZWxzZSB7XG4gICAgLy8gVGhpcyBub2RlIGlzbid0IHBvcHVsYXRlZCBpbiB0aGUgY2FjaGUsIHNvIHByZXN1bWFibHkgbm9uZSBvZiBpdHNcbiAgICAvLyBkZXNjZW5kYW50cyBhcmUuIEJyZWFrIG91dCBvZiB0aGUgbG9vcC5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGRlZXBlc3QgY2FjaGVkIG5vZGUgd2hvc2UgSUQgaXMgYSBwcmVmaXggb2YgYHRhcmdldElEYC5cbiAqL1xuZnVuY3Rpb24gZmluZERlZXBlc3RDYWNoZWRBbmNlc3Rvcih0YXJnZXRJRCkge1xuICBkZWVwZXN0Tm9kZVNvRmFyID0gbnVsbDtcbiAgUmVhY3RJbnN0YW5jZUhhbmRsZXMudHJhdmVyc2VBbmNlc3RvcnMoXG4gICAgdGFyZ2V0SUQsXG4gICAgZmluZERlZXBlc3RDYWNoZWRBbmNlc3RvckltcGxcbiAgKTtcblxuICB2YXIgZm91bmROb2RlID0gZGVlcGVzdE5vZGVTb0ZhcjtcbiAgZGVlcGVzdE5vZGVTb0ZhciA9IG51bGw7XG4gIHJldHVybiBmb3VuZE5vZGU7XG59XG5cbi8qKlxuICogTW91bnRpbmcgaXMgdGhlIHByb2Nlc3Mgb2YgaW5pdGlhbGl6aW5nIGEgUmVhY3QgY29tcG9uZW50IGJ5IGNyZWF0aW5ncyBpdHNcbiAqIHJlcHJlc2VudGF0aXZlIERPTSBlbGVtZW50cyBhbmQgaW5zZXJ0aW5nIHRoZW0gaW50byBhIHN1cHBsaWVkIGBjb250YWluZXJgLlxuICogQW55IHByaW9yIGNvbnRlbnQgaW5zaWRlIGBjb250YWluZXJgIGlzIGRlc3Ryb3llZCBpbiB0aGUgcHJvY2Vzcy5cbiAqXG4gKiAgIFJlYWN0TW91bnQucmVuZGVyKFxuICogICAgIGNvbXBvbmVudCxcbiAqICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGFpbmVyJylcbiAqICAgKTtcbiAqXG4gKiAgIDxkaXYgaWQ9XCJjb250YWluZXJcIj4gICAgICAgICAgICAgICAgICAgPC0tIFN1cHBsaWVkIGBjb250YWluZXJgLlxuICogICAgIDxkaXYgZGF0YS1yZWFjdGlkPVwiLjNcIj4gICAgICAgICAgICAgIDwtLSBSZW5kZXJlZCByZWFjdFJvb3Qgb2YgUmVhY3RcbiAqICAgICAgIC8vIC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9kaXY+XG4gKlxuICogSW5zaWRlIG9mIGBjb250YWluZXJgLCB0aGUgZmlyc3QgZWxlbWVudCByZW5kZXJlZCBpcyB0aGUgXCJyZWFjdFJvb3RcIi5cbiAqL1xudmFyIFJlYWN0TW91bnQgPSB7XG4gIC8qKiBFeHBvc2VkIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXMgKiovXG4gIF9pbnN0YW5jZXNCeVJlYWN0Um9vdElEOiBpbnN0YW5jZXNCeVJlYWN0Um9vdElELFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIGEgaG9vayBwcm92aWRlZCB0byBzdXBwb3J0IHJlbmRlcmluZyBSZWFjdCBjb21wb25lbnRzIHdoaWxlXG4gICAqIGVuc3VyaW5nIHRoYXQgdGhlIGFwcGFyZW50IHNjcm9sbCBwb3NpdGlvbiBvZiBpdHMgYGNvbnRhaW5lcmAgZG9lcyBub3RcbiAgICogY2hhbmdlLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBUaGUgYGNvbnRhaW5lcmAgYmVpbmcgcmVuZGVyZWQgaW50by5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gcmVuZGVyQ2FsbGJhY2sgVGhpcyBtdXN0IGJlIGNhbGxlZCBvbmNlIHRvIGRvIHRoZSByZW5kZXIuXG4gICAqL1xuICBzY3JvbGxNb25pdG9yOiBmdW5jdGlvbihjb250YWluZXIsIHJlbmRlckNhbGxiYWNrKSB7XG4gICAgcmVuZGVyQ2FsbGJhY2soKTtcbiAgfSxcblxuICAvKipcbiAgICogVGFrZSBhIGNvbXBvbmVudCB0aGF0J3MgYWxyZWFkeSBtb3VudGVkIGludG8gdGhlIERPTSBhbmQgcmVwbGFjZSBpdHMgcHJvcHNcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gcHJldkNvbXBvbmVudCBjb21wb25lbnQgaW5zdGFuY2UgYWxyZWFkeSBpbiB0aGUgRE9NXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IG5leHRDb21wb25lbnQgY29tcG9uZW50IGluc3RhbmNlIHRvIHJlbmRlclxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBjb250YWluZXIgdG8gcmVuZGVyIGludG9cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uIHRyaWdnZXJlZCBvbiBjb21wbGV0aW9uXG4gICAqL1xuICBfdXBkYXRlUm9vdENvbXBvbmVudDogZnVuY3Rpb24oXG4gICAgICBwcmV2Q29tcG9uZW50LFxuICAgICAgbmV4dENvbXBvbmVudCxcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIGNhbGxiYWNrKSB7XG4gICAgdmFyIG5leHRQcm9wcyA9IG5leHRDb21wb25lbnQucHJvcHM7XG4gICAgUmVhY3RNb3VudC5zY3JvbGxNb25pdG9yKGNvbnRhaW5lciwgZnVuY3Rpb24oKSB7XG4gICAgICBwcmV2Q29tcG9uZW50LnJlcGxhY2VQcm9wcyhuZXh0UHJvcHMsIGNhbGxiYWNrKTtcbiAgICB9KTtcblxuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgIC8vIFJlY29yZCB0aGUgcm9vdCBlbGVtZW50IGluIGNhc2UgaXQgbGF0ZXIgZ2V0cyB0cmFuc3BsYW50ZWQuXG4gICAgICByb290RWxlbWVudHNCeVJlYWN0Um9vdElEW2dldFJlYWN0Um9vdElEKGNvbnRhaW5lcildID1cbiAgICAgICAgZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZXZDb21wb25lbnQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgY29tcG9uZW50IGludG8gdGhlIGluc3RhbmNlIG1hcCBhbmQgc3RhcnRzIHNjcm9sbCB2YWx1ZVxuICAgKiBtb25pdG9yaW5nXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IG5leHRDb21wb25lbnQgY29tcG9uZW50IGluc3RhbmNlIHRvIHJlbmRlclxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBjb250YWluZXIgdG8gcmVuZGVyIGludG9cbiAgICogQHJldHVybiB7c3RyaW5nfSByZWFjdFJvb3QgSUQgcHJlZml4XG4gICAqL1xuICBfcmVnaXN0ZXJDb21wb25lbnQ6IGZ1bmN0aW9uKG5leHRDb21wb25lbnQsIGNvbnRhaW5lcikge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBjb250YWluZXIgJiYgKFxuICAgICAgICBjb250YWluZXIubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERV9UWVBFIHx8XG4gICAgICAgIGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DX05PREVfVFlQRVxuICAgICAgKSxcbiAgICAgICdfcmVnaXN0ZXJDb21wb25lbnQoLi4uKTogVGFyZ2V0IGNvbnRhaW5lciBpcyBub3QgYSBET00gZWxlbWVudC4nXG4gICAgKSA6IGludmFyaWFudChjb250YWluZXIgJiYgKFxuICAgICAgY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREVfVFlQRSB8fFxuICAgICAgY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFXG4gICAgKSkpO1xuXG4gICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmVuc3VyZVNjcm9sbFZhbHVlTW9uaXRvcmluZygpO1xuXG4gICAgdmFyIHJlYWN0Um9vdElEID0gUmVhY3RNb3VudC5yZWdpc3RlckNvbnRhaW5lcihjb250YWluZXIpO1xuICAgIGluc3RhbmNlc0J5UmVhY3RSb290SURbcmVhY3RSb290SURdID0gbmV4dENvbXBvbmVudDtcbiAgICByZXR1cm4gcmVhY3RSb290SUQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbmRlciBhIG5ldyBjb21wb25lbnQgaW50byB0aGUgRE9NLlxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBuZXh0Q29tcG9uZW50IGNvbXBvbmVudCBpbnN0YW5jZSB0byByZW5kZXJcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgY29udGFpbmVyIHRvIHJlbmRlciBpbnRvXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2hvdWxkUmV1c2VNYXJrdXAgaWYgd2Ugc2hvdWxkIHNraXAgdGhlIG1hcmt1cCBpbnNlcnRpb25cbiAgICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9IG5leHRDb21wb25lbnRcbiAgICovXG4gIF9yZW5kZXJOZXdSb290Q29tcG9uZW50OiBSZWFjdFBlcmYubWVhc3VyZShcbiAgICAnUmVhY3RNb3VudCcsXG4gICAgJ19yZW5kZXJOZXdSb290Q29tcG9uZW50JyxcbiAgICBmdW5jdGlvbihcbiAgICAgICAgbmV4dENvbXBvbmVudCxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBzaG91bGRSZXVzZU1hcmt1cCkge1xuICAgICAgLy8gVmFyaW91cyBwYXJ0cyBvZiBvdXIgY29kZSAoc3VjaCBhcyBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCdzXG4gICAgICAvLyBfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50KSBhc3N1bWUgdGhhdCBjYWxscyB0byByZW5kZXIgYXJlbid0IG5lc3RlZDtcbiAgICAgIC8vIHZlcmlmeSB0aGF0IHRoYXQncyB0aGUgY2FzZS5cbiAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID09IG51bGwsXG4gICAgICAgICdfcmVuZGVyTmV3Um9vdENvbXBvbmVudCgpOiBSZW5kZXIgbWV0aG9kcyBzaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uICcgK1xuICAgICAgICAnb2YgcHJvcHMgYW5kIHN0YXRlOyB0cmlnZ2VyaW5nIG5lc3RlZCBjb21wb25lbnQgdXBkYXRlcyBmcm9tICcgK1xuICAgICAgICAncmVuZGVyIGlzIG5vdCBhbGxvd2VkLiBJZiBuZWNlc3NhcnksIHRyaWdnZXIgbmVzdGVkIHVwZGF0ZXMgaW4gJyArXG4gICAgICAgICdjb21wb25lbnREaWRVcGRhdGUuJ1xuICAgICAgKSA6IG51bGwpO1xuXG4gICAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KG5leHRDb21wb25lbnQsIG51bGwpO1xuICAgICAgdmFyIHJlYWN0Um9vdElEID0gUmVhY3RNb3VudC5fcmVnaXN0ZXJDb21wb25lbnQoXG4gICAgICAgIGNvbXBvbmVudEluc3RhbmNlLFxuICAgICAgICBjb250YWluZXJcbiAgICAgICk7XG4gICAgICBjb21wb25lbnRJbnN0YW5jZS5tb3VudENvbXBvbmVudEludG9Ob2RlKFxuICAgICAgICByZWFjdFJvb3RJRCxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBzaG91bGRSZXVzZU1hcmt1cFxuICAgICAgKTtcblxuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgICAvLyBSZWNvcmQgdGhlIHJvb3QgZWxlbWVudCBpbiBjYXNlIGl0IGxhdGVyIGdldHMgdHJhbnNwbGFudGVkLlxuICAgICAgICByb290RWxlbWVudHNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXSA9XG4gICAgICAgICAgZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb21wb25lbnRJbnN0YW5jZTtcbiAgICB9XG4gICksXG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgYSBSZWFjdCBjb21wb25lbnQgaW50byB0aGUgRE9NIGluIHRoZSBzdXBwbGllZCBgY29udGFpbmVyYC5cbiAgICpcbiAgICogSWYgdGhlIFJlYWN0IGNvbXBvbmVudCB3YXMgcHJldmlvdXNseSByZW5kZXJlZCBpbnRvIGBjb250YWluZXJgLCB0aGlzIHdpbGxcbiAgICogcGVyZm9ybSBhbiB1cGRhdGUgb24gaXQgYW5kIG9ubHkgbXV0YXRlIHRoZSBET00gYXMgbmVjZXNzYXJ5IHRvIHJlZmxlY3QgdGhlXG4gICAqIGxhdGVzdCBSZWFjdCBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBuZXh0RWxlbWVudCBDb21wb25lbnQgZWxlbWVudCB0byByZW5kZXIuXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIERPTSBlbGVtZW50IHRvIHJlbmRlciBpbnRvLlxuICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24gdHJpZ2dlcmVkIG9uIGNvbXBsZXRpb25cbiAgICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9IENvbXBvbmVudCBpbnN0YW5jZSByZW5kZXJlZCBpbiBgY29udGFpbmVyYC5cbiAgICovXG4gIHJlbmRlcjogZnVuY3Rpb24obmV4dEVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KG5leHRFbGVtZW50KSxcbiAgICAgICdyZW5kZXJDb21wb25lbnQoKTogSW52YWxpZCBjb21wb25lbnQgZWxlbWVudC4lcycsXG4gICAgICAoXG4gICAgICAgIHR5cGVvZiBuZXh0RWxlbWVudCA9PT0gJ3N0cmluZycgP1xuICAgICAgICAgICcgSW5zdGVhZCBvZiBwYXNzaW5nIGFuIGVsZW1lbnQgc3RyaW5nLCBtYWtlIHN1cmUgdG8gaW5zdGFudGlhdGUgJyArXG4gICAgICAgICAgJ2l0IGJ5IHBhc3NpbmcgaXQgdG8gUmVhY3QuY3JlYXRlRWxlbWVudC4nIDpcbiAgICAgICAgUmVhY3RMZWdhY3lFbGVtZW50LmlzVmFsaWRGYWN0b3J5KG5leHRFbGVtZW50KSA/XG4gICAgICAgICAgJyBJbnN0ZWFkIG9mIHBhc3NpbmcgYSBjb21wb25lbnQgY2xhc3MsIG1ha2Ugc3VyZSB0byBpbnN0YW50aWF0ZSAnICtcbiAgICAgICAgICAnaXQgYnkgcGFzc2luZyBpdCB0byBSZWFjdC5jcmVhdGVFbGVtZW50LicgOlxuICAgICAgICAvLyBDaGVjayBpZiBpdCBxdWFja3MgbGlrZSBhIGVsZW1lbnRcbiAgICAgICAgdHlwZW9mIG5leHRFbGVtZW50LnByb3BzICE9PSBcInVuZGVmaW5lZFwiID9cbiAgICAgICAgICAnIFRoaXMgbWF5IGJlIGNhdXNlZCBieSB1bmludGVudGlvbmFsbHkgbG9hZGluZyB0d28gaW5kZXBlbmRlbnQgJyArXG4gICAgICAgICAgJ2NvcGllcyBvZiBSZWFjdC4nIDpcbiAgICAgICAgICAnJ1xuICAgICAgKVxuICAgICkgOiBpbnZhcmlhbnQoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KG5leHRFbGVtZW50KSkpO1xuXG4gICAgdmFyIHByZXZDb21wb25lbnQgPSBpbnN0YW5jZXNCeVJlYWN0Um9vdElEW2dldFJlYWN0Um9vdElEKGNvbnRhaW5lcildO1xuXG4gICAgaWYgKHByZXZDb21wb25lbnQpIHtcbiAgICAgIHZhciBwcmV2RWxlbWVudCA9IHByZXZDb21wb25lbnQuX2N1cnJlbnRFbGVtZW50O1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50KHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0TW91bnQuX3VwZGF0ZVJvb3RDb21wb25lbnQoXG4gICAgICAgICAgcHJldkNvbXBvbmVudCxcbiAgICAgICAgICBuZXh0RWxlbWVudCxcbiAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgY2FsbGJhY2tcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFJlYWN0TW91bnQudW5tb3VudENvbXBvbmVudEF0Tm9kZShjb250YWluZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZWFjdFJvb3RFbGVtZW50ID0gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgdmFyIGNvbnRhaW5lckhhc1JlYWN0TWFya3VwID1cbiAgICAgIHJlYWN0Um9vdEVsZW1lbnQgJiYgUmVhY3RNb3VudC5pc1JlbmRlcmVkQnlSZWFjdChyZWFjdFJvb3RFbGVtZW50KTtcblxuICAgIHZhciBzaG91bGRSZXVzZU1hcmt1cCA9IGNvbnRhaW5lckhhc1JlYWN0TWFya3VwICYmICFwcmV2Q29tcG9uZW50O1xuXG4gICAgdmFyIGNvbXBvbmVudCA9IFJlYWN0TW91bnQuX3JlbmRlck5ld1Jvb3RDb21wb25lbnQoXG4gICAgICBuZXh0RWxlbWVudCxcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIHNob3VsZFJldXNlTWFya3VwXG4gICAgKTtcbiAgICBjYWxsYmFjayAmJiBjYWxsYmFjay5jYWxsKGNvbXBvbmVudCk7XG4gICAgcmV0dXJuIGNvbXBvbmVudDtcbiAgfSxcblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhIGNvbXBvbmVudCBpbnN0YW5jZSBvZiBgY29uc3RydWN0b3JgIHdpdGggYGluaXRpYWxQcm9wc2AgYW5kXG4gICAqIHJlbmRlcnMgaXQgaW50byB0aGUgc3VwcGxpZWQgYGNvbnRhaW5lcmAuXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbnN0cnVjdG9yIFJlYWN0IGNvbXBvbmVudCBjb25zdHJ1Y3Rvci5cbiAgICogQHBhcmFtIHs/b2JqZWN0fSBwcm9wcyBJbml0aWFsIHByb3BzIG9mIHRoZSBjb21wb25lbnQgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIERPTSBlbGVtZW50IHRvIHJlbmRlciBpbnRvLlxuICAgKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudH0gQ29tcG9uZW50IGluc3RhbmNlIHJlbmRlcmVkIGluIGBjb250YWluZXJgLlxuICAgKi9cbiAgY29uc3RydWN0QW5kUmVuZGVyQ29tcG9uZW50OiBmdW5jdGlvbihjb25zdHJ1Y3RvciwgcHJvcHMsIGNvbnRhaW5lcikge1xuICAgIHZhciBlbGVtZW50ID0gY3JlYXRlRWxlbWVudChjb25zdHJ1Y3RvciwgcHJvcHMpO1xuICAgIHJldHVybiBSZWFjdE1vdW50LnJlbmRlcihlbGVtZW50LCBjb250YWluZXIpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgY29tcG9uZW50IGluc3RhbmNlIG9mIGBjb25zdHJ1Y3RvcmAgd2l0aCBgaW5pdGlhbFByb3BzYCBhbmRcbiAgICogcmVuZGVycyBpdCBpbnRvIGEgY29udGFpbmVyIG5vZGUgaWRlbnRpZmllZCBieSBzdXBwbGllZCBgaWRgLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb21wb25lbnRDb25zdHJ1Y3RvciBSZWFjdCBjb21wb25lbnQgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBwcm9wcyBJbml0aWFsIHByb3BzIG9mIHRoZSBjb21wb25lbnQgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiB0aGUgRE9NIGVsZW1lbnQgdG8gcmVuZGVyIGludG8uXG4gICAqIEByZXR1cm4ge1JlYWN0Q29tcG9uZW50fSBDb21wb25lbnQgaW5zdGFuY2UgcmVuZGVyZWQgaW4gdGhlIGNvbnRhaW5lciBub2RlLlxuICAgKi9cbiAgY29uc3RydWN0QW5kUmVuZGVyQ29tcG9uZW50QnlJRDogZnVuY3Rpb24oY29uc3RydWN0b3IsIHByb3BzLCBpZCkge1xuICAgIHZhciBkb21Ob2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBkb21Ob2RlLFxuICAgICAgJ1RyaWVkIHRvIGdldCBlbGVtZW50IHdpdGggaWQgb2YgXCIlc1wiIGJ1dCBpdCBpcyBub3QgcHJlc2VudCBvbiB0aGUgcGFnZS4nLFxuICAgICAgaWRcbiAgICApIDogaW52YXJpYW50KGRvbU5vZGUpKTtcbiAgICByZXR1cm4gUmVhY3RNb3VudC5jb25zdHJ1Y3RBbmRSZW5kZXJDb21wb25lbnQoY29uc3RydWN0b3IsIHByb3BzLCBkb21Ob2RlKTtcbiAgfSxcblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGEgY29udGFpbmVyIG5vZGUgaW50byB3aGljaCBSZWFjdCBjb21wb25lbnRzIHdpbGwgYmUgcmVuZGVyZWQuXG4gICAqIFRoaXMgYWxzbyBjcmVhdGVzIHRoZSBcInJlYWN0Um9vdFwiIElEIHRoYXQgd2lsbCBiZSBhc3NpZ25lZCB0byB0aGUgZWxlbWVudFxuICAgKiByZW5kZXJlZCB3aXRoaW4uXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIERPTSBlbGVtZW50IHRvIHJlZ2lzdGVyIGFzIGEgY29udGFpbmVyLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBcInJlYWN0Um9vdFwiIElEIG9mIGVsZW1lbnRzIHJlbmRlcmVkIHdpdGhpbi5cbiAgICovXG4gIHJlZ2lzdGVyQ29udGFpbmVyOiBmdW5jdGlvbihjb250YWluZXIpIHtcbiAgICB2YXIgcmVhY3RSb290SUQgPSBnZXRSZWFjdFJvb3RJRChjb250YWluZXIpO1xuICAgIGlmIChyZWFjdFJvb3RJRCkge1xuICAgICAgLy8gSWYgb25lIGV4aXN0cywgbWFrZSBzdXJlIGl0IGlzIGEgdmFsaWQgXCJyZWFjdFJvb3RcIiBJRC5cbiAgICAgIHJlYWN0Um9vdElEID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuZ2V0UmVhY3RSb290SURGcm9tTm9kZUlEKHJlYWN0Um9vdElEKTtcbiAgICB9XG4gICAgaWYgKCFyZWFjdFJvb3RJRCkge1xuICAgICAgLy8gTm8gdmFsaWQgXCJyZWFjdFJvb3RcIiBJRCBmb3VuZCwgY3JlYXRlIG9uZS5cbiAgICAgIHJlYWN0Um9vdElEID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuY3JlYXRlUmVhY3RSb290SUQoKTtcbiAgICB9XG4gICAgY29udGFpbmVyc0J5UmVhY3RSb290SURbcmVhY3RSb290SURdID0gY29udGFpbmVyO1xuICAgIHJldHVybiByZWFjdFJvb3RJRDtcbiAgfSxcblxuICAvKipcbiAgICogVW5tb3VudHMgYW5kIGRlc3Ryb3lzIHRoZSBSZWFjdCBjb21wb25lbnQgcmVuZGVyZWQgaW4gdGhlIGBjb250YWluZXJgLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCBjb250YWluaW5nIGEgUmVhY3QgY29tcG9uZW50LlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGEgY29tcG9uZW50IHdhcyBmb3VuZCBpbiBhbmQgdW5tb3VudGVkIGZyb21cbiAgICogICAgICAgICAgICAgICAgICAgYGNvbnRhaW5lcmBcbiAgICovXG4gIHVubW91bnRDb21wb25lbnRBdE5vZGU6IGZ1bmN0aW9uKGNvbnRhaW5lcikge1xuICAgIC8vIFZhcmlvdXMgcGFydHMgb2Ygb3VyIGNvZGUgKHN1Y2ggYXMgUmVhY3RDb21wb3NpdGVDb21wb25lbnQnc1xuICAgIC8vIF9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQpIGFzc3VtZSB0aGF0IGNhbGxzIHRvIHJlbmRlciBhcmVuJ3QgbmVzdGVkO1xuICAgIC8vIHZlcmlmeSB0aGF0IHRoYXQncyB0aGUgY2FzZS4gKFN0cmljdGx5IHNwZWFraW5nLCB1bm1vdW50aW5nIHdvbid0IGNhdXNlIGFcbiAgICAvLyByZW5kZXIgYnV0IHdlIHN0aWxsIGRvbid0IGV4cGVjdCB0byBiZSBpbiBhIHJlbmRlciBjYWxsIGhlcmUuKVxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9PSBudWxsLFxuICAgICAgJ3VubW91bnRDb21wb25lbnRBdE5vZGUoKTogUmVuZGVyIG1ldGhvZHMgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiBvZiAnICtcbiAgICAgICdwcm9wcyBhbmQgc3RhdGU7IHRyaWdnZXJpbmcgbmVzdGVkIGNvbXBvbmVudCB1cGRhdGVzIGZyb20gcmVuZGVyIGlzICcgK1xuICAgICAgJ25vdCBhbGxvd2VkLiBJZiBuZWNlc3NhcnksIHRyaWdnZXIgbmVzdGVkIHVwZGF0ZXMgaW4gJyArXG4gICAgICAnY29tcG9uZW50RGlkVXBkYXRlLidcbiAgICApIDogbnVsbCk7XG5cbiAgICB2YXIgcmVhY3RSb290SUQgPSBnZXRSZWFjdFJvb3RJRChjb250YWluZXIpO1xuICAgIHZhciBjb21wb25lbnQgPSBpbnN0YW5jZXNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXTtcbiAgICBpZiAoIWNvbXBvbmVudCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBSZWFjdE1vdW50LnVubW91bnRDb21wb25lbnRGcm9tTm9kZShjb21wb25lbnQsIGNvbnRhaW5lcik7XG4gICAgZGVsZXRlIGluc3RhbmNlc0J5UmVhY3RSb290SURbcmVhY3RSb290SURdO1xuICAgIGRlbGV0ZSBjb250YWluZXJzQnlSZWFjdFJvb3RJRFtyZWFjdFJvb3RJRF07XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgZGVsZXRlIHJvb3RFbGVtZW50c0J5UmVhY3RSb290SURbcmVhY3RSb290SURdO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICogVW5tb3VudHMgYSBjb21wb25lbnQgYW5kIHJlbW92ZXMgaXQgZnJvbSB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBpbnN0YW5jZSBSZWFjdCBjb21wb25lbnQgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIERPTSBlbGVtZW50IHRvIHVubW91bnQgZnJvbS5cbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAc2VlIHtSZWFjdE1vdW50LnVubW91bnRDb21wb25lbnRBdE5vZGV9XG4gICAqL1xuICB1bm1vdW50Q29tcG9uZW50RnJvbU5vZGU6IGZ1bmN0aW9uKGluc3RhbmNlLCBjb250YWluZXIpIHtcbiAgICBpbnN0YW5jZS51bm1vdW50Q29tcG9uZW50KCk7XG5cbiAgICBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFKSB7XG4gICAgICBjb250YWluZXIgPSBjb250YWluZXIuZG9jdW1lbnRFbGVtZW50O1xuICAgIH1cblxuICAgIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2VtcHR5aW5nLWEtbm9kZVxuICAgIHdoaWxlIChjb250YWluZXIubGFzdENoaWxkKSB7XG4gICAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQoY29udGFpbmVyLmxhc3RDaGlsZCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBGaW5kcyB0aGUgY29udGFpbmVyIERPTSBlbGVtZW50IHRoYXQgY29udGFpbnMgUmVhY3QgY29tcG9uZW50IHRvIHdoaWNoIHRoZVxuICAgKiBzdXBwbGllZCBET00gYGlkYCBiZWxvbmdzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIElEIG9mIGFuIGVsZW1lbnQgcmVuZGVyZWQgYnkgYSBSZWFjdCBjb21wb25lbnQuXG4gICAqIEByZXR1cm4gez9ET01FbGVtZW50fSBET00gZWxlbWVudCB0aGF0IGNvbnRhaW5zIHRoZSBgaWRgLlxuICAgKi9cbiAgZmluZFJlYWN0Q29udGFpbmVyRm9ySUQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgdmFyIHJlYWN0Um9vdElEID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuZ2V0UmVhY3RSb290SURGcm9tTm9kZUlEKGlkKTtcbiAgICB2YXIgY29udGFpbmVyID0gY29udGFpbmVyc0J5UmVhY3RSb290SURbcmVhY3RSb290SURdO1xuXG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgICAgdmFyIHJvb3RFbGVtZW50ID0gcm9vdEVsZW1lbnRzQnlSZWFjdFJvb3RJRFtyZWFjdFJvb3RJRF07XG4gICAgICBpZiAocm9vdEVsZW1lbnQgJiYgcm9vdEVsZW1lbnQucGFyZW50Tm9kZSAhPT0gY29udGFpbmVyKSB7XG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICAgLy8gQ2FsbCBpbnRlcm5hbEdldElEIGhlcmUgYmVjYXVzZSBnZXRJRCBjYWxscyBpc1ZhbGlkIHdoaWNoIGNhbGxzXG4gICAgICAgICAgLy8gZmluZFJlYWN0Q29udGFpbmVyRm9ySUQgKHRoaXMgZnVuY3Rpb24pLlxuICAgICAgICAgIGludGVybmFsR2V0SUQocm9vdEVsZW1lbnQpID09PSByZWFjdFJvb3RJRCxcbiAgICAgICAgICAnUmVhY3RNb3VudDogUm9vdCBlbGVtZW50IElEIGRpZmZlcmVkIGZyb20gcmVhY3RSb290SUQuJ1xuICAgICAgICApIDogaW52YXJpYW50KC8vIENhbGwgaW50ZXJuYWxHZXRJRCBoZXJlIGJlY2F1c2UgZ2V0SUQgY2FsbHMgaXNWYWxpZCB3aGljaCBjYWxsc1xuICAgICAgICAvLyBmaW5kUmVhY3RDb250YWluZXJGb3JJRCAodGhpcyBmdW5jdGlvbikuXG4gICAgICAgIGludGVybmFsR2V0SUQocm9vdEVsZW1lbnQpID09PSByZWFjdFJvb3RJRCkpO1xuXG4gICAgICAgIHZhciBjb250YWluZXJDaGlsZCA9IGNvbnRhaW5lci5maXJzdENoaWxkO1xuICAgICAgICBpZiAoY29udGFpbmVyQ2hpbGQgJiZcbiAgICAgICAgICAgIHJlYWN0Um9vdElEID09PSBpbnRlcm5hbEdldElEKGNvbnRhaW5lckNoaWxkKSkge1xuICAgICAgICAgIC8vIElmIHRoZSBjb250YWluZXIgaGFzIGEgbmV3IGNoaWxkIHdpdGggdGhlIHNhbWUgSUQgYXMgdGhlIG9sZFxuICAgICAgICAgIC8vIHJvb3QgZWxlbWVudCwgdGhlbiByb290RWxlbWVudHNCeVJlYWN0Um9vdElEW3JlYWN0Um9vdElEXSBpc1xuICAgICAgICAgIC8vIGp1c3Qgc3RhbGUgYW5kIG5lZWRzIHRvIGJlIHVwZGF0ZWQuIFRoZSBjYXNlIHRoYXQgZGVzZXJ2ZXMgYVxuICAgICAgICAgIC8vIHdhcm5pbmcgaXMgd2hlbiB0aGUgY29udGFpbmVyIGlzIGVtcHR5LlxuICAgICAgICAgIHJvb3RFbGVtZW50c0J5UmVhY3RSb290SURbcmVhY3RSb290SURdID0gY29udGFpbmVyQ2hpbGQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgJ1JlYWN0TW91bnQ6IFJvb3QgZWxlbWVudCBoYXMgYmVlbiByZW1vdmVkIGZyb20gaXRzIG9yaWdpbmFsICcgK1xuICAgICAgICAgICAgJ2NvbnRhaW5lci4gTmV3IGNvbnRhaW5lcjonLCByb290RWxlbWVudC5wYXJlbnROb2RlXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjb250YWluZXI7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZpbmRzIGFuIGVsZW1lbnQgcmVuZGVyZWQgYnkgUmVhY3Qgd2l0aCB0aGUgc3VwcGxpZWQgSUQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJRCBvZiBhIERPTSBub2RlIGluIHRoZSBSZWFjdCBjb21wb25lbnQuXG4gICAqIEByZXR1cm4ge0RPTUVsZW1lbnR9IFJvb3QgRE9NIG5vZGUgb2YgdGhlIFJlYWN0IGNvbXBvbmVudC5cbiAgICovXG4gIGZpbmRSZWFjdE5vZGVCeUlEOiBmdW5jdGlvbihpZCkge1xuICAgIHZhciByZWFjdFJvb3QgPSBSZWFjdE1vdW50LmZpbmRSZWFjdENvbnRhaW5lckZvcklEKGlkKTtcbiAgICByZXR1cm4gUmVhY3RNb3VudC5maW5kQ29tcG9uZW50Um9vdChyZWFjdFJvb3QsIGlkKTtcbiAgfSxcblxuICAvKipcbiAgICogVHJ1ZSBpZiB0aGUgc3VwcGxpZWQgYG5vZGVgIGlzIHJlbmRlcmVkIGJ5IFJlYWN0LlxuICAgKlxuICAgKiBAcGFyYW0geyp9IG5vZGUgRE9NIEVsZW1lbnQgdG8gY2hlY2suXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIERPTSBFbGVtZW50IGFwcGVhcnMgdG8gYmUgcmVuZGVyZWQgYnkgUmVhY3QuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgaXNSZW5kZXJlZEJ5UmVhY3Q6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSAhPT0gMSkge1xuICAgICAgLy8gTm90IGEgRE9NRWxlbWVudCwgdGhlcmVmb3JlIG5vdCBhIFJlYWN0IGNvbXBvbmVudFxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgaWQgPSBSZWFjdE1vdW50LmdldElEKG5vZGUpO1xuICAgIHJldHVybiBpZCA/IGlkLmNoYXJBdCgwKSA9PT0gU0VQQVJBVE9SIDogZmFsc2U7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRyYXZlcnNlcyB1cCB0aGUgYW5jZXN0b3JzIG9mIHRoZSBzdXBwbGllZCBub2RlIHRvIGZpbmQgYSBub2RlIHRoYXQgaXMgYVxuICAgKiBET00gcmVwcmVzZW50YXRpb24gb2YgYSBSZWFjdCBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gbm9kZVxuICAgKiBAcmV0dXJuIHs/RE9NRXZlbnRUYXJnZXR9XG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZ2V0Rmlyc3RSZWFjdERPTTogZnVuY3Rpb24obm9kZSkge1xuICAgIHZhciBjdXJyZW50ID0gbm9kZTtcbiAgICB3aGlsZSAoY3VycmVudCAmJiBjdXJyZW50LnBhcmVudE5vZGUgIT09IGN1cnJlbnQpIHtcbiAgICAgIGlmIChSZWFjdE1vdW50LmlzUmVuZGVyZWRCeVJlYWN0KGN1cnJlbnQpKSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50O1xuICAgICAgfVxuICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50Tm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZpbmRzIGEgbm9kZSB3aXRoIHRoZSBzdXBwbGllZCBgdGFyZ2V0SURgIGluc2lkZSBvZiB0aGUgc3VwcGxpZWRcbiAgICogYGFuY2VzdG9yTm9kZWAuICBFeHBsb2l0cyB0aGUgSUQgbmFtaW5nIHNjaGVtZSB0byBwZXJmb3JtIHRoZSBzZWFyY2hcbiAgICogcXVpY2tseS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gYW5jZXN0b3JOb2RlIFNlYXJjaCBmcm9tIHRoaXMgcm9vdC5cbiAgICogQHBhcmFybSB7c3RyaW5nfSB0YXJnZXRJRCBJRCBvZiB0aGUgRE9NIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEByZXR1cm4ge0RPTUV2ZW50VGFyZ2V0fSBET00gbm9kZSB3aXRoIHRoZSBzdXBwbGllZCBgdGFyZ2V0SURgLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGZpbmRDb21wb25lbnRSb290OiBmdW5jdGlvbihhbmNlc3Rvck5vZGUsIHRhcmdldElEKSB7XG4gICAgdmFyIGZpcnN0Q2hpbGRyZW4gPSBmaW5kQ29tcG9uZW50Um9vdFJldXNhYmxlQXJyYXk7XG4gICAgdmFyIGNoaWxkSW5kZXggPSAwO1xuXG4gICAgdmFyIGRlZXBlc3RBbmNlc3RvciA9IGZpbmREZWVwZXN0Q2FjaGVkQW5jZXN0b3IodGFyZ2V0SUQpIHx8IGFuY2VzdG9yTm9kZTtcblxuICAgIGZpcnN0Q2hpbGRyZW5bMF0gPSBkZWVwZXN0QW5jZXN0b3IuZmlyc3RDaGlsZDtcbiAgICBmaXJzdENoaWxkcmVuLmxlbmd0aCA9IDE7XG5cbiAgICB3aGlsZSAoY2hpbGRJbmRleCA8IGZpcnN0Q2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICB2YXIgY2hpbGQgPSBmaXJzdENoaWxkcmVuW2NoaWxkSW5kZXgrK107XG4gICAgICB2YXIgdGFyZ2V0Q2hpbGQ7XG5cbiAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICB2YXIgY2hpbGRJRCA9IFJlYWN0TW91bnQuZ2V0SUQoY2hpbGQpO1xuICAgICAgICBpZiAoY2hpbGRJRCkge1xuICAgICAgICAgIC8vIEV2ZW4gaWYgd2UgZmluZCB0aGUgbm9kZSB3ZSdyZSBsb29raW5nIGZvciwgd2UgZmluaXNoIGxvb3BpbmdcbiAgICAgICAgICAvLyB0aHJvdWdoIGl0cyBzaWJsaW5ncyB0byBlbnN1cmUgdGhleSdyZSBjYWNoZWQgc28gdGhhdCB3ZSBkb24ndCBoYXZlXG4gICAgICAgICAgLy8gdG8gcmV2aXNpdCB0aGlzIG5vZGUgYWdhaW4uIE90aGVyd2lzZSwgd2UgbWFrZSBuXjIgY2FsbHMgdG8gZ2V0SURcbiAgICAgICAgICAvLyB3aGVuIHZpc2l0aW5nIHRoZSBtYW55IGNoaWxkcmVuIG9mIGEgc2luZ2xlIG5vZGUgaW4gb3JkZXIuXG5cbiAgICAgICAgICBpZiAodGFyZ2V0SUQgPT09IGNoaWxkSUQpIHtcbiAgICAgICAgICAgIHRhcmdldENoaWxkID0gY2hpbGQ7XG4gICAgICAgICAgfSBlbHNlIGlmIChSZWFjdEluc3RhbmNlSGFuZGxlcy5pc0FuY2VzdG9ySURPZihjaGlsZElELCB0YXJnZXRJRCkpIHtcbiAgICAgICAgICAgIC8vIElmIHdlIGZpbmQgYSBjaGlsZCB3aG9zZSBJRCBpcyBhbiBhbmNlc3RvciBvZiB0aGUgZ2l2ZW4gSUQsXG4gICAgICAgICAgICAvLyB0aGVuIHdlIGNhbiBiZSBzdXJlIHRoYXQgd2Ugb25seSB3YW50IHRvIHNlYXJjaCB0aGUgc3VidHJlZVxuICAgICAgICAgICAgLy8gcm9vdGVkIGF0IHRoaXMgY2hpbGQsIHNvIHdlIGNhbiB0aHJvdyBvdXQgdGhlIHJlc3Qgb2YgdGhlXG4gICAgICAgICAgICAvLyBzZWFyY2ggc3RhdGUuXG4gICAgICAgICAgICBmaXJzdENoaWxkcmVuLmxlbmd0aCA9IGNoaWxkSW5kZXggPSAwO1xuICAgICAgICAgICAgZmlyc3RDaGlsZHJlbi5wdXNoKGNoaWxkLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIElmIHRoaXMgY2hpbGQgaGFkIG5vIElELCB0aGVuIHRoZXJlJ3MgYSBjaGFuY2UgdGhhdCBpdCB3YXNcbiAgICAgICAgICAvLyBpbmplY3RlZCBhdXRvbWF0aWNhbGx5IGJ5IHRoZSBicm93c2VyLCBhcyB3aGVuIGEgYDx0YWJsZT5gXG4gICAgICAgICAgLy8gZWxlbWVudCBzcHJvdXRzIGFuIGV4dHJhIGA8dGJvZHk+YCBjaGlsZCBhcyBhIHNpZGUgZWZmZWN0IG9mXG4gICAgICAgICAgLy8gYC5pbm5lckhUTUxgIHBhcnNpbmcuIE9wdGltaXN0aWNhbGx5IGNvbnRpbnVlIGRvd24gdGhpc1xuICAgICAgICAgIC8vIGJyYW5jaCwgYnV0IG5vdCBiZWZvcmUgZXhhbWluaW5nIHRoZSBvdGhlciBzaWJsaW5ncy5cbiAgICAgICAgICBmaXJzdENoaWxkcmVuLnB1c2goY2hpbGQuZmlyc3RDaGlsZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgfVxuXG4gICAgICBpZiAodGFyZ2V0Q2hpbGQpIHtcbiAgICAgICAgLy8gRW1wdHlpbmcgZmlyc3RDaGlsZHJlbi9maW5kQ29tcG9uZW50Um9vdFJldXNhYmxlQXJyYXkgaXNcbiAgICAgICAgLy8gbm90IG5lY2Vzc2FyeSBmb3IgY29ycmVjdG5lc3MsIGJ1dCBpdCBoZWxwcyB0aGUgR0MgcmVjbGFpbVxuICAgICAgICAvLyBhbnkgbm9kZXMgdGhhdCB3ZXJlIGxlZnQgYXQgdGhlIGVuZCBvZiB0aGUgc2VhcmNoLlxuICAgICAgICBmaXJzdENoaWxkcmVuLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldENoaWxkO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZpcnN0Q2hpbGRyZW4ubGVuZ3RoID0gMDtcblxuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBmYWxzZSxcbiAgICAgICdmaW5kQ29tcG9uZW50Um9vdCguLi4sICVzKTogVW5hYmxlIHRvIGZpbmQgZWxlbWVudC4gVGhpcyBwcm9iYWJseSAnICtcbiAgICAgICdtZWFucyB0aGUgRE9NIHdhcyB1bmV4cGVjdGVkbHkgbXV0YXRlZCAoZS5nLiwgYnkgdGhlIGJyb3dzZXIpLCAnICtcbiAgICAgICd1c3VhbGx5IGR1ZSB0byBmb3JnZXR0aW5nIGEgPHRib2R5PiB3aGVuIHVzaW5nIHRhYmxlcywgbmVzdGluZyB0YWdzICcgK1xuICAgICAgJ2xpa2UgPGZvcm0+LCA8cD4sIG9yIDxhPiwgb3IgdXNpbmcgbm9uLVNWRyBlbGVtZW50cyBpbiBhbiA8c3ZnPiAnICtcbiAgICAgICdwYXJlbnQuICcgK1xuICAgICAgJ1RyeSBpbnNwZWN0aW5nIHRoZSBjaGlsZCBub2RlcyBvZiB0aGUgZWxlbWVudCB3aXRoIFJlYWN0IElEIGAlc2AuJyxcbiAgICAgIHRhcmdldElELFxuICAgICAgUmVhY3RNb3VudC5nZXRJRChhbmNlc3Rvck5vZGUpXG4gICAgKSA6IGludmFyaWFudChmYWxzZSkpO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIFJlYWN0IElEIHV0aWxpdGllcy5cbiAgICovXG5cbiAgZ2V0UmVhY3RSb290SUQ6IGdldFJlYWN0Um9vdElELFxuXG4gIGdldElEOiBnZXRJRCxcblxuICBzZXRJRDogc2V0SUQsXG5cbiAgZ2V0Tm9kZTogZ2V0Tm9kZSxcblxuICBwdXJnZUlEOiBwdXJnZUlEXG59O1xuXG4vLyBEZXByZWNhdGlvbnMgKHJlbW92ZSBmb3IgMC4xMylcblJlYWN0TW91bnQucmVuZGVyQ29tcG9uZW50ID0gZGVwcmVjYXRlZChcbiAgJ1JlYWN0TW91bnQnLFxuICAncmVuZGVyQ29tcG9uZW50JyxcbiAgJ3JlbmRlcicsXG4gIHRoaXMsXG4gIFJlYWN0TW91bnQucmVuZGVyXG4pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0TW91bnQ7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL0RPTVByb3BlcnR5XCI6NzksXCIuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlclwiOjk5LFwiLi9SZWFjdEN1cnJlbnRPd25lclwiOjEwNSxcIi4vUmVhY3RFbGVtZW50XCI6MTIxLFwiLi9SZWFjdEluc3RhbmNlSGFuZGxlc1wiOjEyOSxcIi4vUmVhY3RMZWdhY3lFbGVtZW50XCI6MTMwLFwiLi9SZWFjdFBlcmZcIjoxMzcsXCIuL2NvbnRhaW5zTm9kZVwiOjE3MCxcIi4vZGVwcmVjYXRlZFwiOjE3NixcIi4vZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyXCI6MTkwLFwiLi9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50XCI6MTk1LFwiLi9pbnZhcmlhbnRcIjoxOTYsXCIuL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50XCI6MjEyLFwiLi93YXJuaW5nXCI6MjE1LFwiX3Byb2Nlc3NcIjoxOX1dLDEzMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RNdWx0aUNoaWxkXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdENvbXBvbmVudFwiKTtcbnZhciBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcyA9IHJlcXVpcmUoXCIuL1JlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzXCIpO1xuXG52YXIgZmxhdHRlbkNoaWxkcmVuID0gcmVxdWlyZShcIi4vZmxhdHRlbkNoaWxkcmVuXCIpO1xudmFyIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKFwiLi9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50XCIpO1xudmFyIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnRcIik7XG5cbi8qKlxuICogVXBkYXRpbmcgY2hpbGRyZW4gb2YgYSBjb21wb25lbnQgbWF5IHRyaWdnZXIgcmVjdXJzaXZlIHVwZGF0ZXMuIFRoZSBkZXB0aCBpc1xuICogdXNlZCB0byBiYXRjaCByZWN1cnNpdmUgdXBkYXRlcyB0byByZW5kZXIgbWFya3VwIG1vcmUgZWZmaWNpZW50bHkuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBwcml2YXRlXG4gKi9cbnZhciB1cGRhdGVEZXB0aCA9IDA7XG5cbi8qKlxuICogUXVldWUgb2YgdXBkYXRlIGNvbmZpZ3VyYXRpb24gb2JqZWN0cy5cbiAqXG4gKiBFYWNoIG9iamVjdCBoYXMgYSBgdHlwZWAgcHJvcGVydHkgdGhhdCBpcyBpbiBgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXNgLlxuICpcbiAqIEB0eXBlIHthcnJheTxvYmplY3Q+fVxuICogQHByaXZhdGVcbiAqL1xudmFyIHVwZGF0ZVF1ZXVlID0gW107XG5cbi8qKlxuICogUXVldWUgb2YgbWFya3VwIHRvIGJlIHJlbmRlcmVkLlxuICpcbiAqIEB0eXBlIHthcnJheTxzdHJpbmc+fVxuICogQHByaXZhdGVcbiAqL1xudmFyIG1hcmt1cFF1ZXVlID0gW107XG5cbi8qKlxuICogRW5xdWV1ZXMgbWFya3VwIHRvIGJlIHJlbmRlcmVkIGFuZCBpbnNlcnRlZCBhdCBhIHN1cHBsaWVkIGluZGV4LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJlbnRJRCBJRCBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgTWFya3VwIHRoYXQgcmVuZGVycyBpbnRvIGFuIGVsZW1lbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gdG9JbmRleCBEZXN0aW5hdGlvbiBpbmRleC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGVucXVldWVNYXJrdXAocGFyZW50SUQsIG1hcmt1cCwgdG9JbmRleCkge1xuICAvLyBOT1RFOiBOdWxsIHZhbHVlcyByZWR1Y2UgaGlkZGVuIGNsYXNzZXMuXG4gIHVwZGF0ZVF1ZXVlLnB1c2goe1xuICAgIHBhcmVudElEOiBwYXJlbnRJRCxcbiAgICBwYXJlbnROb2RlOiBudWxsLFxuICAgIHR5cGU6IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLklOU0VSVF9NQVJLVVAsXG4gICAgbWFya3VwSW5kZXg6IG1hcmt1cFF1ZXVlLnB1c2gobWFya3VwKSAtIDEsXG4gICAgdGV4dENvbnRlbnQ6IG51bGwsXG4gICAgZnJvbUluZGV4OiBudWxsLFxuICAgIHRvSW5kZXg6IHRvSW5kZXhcbiAgfSk7XG59XG5cbi8qKlxuICogRW5xdWV1ZXMgbW92aW5nIGFuIGV4aXN0aW5nIGVsZW1lbnQgdG8gYW5vdGhlciBpbmRleC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyZW50SUQgSUQgb2YgdGhlIHBhcmVudCBjb21wb25lbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFNvdXJjZSBpbmRleCBvZiB0aGUgZXhpc3RpbmcgZWxlbWVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB0b0luZGV4IERlc3RpbmF0aW9uIGluZGV4IG9mIHRoZSBlbGVtZW50LlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZW5xdWV1ZU1vdmUocGFyZW50SUQsIGZyb21JbmRleCwgdG9JbmRleCkge1xuICAvLyBOT1RFOiBOdWxsIHZhbHVlcyByZWR1Y2UgaGlkZGVuIGNsYXNzZXMuXG4gIHVwZGF0ZVF1ZXVlLnB1c2goe1xuICAgIHBhcmVudElEOiBwYXJlbnRJRCxcbiAgICBwYXJlbnROb2RlOiBudWxsLFxuICAgIHR5cGU6IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLk1PVkVfRVhJU1RJTkcsXG4gICAgbWFya3VwSW5kZXg6IG51bGwsXG4gICAgdGV4dENvbnRlbnQ6IG51bGwsXG4gICAgZnJvbUluZGV4OiBmcm9tSW5kZXgsXG4gICAgdG9JbmRleDogdG9JbmRleFxuICB9KTtcbn1cblxuLyoqXG4gKiBFbnF1ZXVlcyByZW1vdmluZyBhbiBlbGVtZW50IGF0IGFuIGluZGV4LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJlbnRJRCBJRCBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggSW5kZXggb2YgdGhlIGVsZW1lbnQgdG8gcmVtb3ZlLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZW5xdWV1ZVJlbW92ZShwYXJlbnRJRCwgZnJvbUluZGV4KSB7XG4gIC8vIE5PVEU6IE51bGwgdmFsdWVzIHJlZHVjZSBoaWRkZW4gY2xhc3Nlcy5cbiAgdXBkYXRlUXVldWUucHVzaCh7XG4gICAgcGFyZW50SUQ6IHBhcmVudElELFxuICAgIHBhcmVudE5vZGU6IG51bGwsXG4gICAgdHlwZTogUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuUkVNT1ZFX05PREUsXG4gICAgbWFya3VwSW5kZXg6IG51bGwsXG4gICAgdGV4dENvbnRlbnQ6IG51bGwsXG4gICAgZnJvbUluZGV4OiBmcm9tSW5kZXgsXG4gICAgdG9JbmRleDogbnVsbFxuICB9KTtcbn1cblxuLyoqXG4gKiBFbnF1ZXVlcyBzZXR0aW5nIHRoZSB0ZXh0IGNvbnRlbnQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmVudElEIElEIG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHRDb250ZW50IFRleHQgY29udGVudCB0byBzZXQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBlbnF1ZXVlVGV4dENvbnRlbnQocGFyZW50SUQsIHRleHRDb250ZW50KSB7XG4gIC8vIE5PVEU6IE51bGwgdmFsdWVzIHJlZHVjZSBoaWRkZW4gY2xhc3Nlcy5cbiAgdXBkYXRlUXVldWUucHVzaCh7XG4gICAgcGFyZW50SUQ6IHBhcmVudElELFxuICAgIHBhcmVudE5vZGU6IG51bGwsXG4gICAgdHlwZTogUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuVEVYVF9DT05URU5ULFxuICAgIG1hcmt1cEluZGV4OiBudWxsLFxuICAgIHRleHRDb250ZW50OiB0ZXh0Q29udGVudCxcbiAgICBmcm9tSW5kZXg6IG51bGwsXG4gICAgdG9JbmRleDogbnVsbFxuICB9KTtcbn1cblxuLyoqXG4gKiBQcm9jZXNzZXMgYW55IGVucXVldWVkIHVwZGF0ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcHJvY2Vzc1F1ZXVlKCkge1xuICBpZiAodXBkYXRlUXVldWUubGVuZ3RoKSB7XG4gICAgUmVhY3RDb21wb25lbnQuQmFja2VuZElET3BlcmF0aW9ucy5kYW5nZXJvdXNseVByb2Nlc3NDaGlsZHJlblVwZGF0ZXMoXG4gICAgICB1cGRhdGVRdWV1ZSxcbiAgICAgIG1hcmt1cFF1ZXVlXG4gICAgKTtcbiAgICBjbGVhclF1ZXVlKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBDbGVhcnMgYW55IGVucXVldWVkIHVwZGF0ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY2xlYXJRdWV1ZSgpIHtcbiAgdXBkYXRlUXVldWUubGVuZ3RoID0gMDtcbiAgbWFya3VwUXVldWUubGVuZ3RoID0gMDtcbn1cblxuLyoqXG4gKiBSZWFjdE11bHRpQ2hpbGQgYXJlIGNhcGFibGUgb2YgcmVjb25jaWxpbmcgbXVsdGlwbGUgY2hpbGRyZW4uXG4gKlxuICogQGNsYXNzIFJlYWN0TXVsdGlDaGlsZFxuICogQGludGVybmFsXG4gKi9cbnZhciBSZWFjdE11bHRpQ2hpbGQgPSB7XG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIGNvbW1vbiBmdW5jdGlvbmFsaXR5IGZvciBjb21wb25lbnRzIHRoYXQgbXVzdCByZWNvbmNpbGUgbXVsdGlwbGVcbiAgICogY2hpbGRyZW4uIFRoaXMgaXMgdXNlZCBieSBgUmVhY3RET01Db21wb25lbnRgIHRvIG1vdW50LCB1cGRhdGUsIGFuZFxuICAgKiB1bm1vdW50IGNoaWxkIGNvbXBvbmVudHMuXG4gICAqXG4gICAqIEBsZW5kcyB7UmVhY3RNdWx0aUNoaWxkLnByb3RvdHlwZX1cbiAgICovXG4gIE1peGluOiB7XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBcIm1vdW50IGltYWdlXCIgZm9yIGVhY2ggb2YgdGhlIHN1cHBsaWVkIGNoaWxkcmVuLiBJbiB0aGUgY2FzZVxuICAgICAqIG9mIGBSZWFjdERPTUNvbXBvbmVudGAsIGEgbW91bnQgaW1hZ2UgaXMgYSBzdHJpbmcgb2YgbWFya3VwLlxuICAgICAqXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXN0ZWRDaGlsZHJlbiBOZXN0ZWQgY2hpbGQgbWFwcy5cbiAgICAgKiBAcmV0dXJuIHthcnJheX0gQW4gYXJyYXkgb2YgbW91bnRlZCByZXByZXNlbnRhdGlvbnMuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgbW91bnRDaGlsZHJlbjogZnVuY3Rpb24obmVzdGVkQ2hpbGRyZW4sIHRyYW5zYWN0aW9uKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBmbGF0dGVuQ2hpbGRyZW4obmVzdGVkQ2hpbGRyZW4pO1xuICAgICAgdmFyIG1vdW50SW1hZ2VzID0gW107XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdGhpcy5fcmVuZGVyZWRDaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgICAgZm9yICh2YXIgbmFtZSBpbiBjaGlsZHJlbikge1xuICAgICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltuYW1lXTtcbiAgICAgICAgaWYgKGNoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgLy8gVGhlIHJlbmRlcmVkIGNoaWxkcmVuIG11c3QgYmUgdHVybmVkIGludG8gaW5zdGFuY2VzIGFzIHRoZXkncmVcbiAgICAgICAgICAvLyBtb3VudGVkLlxuICAgICAgICAgIHZhciBjaGlsZEluc3RhbmNlID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChjaGlsZCwgbnVsbCk7XG4gICAgICAgICAgY2hpbGRyZW5bbmFtZV0gPSBjaGlsZEluc3RhbmNlO1xuICAgICAgICAgIC8vIElubGluZWQgZm9yIHBlcmZvcm1hbmNlLCBzZWUgYFJlYWN0SW5zdGFuY2VIYW5kbGVzLmNyZWF0ZVJlYWN0SURgLlxuICAgICAgICAgIHZhciByb290SUQgPSB0aGlzLl9yb290Tm9kZUlEICsgbmFtZTtcbiAgICAgICAgICB2YXIgbW91bnRJbWFnZSA9IGNoaWxkSW5zdGFuY2UubW91bnRDb21wb25lbnQoXG4gICAgICAgICAgICByb290SUQsXG4gICAgICAgICAgICB0cmFuc2FjdGlvbixcbiAgICAgICAgICAgIHRoaXMuX21vdW50RGVwdGggKyAxXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjaGlsZEluc3RhbmNlLl9tb3VudEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgbW91bnRJbWFnZXMucHVzaChtb3VudEltYWdlKTtcbiAgICAgICAgICBpbmRleCsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbW91bnRJbWFnZXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2VzIGFueSByZW5kZXJlZCBjaGlsZHJlbiB3aXRoIGEgdGV4dCBjb250ZW50IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZXh0Q29udGVudCBTdHJpbmcgb2YgY29udGVudC5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB1cGRhdGVUZXh0Q29udGVudDogZnVuY3Rpb24obmV4dENvbnRlbnQpIHtcbiAgICAgIHVwZGF0ZURlcHRoKys7XG4gICAgICB2YXIgZXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW47XG4gICAgICAgIC8vIFJlbW92ZSBhbnkgcmVuZGVyZWQgY2hpbGRyZW4uXG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gcHJldkNoaWxkcmVuKSB7XG4gICAgICAgICAgaWYgKHByZXZDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICAgdGhpcy5fdW5tb3VudENoaWxkQnlOYW1lKHByZXZDaGlsZHJlbltuYW1lXSwgbmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFNldCBuZXcgdGV4dCBjb250ZW50LlxuICAgICAgICB0aGlzLnNldFRleHRDb250ZW50KG5leHRDb250ZW50KTtcbiAgICAgICAgZXJyb3JUaHJvd24gPSBmYWxzZTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHVwZGF0ZURlcHRoLS07XG4gICAgICAgIGlmICghdXBkYXRlRGVwdGgpIHtcbiAgICAgICAgICBlcnJvclRocm93biA/IGNsZWFyUXVldWUoKSA6IHByb2Nlc3NRdWV1ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIHJlbmRlcmVkIGNoaWxkcmVuIHdpdGggbmV3IGNoaWxkcmVuLlxuICAgICAqXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0TmVzdGVkQ2hpbGRyZW4gTmVzdGVkIGNoaWxkIG1hcHMuXG4gICAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHVwZGF0ZUNoaWxkcmVuOiBmdW5jdGlvbihuZXh0TmVzdGVkQ2hpbGRyZW4sIHRyYW5zYWN0aW9uKSB7XG4gICAgICB1cGRhdGVEZXB0aCsrO1xuICAgICAgdmFyIGVycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUNoaWxkcmVuKG5leHROZXN0ZWRDaGlsZHJlbiwgdHJhbnNhY3Rpb24pO1xuICAgICAgICBlcnJvclRocm93biA9IGZhbHNlO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdXBkYXRlRGVwdGgtLTtcbiAgICAgICAgaWYgKCF1cGRhdGVEZXB0aCkge1xuICAgICAgICAgIGVycm9yVGhyb3duID8gY2xlYXJRdWV1ZSgpIDogcHJvY2Vzc1F1ZXVlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSW1wcm92ZSBwZXJmb3JtYW5jZSBieSBpc29sYXRpbmcgdGhpcyBob3QgY29kZSBwYXRoIGZyb20gdGhlIHRyeS9jYXRjaFxuICAgICAqIGJsb2NrIGluIGB1cGRhdGVDaGlsZHJlbmAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHROZXN0ZWRDaGlsZHJlbiBOZXN0ZWQgY2hpbGQgbWFwcy5cbiAgICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAgICogQGZpbmFsXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIF91cGRhdGVDaGlsZHJlbjogZnVuY3Rpb24obmV4dE5lc3RlZENoaWxkcmVuLCB0cmFuc2FjdGlvbikge1xuICAgICAgdmFyIG5leHRDaGlsZHJlbiA9IGZsYXR0ZW5DaGlsZHJlbihuZXh0TmVzdGVkQ2hpbGRyZW4pO1xuICAgICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW47XG4gICAgICBpZiAoIW5leHRDaGlsZHJlbiAmJiAhcHJldkNoaWxkcmVuKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBuYW1lO1xuICAgICAgLy8gYG5leHRJbmRleGAgd2lsbCBpbmNyZW1lbnQgZm9yIGVhY2ggY2hpbGQgaW4gYG5leHRDaGlsZHJlbmAsIGJ1dFxuICAgICAgLy8gYGxhc3RJbmRleGAgd2lsbCBiZSB0aGUgbGFzdCBpbmRleCB2aXNpdGVkIGluIGBwcmV2Q2hpbGRyZW5gLlxuICAgICAgdmFyIGxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gMDtcbiAgICAgIGZvciAobmFtZSBpbiBuZXh0Q2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKCFuZXh0Q2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJldkNoaWxkID0gcHJldkNoaWxkcmVuICYmIHByZXZDaGlsZHJlbltuYW1lXTtcbiAgICAgICAgdmFyIHByZXZFbGVtZW50ID0gcHJldkNoaWxkICYmIHByZXZDaGlsZC5fY3VycmVudEVsZW1lbnQ7XG4gICAgICAgIHZhciBuZXh0RWxlbWVudCA9IG5leHRDaGlsZHJlbltuYW1lXTtcbiAgICAgICAgaWYgKHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50KHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCkpIHtcbiAgICAgICAgICB0aGlzLm1vdmVDaGlsZChwcmV2Q2hpbGQsIG5leHRJbmRleCwgbGFzdEluZGV4KTtcbiAgICAgICAgICBsYXN0SW5kZXggPSBNYXRoLm1heChwcmV2Q2hpbGQuX21vdW50SW5kZXgsIGxhc3RJbmRleCk7XG4gICAgICAgICAgcHJldkNoaWxkLnJlY2VpdmVDb21wb25lbnQobmV4dEVsZW1lbnQsIHRyYW5zYWN0aW9uKTtcbiAgICAgICAgICBwcmV2Q2hpbGQuX21vdW50SW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHByZXZDaGlsZCkge1xuICAgICAgICAgICAgLy8gVXBkYXRlIGBsYXN0SW5kZXhgIGJlZm9yZSBgX21vdW50SW5kZXhgIGdldHMgdW5zZXQgYnkgdW5tb3VudGluZy5cbiAgICAgICAgICAgIGxhc3RJbmRleCA9IE1hdGgubWF4KHByZXZDaGlsZC5fbW91bnRJbmRleCwgbGFzdEluZGV4KTtcbiAgICAgICAgICAgIHRoaXMuX3VubW91bnRDaGlsZEJ5TmFtZShwcmV2Q2hpbGQsIG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBUaGUgY2hpbGQgbXVzdCBiZSBpbnN0YW50aWF0ZWQgYmVmb3JlIGl0J3MgbW91bnRlZC5cbiAgICAgICAgICB2YXIgbmV4dENoaWxkSW5zdGFuY2UgPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KFxuICAgICAgICAgICAgbmV4dEVsZW1lbnQsXG4gICAgICAgICAgICBudWxsXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLl9tb3VudENoaWxkQnlOYW1lQXRJbmRleChcbiAgICAgICAgICAgIG5leHRDaGlsZEluc3RhbmNlLCBuYW1lLCBuZXh0SW5kZXgsIHRyYW5zYWN0aW9uXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBuZXh0SW5kZXgrKztcbiAgICAgIH1cbiAgICAgIC8vIFJlbW92ZSBjaGlsZHJlbiB0aGF0IGFyZSBubyBsb25nZXIgcHJlc2VudC5cbiAgICAgIGZvciAobmFtZSBpbiBwcmV2Q2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKHByZXZDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJlxuICAgICAgICAgICAgIShuZXh0Q2hpbGRyZW4gJiYgbmV4dENoaWxkcmVuW25hbWVdKSkge1xuICAgICAgICAgIHRoaXMuX3VubW91bnRDaGlsZEJ5TmFtZShwcmV2Q2hpbGRyZW5bbmFtZV0sIG5hbWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVubW91bnRzIGFsbCByZW5kZXJlZCBjaGlsZHJlbi4gVGhpcyBzaG91bGQgYmUgdXNlZCB0byBjbGVhbiB1cCBjaGlsZHJlblxuICAgICAqIHdoZW4gdGhpcyBjb21wb25lbnQgaXMgdW5tb3VudGVkLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdW5tb3VudENoaWxkcmVuOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZW5kZXJlZENoaWxkcmVuID0gdGhpcy5fcmVuZGVyZWRDaGlsZHJlbjtcbiAgICAgIGZvciAodmFyIG5hbWUgaW4gcmVuZGVyZWRDaGlsZHJlbikge1xuICAgICAgICB2YXIgcmVuZGVyZWRDaGlsZCA9IHJlbmRlcmVkQ2hpbGRyZW5bbmFtZV07XG4gICAgICAgIC8vIFRPRE86IFdoZW4gaXMgdGhpcyBub3QgdHJ1ZT9cbiAgICAgICAgaWYgKHJlbmRlcmVkQ2hpbGQudW5tb3VudENvbXBvbmVudCkge1xuICAgICAgICAgIHJlbmRlcmVkQ2hpbGQudW5tb3VudENvbXBvbmVudCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLl9yZW5kZXJlZENoaWxkcmVuID0gbnVsbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTW92ZXMgYSBjaGlsZCBjb21wb25lbnQgdG8gdGhlIHN1cHBsaWVkIGluZGV4LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY2hpbGQgQ29tcG9uZW50IHRvIG1vdmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRvSW5kZXggRGVzdGluYXRpb24gaW5kZXggb2YgdGhlIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxhc3RJbmRleCBMYXN0IGluZGV4IHZpc2l0ZWQgb2YgdGhlIHNpYmxpbmdzIG9mIGBjaGlsZGAuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIG1vdmVDaGlsZDogZnVuY3Rpb24oY2hpbGQsIHRvSW5kZXgsIGxhc3RJbmRleCkge1xuICAgICAgLy8gSWYgdGhlIGluZGV4IG9mIGBjaGlsZGAgaXMgbGVzcyB0aGFuIGBsYXN0SW5kZXhgLCB0aGVuIGl0IG5lZWRzIHRvXG4gICAgICAvLyBiZSBtb3ZlZC4gT3RoZXJ3aXNlLCB3ZSBkbyBub3QgbmVlZCB0byBtb3ZlIGl0IGJlY2F1c2UgYSBjaGlsZCB3aWxsIGJlXG4gICAgICAvLyBpbnNlcnRlZCBvciBtb3ZlZCBiZWZvcmUgYGNoaWxkYC5cbiAgICAgIGlmIChjaGlsZC5fbW91bnRJbmRleCA8IGxhc3RJbmRleCkge1xuICAgICAgICBlbnF1ZXVlTW92ZSh0aGlzLl9yb290Tm9kZUlELCBjaGlsZC5fbW91bnRJbmRleCwgdG9JbmRleCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjaGlsZCBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjaGlsZCBDb21wb25lbnQgdG8gY3JlYXRlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb3VudEltYWdlIE1hcmt1cCB0byBpbnNlcnQuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGNyZWF0ZUNoaWxkOiBmdW5jdGlvbihjaGlsZCwgbW91bnRJbWFnZSkge1xuICAgICAgZW5xdWV1ZU1hcmt1cCh0aGlzLl9yb290Tm9kZUlELCBtb3VudEltYWdlLCBjaGlsZC5fbW91bnRJbmRleCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBjaGlsZCBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjaGlsZCBDaGlsZCB0byByZW1vdmUuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHJlbW92ZUNoaWxkOiBmdW5jdGlvbihjaGlsZCkge1xuICAgICAgZW5xdWV1ZVJlbW92ZSh0aGlzLl9yb290Tm9kZUlELCBjaGlsZC5fbW91bnRJbmRleCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhpcyB0ZXh0IGNvbnRlbnQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHRDb250ZW50IFRleHQgY29udGVudCB0byBzZXQuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHNldFRleHRDb250ZW50OiBmdW5jdGlvbih0ZXh0Q29udGVudCkge1xuICAgICAgZW5xdWV1ZVRleHRDb250ZW50KHRoaXMuX3Jvb3ROb2RlSUQsIHRleHRDb250ZW50KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTW91bnRzIGEgY2hpbGQgd2l0aCB0aGUgc3VwcGxpZWQgbmFtZS5cbiAgICAgKlxuICAgICAqIE5PVEU6IFRoaXMgaXMgcGFydCBvZiBgdXBkYXRlQ2hpbGRyZW5gIGFuZCBpcyBoZXJlIGZvciByZWFkYWJpbGl0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNoaWxkIENvbXBvbmVudCB0byBtb3VudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBjaGlsZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggYXQgd2hpY2ggdG8gaW5zZXJ0IHRoZSBjaGlsZC5cbiAgICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfbW91bnRDaGlsZEJ5TmFtZUF0SW5kZXg6IGZ1bmN0aW9uKGNoaWxkLCBuYW1lLCBpbmRleCwgdHJhbnNhY3Rpb24pIHtcbiAgICAgIC8vIElubGluZWQgZm9yIHBlcmZvcm1hbmNlLCBzZWUgYFJlYWN0SW5zdGFuY2VIYW5kbGVzLmNyZWF0ZVJlYWN0SURgLlxuICAgICAgdmFyIHJvb3RJRCA9IHRoaXMuX3Jvb3ROb2RlSUQgKyBuYW1lO1xuICAgICAgdmFyIG1vdW50SW1hZ2UgPSBjaGlsZC5tb3VudENvbXBvbmVudChcbiAgICAgICAgcm9vdElELFxuICAgICAgICB0cmFuc2FjdGlvbixcbiAgICAgICAgdGhpcy5fbW91bnREZXB0aCArIDFcbiAgICAgICk7XG4gICAgICBjaGlsZC5fbW91bnRJbmRleCA9IGluZGV4O1xuICAgICAgdGhpcy5jcmVhdGVDaGlsZChjaGlsZCwgbW91bnRJbWFnZSk7XG4gICAgICB0aGlzLl9yZW5kZXJlZENoaWxkcmVuID0gdGhpcy5fcmVuZGVyZWRDaGlsZHJlbiB8fCB7fTtcbiAgICAgIHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW5bbmFtZV0gPSBjaGlsZDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVW5tb3VudHMgYSByZW5kZXJlZCBjaGlsZCBieSBuYW1lLlxuICAgICAqXG4gICAgICogTk9URTogVGhpcyBpcyBwYXJ0IG9mIGB1cGRhdGVDaGlsZHJlbmAgYW5kIGlzIGhlcmUgZm9yIHJlYWRhYmlsaXR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY2hpbGQgQ29tcG9uZW50IHRvIHVubW91bnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgY2hpbGQgaW4gYHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW5gLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3VubW91bnRDaGlsZEJ5TmFtZTogZnVuY3Rpb24oY2hpbGQsIG5hbWUpIHtcbiAgICAgIHRoaXMucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICAgICAgY2hpbGQuX21vdW50SW5kZXggPSBudWxsO1xuICAgICAgY2hpbGQudW5tb3VudENvbXBvbmVudCgpO1xuICAgICAgZGVsZXRlIHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW5bbmFtZV07XG4gICAgfVxuXG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE11bHRpQ2hpbGQ7XG5cbn0se1wiLi9SZWFjdENvbXBvbmVudFwiOjEwMSxcIi4vUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXNcIjoxMzQsXCIuL2ZsYXR0ZW5DaGlsZHJlblwiOjE4MCxcIi4vaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudFwiOjE5NSxcIi4vc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnRcIjoyMTJ9XSwxMzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBrZXlNaXJyb3IgPSByZXF1aXJlKFwiLi9rZXlNaXJyb3JcIik7XG5cbi8qKlxuICogV2hlbiBhIGNvbXBvbmVudCdzIGNoaWxkcmVuIGFyZSB1cGRhdGVkLCBhIHNlcmllcyBvZiB1cGRhdGUgY29uZmlndXJhdGlvblxuICogb2JqZWN0cyBhcmUgY3JlYXRlZCBpbiBvcmRlciB0byBiYXRjaCBhbmQgc2VyaWFsaXplIHRoZSByZXF1aXJlZCBjaGFuZ2VzLlxuICpcbiAqIEVudW1lcmF0ZXMgYWxsIHRoZSBwb3NzaWJsZSB0eXBlcyBvZiB1cGRhdGUgY29uZmlndXJhdGlvbnMuXG4gKlxuICogQGludGVybmFsXG4gKi9cbnZhciBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcyA9IGtleU1pcnJvcih7XG4gIElOU0VSVF9NQVJLVVA6IG51bGwsXG4gIE1PVkVfRVhJU1RJTkc6IG51bGwsXG4gIFJFTU9WRV9OT0RFOiBudWxsLFxuICBURVhUX0NPTlRFTlQ6IG51bGxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzO1xuXG59LHtcIi4va2V5TWlycm9yXCI6MjAyfV0sMTM1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0TmF0aXZlQ29tcG9uZW50XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxudmFyIGdlbmVyaWNDb21wb25lbnRDbGFzcyA9IG51bGw7XG4vLyBUaGlzIHJlZ2lzdHJ5IGtlZXBzIHRyYWNrIG9mIHdyYXBwZXIgY2xhc3NlcyBhcm91bmQgbmF0aXZlIHRhZ3NcbnZhciB0YWdUb0NvbXBvbmVudENsYXNzID0ge307XG5cbnZhciBSZWFjdE5hdGl2ZUNvbXBvbmVudEluamVjdGlvbiA9IHtcbiAgLy8gVGhpcyBhY2NlcHRzIGEgY2xhc3MgdGhhdCByZWNlaXZlcyB0aGUgdGFnIHN0cmluZy4gVGhpcyBpcyBhIGNhdGNoIGFsbFxuICAvLyB0aGF0IGNhbiByZW5kZXIgYW55IGtpbmQgb2YgdGFnLlxuICBpbmplY3RHZW5lcmljQ29tcG9uZW50Q2xhc3M6IGZ1bmN0aW9uKGNvbXBvbmVudENsYXNzKSB7XG4gICAgZ2VuZXJpY0NvbXBvbmVudENsYXNzID0gY29tcG9uZW50Q2xhc3M7XG4gIH0sXG4gIC8vIFRoaXMgYWNjZXB0cyBhIGtleWVkIG9iamVjdCB3aXRoIGNsYXNzZXMgYXMgdmFsdWVzLiBFYWNoIGtleSByZXByZXNlbnRzIGFcbiAgLy8gdGFnLiBUaGF0IHBhcnRpY3VsYXIgdGFnIHdpbGwgdXNlIHRoaXMgY2xhc3MgaW5zdGVhZCBvZiB0aGUgZ2VuZXJpYyBvbmUuXG4gIGluamVjdENvbXBvbmVudENsYXNzZXM6IGZ1bmN0aW9uKGNvbXBvbmVudENsYXNzZXMpIHtcbiAgICBhc3NpZ24odGFnVG9Db21wb25lbnRDbGFzcywgY29tcG9uZW50Q2xhc3Nlcyk7XG4gIH1cbn07XG5cbi8qKlxuICogQ3JlYXRlIGFuIGludGVybmFsIGNsYXNzIGZvciBhIHNwZWNpZmljIHRhZy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSB0YWcgZm9yIHdoaWNoIHRvIGNyZWF0ZSBhbiBpbnRlcm5hbCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7YW55fSBwcm9wcyBUaGUgcHJvcHMgcGFzc2VkIHRvIHRoZSBpbnN0YW5jZSBjb25zdHJ1Y3Rvci5cbiAqIEByZXR1cm4ge1JlYWN0Q29tcG9uZW50fSBjb21wb25lbnQgVGhlIGluamVjdGVkIGVtcHR5IGNvbXBvbmVudC5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VGb3JUYWcodGFnLCBwcm9wcywgcGFyZW50VHlwZSkge1xuICB2YXIgY29tcG9uZW50Q2xhc3MgPSB0YWdUb0NvbXBvbmVudENsYXNzW3RhZ107XG4gIGlmIChjb21wb25lbnRDbGFzcyA9PSBudWxsKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIGdlbmVyaWNDb21wb25lbnRDbGFzcyxcbiAgICAgICdUaGVyZSBpcyBubyByZWdpc3RlcmVkIGNvbXBvbmVudCBmb3IgdGhlIHRhZyAlcycsXG4gICAgICB0YWdcbiAgICApIDogaW52YXJpYW50KGdlbmVyaWNDb21wb25lbnRDbGFzcykpO1xuICAgIHJldHVybiBuZXcgZ2VuZXJpY0NvbXBvbmVudENsYXNzKHRhZywgcHJvcHMpO1xuICB9XG4gIGlmIChwYXJlbnRUeXBlID09PSB0YWcpIHtcbiAgICAvLyBBdm9pZCByZWN1cnNpb25cbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgZ2VuZXJpY0NvbXBvbmVudENsYXNzLFxuICAgICAgJ1RoZXJlIGlzIG5vIHJlZ2lzdGVyZWQgY29tcG9uZW50IGZvciB0aGUgdGFnICVzJyxcbiAgICAgIHRhZ1xuICAgICkgOiBpbnZhcmlhbnQoZ2VuZXJpY0NvbXBvbmVudENsYXNzKSk7XG4gICAgcmV0dXJuIG5ldyBnZW5lcmljQ29tcG9uZW50Q2xhc3ModGFnLCBwcm9wcyk7XG4gIH1cbiAgLy8gVW53cmFwIGxlZ2FjeSBmYWN0b3JpZXNcbiAgcmV0dXJuIG5ldyBjb21wb25lbnRDbGFzcy50eXBlKHByb3BzKTtcbn1cblxudmFyIFJlYWN0TmF0aXZlQ29tcG9uZW50ID0ge1xuICBjcmVhdGVJbnN0YW5jZUZvclRhZzogY3JlYXRlSW5zdGFuY2VGb3JUYWcsXG4gIGluamVjdGlvbjogUmVhY3ROYXRpdmVDb21wb25lbnRJbmplY3Rpb25cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3ROYXRpdmVDb21wb25lbnQ7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL09iamVjdC5hc3NpZ25cIjo5NSxcIi4vaW52YXJpYW50XCI6MTk2LFwiX3Byb2Nlc3NcIjoxOX1dLDEzNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0T3duZXJcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGVtcHR5T2JqZWN0ID0gcmVxdWlyZShcIi4vZW1wdHlPYmplY3RcIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIFJlYWN0T3duZXJzIGFyZSBjYXBhYmxlIG9mIHN0b3JpbmcgcmVmZXJlbmNlcyB0byBvd25lZCBjb21wb25lbnRzLlxuICpcbiAqIEFsbCBjb21wb25lbnRzIGFyZSBjYXBhYmxlIG9mIC8vYmVpbmcvLyByZWZlcmVuY2VkIGJ5IG93bmVyIGNvbXBvbmVudHMsIGJ1dFxuICogb25seSBSZWFjdE93bmVyIGNvbXBvbmVudHMgYXJlIGNhcGFibGUgb2YgLy9yZWZlcmVuY2luZy8vIG93bmVkIGNvbXBvbmVudHMuXG4gKiBUaGUgbmFtZWQgcmVmZXJlbmNlIGlzIGtub3duIGFzIGEgXCJyZWZcIi5cbiAqXG4gKiBSZWZzIGFyZSBhdmFpbGFibGUgd2hlbiBtb3VudGVkIGFuZCB1cGRhdGVkIGR1cmluZyByZWNvbmNpbGlhdGlvbi5cbiAqXG4gKiAgIHZhciBNeUNvbXBvbmVudCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAqICAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICogICAgICAgcmV0dXJuIChcbiAqICAgICAgICAgPGRpdiBvbkNsaWNrPXt0aGlzLmhhbmRsZUNsaWNrfT5cbiAqICAgICAgICAgICA8Q3VzdG9tQ29tcG9uZW50IHJlZj1cImN1c3RvbVwiIC8+XG4gKiAgICAgICAgIDwvZGl2PlxuICogICAgICAgKTtcbiAqICAgICB9LFxuICogICAgIGhhbmRsZUNsaWNrOiBmdW5jdGlvbigpIHtcbiAqICAgICAgIHRoaXMucmVmcy5jdXN0b20uaGFuZGxlQ2xpY2soKTtcbiAqICAgICB9LFxuICogICAgIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAqICAgICAgIHRoaXMucmVmcy5jdXN0b20uaW5pdGlhbGl6ZSgpO1xuICogICAgIH1cbiAqICAgfSk7XG4gKlxuICogUmVmcyBzaG91bGQgcmFyZWx5IGJlIHVzZWQuIFdoZW4gcmVmcyBhcmUgdXNlZCwgdGhleSBzaG91bGQgb25seSBiZSBkb25lIHRvXG4gKiBjb250cm9sIGRhdGEgdGhhdCBpcyBub3QgaGFuZGxlZCBieSBSZWFjdCdzIGRhdGEgZmxvdy5cbiAqXG4gKiBAY2xhc3MgUmVhY3RPd25lclxuICovXG52YXIgUmVhY3RPd25lciA9IHtcblxuICAvKipcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBvYmplY3RcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgb2JqZWN0YCBpcyBhIHZhbGlkIG93bmVyLlxuICAgKiBAZmluYWxcbiAgICovXG4gIGlzVmFsaWRPd25lcjogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuICEhKFxuICAgICAgb2JqZWN0ICYmXG4gICAgICB0eXBlb2Ygb2JqZWN0LmF0dGFjaFJlZiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgdHlwZW9mIG9iamVjdC5kZXRhY2hSZWYgPT09ICdmdW5jdGlvbidcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBZGRzIGEgY29tcG9uZW50IGJ5IHJlZiB0byBhbiBvd25lciBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudCBDb21wb25lbnQgdG8gcmVmZXJlbmNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmIE5hbWUgYnkgd2hpY2ggdG8gcmVmZXIgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogQHBhcmFtIHtSZWFjdE93bmVyfSBvd25lciBDb21wb25lbnQgb24gd2hpY2ggdG8gcmVjb3JkIHRoZSByZWYuXG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGFkZENvbXBvbmVudEFzUmVmVG86IGZ1bmN0aW9uKGNvbXBvbmVudCwgcmVmLCBvd25lcikge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICBSZWFjdE93bmVyLmlzVmFsaWRPd25lcihvd25lciksXG4gICAgICAnYWRkQ29tcG9uZW50QXNSZWZUbyguLi4pOiBPbmx5IGEgUmVhY3RPd25lciBjYW4gaGF2ZSByZWZzLiBUaGlzICcgK1xuICAgICAgJ3VzdWFsbHkgbWVhbnMgdGhhdCB5b3VcXCdyZSB0cnlpbmcgdG8gYWRkIGEgcmVmIHRvIGEgY29tcG9uZW50IHRoYXQgJyArXG4gICAgICAnZG9lc25cXCd0IGhhdmUgYW4gb3duZXIgKHRoYXQgaXMsIHdhcyBub3QgY3JlYXRlZCBpbnNpZGUgb2YgYW5vdGhlciAnICtcbiAgICAgICdjb21wb25lbnRcXCdzIGByZW5kZXJgIG1ldGhvZCkuIFRyeSByZW5kZXJpbmcgdGhpcyBjb21wb25lbnQgaW5zaWRlIG9mICcgK1xuICAgICAgJ2EgbmV3IHRvcC1sZXZlbCBjb21wb25lbnQgd2hpY2ggd2lsbCBob2xkIHRoZSByZWYuJ1xuICAgICkgOiBpbnZhcmlhbnQoUmVhY3RPd25lci5pc1ZhbGlkT3duZXIob3duZXIpKSk7XG4gICAgb3duZXIuYXR0YWNoUmVmKHJlZiwgY29tcG9uZW50KTtcbiAgfSxcblxuICAvKipcbiAgICogUmVtb3ZlcyBhIGNvbXBvbmVudCBieSByZWYgZnJvbSBhbiBvd25lciBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudCBDb21wb25lbnQgdG8gZGVyZWZlcmVuY2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWYgTmFtZSBvZiB0aGUgcmVmIHRvIHJlbW92ZS5cbiAgICogQHBhcmFtIHtSZWFjdE93bmVyfSBvd25lciBDb21wb25lbnQgb24gd2hpY2ggdGhlIHJlZiBpcyByZWNvcmRlZC5cbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVtb3ZlQ29tcG9uZW50QXNSZWZGcm9tOiBmdW5jdGlvbihjb21wb25lbnQsIHJlZiwgb3duZXIpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgUmVhY3RPd25lci5pc1ZhbGlkT3duZXIob3duZXIpLFxuICAgICAgJ3JlbW92ZUNvbXBvbmVudEFzUmVmRnJvbSguLi4pOiBPbmx5IGEgUmVhY3RPd25lciBjYW4gaGF2ZSByZWZzLiBUaGlzICcgK1xuICAgICAgJ3VzdWFsbHkgbWVhbnMgdGhhdCB5b3VcXCdyZSB0cnlpbmcgdG8gcmVtb3ZlIGEgcmVmIHRvIGEgY29tcG9uZW50IHRoYXQgJyArXG4gICAgICAnZG9lc25cXCd0IGhhdmUgYW4gb3duZXIgKHRoYXQgaXMsIHdhcyBub3QgY3JlYXRlZCBpbnNpZGUgb2YgYW5vdGhlciAnICtcbiAgICAgICdjb21wb25lbnRcXCdzIGByZW5kZXJgIG1ldGhvZCkuIFRyeSByZW5kZXJpbmcgdGhpcyBjb21wb25lbnQgaW5zaWRlIG9mICcgK1xuICAgICAgJ2EgbmV3IHRvcC1sZXZlbCBjb21wb25lbnQgd2hpY2ggd2lsbCBob2xkIHRoZSByZWYuJ1xuICAgICkgOiBpbnZhcmlhbnQoUmVhY3RPd25lci5pc1ZhbGlkT3duZXIob3duZXIpKSk7XG4gICAgLy8gQ2hlY2sgdGhhdCBgY29tcG9uZW50YCBpcyBzdGlsbCB0aGUgY3VycmVudCByZWYgYmVjYXVzZSB3ZSBkbyBub3Qgd2FudCB0b1xuICAgIC8vIGRldGFjaCB0aGUgcmVmIGlmIGFub3RoZXIgY29tcG9uZW50IHN0b2xlIGl0LlxuICAgIGlmIChvd25lci5yZWZzW3JlZl0gPT09IGNvbXBvbmVudCkge1xuICAgICAgb3duZXIuZGV0YWNoUmVmKHJlZik7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBBIFJlYWN0Q29tcG9uZW50IG11c3QgbWl4IHRoaXMgaW4gdG8gaGF2ZSByZWZzLlxuICAgKlxuICAgKiBAbGVuZHMge1JlYWN0T3duZXIucHJvdG90eXBlfVxuICAgKi9cbiAgTWl4aW46IHtcblxuICAgIGNvbnN0cnVjdDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnJlZnMgPSBlbXB0eU9iamVjdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTGF6aWx5IGFsbG9jYXRlcyB0aGUgcmVmcyBvYmplY3QgYW5kIHN0b3JlcyBgY29tcG9uZW50YCBhcyBgcmVmYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZWYgUmVmZXJlbmNlIG5hbWUuXG4gICAgICogQHBhcmFtIHtjb21wb25lbnR9IGNvbXBvbmVudCBDb21wb25lbnQgdG8gc3RvcmUgYXMgYHJlZmAuXG4gICAgICogQGZpbmFsXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBhdHRhY2hSZWY6IGZ1bmN0aW9uKHJlZiwgY29tcG9uZW50KSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICBjb21wb25lbnQuaXNPd25lZEJ5KHRoaXMpLFxuICAgICAgICAnYXR0YWNoUmVmKCVzLCAuLi4pOiBPbmx5IGEgY29tcG9uZW50XFwncyBvd25lciBjYW4gc3RvcmUgYSByZWYgdG8gaXQuJyxcbiAgICAgICAgcmVmXG4gICAgICApIDogaW52YXJpYW50KGNvbXBvbmVudC5pc093bmVkQnkodGhpcykpKTtcbiAgICAgIHZhciByZWZzID0gdGhpcy5yZWZzID09PSBlbXB0eU9iamVjdCA/ICh0aGlzLnJlZnMgPSB7fSkgOiB0aGlzLnJlZnM7XG4gICAgICByZWZzW3JlZl0gPSBjb21wb25lbnQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERldGFjaGVzIGEgcmVmZXJlbmNlIG5hbWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmIE5hbWUgdG8gZGVyZWZlcmVuY2UuXG4gICAgICogQGZpbmFsXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBkZXRhY2hSZWY6IGZ1bmN0aW9uKHJlZikge1xuICAgICAgZGVsZXRlIHRoaXMucmVmc1tyZWZdO1xuICAgIH1cblxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RPd25lcjtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vZW1wdHlPYmplY3RcIjoxNzgsXCIuL2ludmFyaWFudFwiOjE5NixcIl9wcm9jZXNzXCI6MTl9XSwxMzc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFBlcmZcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogUmVhY3RQZXJmIGlzIGEgZ2VuZXJhbCBBT1Agc3lzdGVtIGRlc2lnbmVkIHRvIG1lYXN1cmUgcGVyZm9ybWFuY2UuIFRoaXNcbiAqIG1vZHVsZSBvbmx5IGhhcyB0aGUgaG9va3M6IHNlZSBSZWFjdERlZmF1bHRQZXJmIGZvciB0aGUgYW5hbHlzaXMgdG9vbC5cbiAqL1xudmFyIFJlYWN0UGVyZiA9IHtcbiAgLyoqXG4gICAqIEJvb2xlYW4gdG8gZW5hYmxlL2Rpc2FibGUgbWVhc3VyZW1lbnQuIFNldCB0byBmYWxzZSBieSBkZWZhdWx0IHRvIHByZXZlbnRcbiAgICogYWNjaWRlbnRhbCBsb2dnaW5nIGFuZCBwZXJmIGxvc3MuXG4gICAqL1xuICBlbmFibGVNZWFzdXJlOiBmYWxzZSxcblxuICAvKipcbiAgICogSG9sZHMgb250byB0aGUgbWVhc3VyZSBmdW5jdGlvbiBpbiB1c2UuIEJ5IGRlZmF1bHQsIGRvbid0IG1lYXN1cmVcbiAgICogYW55dGhpbmcsIGJ1dCB3ZSdsbCBvdmVycmlkZSB0aGlzIGlmIHdlIGluamVjdCBhIG1lYXN1cmUgZnVuY3Rpb24uXG4gICAqL1xuICBzdG9yZWRNZWFzdXJlOiBfbm9NZWFzdXJlLFxuXG4gIC8qKlxuICAgKiBVc2UgdGhpcyB0byB3cmFwIG1ldGhvZHMgeW91IHdhbnQgdG8gbWVhc3VyZS4gWmVybyBvdmVyaGVhZCBpbiBwcm9kdWN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb2JqTmFtZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZm5OYW1lXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmNcbiAgICogQHJldHVybiB7ZnVuY3Rpb259XG4gICAqL1xuICBtZWFzdXJlOiBmdW5jdGlvbihvYmpOYW1lLCBmbk5hbWUsIGZ1bmMpIHtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICB2YXIgbWVhc3VyZWRGdW5jID0gbnVsbDtcbiAgICAgIHZhciB3cmFwcGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChSZWFjdFBlcmYuZW5hYmxlTWVhc3VyZSkge1xuICAgICAgICAgIGlmICghbWVhc3VyZWRGdW5jKSB7XG4gICAgICAgICAgICBtZWFzdXJlZEZ1bmMgPSBSZWFjdFBlcmYuc3RvcmVkTWVhc3VyZShvYmpOYW1lLCBmbk5hbWUsIGZ1bmMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbWVhc3VyZWRGdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgICB3cmFwcGVyLmRpc3BsYXlOYW1lID0gb2JqTmFtZSArICdfJyArIGZuTmFtZTtcbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cbiAgICByZXR1cm4gZnVuYztcbiAgfSxcblxuICBpbmplY3Rpb246IHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBtZWFzdXJlXG4gICAgICovXG4gICAgaW5qZWN0TWVhc3VyZTogZnVuY3Rpb24obWVhc3VyZSkge1xuICAgICAgUmVhY3RQZXJmLnN0b3JlZE1lYXN1cmUgPSBtZWFzdXJlO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBTaW1wbHkgcGFzc2VzIHRocm91Z2ggdGhlIG1lYXN1cmVkIGZ1bmN0aW9uLCB3aXRob3V0IG1lYXN1cmluZyBpdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gb2JqTmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IGZuTmFtZVxuICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuY1xuICogQHJldHVybiB7ZnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIF9ub01lYXN1cmUob2JqTmFtZSwgZm5OYW1lLCBmdW5jKSB7XG4gIHJldHVybiBmdW5jO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UGVyZjtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIl9wcm9jZXNzXCI6MTl9XSwxMzg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFByb3BUcmFuc2ZlcmVyXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKFwiLi9lbXB0eUZ1bmN0aW9uXCIpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcbnZhciBqb2luQ2xhc3NlcyA9IHJlcXVpcmUoXCIuL2pvaW5DbGFzc2VzXCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG52YXIgZGlkV2FybiA9IGZhbHNlO1xuXG4vKipcbiAqIENyZWF0ZXMgYSB0cmFuc2ZlciBzdHJhdGVneSB0aGF0IHdpbGwgbWVyZ2UgcHJvcCB2YWx1ZXMgdXNpbmcgdGhlIHN1cHBsaWVkXG4gKiBgbWVyZ2VTdHJhdGVneWAuIElmIGEgcHJvcCB3YXMgcHJldmlvdXNseSB1bnNldCwgdGhpcyBqdXN0IHNldHMgaXQuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gbWVyZ2VTdHJhdGVneVxuICogQHJldHVybiB7ZnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zZmVyU3RyYXRlZ3kobWVyZ2VTdHJhdGVneSkge1xuICByZXR1cm4gZnVuY3Rpb24ocHJvcHMsIGtleSwgdmFsdWUpIHtcbiAgICBpZiAoIXByb3BzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHByb3BzW2tleV0gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHNba2V5XSA9IG1lcmdlU3RyYXRlZ3kocHJvcHNba2V5XSwgdmFsdWUpO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIHRyYW5zZmVyU3RyYXRlZ3lNZXJnZSA9IGNyZWF0ZVRyYW5zZmVyU3RyYXRlZ3koZnVuY3Rpb24oYSwgYikge1xuICAvLyBgbWVyZ2VgIG92ZXJyaWRlcyB0aGUgZmlyc3Qgb2JqZWN0J3MgKGBwcm9wc1trZXldYCBhYm92ZSkga2V5cyB1c2luZyB0aGVcbiAgLy8gc2Vjb25kIG9iamVjdCdzIChgdmFsdWVgKSBrZXlzLiBBbiBvYmplY3QncyBzdHlsZSdzIGV4aXN0aW5nIGBwcm9wQWAgd291bGRcbiAgLy8gZ2V0IG92ZXJyaWRkZW4uIEZsaXAgdGhlIG9yZGVyIGhlcmUuXG4gIHJldHVybiBhc3NpZ24oe30sIGIsIGEpO1xufSk7XG5cbi8qKlxuICogVHJhbnNmZXIgc3RyYXRlZ2llcyBkaWN0YXRlIGhvdyBwcm9wcyBhcmUgdHJhbnNmZXJyZWQgYnkgYHRyYW5zZmVyUHJvcHNUb2AuXG4gKiBOT1RFOiBpZiB5b3UgYWRkIGFueSBtb3JlIGV4Y2VwdGlvbnMgdG8gdGhpcyBsaXN0IHlvdSBzaG91bGQgYmUgc3VyZSB0b1xuICogdXBkYXRlIGBjbG9uZVdpdGhQcm9wcygpYCBhY2NvcmRpbmdseS5cbiAqL1xudmFyIFRyYW5zZmVyU3RyYXRlZ2llcyA9IHtcbiAgLyoqXG4gICAqIE5ldmVyIHRyYW5zZmVyIGBjaGlsZHJlbmAuXG4gICAqL1xuICBjaGlsZHJlbjogZW1wdHlGdW5jdGlvbixcbiAgLyoqXG4gICAqIFRyYW5zZmVyIHRoZSBgY2xhc3NOYW1lYCBwcm9wIGJ5IG1lcmdpbmcgdGhlbS5cbiAgICovXG4gIGNsYXNzTmFtZTogY3JlYXRlVHJhbnNmZXJTdHJhdGVneShqb2luQ2xhc3NlcyksXG4gIC8qKlxuICAgKiBUcmFuc2ZlciB0aGUgYHN0eWxlYCBwcm9wICh3aGljaCBpcyBhbiBvYmplY3QpIGJ5IG1lcmdpbmcgdGhlbS5cbiAgICovXG4gIHN0eWxlOiB0cmFuc2ZlclN0cmF0ZWd5TWVyZ2Vcbn07XG5cbi8qKlxuICogTXV0YXRlcyB0aGUgZmlyc3QgYXJndW1lbnQgYnkgdHJhbnNmZXJyaW5nIHRoZSBwcm9wZXJ0aWVzIGZyb20gdGhlIHNlY29uZFxuICogYXJndW1lbnQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gKiBAcGFyYW0ge29iamVjdH0gbmV3UHJvcHNcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZnVuY3Rpb24gdHJhbnNmZXJJbnRvKHByb3BzLCBuZXdQcm9wcykge1xuICBmb3IgKHZhciB0aGlzS2V5IGluIG5ld1Byb3BzKSB7XG4gICAgaWYgKCFuZXdQcm9wcy5oYXNPd25Qcm9wZXJ0eSh0aGlzS2V5KSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIHRyYW5zZmVyU3RyYXRlZ3kgPSBUcmFuc2ZlclN0cmF0ZWdpZXNbdGhpc0tleV07XG5cbiAgICBpZiAodHJhbnNmZXJTdHJhdGVneSAmJiBUcmFuc2ZlclN0cmF0ZWdpZXMuaGFzT3duUHJvcGVydHkodGhpc0tleSkpIHtcbiAgICAgIHRyYW5zZmVyU3RyYXRlZ3kocHJvcHMsIHRoaXNLZXksIG5ld1Byb3BzW3RoaXNLZXldKTtcbiAgICB9IGVsc2UgaWYgKCFwcm9wcy5oYXNPd25Qcm9wZXJ0eSh0aGlzS2V5KSkge1xuICAgICAgcHJvcHNbdGhpc0tleV0gPSBuZXdQcm9wc1t0aGlzS2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHByb3BzO1xufVxuXG4vKipcbiAqIFJlYWN0UHJvcFRyYW5zZmVyZXIgYXJlIGNhcGFibGUgb2YgdHJhbnNmZXJyaW5nIHByb3BzIHRvIGFub3RoZXIgY29tcG9uZW50XG4gKiB1c2luZyBhIGB0cmFuc2ZlclByb3BzVG9gIG1ldGhvZC5cbiAqXG4gKiBAY2xhc3MgUmVhY3RQcm9wVHJhbnNmZXJlclxuICovXG52YXIgUmVhY3RQcm9wVHJhbnNmZXJlciA9IHtcblxuICBUcmFuc2ZlclN0cmF0ZWdpZXM6IFRyYW5zZmVyU3RyYXRlZ2llcyxcblxuICAvKipcbiAgICogTWVyZ2UgdHdvIHByb3BzIG9iamVjdHMgdXNpbmcgVHJhbnNmZXJTdHJhdGVnaWVzLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gb2xkUHJvcHMgb3JpZ2luYWwgcHJvcHMgKHRoZXkgdGFrZSBwcmVjZWRlbmNlKVxuICAgKiBAcGFyYW0ge29iamVjdH0gbmV3UHJvcHMgbmV3IHByb3BzIHRvIG1lcmdlIGluXG4gICAqIEByZXR1cm4ge29iamVjdH0gYSBuZXcgb2JqZWN0IGNvbnRhaW5pbmcgYm90aCBzZXRzIG9mIHByb3BzIG1lcmdlZC5cbiAgICovXG4gIG1lcmdlUHJvcHM6IGZ1bmN0aW9uKG9sZFByb3BzLCBuZXdQcm9wcykge1xuICAgIHJldHVybiB0cmFuc2ZlckludG8oYXNzaWduKHt9LCBvbGRQcm9wcyksIG5ld1Byb3BzKTtcbiAgfSxcblxuICAvKipcbiAgICogQGxlbmRzIHtSZWFjdFByb3BUcmFuc2ZlcmVyLnByb3RvdHlwZX1cbiAgICovXG4gIE1peGluOiB7XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2ZlciBwcm9wcyBmcm9tIHRoaXMgY29tcG9uZW50IHRvIGEgdGFyZ2V0IGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIFByb3BzIHRoYXQgZG8gbm90IGhhdmUgYW4gZXhwbGljaXQgdHJhbnNmZXIgc3RyYXRlZ3kgd2lsbCBiZSB0cmFuc2ZlcnJlZFxuICAgICAqIG9ubHkgaWYgdGhlIHRhcmdldCBjb21wb25lbnQgZG9lcyBub3QgYWxyZWFkeSBoYXZlIHRoZSBwcm9wIHNldC5cbiAgICAgKlxuICAgICAqIFRoaXMgaXMgdXN1YWxseSB1c2VkIHRvIHBhc3MgZG93biBwcm9wcyB0byBhIHJldHVybmVkIHJvb3QgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnQgQ29tcG9uZW50IHJlY2VpdmluZyB0aGUgcHJvcGVydGllcy5cbiAgICAgKiBAcmV0dXJuIHtSZWFjdEVsZW1lbnR9IFRoZSBzdXBwbGllZCBgY29tcG9uZW50YC5cbiAgICAgKiBAZmluYWxcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgdHJhbnNmZXJQcm9wc1RvOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgICBlbGVtZW50Ll9vd25lciA9PT0gdGhpcyxcbiAgICAgICAgJyVzOiBZb3UgY2FuXFwndCBjYWxsIHRyYW5zZmVyUHJvcHNUbygpIG9uIGEgY29tcG9uZW50IHRoYXQgeW91ICcgK1xuICAgICAgICAnZG9uXFwndCBvd24sICVzLiBUaGlzIHVzdWFsbHkgbWVhbnMgeW91IGFyZSBjYWxsaW5nICcgK1xuICAgICAgICAndHJhbnNmZXJQcm9wc1RvKCkgb24gYSBjb21wb25lbnQgcGFzc2VkIGluIGFzIHByb3BzIG9yIGNoaWxkcmVuLicsXG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IuZGlzcGxheU5hbWUsXG4gICAgICAgIHR5cGVvZiBlbGVtZW50LnR5cGUgPT09ICdzdHJpbmcnID9cbiAgICAgICAgZWxlbWVudC50eXBlIDpcbiAgICAgICAgZWxlbWVudC50eXBlLmRpc3BsYXlOYW1lXG4gICAgICApIDogaW52YXJpYW50KGVsZW1lbnQuX293bmVyID09PSB0aGlzKSk7XG5cbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgaWYgKCFkaWRXYXJuKSB7XG4gICAgICAgICAgZGlkV2FybiA9IHRydWU7XG4gICAgICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICd0cmFuc2ZlclByb3BzVG8gaXMgZGVwcmVjYXRlZC4gJyArXG4gICAgICAgICAgICAnU2VlIGh0dHA6Ly9mYi5tZS9yZWFjdC10cmFuc2ZlcnByb3BzdG8gZm9yIG1vcmUgaW5mb3JtYXRpb24uJ1xuICAgICAgICAgICkgOiBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBCZWNhdXNlIGVsZW1lbnRzIGFyZSBpbW11dGFibGUgd2UgaGF2ZSB0byBtZXJnZSBpbnRvIHRoZSBleGlzdGluZ1xuICAgICAgLy8gcHJvcHMgb2JqZWN0IHJhdGhlciB0aGFuIGNsb25lIGl0LlxuICAgICAgdHJhbnNmZXJJbnRvKGVsZW1lbnQucHJvcHMsIHRoaXMucHJvcHMpO1xuXG4gICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9XG5cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUcmFuc2ZlcmVyO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9PYmplY3QuYXNzaWduXCI6OTUsXCIuL2VtcHR5RnVuY3Rpb25cIjoxNzcsXCIuL2ludmFyaWFudFwiOjE5NixcIi4vam9pbkNsYXNzZXNcIjoyMDEsXCIuL3dhcm5pbmdcIjoyMTUsXCJfcHJvY2Vzc1wiOjE5fV0sMTM5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzID0ge307XG5cbmlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSB7XG4gICAgcHJvcDogJ3Byb3AnLFxuICAgIGNvbnRleHQ6ICdjb250ZXh0JyxcbiAgICBjaGlsZENvbnRleHQ6ICdjaGlsZCBjb250ZXh0J1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiX3Byb2Nlc3NcIjoxOX1dLDE0MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RQcm9wVHlwZUxvY2F0aW9uc1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIga2V5TWlycm9yID0gcmVxdWlyZShcIi4va2V5TWlycm9yXCIpO1xuXG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucyA9IGtleU1pcnJvcih7XG4gIHByb3A6IG51bGwsXG4gIGNvbnRleHQ6IG51bGwsXG4gIGNoaWxkQ29udGV4dDogbnVsbFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9ucztcblxufSx7XCIuL2tleU1pcnJvclwiOjIwMn1dLDE0MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RQcm9wVHlwZXNcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RWxlbWVudFwiKTtcbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHJlcXVpcmUoXCIuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzXCIpO1xuXG52YXIgZGVwcmVjYXRlZCA9IHJlcXVpcmUoXCIuL2RlcHJlY2F0ZWRcIik7XG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoXCIuL2VtcHR5RnVuY3Rpb25cIik7XG5cbi8qKlxuICogQ29sbGVjdGlvbiBvZiBtZXRob2RzIHRoYXQgYWxsb3cgZGVjbGFyYXRpb24gYW5kIHZhbGlkYXRpb24gb2YgcHJvcHMgdGhhdCBhcmVcbiAqIHN1cHBsaWVkIHRvIFJlYWN0IGNvbXBvbmVudHMuIEV4YW1wbGUgdXNhZ2U6XG4gKlxuICogICB2YXIgUHJvcHMgPSByZXF1aXJlKCdSZWFjdFByb3BUeXBlcycpO1xuICogICB2YXIgTXlBcnRpY2xlID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICogICAgIHByb3BUeXBlczoge1xuICogICAgICAgLy8gQW4gb3B0aW9uYWwgc3RyaW5nIHByb3AgbmFtZWQgXCJkZXNjcmlwdGlvblwiLlxuICogICAgICAgZGVzY3JpcHRpb246IFByb3BzLnN0cmluZyxcbiAqXG4gKiAgICAgICAvLyBBIHJlcXVpcmVkIGVudW0gcHJvcCBuYW1lZCBcImNhdGVnb3J5XCIuXG4gKiAgICAgICBjYXRlZ29yeTogUHJvcHMub25lT2YoWydOZXdzJywnUGhvdG9zJ10pLmlzUmVxdWlyZWQsXG4gKlxuICogICAgICAgLy8gQSBwcm9wIG5hbWVkIFwiZGlhbG9nXCIgdGhhdCByZXF1aXJlcyBhbiBpbnN0YW5jZSBvZiBEaWFsb2cuXG4gKiAgICAgICBkaWFsb2c6IFByb3BzLmluc3RhbmNlT2YoRGlhbG9nKS5pc1JlcXVpcmVkXG4gKiAgICAgfSxcbiAqICAgICByZW5kZXI6IGZ1bmN0aW9uKCkgeyAuLi4gfVxuICogICB9KTtcbiAqXG4gKiBBIG1vcmUgZm9ybWFsIHNwZWNpZmljYXRpb24gb2YgaG93IHRoZXNlIG1ldGhvZHMgYXJlIHVzZWQ6XG4gKlxuICogICB0eXBlIDo9IGFycmF5fGJvb2x8ZnVuY3xvYmplY3R8bnVtYmVyfHN0cmluZ3xvbmVPZihbLi4uXSl8aW5zdGFuY2VPZiguLi4pXG4gKiAgIGRlY2wgOj0gUmVhY3RQcm9wVHlwZXMue3R5cGV9KC5pc1JlcXVpcmVkKT9cbiAqXG4gKiBFYWNoIGFuZCBldmVyeSBkZWNsYXJhdGlvbiBwcm9kdWNlcyBhIGZ1bmN0aW9uIHdpdGggdGhlIHNhbWUgc2lnbmF0dXJlLiBUaGlzXG4gKiBhbGxvd3MgdGhlIGNyZWF0aW9uIG9mIGN1c3RvbSB2YWxpZGF0aW9uIGZ1bmN0aW9ucy4gRm9yIGV4YW1wbGU6XG4gKlxuICogIHZhciBNeUxpbmsgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gKiAgICBwcm9wVHlwZXM6IHtcbiAqICAgICAgLy8gQW4gb3B0aW9uYWwgc3RyaW5nIG9yIFVSSSBwcm9wIG5hbWVkIFwiaHJlZlwiLlxuICogICAgICBocmVmOiBmdW5jdGlvbihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHtcbiAqICAgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICogICAgICAgIGlmIChwcm9wVmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgcHJvcFZhbHVlICE9PSAnc3RyaW5nJyAmJlxuICogICAgICAgICAgICAhKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFVSSSkpIHtcbiAqICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gKiAgICAgICAgICAgICdFeHBlY3RlZCBhIHN0cmluZyBvciBhbiBVUkkgZm9yICcgKyBwcm9wTmFtZSArICcgaW4gJyArXG4gKiAgICAgICAgICAgIGNvbXBvbmVudE5hbWVcbiAqICAgICAgICAgICk7XG4gKiAgICAgICAgfVxuICogICAgICB9XG4gKiAgICB9LFxuICogICAgcmVuZGVyOiBmdW5jdGlvbigpIHsuLi59XG4gKiAgfSk7XG4gKlxuICogQGludGVybmFsXG4gKi9cblxudmFyIEFOT05ZTU9VUyA9ICc8PGFub255bW91cz4+JztcblxudmFyIGVsZW1lbnRUeXBlQ2hlY2tlciA9IGNyZWF0ZUVsZW1lbnRUeXBlQ2hlY2tlcigpO1xudmFyIG5vZGVUeXBlQ2hlY2tlciA9IGNyZWF0ZU5vZGVDaGVja2VyKCk7XG5cbnZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgYXJyYXk6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdhcnJheScpLFxuICBib29sOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignYm9vbGVhbicpLFxuICBmdW5jOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignZnVuY3Rpb24nKSxcbiAgbnVtYmVyOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignbnVtYmVyJyksXG4gIG9iamVjdDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ29iamVjdCcpLFxuICBzdHJpbmc6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdzdHJpbmcnKSxcblxuICBhbnk6IGNyZWF0ZUFueVR5cGVDaGVja2VyKCksXG4gIGFycmF5T2Y6IGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcixcbiAgZWxlbWVudDogZWxlbWVudFR5cGVDaGVja2VyLFxuICBpbnN0YW5jZU9mOiBjcmVhdGVJbnN0YW5jZVR5cGVDaGVja2VyLFxuICBub2RlOiBub2RlVHlwZUNoZWNrZXIsXG4gIG9iamVjdE9mOiBjcmVhdGVPYmplY3RPZlR5cGVDaGVja2VyLFxuICBvbmVPZjogY3JlYXRlRW51bVR5cGVDaGVja2VyLFxuICBvbmVPZlR5cGU6IGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIsXG4gIHNoYXBlOiBjcmVhdGVTaGFwZVR5cGVDaGVja2VyLFxuXG4gIGNvbXBvbmVudDogZGVwcmVjYXRlZChcbiAgICAnUmVhY3QuUHJvcFR5cGVzJyxcbiAgICAnY29tcG9uZW50JyxcbiAgICAnZWxlbWVudCcsXG4gICAgdGhpcyxcbiAgICBlbGVtZW50VHlwZUNoZWNrZXJcbiAgKSxcbiAgcmVuZGVyYWJsZTogZGVwcmVjYXRlZChcbiAgICAnUmVhY3QuUHJvcFR5cGVzJyxcbiAgICAncmVuZGVyYWJsZScsXG4gICAgJ25vZGUnLFxuICAgIHRoaXMsXG4gICAgbm9kZVR5cGVDaGVja2VyXG4gIClcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKSB7XG4gIGZ1bmN0aW9uIGNoZWNrVHlwZShpc1JlcXVpcmVkLCBwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSB7XG4gICAgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudE5hbWUgfHwgQU5PTllNT1VTO1xuICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT0gbnVsbCkge1xuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIGlmIChpc1JlcXVpcmVkKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgICAgKFwiUmVxdWlyZWQgXCIgKyBsb2NhdGlvbk5hbWUgKyBcIiBgXCIgKyBwcm9wTmFtZSArIFwiYCB3YXMgbm90IHNwZWNpZmllZCBpbiBcIikrXG4gICAgICAgICAgKFwiYFwiICsgY29tcG9uZW50TmFtZSArIFwiYC5cIilcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjaGFpbmVkQ2hlY2tUeXBlID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgZmFsc2UpO1xuICBjaGFpbmVkQ2hlY2tUeXBlLmlzUmVxdWlyZWQgPSBjaGVja1R5cGUuYmluZChudWxsLCB0cnVlKTtcblxuICByZXR1cm4gY2hhaW5lZENoZWNrVHlwZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoZXhwZWN0ZWRUeXBlKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pIHtcbiAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgaWYgKHByb3BUeXBlICE9PSBleHBlY3RlZFR5cGUpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICAvLyBgcHJvcFZhbHVlYCBiZWluZyBpbnN0YW5jZSBvZiwgc2F5LCBkYXRlL3JlZ2V4cCwgcGFzcyB0aGUgJ29iamVjdCdcbiAgICAgIC8vIGNoZWNrLCBidXQgd2UgY2FuIG9mZmVyIGEgbW9yZSBwcmVjaXNlIGVycm9yIG1lc3NhZ2UgaGVyZSByYXRoZXIgdGhhblxuICAgICAgLy8gJ29mIHR5cGUgYG9iamVjdGAnLlxuICAgICAgdmFyIHByZWNpc2VUeXBlID0gZ2V0UHJlY2lzZVR5cGUocHJvcFZhbHVlKTtcblxuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgKFwiSW52YWxpZCBcIiArIGxvY2F0aW9uTmFtZSArIFwiIGBcIiArIHByb3BOYW1lICsgXCJgIG9mIHR5cGUgYFwiICsgcHJlY2lzZVR5cGUgKyBcImAgXCIpICtcbiAgICAgICAgKFwic3VwcGxpZWQgdG8gYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgYFwiICsgZXhwZWN0ZWRUeXBlICsgXCJgLlwiKVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQW55VHlwZUNoZWNrZXIoKSB7XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcihlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zKCkpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVBcnJheU9mVHlwZUNoZWNrZXIodHlwZUNoZWNrZXIpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikge1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgKFwiSW52YWxpZCBcIiArIGxvY2F0aW9uTmFtZSArIFwiIGBcIiArIHByb3BOYW1lICsgXCJgIG9mIHR5cGUgXCIpICtcbiAgICAgICAgKFwiYFwiICsgcHJvcFR5cGUgKyBcImAgc3VwcGxpZWQgdG8gYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgYW4gYXJyYXkuXCIpXG4gICAgICApO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BWYWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGVycm9yID0gdHlwZUNoZWNrZXIocHJvcFZhbHVlLCBpLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbik7XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRUeXBlQ2hlY2tlcigpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikge1xuICAgIGlmICghUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAoXCJJbnZhbGlkIFwiICsgbG9jYXRpb25OYW1lICsgXCIgYFwiICsgcHJvcE5hbWUgKyBcImAgc3VwcGxpZWQgdG8gXCIpICtcbiAgICAgICAgKFwiYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgYSBSZWFjdEVsZW1lbnQuXCIpXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZVR5cGVDaGVja2VyKGV4cGVjdGVkQ2xhc3MpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikge1xuICAgIGlmICghKHByb3BzW3Byb3BOYW1lXSBpbnN0YW5jZW9mIGV4cGVjdGVkQ2xhc3MpKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgdmFyIGV4cGVjdGVkQ2xhc3NOYW1lID0gZXhwZWN0ZWRDbGFzcy5uYW1lIHx8IEFOT05ZTU9VUztcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgIChcIkludmFsaWQgXCIgKyBsb2NhdGlvbk5hbWUgKyBcIiBgXCIgKyBwcm9wTmFtZSArIFwiYCBzdXBwbGllZCB0byBcIikgK1xuICAgICAgICAoXCJgXCIgKyBjb21wb25lbnROYW1lICsgXCJgLCBleHBlY3RlZCBpbnN0YW5jZSBvZiBgXCIgKyBleHBlY3RlZENsYXNzTmFtZSArIFwiYC5cIilcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVudW1UeXBlQ2hlY2tlcihleHBlY3RlZFZhbHVlcykge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSB7XG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4cGVjdGVkVmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocHJvcFZhbHVlID09PSBleHBlY3RlZFZhbHVlc1tpXSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICB2YXIgdmFsdWVzU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoZXhwZWN0ZWRWYWx1ZXMpO1xuICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAoXCJJbnZhbGlkIFwiICsgbG9jYXRpb25OYW1lICsgXCIgYFwiICsgcHJvcE5hbWUgKyBcImAgb2YgdmFsdWUgYFwiICsgcHJvcFZhbHVlICsgXCJgIFwiKSArXG4gICAgICAoXCJzdXBwbGllZCB0byBgXCIgKyBjb21wb25lbnROYW1lICsgXCJgLCBleHBlY3RlZCBvbmUgb2YgXCIgKyB2YWx1ZXNTdHJpbmcgKyBcIi5cIilcbiAgICApO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIodHlwZUNoZWNrZXIpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikge1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICBpZiAocHJvcFR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgKFwiSW52YWxpZCBcIiArIGxvY2F0aW9uTmFtZSArIFwiIGBcIiArIHByb3BOYW1lICsgXCJgIG9mIHR5cGUgXCIpICtcbiAgICAgICAgKFwiYFwiICsgcHJvcFR5cGUgKyBcImAgc3VwcGxpZWQgdG8gYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgYW4gb2JqZWN0LlwiKVxuICAgICAgKTtcbiAgICB9XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BWYWx1ZSkge1xuICAgICAgaWYgKHByb3BWYWx1ZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIHZhciBlcnJvciA9IHR5cGVDaGVja2VyKHByb3BWYWx1ZSwga2V5LCBjb21wb25lbnROYW1lLCBsb2NhdGlvbik7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIoYXJyYXlPZlR5cGVDaGVja2Vycykge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheU9mVHlwZUNoZWNrZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hlY2tlciA9IGFycmF5T2ZUeXBlQ2hlY2tlcnNbaV07XG4gICAgICBpZiAoY2hlY2tlcihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAoXCJJbnZhbGlkIFwiICsgbG9jYXRpb25OYW1lICsgXCIgYFwiICsgcHJvcE5hbWUgKyBcImAgc3VwcGxpZWQgdG8gXCIpICtcbiAgICAgIChcImBcIiArIGNvbXBvbmVudE5hbWUgKyBcImAuXCIpXG4gICAgKTtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVOb2RlQ2hlY2tlcigpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikge1xuICAgIGlmICghaXNOb2RlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAoXCJJbnZhbGlkIFwiICsgbG9jYXRpb25OYW1lICsgXCIgYFwiICsgcHJvcE5hbWUgKyBcImAgc3VwcGxpZWQgdG8gXCIpICtcbiAgICAgICAgKFwiYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgYSBSZWFjdE5vZGUuXCIpXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTaGFwZVR5cGVDaGVja2VyKHNoYXBlVHlwZXMpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbikge1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICBpZiAocHJvcFR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgKFwiSW52YWxpZCBcIiArIGxvY2F0aW9uTmFtZSArIFwiIGBcIiArIHByb3BOYW1lICsgXCJgIG9mIHR5cGUgYFwiICsgcHJvcFR5cGUgKyBcImAgXCIpICtcbiAgICAgICAgKFwic3VwcGxpZWQgdG8gYFwiICsgY29tcG9uZW50TmFtZSArIFwiYCwgZXhwZWN0ZWQgYG9iamVjdGAuXCIpXG4gICAgICApO1xuICAgIH1cbiAgICBmb3IgKHZhciBrZXkgaW4gc2hhcGVUeXBlcykge1xuICAgICAgdmFyIGNoZWNrZXIgPSBzaGFwZVR5cGVzW2tleV07XG4gICAgICBpZiAoIWNoZWNrZXIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgZXJyb3IgPSBjaGVja2VyKHByb3BWYWx1ZSwga2V5LCBjb21wb25lbnROYW1lLCBsb2NhdGlvbik7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUsICdleHBlY3RlZCBgb2JqZWN0YCcpO1xufVxuXG5mdW5jdGlvbiBpc05vZGUocHJvcFZhbHVlKSB7XG4gIHN3aXRjaCh0eXBlb2YgcHJvcFZhbHVlKSB7XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4gIXByb3BWYWx1ZTtcbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgICAgICByZXR1cm4gcHJvcFZhbHVlLmV2ZXJ5KGlzTm9kZSk7XG4gICAgICB9XG4gICAgICBpZiAoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrIGluIHByb3BWYWx1ZSkge1xuICAgICAgICBpZiAoIWlzTm9kZShwcm9wVmFsdWVba10pKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8vIEVxdWl2YWxlbnQgb2YgYHR5cGVvZmAgYnV0IHdpdGggc3BlY2lhbCBoYW5kbGluZyBmb3IgYXJyYXkgYW5kIHJlZ2V4cC5cbmZ1bmN0aW9uIGdldFByb3BUeXBlKHByb3BWYWx1ZSkge1xuICB2YXIgcHJvcFR5cGUgPSB0eXBlb2YgcHJvcFZhbHVlO1xuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgcmV0dXJuICdhcnJheSc7XG4gIH1cbiAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIC8vIE9sZCB3ZWJraXRzIChhdCBsZWFzdCB1bnRpbCBBbmRyb2lkIDQuMCkgcmV0dXJuICdmdW5jdGlvbicgcmF0aGVyIHRoYW5cbiAgICAvLyAnb2JqZWN0JyBmb3IgdHlwZW9mIGEgUmVnRXhwLiBXZSdsbCBub3JtYWxpemUgdGhpcyBoZXJlIHNvIHRoYXQgL2JsYS9cbiAgICAvLyBwYXNzZXMgUHJvcFR5cGVzLm9iamVjdC5cbiAgICByZXR1cm4gJ29iamVjdCc7XG4gIH1cbiAgcmV0dXJuIHByb3BUeXBlO1xufVxuXG4vLyBUaGlzIGhhbmRsZXMgbW9yZSB0eXBlcyB0aGFuIGBnZXRQcm9wVHlwZWAuIE9ubHkgdXNlZCBmb3IgZXJyb3IgbWVzc2FnZXMuXG4vLyBTZWUgYGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyYC5cbmZ1bmN0aW9uIGdldFByZWNpc2VUeXBlKHByb3BWYWx1ZSkge1xuICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICBpZiAocHJvcFR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgIHJldHVybiAnZGF0ZSc7XG4gICAgfSBlbHNlIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIHJldHVybiAncmVnZXhwJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHByb3BUeXBlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzO1xuXG59LHtcIi4vUmVhY3RFbGVtZW50XCI6MTIxLFwiLi9SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1wiOjEzOSxcIi4vZGVwcmVjYXRlZFwiOjE3NixcIi4vZW1wdHlGdW5jdGlvblwiOjE3N31dLDE0MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RQdXRMaXN0ZW5lclF1ZXVlXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoXCIuL1Bvb2xlZENsYXNzXCIpO1xudmFyIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlciA9IHJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlclwiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG5cbmZ1bmN0aW9uIFJlYWN0UHV0TGlzdGVuZXJRdWV1ZSgpIHtcbiAgdGhpcy5saXN0ZW5lcnNUb1B1dCA9IFtdO1xufVxuXG5hc3NpZ24oUmVhY3RQdXRMaXN0ZW5lclF1ZXVlLnByb3RvdHlwZSwge1xuICBlbnF1ZXVlUHV0TGlzdGVuZXI6IGZ1bmN0aW9uKHJvb3ROb2RlSUQsIHByb3BLZXksIHByb3BWYWx1ZSkge1xuICAgIHRoaXMubGlzdGVuZXJzVG9QdXQucHVzaCh7XG4gICAgICByb290Tm9kZUlEOiByb290Tm9kZUlELFxuICAgICAgcHJvcEtleTogcHJvcEtleSxcbiAgICAgIHByb3BWYWx1ZTogcHJvcFZhbHVlXG4gICAgfSk7XG4gIH0sXG5cbiAgcHV0TGlzdGVuZXJzOiBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGlzdGVuZXJzVG9QdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lclRvUHV0ID0gdGhpcy5saXN0ZW5lcnNUb1B1dFtpXTtcbiAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5wdXRMaXN0ZW5lcihcbiAgICAgICAgbGlzdGVuZXJUb1B1dC5yb290Tm9kZUlELFxuICAgICAgICBsaXN0ZW5lclRvUHV0LnByb3BLZXksXG4gICAgICAgIGxpc3RlbmVyVG9QdXQucHJvcFZhbHVlXG4gICAgICApO1xuICAgIH1cbiAgfSxcblxuICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5saXN0ZW5lcnNUb1B1dC5sZW5ndGggPSAwO1xuICB9LFxuXG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVzZXQoKTtcbiAgfVxufSk7XG5cblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhSZWFjdFB1dExpc3RlbmVyUXVldWUpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHV0TGlzdGVuZXJRdWV1ZTtcblxufSx7XCIuL09iamVjdC5hc3NpZ25cIjo5NSxcIi4vUG9vbGVkQ2xhc3NcIjo5NixcIi4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXCI6OTl9XSwxNDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb25cbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBDYWxsYmFja1F1ZXVlID0gcmVxdWlyZShcIi4vQ2FsbGJhY2tRdWV1ZVwiKTtcbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoXCIuL1Bvb2xlZENsYXNzXCIpO1xudmFyIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlciA9IHJlcXVpcmUoXCIuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlclwiKTtcbnZhciBSZWFjdElucHV0U2VsZWN0aW9uID0gcmVxdWlyZShcIi4vUmVhY3RJbnB1dFNlbGVjdGlvblwiKTtcbnZhciBSZWFjdFB1dExpc3RlbmVyUXVldWUgPSByZXF1aXJlKFwiLi9SZWFjdFB1dExpc3RlbmVyUXVldWVcIik7XG52YXIgVHJhbnNhY3Rpb24gPSByZXF1aXJlKFwiLi9UcmFuc2FjdGlvblwiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG5cbi8qKlxuICogRW5zdXJlcyB0aGF0LCB3aGVuIHBvc3NpYmxlLCB0aGUgc2VsZWN0aW9uIHJhbmdlIChjdXJyZW50bHkgc2VsZWN0ZWQgdGV4dFxuICogaW5wdXQpIGlzIG5vdCBkaXN0dXJiZWQgYnkgcGVyZm9ybWluZyB0aGUgdHJhbnNhY3Rpb24uXG4gKi9cbnZhciBTRUxFQ1RJT05fUkVTVE9SQVRJT04gPSB7XG4gIC8qKlxuICAgKiBAcmV0dXJuIHtTZWxlY3Rpb259IFNlbGVjdGlvbiBpbmZvcm1hdGlvbi5cbiAgICovXG4gIGluaXRpYWxpemU6IFJlYWN0SW5wdXRTZWxlY3Rpb24uZ2V0U2VsZWN0aW9uSW5mb3JtYXRpb24sXG4gIC8qKlxuICAgKiBAcGFyYW0ge1NlbGVjdGlvbn0gc2VsIFNlbGVjdGlvbiBpbmZvcm1hdGlvbiByZXR1cm5lZCBmcm9tIGBpbml0aWFsaXplYC5cbiAgICovXG4gIGNsb3NlOiBSZWFjdElucHV0U2VsZWN0aW9uLnJlc3RvcmVTZWxlY3Rpb25cbn07XG5cbi8qKlxuICogU3VwcHJlc3NlcyBldmVudHMgKGJsdXIvZm9jdXMpIHRoYXQgY291bGQgYmUgaW5hZHZlcnRlbnRseSBkaXNwYXRjaGVkIGR1ZSB0b1xuICogaGlnaCBsZXZlbCBET00gbWFuaXB1bGF0aW9ucyAobGlrZSB0ZW1wb3JhcmlseSByZW1vdmluZyBhIHRleHQgaW5wdXQgZnJvbSB0aGVcbiAqIERPTSkuXG4gKi9cbnZhciBFVkVOVF9TVVBQUkVTU0lPTiA9IHtcbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRoZSBlbmFibGVkIHN0YXR1cyBvZiBgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyYCBiZWZvcmVcbiAgICogdGhlIHJlY29uY2lsaWF0aW9uLlxuICAgKi9cbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGN1cnJlbnRseUVuYWJsZWQgPSBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuaXNFbmFibGVkKCk7XG4gICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnNldEVuYWJsZWQoZmFsc2UpO1xuICAgIHJldHVybiBjdXJyZW50bHlFbmFibGVkO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHByZXZpb3VzbHlFbmFibGVkIEVuYWJsZWQgc3RhdHVzIG9mXG4gICAqICAgYFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlcmAgYmVmb3JlIHRoZSByZWNvbmNpbGlhdGlvbiBvY2N1cmVkLiBgY2xvc2VgXG4gICAqICAgcmVzdG9yZXMgdGhlIHByZXZpb3VzIHZhbHVlLlxuICAgKi9cbiAgY2xvc2U6IGZ1bmN0aW9uKHByZXZpb3VzbHlFbmFibGVkKSB7XG4gICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnNldEVuYWJsZWQocHJldmlvdXNseUVuYWJsZWQpO1xuICB9XG59O1xuXG4vKipcbiAqIFByb3ZpZGVzIGEgcXVldWUgZm9yIGNvbGxlY3RpbmcgYGNvbXBvbmVudERpZE1vdW50YCBhbmRcbiAqIGBjb21wb25lbnREaWRVcGRhdGVgIGNhbGxiYWNrcyBkdXJpbmcgdGhlIHRoZSB0cmFuc2FjdGlvbi5cbiAqL1xudmFyIE9OX0RPTV9SRUFEWV9RVUVVRUlORyA9IHtcbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBpbnRlcm5hbCBgb25ET01SZWFkeWAgcXVldWUuXG4gICAqL1xuICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlYWN0TW91bnRSZWFkeS5yZXNldCgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBZnRlciBET00gaXMgZmx1c2hlZCwgaW52b2tlIGFsbCByZWdpc3RlcmVkIGBvbkRPTVJlYWR5YCBjYWxsYmFja3MuXG4gICAqL1xuICBjbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZWFjdE1vdW50UmVhZHkubm90aWZ5QWxsKCk7XG4gIH1cbn07XG5cbnZhciBQVVRfTElTVEVORVJfUVVFVUVJTkcgPSB7XG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucHV0TGlzdGVuZXJRdWV1ZS5yZXNldCgpO1xuICB9LFxuXG4gIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnB1dExpc3RlbmVyUXVldWUucHV0TGlzdGVuZXJzKCk7XG4gIH1cbn07XG5cbi8qKlxuICogRXhlY3V0ZWQgd2l0aGluIHRoZSBzY29wZSBvZiB0aGUgYFRyYW5zYWN0aW9uYCBpbnN0YW5jZS4gQ29uc2lkZXIgdGhlc2UgYXNcbiAqIGJlaW5nIG1lbWJlciBtZXRob2RzLCBidXQgd2l0aCBhbiBpbXBsaWVkIG9yZGVyaW5nIHdoaWxlIGJlaW5nIGlzb2xhdGVkIGZyb21cbiAqIGVhY2ggb3RoZXIuXG4gKi9cbnZhciBUUkFOU0FDVElPTl9XUkFQUEVSUyA9IFtcbiAgUFVUX0xJU1RFTkVSX1FVRVVFSU5HLFxuICBTRUxFQ1RJT05fUkVTVE9SQVRJT04sXG4gIEVWRU5UX1NVUFBSRVNTSU9OLFxuICBPTl9ET01fUkVBRFlfUVVFVUVJTkdcbl07XG5cbi8qKlxuICogQ3VycmVudGx5OlxuICogLSBUaGUgb3JkZXIgdGhhdCB0aGVzZSBhcmUgbGlzdGVkIGluIHRoZSB0cmFuc2FjdGlvbiBpcyBjcml0aWNhbDpcbiAqIC0gU3VwcHJlc3NlcyBldmVudHMuXG4gKiAtIFJlc3RvcmVzIHNlbGVjdGlvbiByYW5nZS5cbiAqXG4gKiBGdXR1cmU6XG4gKiAtIFJlc3RvcmUgZG9jdW1lbnQvb3ZlcmZsb3cgc2Nyb2xsIHBvc2l0aW9ucyB0aGF0IHdlcmUgdW5pbnRlbnRpb25hbGx5XG4gKiAgIG1vZGlmaWVkIHZpYSBET00gaW5zZXJ0aW9ucyBhYm92ZSB0aGUgdG9wIHZpZXdwb3J0IGJvdW5kYXJ5LlxuICogLSBJbXBsZW1lbnQvaW50ZWdyYXRlIHdpdGggY3VzdG9taXplZCBjb25zdHJhaW50IGJhc2VkIGxheW91dCBzeXN0ZW0gYW5kIGtlZXBcbiAqICAgdHJhY2sgb2Ygd2hpY2ggZGltZW5zaW9ucyBtdXN0IGJlIHJlbWVhc3VyZWQuXG4gKlxuICogQGNsYXNzIFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb25cbiAqL1xuZnVuY3Rpb24gUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbigpIHtcbiAgdGhpcy5yZWluaXRpYWxpemVUcmFuc2FjdGlvbigpO1xuICAvLyBPbmx5IHNlcnZlci1zaWRlIHJlbmRlcmluZyByZWFsbHkgbmVlZHMgdGhpcyBvcHRpb24gKHNlZVxuICAvLyBgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdgKSwgYnV0IHNlcnZlci1zaWRlIHVzZXNcbiAgLy8gYFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb25gIGluc3RlYWQuIFRoaXMgb3B0aW9uIGlzIGhlcmUgc28gdGhhdCBpdCdzXG4gIC8vIGFjY2Vzc2libGUgYW5kIGRlZmF1bHRzIHRvIGZhbHNlIHdoZW4gYFJlYWN0RE9NQ29tcG9uZW50YCBhbmRcbiAgLy8gYFJlYWN0VGV4dENvbXBvbmVudGAgY2hlY2tzIGl0IGluIGBtb3VudENvbXBvbmVudGAuYFxuICB0aGlzLnJlbmRlclRvU3RhdGljTWFya3VwID0gZmFsc2U7XG4gIHRoaXMucmVhY3RNb3VudFJlYWR5ID0gQ2FsbGJhY2tRdWV1ZS5nZXRQb29sZWQobnVsbCk7XG4gIHRoaXMucHV0TGlzdGVuZXJRdWV1ZSA9IFJlYWN0UHV0TGlzdGVuZXJRdWV1ZS5nZXRQb29sZWQoKTtcbn1cblxudmFyIE1peGluID0ge1xuICAvKipcbiAgICogQHNlZSBUcmFuc2FjdGlvblxuICAgKiBAYWJzdHJhY3RcbiAgICogQGZpbmFsXG4gICAqIEByZXR1cm4ge2FycmF5PG9iamVjdD59IExpc3Qgb2Ygb3BlcmF0aW9uIHdyYXAgcHJvY2VlZHVyZXMuXG4gICAqICAgVE9ETzogY29udmVydCB0byBhcnJheTxUcmFuc2FjdGlvbldyYXBwZXI+XG4gICAqL1xuICBnZXRUcmFuc2FjdGlvbldyYXBwZXJzOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVFJBTlNBQ1RJT05fV1JBUFBFUlM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge29iamVjdH0gVGhlIHF1ZXVlIHRvIGNvbGxlY3QgYG9uRE9NUmVhZHlgIGNhbGxiYWNrcyB3aXRoLlxuICAgKi9cbiAgZ2V0UmVhY3RNb3VudFJlYWR5OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFjdE1vdW50UmVhZHk7XG4gIH0sXG5cbiAgZ2V0UHV0TGlzdGVuZXJRdWV1ZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucHV0TGlzdGVuZXJRdWV1ZTtcbiAgfSxcblxuICAvKipcbiAgICogYFBvb2xlZENsYXNzYCBsb29rcyBmb3IgdGhpcywgYW5kIHdpbGwgaW52b2tlIHRoaXMgYmVmb3JlIGFsbG93aW5nIHRoaXNcbiAgICogaW5zdGFuY2UgdG8gYmUgcmVzdXNlZC5cbiAgICovXG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uKCkge1xuICAgIENhbGxiYWNrUXVldWUucmVsZWFzZSh0aGlzLnJlYWN0TW91bnRSZWFkeSk7XG4gICAgdGhpcy5yZWFjdE1vdW50UmVhZHkgPSBudWxsO1xuXG4gICAgUmVhY3RQdXRMaXN0ZW5lclF1ZXVlLnJlbGVhc2UodGhpcy5wdXRMaXN0ZW5lclF1ZXVlKTtcbiAgICB0aGlzLnB1dExpc3RlbmVyUXVldWUgPSBudWxsO1xuICB9XG59O1xuXG5cbmFzc2lnbihSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLnByb3RvdHlwZSwgVHJhbnNhY3Rpb24uTWl4aW4sIE1peGluKTtcblxuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb247XG5cbn0se1wiLi9DYWxsYmFja1F1ZXVlXCI6NzQsXCIuL09iamVjdC5hc3NpZ25cIjo5NSxcIi4vUG9vbGVkQ2xhc3NcIjo5NixcIi4vUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyXCI6OTksXCIuL1JlYWN0SW5wdXRTZWxlY3Rpb25cIjoxMjgsXCIuL1JlYWN0UHV0TGlzdGVuZXJRdWV1ZVwiOjE0MixcIi4vVHJhbnNhY3Rpb25cIjoxNjR9XSwxNDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0Um9vdEluZGV4XG4gKiBAdHlwZWNoZWNrc1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgUmVhY3RSb290SW5kZXhJbmplY3Rpb24gPSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBfY3JlYXRlUmVhY3RSb290SW5kZXhcbiAgICovXG4gIGluamVjdENyZWF0ZVJlYWN0Um9vdEluZGV4OiBmdW5jdGlvbihfY3JlYXRlUmVhY3RSb290SW5kZXgpIHtcbiAgICBSZWFjdFJvb3RJbmRleC5jcmVhdGVSZWFjdFJvb3RJbmRleCA9IF9jcmVhdGVSZWFjdFJvb3RJbmRleDtcbiAgfVxufTtcblxudmFyIFJlYWN0Um9vdEluZGV4ID0ge1xuICBjcmVhdGVSZWFjdFJvb3RJbmRleDogbnVsbCxcbiAgaW5qZWN0aW9uOiBSZWFjdFJvb3RJbmRleEluamVjdGlvblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFJvb3RJbmRleDtcblxufSx7fV0sMTQ1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0U2VydmVyUmVuZGVyaW5nXG4gKi9cblwidXNlIHN0cmljdFwiO1xuXG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xudmFyIFJlYWN0SW5zdGFuY2VIYW5kbGVzID0gcmVxdWlyZShcIi4vUmVhY3RJbnN0YW5jZUhhbmRsZXNcIik7XG52YXIgUmVhY3RNYXJrdXBDaGVja3N1bSA9IHJlcXVpcmUoXCIuL1JlYWN0TWFya3VwQ2hlY2tzdW1cIik7XG52YXIgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbiA9XG4gIHJlcXVpcmUoXCIuL1JlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb25cIik7XG5cbnZhciBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudFwiKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbi8qKlxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge3N0cmluZ30gdGhlIEhUTUwgbWFya3VwXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclRvU3RyaW5nKGVsZW1lbnQpIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCksXG4gICAgJ3JlbmRlclRvU3RyaW5nKCk6IFlvdSBtdXN0IHBhc3MgYSB2YWxpZCBSZWFjdEVsZW1lbnQuJ1xuICApIDogaW52YXJpYW50KFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSkpO1xuXG4gIHZhciB0cmFuc2FjdGlvbjtcbiAgdHJ5IHtcbiAgICB2YXIgaWQgPSBSZWFjdEluc3RhbmNlSGFuZGxlcy5jcmVhdGVSZWFjdFJvb3RJRCgpO1xuICAgIHRyYW5zYWN0aW9uID0gUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5nZXRQb29sZWQoZmFsc2UpO1xuXG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uLnBlcmZvcm0oZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KGVsZW1lbnQsIG51bGwpO1xuICAgICAgdmFyIG1hcmt1cCA9IGNvbXBvbmVudEluc3RhbmNlLm1vdW50Q29tcG9uZW50KGlkLCB0cmFuc2FjdGlvbiwgMCk7XG4gICAgICByZXR1cm4gUmVhY3RNYXJrdXBDaGVja3N1bS5hZGRDaGVja3N1bVRvTWFya3VwKG1hcmt1cCk7XG4gICAgfSwgbnVsbCk7XG4gIH0gZmluYWxseSB7XG4gICAgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5yZWxlYXNlKHRyYW5zYWN0aW9uKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSBIVE1MIG1hcmt1cCwgd2l0aG91dCB0aGUgZXh0cmEgUmVhY3QgSUQgYW5kIGNoZWNrc3VtXG4gKiAoZm9yIGdlbmVyYXRpbmcgc3RhdGljIHBhZ2VzKVxuICovXG5mdW5jdGlvbiByZW5kZXJUb1N0YXRpY01hcmt1cChlbGVtZW50KSB7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpLFxuICAgICdyZW5kZXJUb1N0YXRpY01hcmt1cCgpOiBZb3UgbXVzdCBwYXNzIGEgdmFsaWQgUmVhY3RFbGVtZW50LidcbiAgKSA6IGludmFyaWFudChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpKTtcblxuICB2YXIgdHJhbnNhY3Rpb247XG4gIHRyeSB7XG4gICAgdmFyIGlkID0gUmVhY3RJbnN0YW5jZUhhbmRsZXMuY3JlYXRlUmVhY3RSb290SUQoKTtcbiAgICB0cmFuc2FjdGlvbiA9IFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24uZ2V0UG9vbGVkKHRydWUpO1xuXG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uLnBlcmZvcm0oZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KGVsZW1lbnQsIG51bGwpO1xuICAgICAgcmV0dXJuIGNvbXBvbmVudEluc3RhbmNlLm1vdW50Q29tcG9uZW50KGlkLCB0cmFuc2FjdGlvbiwgMCk7XG4gICAgfSwgbnVsbCk7XG4gIH0gZmluYWxseSB7XG4gICAgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5yZWxlYXNlKHRyYW5zYWN0aW9uKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcmVuZGVyVG9TdHJpbmc6IHJlbmRlclRvU3RyaW5nLFxuICByZW5kZXJUb1N0YXRpY01hcmt1cDogcmVuZGVyVG9TdGF0aWNNYXJrdXBcbn07XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL1JlYWN0RWxlbWVudFwiOjEyMSxcIi4vUmVhY3RJbnN0YW5jZUhhbmRsZXNcIjoxMjksXCIuL1JlYWN0TWFya3VwQ2hlY2tzdW1cIjoxMzEsXCIuL1JlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb25cIjoxNDYsXCIuL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnRcIjoxOTUsXCIuL2ludmFyaWFudFwiOjE5NixcIl9wcm9jZXNzXCI6MTl9XSwxNDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKFwiLi9Qb29sZWRDbGFzc1wiKTtcbnZhciBDYWxsYmFja1F1ZXVlID0gcmVxdWlyZShcIi4vQ2FsbGJhY2tRdWV1ZVwiKTtcbnZhciBSZWFjdFB1dExpc3RlbmVyUXVldWUgPSByZXF1aXJlKFwiLi9SZWFjdFB1dExpc3RlbmVyUXVldWVcIik7XG52YXIgVHJhbnNhY3Rpb24gPSByZXF1aXJlKFwiLi9UcmFuc2FjdGlvblwiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoXCIuL2VtcHR5RnVuY3Rpb25cIik7XG5cbi8qKlxuICogUHJvdmlkZXMgYSBgQ2FsbGJhY2tRdWV1ZWAgcXVldWUgZm9yIGNvbGxlY3RpbmcgYG9uRE9NUmVhZHlgIGNhbGxiYWNrc1xuICogZHVyaW5nIHRoZSBwZXJmb3JtaW5nIG9mIHRoZSB0cmFuc2FjdGlvbi5cbiAqL1xudmFyIE9OX0RPTV9SRUFEWV9RVUVVRUlORyA9IHtcbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBpbnRlcm5hbCBgb25ET01SZWFkeWAgcXVldWUuXG4gICAqL1xuICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlYWN0TW91bnRSZWFkeS5yZXNldCgpO1xuICB9LFxuXG4gIGNsb3NlOiBlbXB0eUZ1bmN0aW9uXG59O1xuXG52YXIgUFVUX0xJU1RFTkVSX1FVRVVFSU5HID0ge1xuICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnB1dExpc3RlbmVyUXVldWUucmVzZXQoKTtcbiAgfSxcblxuICBjbG9zZTogZW1wdHlGdW5jdGlvblxufTtcblxuLyoqXG4gKiBFeGVjdXRlZCB3aXRoaW4gdGhlIHNjb3BlIG9mIHRoZSBgVHJhbnNhY3Rpb25gIGluc3RhbmNlLiBDb25zaWRlciB0aGVzZSBhc1xuICogYmVpbmcgbWVtYmVyIG1ldGhvZHMsIGJ1dCB3aXRoIGFuIGltcGxpZWQgb3JkZXJpbmcgd2hpbGUgYmVpbmcgaXNvbGF0ZWQgZnJvbVxuICogZWFjaCBvdGhlci5cbiAqL1xudmFyIFRSQU5TQUNUSU9OX1dSQVBQRVJTID0gW1xuICBQVVRfTElTVEVORVJfUVVFVUVJTkcsXG4gIE9OX0RPTV9SRUFEWV9RVUVVRUlOR1xuXTtcblxuLyoqXG4gKiBAY2xhc3MgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvblxuICogQHBhcmFtIHtib29sZWFufSByZW5kZXJUb1N0YXRpY01hcmt1cFxuICovXG5mdW5jdGlvbiBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uKHJlbmRlclRvU3RhdGljTWFya3VwKSB7XG4gIHRoaXMucmVpbml0aWFsaXplVHJhbnNhY3Rpb24oKTtcbiAgdGhpcy5yZW5kZXJUb1N0YXRpY01hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwO1xuICB0aGlzLnJlYWN0TW91bnRSZWFkeSA9IENhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKG51bGwpO1xuICB0aGlzLnB1dExpc3RlbmVyUXVldWUgPSBSZWFjdFB1dExpc3RlbmVyUXVldWUuZ2V0UG9vbGVkKCk7XG59XG5cbnZhciBNaXhpbiA9IHtcbiAgLyoqXG4gICAqIEBzZWUgVHJhbnNhY3Rpb25cbiAgICogQGFic3RyYWN0XG4gICAqIEBmaW5hbFxuICAgKiBAcmV0dXJuIHthcnJheX0gRW1wdHkgbGlzdCBvZiBvcGVyYXRpb24gd3JhcCBwcm9jZWVkdXJlcy5cbiAgICovXG4gIGdldFRyYW5zYWN0aW9uV3JhcHBlcnM6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBUUkFOU0FDVElPTl9XUkFQUEVSUztcbiAgfSxcblxuICAvKipcbiAgICogQHJldHVybiB7b2JqZWN0fSBUaGUgcXVldWUgdG8gY29sbGVjdCBgb25ET01SZWFkeWAgY2FsbGJhY2tzIHdpdGguXG4gICAqL1xuICBnZXRSZWFjdE1vdW50UmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJlYWN0TW91bnRSZWFkeTtcbiAgfSxcblxuICBnZXRQdXRMaXN0ZW5lclF1ZXVlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5wdXRMaXN0ZW5lclF1ZXVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBgUG9vbGVkQ2xhc3NgIGxvb2tzIGZvciB0aGlzLCBhbmQgd2lsbCBpbnZva2UgdGhpcyBiZWZvcmUgYWxsb3dpbmcgdGhpc1xuICAgKiBpbnN0YW5jZSB0byBiZSByZXN1c2VkLlxuICAgKi9cbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24oKSB7XG4gICAgQ2FsbGJhY2tRdWV1ZS5yZWxlYXNlKHRoaXMucmVhY3RNb3VudFJlYWR5KTtcbiAgICB0aGlzLnJlYWN0TW91bnRSZWFkeSA9IG51bGw7XG5cbiAgICBSZWFjdFB1dExpc3RlbmVyUXVldWUucmVsZWFzZSh0aGlzLnB1dExpc3RlbmVyUXVldWUpO1xuICAgIHRoaXMucHV0TGlzdGVuZXJRdWV1ZSA9IG51bGw7XG4gIH1cbn07XG5cblxuYXNzaWduKFxuICBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uLnByb3RvdHlwZSxcbiAgVHJhbnNhY3Rpb24uTWl4aW4sXG4gIE1peGluXG4pO1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbik7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbjtcblxufSx7XCIuL0NhbGxiYWNrUXVldWVcIjo3NCxcIi4vT2JqZWN0LmFzc2lnblwiOjk1LFwiLi9Qb29sZWRDbGFzc1wiOjk2LFwiLi9SZWFjdFB1dExpc3RlbmVyUXVldWVcIjoxNDIsXCIuL1RyYW5zYWN0aW9uXCI6MTY0LFwiLi9lbXB0eUZ1bmN0aW9uXCI6MTc3fV0sMTQ3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFRleHRDb21wb25lbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBET01Qcm9wZXJ0eU9wZXJhdGlvbnMgPSByZXF1aXJlKFwiLi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnNcIik7XG52YXIgUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKFwiLi9SZWFjdENvbXBvbmVudFwiKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIGVzY2FwZVRleHRGb3JCcm93c2VyID0gcmVxdWlyZShcIi4vZXNjYXBlVGV4dEZvckJyb3dzZXJcIik7XG5cbi8qKlxuICogVGV4dCBub2RlcyB2aW9sYXRlIGEgY291cGxlIGFzc3VtcHRpb25zIHRoYXQgUmVhY3QgbWFrZXMgYWJvdXQgY29tcG9uZW50czpcbiAqXG4gKiAgLSBXaGVuIG1vdW50aW5nIHRleHQgaW50byB0aGUgRE9NLCBhZGphY2VudCB0ZXh0IG5vZGVzIGFyZSBtZXJnZWQuXG4gKiAgLSBUZXh0IG5vZGVzIGNhbm5vdCBiZSBhc3NpZ25lZCBhIFJlYWN0IHJvb3QgSUQuXG4gKlxuICogVGhpcyBjb21wb25lbnQgaXMgdXNlZCB0byB3cmFwIHN0cmluZ3MgaW4gZWxlbWVudHMgc28gdGhhdCB0aGV5IGNhbiB1bmRlcmdvXG4gKiB0aGUgc2FtZSByZWNvbmNpbGlhdGlvbiB0aGF0IGlzIGFwcGxpZWQgdG8gZWxlbWVudHMuXG4gKlxuICogVE9ETzogSW52ZXN0aWdhdGUgcmVwcmVzZW50aW5nIFJlYWN0IGNvbXBvbmVudHMgaW4gdGhlIERPTSB3aXRoIHRleHQgbm9kZXMuXG4gKlxuICogQGNsYXNzIFJlYWN0VGV4dENvbXBvbmVudFxuICogQGV4dGVuZHMgUmVhY3RDb21wb25lbnRcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgUmVhY3RUZXh0Q29tcG9uZW50ID0gZnVuY3Rpb24ocHJvcHMpIHtcbiAgLy8gVGhpcyBjb25zdHJ1Y3RvciBhbmQgaXQncyBhcmd1bWVudCBpcyBjdXJyZW50bHkgdXNlZCBieSBtb2Nrcy5cbn07XG5cbmFzc2lnbihSZWFjdFRleHRDb21wb25lbnQucHJvdG90eXBlLCBSZWFjdENvbXBvbmVudC5NaXhpbiwge1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHRoZSBtYXJrdXAgZm9yIHRoaXMgdGV4dCBub2RlLiBUaGlzIG5vZGUgaXMgbm90IGludGVuZGVkIHRvIGhhdmVcbiAgICogYW55IGZlYXR1cmVzIGJlc2lkZXMgY29udGFpbmluZyB0ZXh0IGNvbnRlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByb290SUQgRE9NIElEIG9mIHRoZSByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbnxSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge251bWJlcn0gbW91bnREZXB0aCBudW1iZXIgb2YgY29tcG9uZW50cyBpbiB0aGUgb3duZXIgaGllcmFyY2h5XG4gICAqIEByZXR1cm4ge3N0cmluZ30gTWFya3VwIGZvciB0aGlzIHRleHQgbm9kZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBtb3VudENvbXBvbmVudDogZnVuY3Rpb24ocm9vdElELCB0cmFuc2FjdGlvbiwgbW91bnREZXB0aCkge1xuICAgIFJlYWN0Q29tcG9uZW50Lk1peGluLm1vdW50Q29tcG9uZW50LmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgcm9vdElELFxuICAgICAgdHJhbnNhY3Rpb24sXG4gICAgICBtb3VudERlcHRoXG4gICAgKTtcblxuICAgIHZhciBlc2NhcGVkVGV4dCA9IGVzY2FwZVRleHRGb3JCcm93c2VyKHRoaXMucHJvcHMpO1xuXG4gICAgaWYgKHRyYW5zYWN0aW9uLnJlbmRlclRvU3RhdGljTWFya3VwKSB7XG4gICAgICAvLyBOb3JtYWxseSB3ZSdkIHdyYXAgdGhpcyBpbiBhIGBzcGFuYCBmb3IgdGhlIHJlYXNvbnMgc3RhdGVkIGFib3ZlLCBidXRcbiAgICAgIC8vIHNpbmNlIHRoaXMgaXMgYSBzaXR1YXRpb24gd2hlcmUgUmVhY3Qgd29uJ3QgdGFrZSBvdmVyIChzdGF0aWMgcGFnZXMpLFxuICAgICAgLy8gd2UgY2FuIHNpbXBseSByZXR1cm4gdGhlIHRleHQgYXMgaXQgaXMuXG4gICAgICByZXR1cm4gZXNjYXBlZFRleHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICc8c3BhbiAnICsgRE9NUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvcklEKHJvb3RJRCkgKyAnPicgK1xuICAgICAgICBlc2NhcGVkVGV4dCArXG4gICAgICAnPC9zcGFuPidcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoaXMgY29tcG9uZW50IGJ5IHVwZGF0aW5nIHRoZSB0ZXh0IGNvbnRlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0Q29tcG9uZW50IENvbnRhaW5zIHRoZSBuZXh0IHRleHQgY29udGVudC5cbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJlY2VpdmVDb21wb25lbnQ6IGZ1bmN0aW9uKG5leHRDb21wb25lbnQsIHRyYW5zYWN0aW9uKSB7XG4gICAgdmFyIG5leHRQcm9wcyA9IG5leHRDb21wb25lbnQucHJvcHM7XG4gICAgaWYgKG5leHRQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAgICAgdGhpcy5wcm9wcyA9IG5leHRQcm9wcztcbiAgICAgIFJlYWN0Q29tcG9uZW50LkJhY2tlbmRJRE9wZXJhdGlvbnMudXBkYXRlVGV4dENvbnRlbnRCeUlEKFxuICAgICAgICB0aGlzLl9yb290Tm9kZUlELFxuICAgICAgICBuZXh0UHJvcHNcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbn0pO1xuXG52YXIgUmVhY3RUZXh0Q29tcG9uZW50RmFjdG9yeSA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgLy8gQnlwYXNzIHZhbGlkYXRpb24gYW5kIGNvbmZpZ3VyYXRpb25cbiAgcmV0dXJuIG5ldyBSZWFjdEVsZW1lbnQoUmVhY3RUZXh0Q29tcG9uZW50LCBudWxsLCBudWxsLCBudWxsLCBudWxsLCB0ZXh0KTtcbn07XG5cblJlYWN0VGV4dENvbXBvbmVudEZhY3RvcnkudHlwZSA9IFJlYWN0VGV4dENvbXBvbmVudDtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFRleHRDb21wb25lbnRGYWN0b3J5O1xuXG59LHtcIi4vRE9NUHJvcGVydHlPcGVyYXRpb25zXCI6ODAsXCIuL09iamVjdC5hc3NpZ25cIjo5NSxcIi4vUmVhY3RDb21wb25lbnRcIjoxMDEsXCIuL1JlYWN0RWxlbWVudFwiOjEyMSxcIi4vZXNjYXBlVGV4dEZvckJyb3dzZXJcIjoxNzl9XSwxNDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFVwZGF0ZXNcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIENhbGxiYWNrUXVldWUgPSByZXF1aXJlKFwiLi9DYWxsYmFja1F1ZXVlXCIpO1xudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZShcIi4vUG9vbGVkQ2xhc3NcIik7XG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKFwiLi9SZWFjdEN1cnJlbnRPd25lclwiKTtcbnZhciBSZWFjdFBlcmYgPSByZXF1aXJlKFwiLi9SZWFjdFBlcmZcIik7XG52YXIgVHJhbnNhY3Rpb24gPSByZXF1aXJlKFwiLi9UcmFuc2FjdGlvblwiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG52YXIgZGlydHlDb21wb25lbnRzID0gW107XG52YXIgYXNhcENhbGxiYWNrUXVldWUgPSBDYWxsYmFja1F1ZXVlLmdldFBvb2xlZCgpO1xudmFyIGFzYXBFbnF1ZXVlZCA9IGZhbHNlO1xuXG52YXIgYmF0Y2hpbmdTdHJhdGVneSA9IG51bGw7XG5cbmZ1bmN0aW9uIGVuc3VyZUluamVjdGVkKCkge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uICYmIGJhdGNoaW5nU3RyYXRlZ3ksXG4gICAgJ1JlYWN0VXBkYXRlczogbXVzdCBpbmplY3QgYSByZWNvbmNpbGUgdHJhbnNhY3Rpb24gY2xhc3MgYW5kIGJhdGNoaW5nICcgK1xuICAgICdzdHJhdGVneSdcbiAgKSA6IGludmFyaWFudChSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiAmJiBiYXRjaGluZ1N0cmF0ZWd5KSk7XG59XG5cbnZhciBORVNURURfVVBEQVRFUyA9IHtcbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5kaXJ0eUNvbXBvbmVudHNMZW5ndGggPSBkaXJ0eUNvbXBvbmVudHMubGVuZ3RoO1xuICB9LFxuICBjbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuZGlydHlDb21wb25lbnRzTGVuZ3RoICE9PSBkaXJ0eUNvbXBvbmVudHMubGVuZ3RoKSB7XG4gICAgICAvLyBBZGRpdGlvbmFsIHVwZGF0ZXMgd2VyZSBlbnF1ZXVlZCBieSBjb21wb25lbnREaWRVcGRhdGUgaGFuZGxlcnMgb3JcbiAgICAgIC8vIHNpbWlsYXI7IGJlZm9yZSBvdXIgb3duIFVQREFURV9RVUVVRUlORyB3cmFwcGVyIGNsb3Nlcywgd2Ugd2FudCB0byBydW5cbiAgICAgIC8vIHRoZXNlIG5ldyB1cGRhdGVzIHNvIHRoYXQgaWYgQSdzIGNvbXBvbmVudERpZFVwZGF0ZSBjYWxscyBzZXRTdGF0ZSBvblxuICAgICAgLy8gQiwgQiB3aWxsIHVwZGF0ZSBiZWZvcmUgdGhlIGNhbGxiYWNrIEEncyB1cGRhdGVyIHByb3ZpZGVkIHdoZW4gY2FsbGluZ1xuICAgICAgLy8gc2V0U3RhdGUuXG4gICAgICBkaXJ0eUNvbXBvbmVudHMuc3BsaWNlKDAsIHRoaXMuZGlydHlDb21wb25lbnRzTGVuZ3RoKTtcbiAgICAgIGZsdXNoQmF0Y2hlZFVwZGF0ZXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGlydHlDb21wb25lbnRzLmxlbmd0aCA9IDA7XG4gICAgfVxuICB9XG59O1xuXG52YXIgVVBEQVRFX1FVRVVFSU5HID0ge1xuICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmNhbGxiYWNrUXVldWUucmVzZXQoKTtcbiAgfSxcbiAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY2FsbGJhY2tRdWV1ZS5ub3RpZnlBbGwoKTtcbiAgfVxufTtcblxudmFyIFRSQU5TQUNUSU9OX1dSQVBQRVJTID0gW05FU1RFRF9VUERBVEVTLCBVUERBVEVfUVVFVUVJTkddO1xuXG5mdW5jdGlvbiBSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uKCkge1xuICB0aGlzLnJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uKCk7XG4gIHRoaXMuZGlydHlDb21wb25lbnRzTGVuZ3RoID0gbnVsbDtcbiAgdGhpcy5jYWxsYmFja1F1ZXVlID0gQ2FsbGJhY2tRdWV1ZS5nZXRQb29sZWQoKTtcbiAgdGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbiA9XG4gICAgUmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24uZ2V0UG9vbGVkKCk7XG59XG5cbmFzc2lnbihcbiAgUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbi5wcm90b3R5cGUsXG4gIFRyYW5zYWN0aW9uLk1peGluLCB7XG4gIGdldFRyYW5zYWN0aW9uV3JhcHBlcnM6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBUUkFOU0FDVElPTl9XUkFQUEVSUztcbiAgfSxcblxuICBkZXN0cnVjdG9yOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmRpcnR5Q29tcG9uZW50c0xlbmd0aCA9IG51bGw7XG4gICAgQ2FsbGJhY2tRdWV1ZS5yZWxlYXNlKHRoaXMuY2FsbGJhY2tRdWV1ZSk7XG4gICAgdGhpcy5jYWxsYmFja1F1ZXVlID0gbnVsbDtcbiAgICBSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5yZWxlYXNlKHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24pO1xuICAgIHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24gPSBudWxsO1xuICB9LFxuXG4gIHBlcmZvcm06IGZ1bmN0aW9uKG1ldGhvZCwgc2NvcGUsIGEpIHtcbiAgICAvLyBFc3NlbnRpYWxseSBjYWxscyBgdGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbi5wZXJmb3JtKG1ldGhvZCwgc2NvcGUsIGEpYFxuICAgIC8vIHdpdGggdGhpcyB0cmFuc2FjdGlvbidzIHdyYXBwZXJzIGFyb3VuZCBpdC5cbiAgICByZXR1cm4gVHJhbnNhY3Rpb24uTWl4aW4ucGVyZm9ybS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgIHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24ucGVyZm9ybSxcbiAgICAgIHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24sXG4gICAgICBtZXRob2QsXG4gICAgICBzY29wZSxcbiAgICAgIGFcbiAgICApO1xuICB9XG59KTtcblxuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKFJlYWN0VXBkYXRlc0ZsdXNoVHJhbnNhY3Rpb24pO1xuXG5mdW5jdGlvbiBiYXRjaGVkVXBkYXRlcyhjYWxsYmFjaywgYSwgYikge1xuICBlbnN1cmVJbmplY3RlZCgpO1xuICBiYXRjaGluZ1N0cmF0ZWd5LmJhdGNoZWRVcGRhdGVzKGNhbGxiYWNrLCBhLCBiKTtcbn1cblxuLyoqXG4gKiBBcnJheSBjb21wYXJhdG9yIGZvciBSZWFjdENvbXBvbmVudHMgYnkgb3duZXIgZGVwdGhcbiAqXG4gKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjMSBmaXJzdCBjb21wb25lbnQgeW91J3JlIGNvbXBhcmluZ1xuICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gYzIgc2Vjb25kIGNvbXBvbmVudCB5b3UncmUgY29tcGFyaW5nXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFJldHVybiB2YWx1ZSB1c2FibGUgYnkgQXJyYXkucHJvdG90eXBlLnNvcnQoKS5cbiAqL1xuZnVuY3Rpb24gbW91bnREZXB0aENvbXBhcmF0b3IoYzEsIGMyKSB7XG4gIHJldHVybiBjMS5fbW91bnREZXB0aCAtIGMyLl9tb3VudERlcHRoO1xufVxuXG5mdW5jdGlvbiBydW5CYXRjaGVkVXBkYXRlcyh0cmFuc2FjdGlvbikge1xuICB2YXIgbGVuID0gdHJhbnNhY3Rpb24uZGlydHlDb21wb25lbnRzTGVuZ3RoO1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIGxlbiA9PT0gZGlydHlDb21wb25lbnRzLmxlbmd0aCxcbiAgICAnRXhwZWN0ZWQgZmx1c2ggdHJhbnNhY3Rpb25cXCdzIHN0b3JlZCBkaXJ0eS1jb21wb25lbnRzIGxlbmd0aCAoJXMpIHRvICcgK1xuICAgICdtYXRjaCBkaXJ0eS1jb21wb25lbnRzIGFycmF5IGxlbmd0aCAoJXMpLicsXG4gICAgbGVuLFxuICAgIGRpcnR5Q29tcG9uZW50cy5sZW5ndGhcbiAgKSA6IGludmFyaWFudChsZW4gPT09IGRpcnR5Q29tcG9uZW50cy5sZW5ndGgpKTtcblxuICAvLyBTaW5jZSByZWNvbmNpbGluZyBhIGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIG93bmVyIGhpZXJhcmNoeSB1c3VhbGx5IChub3RcbiAgLy8gYWx3YXlzIC0tIHNlZSBzaG91bGRDb21wb25lbnRVcGRhdGUoKSkgd2lsbCByZWNvbmNpbGUgY2hpbGRyZW4sIHJlY29uY2lsZVxuICAvLyB0aGVtIGJlZm9yZSB0aGVpciBjaGlsZHJlbiBieSBzb3J0aW5nIHRoZSBhcnJheS5cbiAgZGlydHlDb21wb25lbnRzLnNvcnQobW91bnREZXB0aENvbXBhcmF0b3IpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAvLyBJZiBhIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgYmVmb3JlIHBlbmRpbmcgY2hhbmdlcyBhcHBseSwgaWdub3JlIHRoZW1cbiAgICAvLyBUT0RPOiBRdWV1ZSB1bm1vdW50cyBpbiB0aGUgc2FtZSBsaXN0IHRvIGF2b2lkIHRoaXMgaGFwcGVuaW5nIGF0IGFsbFxuICAgIHZhciBjb21wb25lbnQgPSBkaXJ0eUNvbXBvbmVudHNbaV07XG4gICAgaWYgKGNvbXBvbmVudC5pc01vdW50ZWQoKSkge1xuICAgICAgLy8gSWYgcGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5IGhhcHBlbnMgdG8gZW5xdWV1ZSBhbnkgbmV3IHVwZGF0ZXMsIHdlXG4gICAgICAvLyBzaG91bGRuJ3QgZXhlY3V0ZSB0aGUgY2FsbGJhY2tzIHVudGlsIHRoZSBuZXh0IHJlbmRlciBoYXBwZW5zLCBzb1xuICAgICAgLy8gc3Rhc2ggdGhlIGNhbGxiYWNrcyBmaXJzdFxuICAgICAgdmFyIGNhbGxiYWNrcyA9IGNvbXBvbmVudC5fcGVuZGluZ0NhbGxiYWNrcztcbiAgICAgIGNvbXBvbmVudC5fcGVuZGluZ0NhbGxiYWNrcyA9IG51bGw7XG4gICAgICBjb21wb25lbnQucGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5KHRyYW5zYWN0aW9uLnJlY29uY2lsZVRyYW5zYWN0aW9uKTtcblxuICAgICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNhbGxiYWNrcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHRyYW5zYWN0aW9uLmNhbGxiYWNrUXVldWUuZW5xdWV1ZShcbiAgICAgICAgICAgIGNhbGxiYWNrc1tqXSxcbiAgICAgICAgICAgIGNvbXBvbmVudFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudmFyIGZsdXNoQmF0Y2hlZFVwZGF0ZXMgPSBSZWFjdFBlcmYubWVhc3VyZShcbiAgJ1JlYWN0VXBkYXRlcycsXG4gICdmbHVzaEJhdGNoZWRVcGRhdGVzJyxcbiAgZnVuY3Rpb24oKSB7XG4gICAgLy8gUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbidzIHdyYXBwZXJzIHdpbGwgY2xlYXIgdGhlIGRpcnR5Q29tcG9uZW50c1xuICAgIC8vIGFycmF5IGFuZCBwZXJmb3JtIGFueSB1cGRhdGVzIGVucXVldWVkIGJ5IG1vdW50LXJlYWR5IGhhbmRsZXJzIChpLmUuLFxuICAgIC8vIGNvbXBvbmVudERpZFVwZGF0ZSkgYnV0IHdlIG5lZWQgdG8gY2hlY2sgaGVyZSB0b28gaW4gb3JkZXIgdG8gY2F0Y2hcbiAgICAvLyB1cGRhdGVzIGVucXVldWVkIGJ5IHNldFN0YXRlIGNhbGxiYWNrcyBhbmQgYXNhcCBjYWxscy5cbiAgICB3aGlsZSAoZGlydHlDb21wb25lbnRzLmxlbmd0aCB8fCBhc2FwRW5xdWV1ZWQpIHtcbiAgICAgIGlmIChkaXJ0eUNvbXBvbmVudHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciB0cmFuc2FjdGlvbiA9IFJlYWN0VXBkYXRlc0ZsdXNoVHJhbnNhY3Rpb24uZ2V0UG9vbGVkKCk7XG4gICAgICAgIHRyYW5zYWN0aW9uLnBlcmZvcm0ocnVuQmF0Y2hlZFVwZGF0ZXMsIG51bGwsIHRyYW5zYWN0aW9uKTtcbiAgICAgICAgUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbi5yZWxlYXNlKHRyYW5zYWN0aW9uKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFzYXBFbnF1ZXVlZCkge1xuICAgICAgICBhc2FwRW5xdWV1ZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIHF1ZXVlID0gYXNhcENhbGxiYWNrUXVldWU7XG4gICAgICAgIGFzYXBDYWxsYmFja1F1ZXVlID0gQ2FsbGJhY2tRdWV1ZS5nZXRQb29sZWQoKTtcbiAgICAgICAgcXVldWUubm90aWZ5QWxsKCk7XG4gICAgICAgIENhbGxiYWNrUXVldWUucmVsZWFzZShxdWV1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4pO1xuXG4vKipcbiAqIE1hcmsgYSBjb21wb25lbnQgYXMgbmVlZGluZyBhIHJlcmVuZGVyLCBhZGRpbmcgYW4gb3B0aW9uYWwgY2FsbGJhY2sgdG8gYVxuICogbGlzdCBvZiBmdW5jdGlvbnMgd2hpY2ggd2lsbCBiZSBleGVjdXRlZCBvbmNlIHRoZSByZXJlbmRlciBvY2N1cnMuXG4gKi9cbmZ1bmN0aW9uIGVucXVldWVVcGRhdGUoY29tcG9uZW50LCBjYWxsYmFjaykge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICFjYWxsYmFjayB8fCB0eXBlb2YgY2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIixcbiAgICAnZW5xdWV1ZVVwZGF0ZSguLi4pOiBZb3UgY2FsbGVkIGBzZXRQcm9wc2AsIGByZXBsYWNlUHJvcHNgLCAnICtcbiAgICAnYHNldFN0YXRlYCwgYHJlcGxhY2VTdGF0ZWAsIG9yIGBmb3JjZVVwZGF0ZWAgd2l0aCBhIGNhbGxiYWNrIHRoYXQgJyArXG4gICAgJ2lzblxcJ3QgY2FsbGFibGUuJ1xuICApIDogaW52YXJpYW50KCFjYWxsYmFjayB8fCB0eXBlb2YgY2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIikpO1xuICBlbnN1cmVJbmplY3RlZCgpO1xuXG4gIC8vIFZhcmlvdXMgcGFydHMgb2Ygb3VyIGNvZGUgKHN1Y2ggYXMgUmVhY3RDb21wb3NpdGVDb21wb25lbnQnc1xuICAvLyBfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50KSBhc3N1bWUgdGhhdCBjYWxscyB0byByZW5kZXIgYXJlbid0IG5lc3RlZDtcbiAgLy8gdmVyaWZ5IHRoYXQgdGhhdCdzIHRoZSBjYXNlLiAoVGhpcyBpcyBjYWxsZWQgYnkgZWFjaCB0b3AtbGV2ZWwgdXBkYXRlXG4gIC8vIGZ1bmN0aW9uLCBsaWtlIHNldFByb3BzLCBzZXRTdGF0ZSwgZm9yY2VVcGRhdGUsIGV0Yy47IGNyZWF0aW9uIGFuZFxuICAvLyBkZXN0cnVjdGlvbiBvZiB0b3AtbGV2ZWwgY29tcG9uZW50cyBpcyBndWFyZGVkIGluIFJlYWN0TW91bnQuKVxuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID09IG51bGwsXG4gICAgJ2VucXVldWVVcGRhdGUoKTogUmVuZGVyIG1ldGhvZHMgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiBvZiBwcm9wcyAnICtcbiAgICAnYW5kIHN0YXRlOyB0cmlnZ2VyaW5nIG5lc3RlZCBjb21wb25lbnQgdXBkYXRlcyBmcm9tIHJlbmRlciBpcyBub3QgJyArXG4gICAgJ2FsbG93ZWQuIElmIG5lY2Vzc2FyeSwgdHJpZ2dlciBuZXN0ZWQgdXBkYXRlcyBpbiAnICtcbiAgICAnY29tcG9uZW50RGlkVXBkYXRlLidcbiAgKSA6IG51bGwpO1xuXG4gIGlmICghYmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcykge1xuICAgIGJhdGNoaW5nU3RyYXRlZ3kuYmF0Y2hlZFVwZGF0ZXMoZW5xdWV1ZVVwZGF0ZSwgY29tcG9uZW50LCBjYWxsYmFjayk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZGlydHlDb21wb25lbnRzLnB1c2goY29tcG9uZW50KTtcblxuICBpZiAoY2FsbGJhY2spIHtcbiAgICBpZiAoY29tcG9uZW50Ll9wZW5kaW5nQ2FsbGJhY2tzKSB7XG4gICAgICBjb21wb25lbnQuX3BlbmRpbmdDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbXBvbmVudC5fcGVuZGluZ0NhbGxiYWNrcyA9IFtjYWxsYmFja107XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRW5xdWV1ZSBhIGNhbGxiYWNrIHRvIGJlIHJ1biBhdCB0aGUgZW5kIG9mIHRoZSBjdXJyZW50IGJhdGNoaW5nIGN5Y2xlLiBUaHJvd3NcbiAqIGlmIG5vIHVwZGF0ZXMgYXJlIGN1cnJlbnRseSBiZWluZyBwZXJmb3JtZWQuXG4gKi9cbmZ1bmN0aW9uIGFzYXAoY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBiYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzLFxuICAgICdSZWFjdFVwZGF0ZXMuYXNhcDogQ2FuXFwndCBlbnF1ZXVlIGFuIGFzYXAgY2FsbGJhY2sgaW4gYSBjb250ZXh0IHdoZXJlJyArXG4gICAgJ3VwZGF0ZXMgYXJlIG5vdCBiZWluZyBiYXRjaGVkLidcbiAgKSA6IGludmFyaWFudChiYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzKSk7XG4gIGFzYXBDYWxsYmFja1F1ZXVlLmVucXVldWUoY2FsbGJhY2ssIGNvbnRleHQpO1xuICBhc2FwRW5xdWV1ZWQgPSB0cnVlO1xufVxuXG52YXIgUmVhY3RVcGRhdGVzSW5qZWN0aW9uID0ge1xuICBpbmplY3RSZWNvbmNpbGVUcmFuc2FjdGlvbjogZnVuY3Rpb24oUmVjb25jaWxlVHJhbnNhY3Rpb24pIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgUmVjb25jaWxlVHJhbnNhY3Rpb24sXG4gICAgICAnUmVhY3RVcGRhdGVzOiBtdXN0IHByb3ZpZGUgYSByZWNvbmNpbGUgdHJhbnNhY3Rpb24gY2xhc3MnXG4gICAgKSA6IGludmFyaWFudChSZWNvbmNpbGVUcmFuc2FjdGlvbikpO1xuICAgIFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uID0gUmVjb25jaWxlVHJhbnNhY3Rpb247XG4gIH0sXG5cbiAgaW5qZWN0QmF0Y2hpbmdTdHJhdGVneTogZnVuY3Rpb24oX2JhdGNoaW5nU3RyYXRlZ3kpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgX2JhdGNoaW5nU3RyYXRlZ3ksXG4gICAgICAnUmVhY3RVcGRhdGVzOiBtdXN0IHByb3ZpZGUgYSBiYXRjaGluZyBzdHJhdGVneSdcbiAgICApIDogaW52YXJpYW50KF9iYXRjaGluZ1N0cmF0ZWd5KSk7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgIHR5cGVvZiBfYmF0Y2hpbmdTdHJhdGVneS5iYXRjaGVkVXBkYXRlcyA9PT0gJ2Z1bmN0aW9uJyxcbiAgICAgICdSZWFjdFVwZGF0ZXM6IG11c3QgcHJvdmlkZSBhIGJhdGNoZWRVcGRhdGVzKCkgZnVuY3Rpb24nXG4gICAgKSA6IGludmFyaWFudCh0eXBlb2YgX2JhdGNoaW5nU3RyYXRlZ3kuYmF0Y2hlZFVwZGF0ZXMgPT09ICdmdW5jdGlvbicpKTtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgdHlwZW9mIF9iYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzID09PSAnYm9vbGVhbicsXG4gICAgICAnUmVhY3RVcGRhdGVzOiBtdXN0IHByb3ZpZGUgYW4gaXNCYXRjaGluZ1VwZGF0ZXMgYm9vbGVhbiBhdHRyaWJ1dGUnXG4gICAgKSA6IGludmFyaWFudCh0eXBlb2YgX2JhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMgPT09ICdib29sZWFuJykpO1xuICAgIGJhdGNoaW5nU3RyYXRlZ3kgPSBfYmF0Y2hpbmdTdHJhdGVneTtcbiAgfVxufTtcblxudmFyIFJlYWN0VXBkYXRlcyA9IHtcbiAgLyoqXG4gICAqIFJlYWN0IHJlZmVyZW5jZXMgYFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb25gIHVzaW5nIHRoaXMgcHJvcGVydHkgaW4gb3JkZXJcbiAgICogdG8gYWxsb3cgZGVwZW5kZW5jeSBpbmplY3Rpb24uXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbjogbnVsbCxcblxuICBiYXRjaGVkVXBkYXRlczogYmF0Y2hlZFVwZGF0ZXMsXG4gIGVucXVldWVVcGRhdGU6IGVucXVldWVVcGRhdGUsXG4gIGZsdXNoQmF0Y2hlZFVwZGF0ZXM6IGZsdXNoQmF0Y2hlZFVwZGF0ZXMsXG4gIGluamVjdGlvbjogUmVhY3RVcGRhdGVzSW5qZWN0aW9uLFxuICBhc2FwOiBhc2FwXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0VXBkYXRlcztcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vQ2FsbGJhY2tRdWV1ZVwiOjc0LFwiLi9PYmplY3QuYXNzaWduXCI6OTUsXCIuL1Bvb2xlZENsYXNzXCI6OTYsXCIuL1JlYWN0Q3VycmVudE93bmVyXCI6MTA1LFwiLi9SZWFjdFBlcmZcIjoxMzcsXCIuL1RyYW5zYWN0aW9uXCI6MTY0LFwiLi9pbnZhcmlhbnRcIjoxOTYsXCIuL3dhcm5pbmdcIjoyMTUsXCJfcHJvY2Vzc1wiOjE5fV0sMTQ5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTVkdET01Qcm9wZXJ0eUNvbmZpZ1xuICovXG5cbi8qanNsaW50IGJpdHdpc2U6IHRydWUqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIERPTVByb3BlcnR5ID0gcmVxdWlyZShcIi4vRE9NUHJvcGVydHlcIik7XG5cbnZhciBNVVNUX1VTRV9BVFRSSUJVVEUgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uTVVTVF9VU0VfQVRUUklCVVRFO1xuXG52YXIgU1ZHRE9NUHJvcGVydHlDb25maWcgPSB7XG4gIFByb3BlcnRpZXM6IHtcbiAgICBjeDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGN5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGR4OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZHk6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmaWxsOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZmlsbE9wYWNpdHk6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmb250RmFtaWx5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZm9udFNpemU6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBmeDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIGZ5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgZ3JhZGllbnRUcmFuc2Zvcm06IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBncmFkaWVudFVuaXRzOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgbWFya2VyRW5kOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgbWFya2VyTWlkOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgbWFya2VyU3RhcnQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBvZmZzZXQ6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBvcGFjaXR5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgcGF0dGVybkNvbnRlbnRVbml0czogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHBhdHRlcm5Vbml0czogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHBvaW50czogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHByZXNlcnZlQXNwZWN0UmF0aW86IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICByOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgcng6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICByeTogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHNwcmVhZE1ldGhvZDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHN0b3BDb2xvcjogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHN0b3BPcGFjaXR5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3Ryb2tlOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3Ryb2tlRGFzaGFycmF5OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgc3Ryb2tlTGluZWNhcDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHN0cm9rZU9wYWNpdHk6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICBzdHJva2VXaWR0aDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHRleHRBbmNob3I6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB0cmFuc2Zvcm06IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB2ZXJzaW9uOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgdmlld0JveDogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHgxOiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgeDI6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB4OiBNVVNUX1VTRV9BVFRSSUJVVEUsXG4gICAgeTE6IE1VU1RfVVNFX0FUVFJJQlVURSxcbiAgICB5MjogTVVTVF9VU0VfQVRUUklCVVRFLFxuICAgIHk6IE1VU1RfVVNFX0FUVFJJQlVURVxuICB9LFxuICBET01BdHRyaWJ1dGVOYW1lczoge1xuICAgIGZpbGxPcGFjaXR5OiAnZmlsbC1vcGFjaXR5JyxcbiAgICBmb250RmFtaWx5OiAnZm9udC1mYW1pbHknLFxuICAgIGZvbnRTaXplOiAnZm9udC1zaXplJyxcbiAgICBncmFkaWVudFRyYW5zZm9ybTogJ2dyYWRpZW50VHJhbnNmb3JtJyxcbiAgICBncmFkaWVudFVuaXRzOiAnZ3JhZGllbnRVbml0cycsXG4gICAgbWFya2VyRW5kOiAnbWFya2VyLWVuZCcsXG4gICAgbWFya2VyTWlkOiAnbWFya2VyLW1pZCcsXG4gICAgbWFya2VyU3RhcnQ6ICdtYXJrZXItc3RhcnQnLFxuICAgIHBhdHRlcm5Db250ZW50VW5pdHM6ICdwYXR0ZXJuQ29udGVudFVuaXRzJyxcbiAgICBwYXR0ZXJuVW5pdHM6ICdwYXR0ZXJuVW5pdHMnLFxuICAgIHByZXNlcnZlQXNwZWN0UmF0aW86ICdwcmVzZXJ2ZUFzcGVjdFJhdGlvJyxcbiAgICBzcHJlYWRNZXRob2Q6ICdzcHJlYWRNZXRob2QnLFxuICAgIHN0b3BDb2xvcjogJ3N0b3AtY29sb3InLFxuICAgIHN0b3BPcGFjaXR5OiAnc3RvcC1vcGFjaXR5JyxcbiAgICBzdHJva2VEYXNoYXJyYXk6ICdzdHJva2UtZGFzaGFycmF5JyxcbiAgICBzdHJva2VMaW5lY2FwOiAnc3Ryb2tlLWxpbmVjYXAnLFxuICAgIHN0cm9rZU9wYWNpdHk6ICdzdHJva2Utb3BhY2l0eScsXG4gICAgc3Ryb2tlV2lkdGg6ICdzdHJva2Utd2lkdGgnLFxuICAgIHRleHRBbmNob3I6ICd0ZXh0LWFuY2hvcicsXG4gICAgdmlld0JveDogJ3ZpZXdCb3gnXG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU1ZHRE9NUHJvcGVydHlDb25maWc7XG5cbn0se1wiLi9ET01Qcm9wZXJ0eVwiOjc5fV0sMTUwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTZWxlY3RFdmVudFBsdWdpblxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcbnZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZShcIi4vRXZlbnRQcm9wYWdhdG9yc1wiKTtcbnZhciBSZWFjdElucHV0U2VsZWN0aW9uID0gcmVxdWlyZShcIi4vUmVhY3RJbnB1dFNlbGVjdGlvblwiKTtcbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY0V2ZW50XCIpO1xuXG52YXIgZ2V0QWN0aXZlRWxlbWVudCA9IHJlcXVpcmUoXCIuL2dldEFjdGl2ZUVsZW1lbnRcIik7XG52YXIgaXNUZXh0SW5wdXRFbGVtZW50ID0gcmVxdWlyZShcIi4vaXNUZXh0SW5wdXRFbGVtZW50XCIpO1xudmFyIGtleU9mID0gcmVxdWlyZShcIi4va2V5T2ZcIik7XG52YXIgc2hhbGxvd0VxdWFsID0gcmVxdWlyZShcIi4vc2hhbGxvd0VxdWFsXCIpO1xuXG52YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG5cbnZhciBldmVudFR5cGVzID0ge1xuICBzZWxlY3Q6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uU2VsZWN0OiBudWxsfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uU2VsZWN0Q2FwdHVyZTogbnVsbH0pXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IFtcbiAgICAgIHRvcExldmVsVHlwZXMudG9wQmx1cixcbiAgICAgIHRvcExldmVsVHlwZXMudG9wQ29udGV4dE1lbnUsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duLFxuICAgICAgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd24sXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlVXAsXG4gICAgICB0b3BMZXZlbFR5cGVzLnRvcFNlbGVjdGlvbkNoYW5nZVxuICAgIF1cbiAgfVxufTtcblxudmFyIGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xudmFyIGFjdGl2ZUVsZW1lbnRJRCA9IG51bGw7XG52YXIgbGFzdFNlbGVjdGlvbiA9IG51bGw7XG52YXIgbW91c2VEb3duID0gZmFsc2U7XG5cbi8qKlxuICogR2V0IGFuIG9iamVjdCB3aGljaCBpcyBhIHVuaXF1ZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgY3VycmVudCBzZWxlY3Rpb24uXG4gKlxuICogVGhlIHJldHVybiB2YWx1ZSB3aWxsIG5vdCBiZSBjb25zaXN0ZW50IGFjcm9zcyBub2RlcyBvciBicm93c2VycywgYnV0XG4gKiB0d28gaWRlbnRpY2FsIHNlbGVjdGlvbnMgb24gdGhlIHNhbWUgbm9kZSB3aWxsIHJldHVybiBpZGVudGljYWwgb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXRTZWxlY3Rpb24obm9kZSkge1xuICBpZiAoJ3NlbGVjdGlvblN0YXJ0JyBpbiBub2RlICYmXG4gICAgICBSZWFjdElucHV0U2VsZWN0aW9uLmhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhub2RlKSkge1xuICAgIHJldHVybiB7XG4gICAgICBzdGFydDogbm9kZS5zZWxlY3Rpb25TdGFydCxcbiAgICAgIGVuZDogbm9kZS5zZWxlY3Rpb25FbmRcbiAgICB9O1xuICB9IGVsc2UgaWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24pIHtcbiAgICB2YXIgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgIHJldHVybiB7XG4gICAgICBhbmNob3JOb2RlOiBzZWxlY3Rpb24uYW5jaG9yTm9kZSxcbiAgICAgIGFuY2hvck9mZnNldDogc2VsZWN0aW9uLmFuY2hvck9mZnNldCxcbiAgICAgIGZvY3VzTm9kZTogc2VsZWN0aW9uLmZvY3VzTm9kZSxcbiAgICAgIGZvY3VzT2Zmc2V0OiBzZWxlY3Rpb24uZm9jdXNPZmZzZXRcbiAgICB9O1xuICB9IGVsc2UgaWYgKGRvY3VtZW50LnNlbGVjdGlvbikge1xuICAgIHZhciByYW5nZSA9IGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO1xuICAgIHJldHVybiB7XG4gICAgICBwYXJlbnRFbGVtZW50OiByYW5nZS5wYXJlbnRFbGVtZW50KCksXG4gICAgICB0ZXh0OiByYW5nZS50ZXh0LFxuICAgICAgdG9wOiByYW5nZS5ib3VuZGluZ1RvcCxcbiAgICAgIGxlZnQ6IHJhbmdlLmJvdW5kaW5nTGVmdFxuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiBQb2xsIHNlbGVjdGlvbiB0byBzZWUgd2hldGhlciBpdCdzIGNoYW5nZWQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG4gKiBAcmV0dXJuIHs/U3ludGhldGljRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIGNvbnN0cnVjdFNlbGVjdEV2ZW50KG5hdGl2ZUV2ZW50KSB7XG4gIC8vIEVuc3VyZSB3ZSBoYXZlIHRoZSByaWdodCBlbGVtZW50LCBhbmQgdGhhdCB0aGUgdXNlciBpcyBub3QgZHJhZ2dpbmcgYVxuICAvLyBzZWxlY3Rpb24gKHRoaXMgbWF0Y2hlcyBuYXRpdmUgYHNlbGVjdGAgZXZlbnQgYmVoYXZpb3IpLiBJbiBIVE1MNSwgc2VsZWN0XG4gIC8vIGZpcmVzIG9ubHkgb24gaW5wdXQgYW5kIHRleHRhcmVhIHRodXMgaWYgdGhlcmUncyBubyBmb2N1c2VkIGVsZW1lbnQgd2VcbiAgLy8gd29uJ3QgZGlzcGF0Y2guXG4gIGlmIChtb3VzZURvd24gfHxcbiAgICAgIGFjdGl2ZUVsZW1lbnQgPT0gbnVsbCB8fFxuICAgICAgYWN0aXZlRWxlbWVudCAhPSBnZXRBY3RpdmVFbGVtZW50KCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBPbmx5IGZpcmUgd2hlbiBzZWxlY3Rpb24gaGFzIGFjdHVhbGx5IGNoYW5nZWQuXG4gIHZhciBjdXJyZW50U2VsZWN0aW9uID0gZ2V0U2VsZWN0aW9uKGFjdGl2ZUVsZW1lbnQpO1xuICBpZiAoIWxhc3RTZWxlY3Rpb24gfHwgIXNoYWxsb3dFcXVhbChsYXN0U2VsZWN0aW9uLCBjdXJyZW50U2VsZWN0aW9uKSkge1xuICAgIGxhc3RTZWxlY3Rpb24gPSBjdXJyZW50U2VsZWN0aW9uO1xuXG4gICAgdmFyIHN5bnRoZXRpY0V2ZW50ID0gU3ludGhldGljRXZlbnQuZ2V0UG9vbGVkKFxuICAgICAgZXZlbnRUeXBlcy5zZWxlY3QsXG4gICAgICBhY3RpdmVFbGVtZW50SUQsXG4gICAgICBuYXRpdmVFdmVudFxuICAgICk7XG5cbiAgICBzeW50aGV0aWNFdmVudC50eXBlID0gJ3NlbGVjdCc7XG4gICAgc3ludGhldGljRXZlbnQudGFyZ2V0ID0gYWN0aXZlRWxlbWVudDtcblxuICAgIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhzeW50aGV0aWNFdmVudCk7XG5cbiAgICByZXR1cm4gc3ludGhldGljRXZlbnQ7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIHBsdWdpbiBjcmVhdGVzIGFuIGBvblNlbGVjdGAgZXZlbnQgdGhhdCBub3JtYWxpemVzIHNlbGVjdCBldmVudHNcbiAqIGFjcm9zcyBmb3JtIGVsZW1lbnRzLlxuICpcbiAqIFN1cHBvcnRlZCBlbGVtZW50cyBhcmU6XG4gKiAtIGlucHV0IChzZWUgYGlzVGV4dElucHV0RWxlbWVudGApXG4gKiAtIHRleHRhcmVhXG4gKiAtIGNvbnRlbnRFZGl0YWJsZVxuICpcbiAqIFRoaXMgZGlmZmVycyBmcm9tIG5hdGl2ZSBicm93c2VyIGltcGxlbWVudGF0aW9ucyBpbiB0aGUgZm9sbG93aW5nIHdheXM6XG4gKiAtIEZpcmVzIG9uIGNvbnRlbnRFZGl0YWJsZSBmaWVsZHMgYXMgd2VsbCBhcyBpbnB1dHMuXG4gKiAtIEZpcmVzIGZvciBjb2xsYXBzZWQgc2VsZWN0aW9uLlxuICogLSBGaXJlcyBhZnRlciB1c2VyIGlucHV0LlxuICovXG52YXIgU2VsZWN0RXZlbnRQbHVnaW4gPSB7XG5cbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0b3BMZXZlbFRhcmdldCBUaGUgbGlzdGVuaW5nIGNvbXBvbmVudCByb290IG5vZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFRhcmdldElEIElEIG9mIGB0b3BMZXZlbFRhcmdldGAuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAgICogQHJldHVybiB7Kn0gQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHN9XG4gICAqL1xuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbihcbiAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgIHRvcExldmVsVGFyZ2V0LFxuICAgICAgdG9wTGV2ZWxUYXJnZXRJRCxcbiAgICAgIG5hdGl2ZUV2ZW50KSB7XG5cbiAgICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgICAgLy8gVHJhY2sgdGhlIGlucHV0IG5vZGUgdGhhdCBoYXMgZm9jdXMuXG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRm9jdXM6XG4gICAgICAgIGlmIChpc1RleHRJbnB1dEVsZW1lbnQodG9wTGV2ZWxUYXJnZXQpIHx8XG4gICAgICAgICAgICB0b3BMZXZlbFRhcmdldC5jb250ZW50RWRpdGFibGUgPT09ICd0cnVlJykge1xuICAgICAgICAgIGFjdGl2ZUVsZW1lbnQgPSB0b3BMZXZlbFRhcmdldDtcbiAgICAgICAgICBhY3RpdmVFbGVtZW50SUQgPSB0b3BMZXZlbFRhcmdldElEO1xuICAgICAgICAgIGxhc3RTZWxlY3Rpb24gPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEJsdXI6XG4gICAgICAgIGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xuICAgICAgICBhY3RpdmVFbGVtZW50SUQgPSBudWxsO1xuICAgICAgICBsYXN0U2VsZWN0aW9uID0gbnVsbDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIC8vIERvbid0IGZpcmUgdGhlIGV2ZW50IHdoaWxlIHRoZSB1c2VyIGlzIGRyYWdnaW5nLiBUaGlzIG1hdGNoZXMgdGhlXG4gICAgICAvLyBzZW1hbnRpY3Mgb2YgdGhlIG5hdGl2ZSBzZWxlY3QgZXZlbnQuXG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VEb3duOlxuICAgICAgICBtb3VzZURvd24gPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb250ZXh0TWVudTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZVVwOlxuICAgICAgICBtb3VzZURvd24gPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGNvbnN0cnVjdFNlbGVjdEV2ZW50KG5hdGl2ZUV2ZW50KTtcblxuICAgICAgLy8gQ2hyb21lIGFuZCBJRSBmaXJlIG5vbi1zdGFuZGFyZCBldmVudCB3aGVuIHNlbGVjdGlvbiBpcyBjaGFuZ2VkIChhbmRcbiAgICAgIC8vIHNvbWV0aW1lcyB3aGVuIGl0IGhhc24ndCkuXG4gICAgICAvLyBGaXJlZm94IGRvZXNuJ3Qgc3VwcG9ydCBzZWxlY3Rpb25jaGFuZ2UsIHNvIGNoZWNrIHNlbGVjdGlvbiBzdGF0dXNcbiAgICAgIC8vIGFmdGVyIGVhY2gga2V5IGVudHJ5LiBUaGUgc2VsZWN0aW9uIGNoYW5nZXMgYWZ0ZXIga2V5ZG93biBhbmQgYmVmb3JlXG4gICAgICAvLyBrZXl1cCwgYnV0IHdlIGNoZWNrIG9uIGtleWRvd24gYXMgd2VsbCBpbiB0aGUgY2FzZSBvZiBob2xkaW5nIGRvd24gYVxuICAgICAgLy8ga2V5LCB3aGVuIG11bHRpcGxlIGtleWRvd24gZXZlbnRzIGFyZSBmaXJlZCBidXQgb25seSBvbmUga2V5dXAgaXMuXG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wU2VsZWN0aW9uQ2hhbmdlOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleURvd246XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5VXA6XG4gICAgICAgIHJldHVybiBjb25zdHJ1Y3RTZWxlY3RFdmVudChuYXRpdmVFdmVudCk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNlbGVjdEV2ZW50UGx1Z2luO1xuXG59LHtcIi4vRXZlbnRDb25zdGFudHNcIjo4NCxcIi4vRXZlbnRQcm9wYWdhdG9yc1wiOjg5LFwiLi9SZWFjdElucHV0U2VsZWN0aW9uXCI6MTI4LFwiLi9TeW50aGV0aWNFdmVudFwiOjE1NixcIi4vZ2V0QWN0aXZlRWxlbWVudFwiOjE4MyxcIi4vaXNUZXh0SW5wdXRFbGVtZW50XCI6MTk5LFwiLi9rZXlPZlwiOjIwMyxcIi4vc2hhbGxvd0VxdWFsXCI6MjExfV0sMTUxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTZXJ2ZXJSZWFjdFJvb3RJbmRleFxuICogQHR5cGVjaGVja3NcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBTaXplIG9mIHRoZSByZWFjdFJvb3QgSUQgc3BhY2UuIFdlIGdlbmVyYXRlIHJhbmRvbSBudW1iZXJzIGZvciBSZWFjdCByb290XG4gKiBJRHMgYW5kIGlmIHRoZXJlJ3MgYSBjb2xsaXNpb24gdGhlIGV2ZW50cyBhbmQgRE9NIHVwZGF0ZSBzeXN0ZW0gd2lsbFxuICogZ2V0IGNvbmZ1c2VkLiBJbiB0aGUgZnV0dXJlIHdlIG5lZWQgYSB3YXkgdG8gZ2VuZXJhdGUgR1VJRHMgYnV0IGZvclxuICogbm93IHRoaXMgd2lsbCB3b3JrIG9uIGEgc21hbGxlciBzY2FsZS5cbiAqL1xudmFyIEdMT0JBTF9NT1VOVF9QT0lOVF9NQVggPSBNYXRoLnBvdygyLCA1Myk7XG5cbnZhciBTZXJ2ZXJSZWFjdFJvb3RJbmRleCA9IHtcbiAgY3JlYXRlUmVhY3RSb290SW5kZXg6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIEdMT0JBTF9NT1VOVF9QT0lOVF9NQVgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNlcnZlclJlYWN0Um9vdEluZGV4O1xuXG59LHt9XSwxNTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTaW1wbGVFdmVudFBsdWdpblxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKFwiLi9FdmVudENvbnN0YW50c1wiKTtcbnZhciBFdmVudFBsdWdpblV0aWxzID0gcmVxdWlyZShcIi4vRXZlbnRQbHVnaW5VdGlsc1wiKTtcbnZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZShcIi4vRXZlbnRQcm9wYWdhdG9yc1wiKTtcbnZhciBTeW50aGV0aWNDbGlwYm9hcmRFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY0NsaXBib2FyZEV2ZW50XCIpO1xudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljRXZlbnRcIik7XG52YXIgU3ludGhldGljRm9jdXNFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY0ZvY3VzRXZlbnRcIik7XG52YXIgU3ludGhldGljS2V5Ym9hcmRFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY0tleWJvYXJkRXZlbnRcIik7XG52YXIgU3ludGhldGljTW91c2VFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY01vdXNlRXZlbnRcIik7XG52YXIgU3ludGhldGljRHJhZ0V2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljRHJhZ0V2ZW50XCIpO1xudmFyIFN5bnRoZXRpY1RvdWNoRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNUb3VjaEV2ZW50XCIpO1xudmFyIFN5bnRoZXRpY1VJRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNVSUV2ZW50XCIpO1xudmFyIFN5bnRoZXRpY1doZWVsRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNXaGVlbEV2ZW50XCIpO1xuXG52YXIgZ2V0RXZlbnRDaGFyQ29kZSA9IHJlcXVpcmUoXCIuL2dldEV2ZW50Q2hhckNvZGVcIik7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG52YXIga2V5T2YgPSByZXF1aXJlKFwiLi9rZXlPZlwiKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZShcIi4vd2FybmluZ1wiKTtcblxudmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xuXG52YXIgZXZlbnRUeXBlcyA9IHtcbiAgYmx1cjoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25CbHVyOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQmx1ckNhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgY2xpY2s6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uQ2xpY2s6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25DbGlja0NhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgY29udGV4dE1lbnU6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uQ29udGV4dE1lbnU6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Db250ZXh0TWVudUNhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgY29weToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Db3B5OiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQ29weUNhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgY3V0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkN1dDogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkN1dENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgZG91YmxlQ2xpY2s6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uRG91YmxlQ2xpY2s6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Eb3VibGVDbGlja0NhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgZHJhZzoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25EcmFnOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRHJhZ0NhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgZHJhZ0VuZDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25EcmFnRW5kOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRHJhZ0VuZENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgZHJhZ0VudGVyOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkRyYWdFbnRlcjogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkRyYWdFbnRlckNhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgZHJhZ0V4aXQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uRHJhZ0V4aXQ6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25EcmFnRXhpdENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgZHJhZ0xlYXZlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkRyYWdMZWF2ZTogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkRyYWdMZWF2ZUNhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgZHJhZ092ZXI6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uRHJhZ092ZXI6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25EcmFnT3ZlckNhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgZHJhZ1N0YXJ0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkRyYWdTdGFydDogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkRyYWdTdGFydENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgZHJvcDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Ecm9wOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRHJvcENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgZm9jdXM6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uRm9jdXM6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Gb2N1c0NhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgaW5wdXQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uSW5wdXQ6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25JbnB1dENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAga2V5RG93bjoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25LZXlEb3duOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uS2V5RG93bkNhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAga2V5UHJlc3M6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uS2V5UHJlc3M6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25LZXlQcmVzc0NhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAga2V5VXA6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uS2V5VXA6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25LZXlVcENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgbG9hZDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Mb2FkOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uTG9hZENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgZXJyb3I6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uRXJyb3I6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25FcnJvckNhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgLy8gTm90ZTogV2UgZG8gbm90IGFsbG93IGxpc3RlbmluZyB0byBtb3VzZU92ZXIgZXZlbnRzLiBJbnN0ZWFkLCB1c2UgdGhlXG4gIC8vIG9uTW91c2VFbnRlci9vbk1vdXNlTGVhdmUgY3JlYXRlZCBieSBgRW50ZXJMZWF2ZUV2ZW50UGx1Z2luYC5cbiAgbW91c2VEb3duOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbk1vdXNlRG93bjogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbk1vdXNlRG93bkNhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgbW91c2VNb3ZlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbk1vdXNlTW92ZTogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbk1vdXNlTW92ZUNhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgbW91c2VPdXQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uTW91c2VPdXQ6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Nb3VzZU91dENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgbW91c2VPdmVyOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbk1vdXNlT3ZlcjogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbk1vdXNlT3ZlckNhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgbW91c2VVcDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Nb3VzZVVwOiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uTW91c2VVcENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgcGFzdGU6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uUGFzdGU6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25QYXN0ZUNhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgcmVzZXQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uUmVzZXQ6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25SZXNldENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgc2Nyb2xsOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblNjcm9sbDogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblNjcm9sbENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgc3VibWl0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblN1Ym1pdDogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblN1Ym1pdENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgdG91Y2hDYW5jZWw6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uVG91Y2hDYW5jZWw6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Ub3VjaENhbmNlbENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgdG91Y2hFbmQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uVG91Y2hFbmQ6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Ub3VjaEVuZENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgdG91Y2hNb3ZlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblRvdWNoTW92ZTogdHJ1ZX0pLFxuICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblRvdWNoTW92ZUNhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgdG91Y2hTdGFydDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Ub3VjaFN0YXJ0OiB0cnVlfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uVG91Y2hTdGFydENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfSxcbiAgd2hlZWw6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uV2hlZWw6IHRydWV9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25XaGVlbENhcHR1cmU6IHRydWV9KVxuICAgIH1cbiAgfVxufTtcblxudmFyIHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZyA9IHtcbiAgdG9wQmx1cjogICAgICAgIGV2ZW50VHlwZXMuYmx1cixcbiAgdG9wQ2xpY2s6ICAgICAgIGV2ZW50VHlwZXMuY2xpY2ssXG4gIHRvcENvbnRleHRNZW51OiBldmVudFR5cGVzLmNvbnRleHRNZW51LFxuICB0b3BDb3B5OiAgICAgICAgZXZlbnRUeXBlcy5jb3B5LFxuICB0b3BDdXQ6ICAgICAgICAgZXZlbnRUeXBlcy5jdXQsXG4gIHRvcERvdWJsZUNsaWNrOiBldmVudFR5cGVzLmRvdWJsZUNsaWNrLFxuICB0b3BEcmFnOiAgICAgICAgZXZlbnRUeXBlcy5kcmFnLFxuICB0b3BEcmFnRW5kOiAgICAgZXZlbnRUeXBlcy5kcmFnRW5kLFxuICB0b3BEcmFnRW50ZXI6ICAgZXZlbnRUeXBlcy5kcmFnRW50ZXIsXG4gIHRvcERyYWdFeGl0OiAgICBldmVudFR5cGVzLmRyYWdFeGl0LFxuICB0b3BEcmFnTGVhdmU6ICAgZXZlbnRUeXBlcy5kcmFnTGVhdmUsXG4gIHRvcERyYWdPdmVyOiAgICBldmVudFR5cGVzLmRyYWdPdmVyLFxuICB0b3BEcmFnU3RhcnQ6ICAgZXZlbnRUeXBlcy5kcmFnU3RhcnQsXG4gIHRvcERyb3A6ICAgICAgICBldmVudFR5cGVzLmRyb3AsXG4gIHRvcEVycm9yOiAgICAgICBldmVudFR5cGVzLmVycm9yLFxuICB0b3BGb2N1czogICAgICAgZXZlbnRUeXBlcy5mb2N1cyxcbiAgdG9wSW5wdXQ6ICAgICAgIGV2ZW50VHlwZXMuaW5wdXQsXG4gIHRvcEtleURvd246ICAgICBldmVudFR5cGVzLmtleURvd24sXG4gIHRvcEtleVByZXNzOiAgICBldmVudFR5cGVzLmtleVByZXNzLFxuICB0b3BLZXlVcDogICAgICAgZXZlbnRUeXBlcy5rZXlVcCxcbiAgdG9wTG9hZDogICAgICAgIGV2ZW50VHlwZXMubG9hZCxcbiAgdG9wTW91c2VEb3duOiAgIGV2ZW50VHlwZXMubW91c2VEb3duLFxuICB0b3BNb3VzZU1vdmU6ICAgZXZlbnRUeXBlcy5tb3VzZU1vdmUsXG4gIHRvcE1vdXNlT3V0OiAgICBldmVudFR5cGVzLm1vdXNlT3V0LFxuICB0b3BNb3VzZU92ZXI6ICAgZXZlbnRUeXBlcy5tb3VzZU92ZXIsXG4gIHRvcE1vdXNlVXA6ICAgICBldmVudFR5cGVzLm1vdXNlVXAsXG4gIHRvcFBhc3RlOiAgICAgICBldmVudFR5cGVzLnBhc3RlLFxuICB0b3BSZXNldDogICAgICAgZXZlbnRUeXBlcy5yZXNldCxcbiAgdG9wU2Nyb2xsOiAgICAgIGV2ZW50VHlwZXMuc2Nyb2xsLFxuICB0b3BTdWJtaXQ6ICAgICAgZXZlbnRUeXBlcy5zdWJtaXQsXG4gIHRvcFRvdWNoQ2FuY2VsOiBldmVudFR5cGVzLnRvdWNoQ2FuY2VsLFxuICB0b3BUb3VjaEVuZDogICAgZXZlbnRUeXBlcy50b3VjaEVuZCxcbiAgdG9wVG91Y2hNb3ZlOiAgIGV2ZW50VHlwZXMudG91Y2hNb3ZlLFxuICB0b3BUb3VjaFN0YXJ0OiAgZXZlbnRUeXBlcy50b3VjaFN0YXJ0LFxuICB0b3BXaGVlbDogICAgICAgZXZlbnRUeXBlcy53aGVlbFxufTtcblxuZm9yICh2YXIgdG9wTGV2ZWxUeXBlIGluIHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZykge1xuICB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWdbdG9wTGV2ZWxUeXBlXS5kZXBlbmRlbmNpZXMgPSBbdG9wTGV2ZWxUeXBlXTtcbn1cblxudmFyIFNpbXBsZUV2ZW50UGx1Z2luID0ge1xuXG4gIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMsXG5cbiAgLyoqXG4gICAqIFNhbWUgYXMgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24sIGV4Y2VwdCBjYW5jZWxzIHRoZSBldmVudCB3aGVuIHJldHVyblxuICAgKiB2YWx1ZSBpcyBmYWxzZS4gVGhpcyBiZWhhdmlvciB3aWxsIGJlIGRpc2FibGVkIGluIGEgZnV0dXJlIHJlbGVhc2UuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBFdmVudCB0byBiZSBkaXNwYXRjaGVkLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBBcHBsaWNhdGlvbi1sZXZlbCBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGRvbUlEIERPTSBJRCB0byBwYXNzIHRvIHRoZSBjYWxsYmFjay5cbiAgICovXG4gIGV4ZWN1dGVEaXNwYXRjaDogZnVuY3Rpb24oZXZlbnQsIGxpc3RlbmVyLCBkb21JRCkge1xuICAgIHZhciByZXR1cm5WYWx1ZSA9IEV2ZW50UGx1Z2luVXRpbHMuZXhlY3V0ZURpc3BhdGNoKGV2ZW50LCBsaXN0ZW5lciwgZG9tSUQpO1xuXG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IHdhcm5pbmcoXG4gICAgICB0eXBlb2YgcmV0dXJuVmFsdWUgIT09ICdib29sZWFuJyxcbiAgICAgICdSZXR1cm5pbmcgYGZhbHNlYCBmcm9tIGFuIGV2ZW50IGhhbmRsZXIgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSAnICtcbiAgICAgICdpZ25vcmVkIGluIGEgZnV0dXJlIHJlbGVhc2UuIEluc3RlYWQsIG1hbnVhbGx5IGNhbGwgJyArXG4gICAgICAnZS5zdG9wUHJvcGFnYXRpb24oKSBvciBlLnByZXZlbnREZWZhdWx0KCksIGFzIGFwcHJvcHJpYXRlLidcbiAgICApIDogbnVsbCk7XG5cbiAgICBpZiAocmV0dXJuVmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRvcExldmVsVGFyZ2V0IFRoZSBsaXN0ZW5pbmcgY29tcG9uZW50IHJvb3Qgbm9kZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVGFyZ2V0SUQgSUQgb2YgYHRvcExldmVsVGFyZ2V0YC5cbiAgICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICAgKiBAcmV0dXJuIHsqfSBBbiBhY2N1bXVsYXRpb24gb2Ygc3ludGhldGljIGV2ZW50cy5cbiAgICogQHNlZSB7RXZlbnRQbHVnaW5IdWIuZXh0cmFjdEV2ZW50c31cbiAgICovXG4gIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uKFxuICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgdG9wTGV2ZWxUYXJnZXQsXG4gICAgICB0b3BMZXZlbFRhcmdldElELFxuICAgICAgbmF0aXZlRXZlbnQpIHtcbiAgICB2YXIgZGlzcGF0Y2hDb25maWcgPSB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWdbdG9wTGV2ZWxUeXBlXTtcbiAgICBpZiAoIWRpc3BhdGNoQ29uZmlnKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIEV2ZW50Q29uc3RydWN0b3I7XG4gICAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BJbnB1dDpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BMb2FkOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEVycm9yOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFJlc2V0OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFN1Ym1pdDpcbiAgICAgICAgLy8gSFRNTCBFdmVudHNcbiAgICAgICAgLy8gQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNS9pbmRleC5odG1sI2V2ZW50cy0wXG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5UHJlc3M6XG4gICAgICAgIC8vIEZpcmVGb3ggY3JlYXRlcyBhIGtleXByZXNzIGV2ZW50IGZvciBmdW5jdGlvbiBrZXlzIHRvby4gVGhpcyByZW1vdmVzXG4gICAgICAgIC8vIHRoZSB1bndhbnRlZCBrZXlwcmVzcyBldmVudHMuIEVudGVyIGlzIGhvd2V2ZXIgYm90aCBwcmludGFibGUgYW5kXG4gICAgICAgIC8vIG5vbi1wcmludGFibGUuIE9uZSB3b3VsZCBleHBlY3QgVGFiIHRvIGJlIGFzIHdlbGwgKGJ1dCBpdCBpc24ndCkuXG4gICAgICAgIGlmIChnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KSA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVVwOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljS2V5Ym9hcmRFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQmx1cjpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BGb2N1czpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY0ZvY3VzRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENsaWNrOlxuICAgICAgICAvLyBGaXJlZm94IGNyZWF0ZXMgYSBjbGljayBldmVudCBvbiByaWdodCBtb3VzZSBjbGlja3MuIFRoaXMgcmVtb3ZlcyB0aGVcbiAgICAgICAgLy8gdW53YW50ZWQgY2xpY2sgZXZlbnRzLlxuICAgICAgICBpZiAobmF0aXZlRXZlbnQuYnV0dG9uID09PSAyKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvbnRleHRNZW51OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERvdWJsZUNsaWNrOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93bjpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU1vdmU6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VPdXQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VPdmVyOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlVXA6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNNb3VzZUV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdFbmQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJhZ0VudGVyOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdFeGl0OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdMZWF2ZTpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnT3ZlcjpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnU3RhcnQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJvcDpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY0RyYWdFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wVG91Y2hDYW5jZWw6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wVG91Y2hFbmQ6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wVG91Y2hNb3ZlOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoU3RhcnQ6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNUb3VjaEV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BTY3JvbGw6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNVSUV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BXaGVlbDpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY1doZWVsRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvcHk6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ3V0OlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFBhc3RlOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljQ2xpcGJvYXJkRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgRXZlbnRDb25zdHJ1Y3RvcixcbiAgICAgICdTaW1wbGVFdmVudFBsdWdpbjogVW5oYW5kbGVkIGV2ZW50IHR5cGUsIGAlc2AuJyxcbiAgICAgIHRvcExldmVsVHlwZVxuICAgICkgOiBpbnZhcmlhbnQoRXZlbnRDb25zdHJ1Y3RvcikpO1xuICAgIHZhciBldmVudCA9IEV2ZW50Q29uc3RydWN0b3IuZ2V0UG9vbGVkKFxuICAgICAgZGlzcGF0Y2hDb25maWcsXG4gICAgICB0b3BMZXZlbFRhcmdldElELFxuICAgICAgbmF0aXZlRXZlbnRcbiAgICApO1xuICAgIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudCk7XG4gICAgcmV0dXJuIGV2ZW50O1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2ltcGxlRXZlbnRQbHVnaW47XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL0V2ZW50Q29uc3RhbnRzXCI6ODQsXCIuL0V2ZW50UGx1Z2luVXRpbHNcIjo4OCxcIi4vRXZlbnRQcm9wYWdhdG9yc1wiOjg5LFwiLi9TeW50aGV0aWNDbGlwYm9hcmRFdmVudFwiOjE1MyxcIi4vU3ludGhldGljRHJhZ0V2ZW50XCI6MTU1LFwiLi9TeW50aGV0aWNFdmVudFwiOjE1NixcIi4vU3ludGhldGljRm9jdXNFdmVudFwiOjE1NyxcIi4vU3ludGhldGljS2V5Ym9hcmRFdmVudFwiOjE1OSxcIi4vU3ludGhldGljTW91c2VFdmVudFwiOjE2MCxcIi4vU3ludGhldGljVG91Y2hFdmVudFwiOjE2MSxcIi4vU3ludGhldGljVUlFdmVudFwiOjE2MixcIi4vU3ludGhldGljV2hlZWxFdmVudFwiOjE2MyxcIi4vZ2V0RXZlbnRDaGFyQ29kZVwiOjE4NCxcIi4vaW52YXJpYW50XCI6MTk2LFwiLi9rZXlPZlwiOjIwMyxcIi4vd2FybmluZ1wiOjIxNSxcIl9wcm9jZXNzXCI6MTl9XSwxNTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNFdmVudFwiKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL2NsaXBib2FyZC1hcGlzL1xuICovXG52YXIgQ2xpcGJvYXJkRXZlbnRJbnRlcmZhY2UgPSB7XG4gIGNsaXBib2FyZERhdGE6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuIChcbiAgICAgICdjbGlwYm9hcmREYXRhJyBpbiBldmVudCA/XG4gICAgICAgIGV2ZW50LmNsaXBib2FyZERhdGEgOlxuICAgICAgICB3aW5kb3cuY2xpcGJvYXJkRGF0YVxuICAgICk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpIHtcbiAgU3ludGhldGljRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KTtcbn1cblxuU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50LCBDbGlwYm9hcmRFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljQ2xpcGJvYXJkRXZlbnQ7XG5cblxufSx7XCIuL1N5bnRoZXRpY0V2ZW50XCI6MTU2fV0sMTU0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNFdmVudFwiKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWNvbXBvc2l0aW9uZXZlbnRzXG4gKi9cbnZhciBDb21wb3NpdGlvbkV2ZW50SW50ZXJmYWNlID0ge1xuICBkYXRhOiBudWxsXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50KFxuICBkaXNwYXRjaENvbmZpZyxcbiAgZGlzcGF0Y2hNYXJrZXIsXG4gIG5hdGl2ZUV2ZW50KSB7XG4gIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCk7XG59XG5cblN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhcbiAgU3ludGhldGljQ29tcG9zaXRpb25FdmVudCxcbiAgQ29tcG9zaXRpb25FdmVudEludGVyZmFjZVxuKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50O1xuXG5cbn0se1wiLi9TeW50aGV0aWNFdmVudFwiOjE1Nn1dLDE1NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljRHJhZ0V2ZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgU3ludGhldGljTW91c2VFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY01vdXNlRXZlbnRcIik7XG5cbi8qKlxuICogQGludGVyZmFjZSBEcmFnRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgRHJhZ0V2ZW50SW50ZXJmYWNlID0ge1xuICBkYXRhVHJhbnNmZXI6IG51bGxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0RyYWdFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KSB7XG4gIFN5bnRoZXRpY01vdXNlRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KTtcbn1cblxuU3ludGhldGljTW91c2VFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljRHJhZ0V2ZW50LCBEcmFnRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0RyYWdFdmVudDtcblxufSx7XCIuL1N5bnRoZXRpY01vdXNlRXZlbnRcIjoxNjB9XSwxNTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY0V2ZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKFwiLi9Qb29sZWRDbGFzc1wiKTtcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL09iamVjdC5hc3NpZ25cIik7XG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoXCIuL2VtcHR5RnVuY3Rpb25cIik7XG52YXIgZ2V0RXZlbnRUYXJnZXQgPSByZXF1aXJlKFwiLi9nZXRFdmVudFRhcmdldFwiKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIEV2ZW50SW50ZXJmYWNlID0ge1xuICB0eXBlOiBudWxsLFxuICB0YXJnZXQ6IGdldEV2ZW50VGFyZ2V0LFxuICAvLyBjdXJyZW50VGFyZ2V0IGlzIHNldCB3aGVuIGRpc3BhdGNoaW5nOyBubyB1c2UgaW4gY29weWluZyBpdCBoZXJlXG4gIGN1cnJlbnRUYXJnZXQ6IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsLFxuICBldmVudFBoYXNlOiBudWxsLFxuICBidWJibGVzOiBudWxsLFxuICBjYW5jZWxhYmxlOiBudWxsLFxuICB0aW1lU3RhbXA6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuIGV2ZW50LnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuICB9LFxuICBkZWZhdWx0UHJldmVudGVkOiBudWxsLFxuICBpc1RydXN0ZWQ6IG51bGxcbn07XG5cbi8qKlxuICogU3ludGhldGljIGV2ZW50cyBhcmUgZGlzcGF0Y2hlZCBieSBldmVudCBwbHVnaW5zLCB0eXBpY2FsbHkgaW4gcmVzcG9uc2UgdG8gYVxuICogdG9wLWxldmVsIGV2ZW50IGRlbGVnYXRpb24gaGFuZGxlci5cbiAqXG4gKiBUaGVzZSBzeXN0ZW1zIHNob3VsZCBnZW5lcmFsbHkgdXNlIHBvb2xpbmcgdG8gcmVkdWNlIHRoZSBmcmVxdWVuY3kgb2YgZ2FyYmFnZVxuICogY29sbGVjdGlvbi4gVGhlIHN5c3RlbSBzaG91bGQgY2hlY2sgYGlzUGVyc2lzdGVudGAgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlXG4gKiBldmVudCBzaG91bGQgYmUgcmVsZWFzZWQgaW50byB0aGUgcG9vbCBhZnRlciBiZWluZyBkaXNwYXRjaGVkLiBVc2VycyB0aGF0XG4gKiBuZWVkIGEgcGVyc2lzdGVkIGV2ZW50IHNob3VsZCBpbnZva2UgYHBlcnNpc3RgLlxuICpcbiAqIFN5bnRoZXRpYyBldmVudHMgKGFuZCBzdWJjbGFzc2VzKSBpbXBsZW1lbnQgdGhlIERPTSBMZXZlbCAzIEV2ZW50cyBBUEkgYnlcbiAqIG5vcm1hbGl6aW5nIGJyb3dzZXIgcXVpcmtzLiBTdWJjbGFzc2VzIGRvIG5vdCBuZWNlc3NhcmlseSBoYXZlIHRvIGltcGxlbWVudCBhXG4gKiBET00gaW50ZXJmYWNlOyBjdXN0b20gYXBwbGljYXRpb24tc3BlY2lmaWMgZXZlbnRzIGNhbiBhbHNvIHN1YmNsYXNzIHRoaXMuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KSB7XG4gIHRoaXMuZGlzcGF0Y2hDb25maWcgPSBkaXNwYXRjaENvbmZpZztcbiAgdGhpcy5kaXNwYXRjaE1hcmtlciA9IGRpc3BhdGNoTWFya2VyO1xuICB0aGlzLm5hdGl2ZUV2ZW50ID0gbmF0aXZlRXZlbnQ7XG5cbiAgdmFyIEludGVyZmFjZSA9IHRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO1xuICBmb3IgKHZhciBwcm9wTmFtZSBpbiBJbnRlcmZhY2UpIHtcbiAgICBpZiAoIUludGVyZmFjZS5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB2YXIgbm9ybWFsaXplID0gSW50ZXJmYWNlW3Byb3BOYW1lXTtcbiAgICBpZiAobm9ybWFsaXplKSB7XG4gICAgICB0aGlzW3Byb3BOYW1lXSA9IG5vcm1hbGl6ZShuYXRpdmVFdmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXNbcHJvcE5hbWVdID0gbmF0aXZlRXZlbnRbcHJvcE5hbWVdO1xuICAgIH1cbiAgfVxuXG4gIHZhciBkZWZhdWx0UHJldmVudGVkID0gbmF0aXZlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCAhPSBudWxsID9cbiAgICBuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkIDpcbiAgICBuYXRpdmVFdmVudC5yZXR1cm5WYWx1ZSA9PT0gZmFsc2U7XG4gIGlmIChkZWZhdWx0UHJldmVudGVkKSB7XG4gICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZTtcbiAgfVxuICB0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlO1xufVxuXG5hc3NpZ24oU3ludGhldGljRXZlbnQucHJvdG90eXBlLCB7XG5cbiAgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuZGVmYXVsdFByZXZlbnRlZCA9IHRydWU7XG4gICAgdmFyIGV2ZW50ID0gdGhpcy5uYXRpdmVFdmVudDtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCA/IGV2ZW50LnByZXZlbnREZWZhdWx0KCkgOiBldmVudC5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWU7XG4gIH0sXG5cbiAgc3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZXZlbnQgPSB0aGlzLm5hdGl2ZUV2ZW50O1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbiA/IGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpIDogZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcbiAgICB0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFdlIHJlbGVhc2UgYWxsIGRpc3BhdGNoZWQgYFN5bnRoZXRpY0V2ZW50YHMgYWZ0ZXIgZWFjaCBldmVudCBsb29wLCBhZGRpbmdcbiAgICogdGhlbSBiYWNrIGludG8gdGhlIHBvb2wuIFRoaXMgYWxsb3dzIGEgd2F5IHRvIGhvbGQgb250byBhIHJlZmVyZW5jZSB0aGF0XG4gICAqIHdvbid0IGJlIGFkZGVkIGJhY2sgaW50byB0aGUgcG9vbC5cbiAgICovXG4gIHBlcnNpc3Q6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaXNQZXJzaXN0ZW50ID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGlzIGV2ZW50IHNob3VsZCBiZSByZWxlYXNlZCBiYWNrIGludG8gdGhlIHBvb2wuXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhpcyBzaG91bGQgbm90IGJlIHJlbGVhc2VkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBpc1BlcnNpc3RlbnQ6IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSxcblxuICAvKipcbiAgICogYFBvb2xlZENsYXNzYCBsb29rcyBmb3IgYGRlc3RydWN0b3JgIG9uIGVhY2ggaW5zdGFuY2UgaXQgcmVsZWFzZXMuXG4gICAqL1xuICBkZXN0cnVjdG9yOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgSW50ZXJmYWNlID0gdGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7XG4gICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gSW50ZXJmYWNlKSB7XG4gICAgICB0aGlzW3Byb3BOYW1lXSA9IG51bGw7XG4gICAgfVxuICAgIHRoaXMuZGlzcGF0Y2hDb25maWcgPSBudWxsO1xuICAgIHRoaXMuZGlzcGF0Y2hNYXJrZXIgPSBudWxsO1xuICAgIHRoaXMubmF0aXZlRXZlbnQgPSBudWxsO1xuICB9XG5cbn0pO1xuXG5TeW50aGV0aWNFdmVudC5JbnRlcmZhY2UgPSBFdmVudEludGVyZmFjZTtcblxuLyoqXG4gKiBIZWxwZXIgdG8gcmVkdWNlIGJvaWxlcnBsYXRlIHdoZW4gY3JlYXRpbmcgc3ViY2xhc3Nlcy5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBDbGFzc1xuICogQHBhcmFtIHs/b2JqZWN0fSBJbnRlcmZhY2VcbiAqL1xuU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzID0gZnVuY3Rpb24oQ2xhc3MsIEludGVyZmFjZSkge1xuICB2YXIgU3VwZXIgPSB0aGlzO1xuXG4gIHZhciBwcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFN1cGVyLnByb3RvdHlwZSk7XG4gIGFzc2lnbihwcm90b3R5cGUsIENsYXNzLnByb3RvdHlwZSk7XG4gIENsYXNzLnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ2xhc3M7XG5cbiAgQ2xhc3MuSW50ZXJmYWNlID0gYXNzaWduKHt9LCBTdXBlci5JbnRlcmZhY2UsIEludGVyZmFjZSk7XG4gIENsYXNzLmF1Z21lbnRDbGFzcyA9IFN1cGVyLmF1Z21lbnRDbGFzcztcblxuICBQb29sZWRDbGFzcy5hZGRQb29saW5nVG8oQ2xhc3MsIFBvb2xlZENsYXNzLnRocmVlQXJndW1lbnRQb29sZXIpO1xufTtcblxuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKFN5bnRoZXRpY0V2ZW50LCBQb29sZWRDbGFzcy50aHJlZUFyZ3VtZW50UG9vbGVyKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNFdmVudDtcblxufSx7XCIuL09iamVjdC5hc3NpZ25cIjo5NSxcIi4vUG9vbGVkQ2xhc3NcIjo5NixcIi4vZW1wdHlGdW5jdGlvblwiOjE3NyxcIi4vZ2V0RXZlbnRUYXJnZXRcIjoxODd9XSwxNTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY0ZvY3VzRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljVUlFdmVudFwiKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEZvY3VzRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgRm9jdXNFdmVudEludGVyZmFjZSA9IHtcbiAgcmVsYXRlZFRhcmdldDogbnVsbFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljRm9jdXNFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KSB7XG4gIFN5bnRoZXRpY1VJRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KTtcbn1cblxuU3ludGhldGljVUlFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljRm9jdXNFdmVudCwgRm9jdXNFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljRm9jdXNFdmVudDtcblxufSx7XCIuL1N5bnRoZXRpY1VJRXZlbnRcIjoxNjJ9XSwxNTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMyBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY0lucHV0RXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY0V2ZW50XCIpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAxMzExMDVcbiAqICAgICAgLyNldmVudHMtaW5wdXRldmVudHNcbiAqL1xudmFyIElucHV0RXZlbnRJbnRlcmZhY2UgPSB7XG4gIGRhdGE6IG51bGxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0lucHV0RXZlbnQoXG4gIGRpc3BhdGNoQ29uZmlnLFxuICBkaXNwYXRjaE1hcmtlcixcbiAgbmF0aXZlRXZlbnQpIHtcbiAgU3ludGhldGljRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KTtcbn1cblxuU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFxuICBTeW50aGV0aWNJbnB1dEV2ZW50LFxuICBJbnB1dEV2ZW50SW50ZXJmYWNlXG4pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0lucHV0RXZlbnQ7XG5cblxufSx7XCIuL1N5bnRoZXRpY0V2ZW50XCI6MTU2fV0sMTU5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNLZXlib2FyZEV2ZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgU3ludGhldGljVUlFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY1VJRXZlbnRcIik7XG5cbnZhciBnZXRFdmVudENoYXJDb2RlID0gcmVxdWlyZShcIi4vZ2V0RXZlbnRDaGFyQ29kZVwiKTtcbnZhciBnZXRFdmVudEtleSA9IHJlcXVpcmUoXCIuL2dldEV2ZW50S2V5XCIpO1xudmFyIGdldEV2ZW50TW9kaWZpZXJTdGF0ZSA9IHJlcXVpcmUoXCIuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZVwiKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEtleWJvYXJkRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgS2V5Ym9hcmRFdmVudEludGVyZmFjZSA9IHtcbiAga2V5OiBnZXRFdmVudEtleSxcbiAgbG9jYXRpb246IG51bGwsXG4gIGN0cmxLZXk6IG51bGwsXG4gIHNoaWZ0S2V5OiBudWxsLFxuICBhbHRLZXk6IG51bGwsXG4gIG1ldGFLZXk6IG51bGwsXG4gIHJlcGVhdDogbnVsbCxcbiAgbG9jYWxlOiBudWxsLFxuICBnZXRNb2RpZmllclN0YXRlOiBnZXRFdmVudE1vZGlmaWVyU3RhdGUsXG4gIC8vIExlZ2FjeSBJbnRlcmZhY2VcbiAgY2hhckNvZGU6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgLy8gYGNoYXJDb2RlYCBpcyB0aGUgcmVzdWx0IG9mIGEgS2V5UHJlc3MgZXZlbnQgYW5kIHJlcHJlc2VudHMgdGhlIHZhbHVlIG9mXG4gICAgLy8gdGhlIGFjdHVhbCBwcmludGFibGUgY2hhcmFjdGVyLlxuXG4gICAgLy8gS2V5UHJlc3MgaXMgZGVwcmVjYXRlZCwgYnV0IGl0cyByZXBsYWNlbWVudCBpcyBub3QgeWV0IGZpbmFsIGFuZCBub3RcbiAgICAvLyBpbXBsZW1lbnRlZCBpbiBhbnkgbWFqb3IgYnJvd3Nlci4gT25seSBLZXlQcmVzcyBoYXMgY2hhckNvZGUuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlwcmVzcycpIHtcbiAgICAgIHJldHVybiBnZXRFdmVudENoYXJDb2RlKGV2ZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH0sXG4gIGtleUNvZGU6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgLy8gYGtleUNvZGVgIGlzIHRoZSByZXN1bHQgb2YgYSBLZXlEb3duL1VwIGV2ZW50IGFuZCByZXByZXNlbnRzIHRoZSB2YWx1ZSBvZlxuICAgIC8vIHBoeXNpY2FsIGtleWJvYXJkIGtleS5cblxuICAgIC8vIFRoZSBhY3R1YWwgbWVhbmluZyBvZiB0aGUgdmFsdWUgZGVwZW5kcyBvbiB0aGUgdXNlcnMnIGtleWJvYXJkIGxheW91dFxuICAgIC8vIHdoaWNoIGNhbm5vdCBiZSBkZXRlY3RlZC4gQXNzdW1pbmcgdGhhdCBpdCBpcyBhIFVTIGtleWJvYXJkIGxheW91dFxuICAgIC8vIHByb3ZpZGVzIGEgc3VycHJpc2luZ2x5IGFjY3VyYXRlIG1hcHBpbmcgZm9yIFVTIGFuZCBFdXJvcGVhbiB1c2Vycy5cbiAgICAvLyBEdWUgdG8gdGhpcywgaXQgaXMgbGVmdCB0byB0aGUgdXNlciB0byBpbXBsZW1lbnQgYXQgdGhpcyB0aW1lLlxuICAgIGlmIChldmVudC50eXBlID09PSAna2V5ZG93bicgfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJykge1xuICAgICAgcmV0dXJuIGV2ZW50LmtleUNvZGU7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9LFxuICB3aGljaDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAvLyBgd2hpY2hgIGlzIGFuIGFsaWFzIGZvciBlaXRoZXIgYGtleUNvZGVgIG9yIGBjaGFyQ29kZWAgZGVwZW5kaW5nIG9uIHRoZVxuICAgIC8vIHR5cGUgb2YgdGhlIGV2ZW50LlxuICAgIGlmIChldmVudC50eXBlID09PSAna2V5cHJlc3MnKSB7XG4gICAgICByZXR1cm4gZ2V0RXZlbnRDaGFyQ29kZShldmVudCk7XG4gICAgfVxuICAgIGlmIChldmVudC50eXBlID09PSAna2V5ZG93bicgfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJykge1xuICAgICAgcmV0dXJuIGV2ZW50LmtleUNvZGU7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNLZXlib2FyZEV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpIHtcbiAgU3ludGhldGljVUlFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpO1xufVxuXG5TeW50aGV0aWNVSUV2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNLZXlib2FyZEV2ZW50LCBLZXlib2FyZEV2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNLZXlib2FyZEV2ZW50O1xuXG59LHtcIi4vU3ludGhldGljVUlFdmVudFwiOjE2MixcIi4vZ2V0RXZlbnRDaGFyQ29kZVwiOjE4NCxcIi4vZ2V0RXZlbnRLZXlcIjoxODUsXCIuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZVwiOjE4Nn1dLDE2MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljTW91c2VFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIFN5bnRoZXRpY1VJRXZlbnQgPSByZXF1aXJlKFwiLi9TeW50aGV0aWNVSUV2ZW50XCIpO1xudmFyIFZpZXdwb3J0TWV0cmljcyA9IHJlcXVpcmUoXCIuL1ZpZXdwb3J0TWV0cmljc1wiKTtcblxudmFyIGdldEV2ZW50TW9kaWZpZXJTdGF0ZSA9IHJlcXVpcmUoXCIuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZVwiKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIE1vdXNlRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgTW91c2VFdmVudEludGVyZmFjZSA9IHtcbiAgc2NyZWVuWDogbnVsbCxcbiAgc2NyZWVuWTogbnVsbCxcbiAgY2xpZW50WDogbnVsbCxcbiAgY2xpZW50WTogbnVsbCxcbiAgY3RybEtleTogbnVsbCxcbiAgc2hpZnRLZXk6IG51bGwsXG4gIGFsdEtleTogbnVsbCxcbiAgbWV0YUtleTogbnVsbCxcbiAgZ2V0TW9kaWZpZXJTdGF0ZTogZ2V0RXZlbnRNb2RpZmllclN0YXRlLFxuICBidXR0b246IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgLy8gV2Via2l0LCBGaXJlZm94LCBJRTkrXG4gICAgLy8gd2hpY2g6ICAxIDIgM1xuICAgIC8vIGJ1dHRvbjogMCAxIDIgKHN0YW5kYXJkKVxuICAgIHZhciBidXR0b24gPSBldmVudC5idXR0b247XG4gICAgaWYgKCd3aGljaCcgaW4gZXZlbnQpIHtcbiAgICAgIHJldHVybiBidXR0b247XG4gICAgfVxuICAgIC8vIElFPDlcbiAgICAvLyB3aGljaDogIHVuZGVmaW5lZFxuICAgIC8vIGJ1dHRvbjogMCAwIDBcbiAgICAvLyBidXR0b246IDEgNCAyIChvbm1vdXNldXApXG4gICAgcmV0dXJuIGJ1dHRvbiA9PT0gMiA/IDIgOiBidXR0b24gPT09IDQgPyAxIDogMDtcbiAgfSxcbiAgYnV0dG9uczogbnVsbCxcbiAgcmVsYXRlZFRhcmdldDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gZXZlbnQucmVsYXRlZFRhcmdldCB8fCAoXG4gICAgICBldmVudC5mcm9tRWxlbWVudCA9PT0gZXZlbnQuc3JjRWxlbWVudCA/XG4gICAgICAgIGV2ZW50LnRvRWxlbWVudCA6XG4gICAgICAgIGV2ZW50LmZyb21FbGVtZW50XG4gICAgKTtcbiAgfSxcbiAgLy8gXCJQcm9wcmlldGFyeVwiIEludGVyZmFjZS5cbiAgcGFnZVg6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuICdwYWdlWCcgaW4gZXZlbnQgP1xuICAgICAgZXZlbnQucGFnZVggOlxuICAgICAgZXZlbnQuY2xpZW50WCArIFZpZXdwb3J0TWV0cmljcy5jdXJyZW50U2Nyb2xsTGVmdDtcbiAgfSxcbiAgcGFnZVk6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuICdwYWdlWScgaW4gZXZlbnQgP1xuICAgICAgZXZlbnQucGFnZVkgOlxuICAgICAgZXZlbnQuY2xpZW50WSArIFZpZXdwb3J0TWV0cmljcy5jdXJyZW50U2Nyb2xsVG9wO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNNb3VzZUV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpIHtcbiAgU3ludGhldGljVUlFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQpO1xufVxuXG5TeW50aGV0aWNVSUV2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNNb3VzZUV2ZW50LCBNb3VzZUV2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNNb3VzZUV2ZW50O1xuXG59LHtcIi4vU3ludGhldGljVUlFdmVudFwiOjE2MixcIi4vVmlld3BvcnRNZXRyaWNzXCI6MTY1LFwiLi9nZXRFdmVudE1vZGlmaWVyU3RhdGVcIjoxODZ9XSwxNjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFN5bnRoZXRpY1RvdWNoRXZlbnRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljVUlFdmVudFwiKTtcblxudmFyIGdldEV2ZW50TW9kaWZpZXJTdGF0ZSA9IHJlcXVpcmUoXCIuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZVwiKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIFRvdWNoRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvdG91Y2gtZXZlbnRzL1xuICovXG52YXIgVG91Y2hFdmVudEludGVyZmFjZSA9IHtcbiAgdG91Y2hlczogbnVsbCxcbiAgdGFyZ2V0VG91Y2hlczogbnVsbCxcbiAgY2hhbmdlZFRvdWNoZXM6IG51bGwsXG4gIGFsdEtleTogbnVsbCxcbiAgbWV0YUtleTogbnVsbCxcbiAgY3RybEtleTogbnVsbCxcbiAgc2hpZnRLZXk6IG51bGwsXG4gIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljVG91Y2hFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KSB7XG4gIFN5bnRoZXRpY1VJRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KTtcbn1cblxuU3ludGhldGljVUlFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljVG91Y2hFdmVudCwgVG91Y2hFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljVG91Y2hFdmVudDtcblxufSx7XCIuL1N5bnRoZXRpY1VJRXZlbnRcIjoxNjIsXCIuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZVwiOjE4Nn1dLDE2MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3ludGhldGljVUlFdmVudFxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZShcIi4vU3ludGhldGljRXZlbnRcIik7XG5cbnZhciBnZXRFdmVudFRhcmdldCA9IHJlcXVpcmUoXCIuL2dldEV2ZW50VGFyZ2V0XCIpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgVUlFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBVSUV2ZW50SW50ZXJmYWNlID0ge1xuICB2aWV3OiBmdW5jdGlvbihldmVudCkge1xuICAgIGlmIChldmVudC52aWV3KSB7XG4gICAgICByZXR1cm4gZXZlbnQudmlldztcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0ID0gZ2V0RXZlbnRUYXJnZXQoZXZlbnQpO1xuICAgIGlmICh0YXJnZXQgIT0gbnVsbCAmJiB0YXJnZXQud2luZG93ID09PSB0YXJnZXQpIHtcbiAgICAgIC8vIHRhcmdldCBpcyBhIHdpbmRvdyBvYmplY3RcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgdmFyIGRvYyA9IHRhcmdldC5vd25lckRvY3VtZW50O1xuICAgIC8vIFRPRE86IEZpZ3VyZSBvdXQgd2h5IGBvd25lckRvY3VtZW50YCBpcyBzb21ldGltZXMgdW5kZWZpbmVkIGluIElFOC5cbiAgICBpZiAoZG9jKSB7XG4gICAgICByZXR1cm4gZG9jLmRlZmF1bHRWaWV3IHx8IGRvYy5wYXJlbnRXaW5kb3c7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgfVxuICB9LFxuICBkZXRhaWw6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuIGV2ZW50LmRldGFpbCB8fCAwO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljVUlFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KSB7XG4gIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCk7XG59XG5cblN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNVSUV2ZW50LCBVSUV2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNVSUV2ZW50O1xuXG59LHtcIi4vU3ludGhldGljRXZlbnRcIjoxNTYsXCIuL2dldEV2ZW50VGFyZ2V0XCI6MTg3fV0sMTYzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTeW50aGV0aWNXaGVlbEV2ZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgU3ludGhldGljTW91c2VFdmVudCA9IHJlcXVpcmUoXCIuL1N5bnRoZXRpY01vdXNlRXZlbnRcIik7XG5cbi8qKlxuICogQGludGVyZmFjZSBXaGVlbEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIFdoZWVsRXZlbnRJbnRlcmZhY2UgPSB7XG4gIGRlbHRhWDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgJ2RlbHRhWCcgaW4gZXZlbnQgPyBldmVudC5kZWx0YVggOlxuICAgICAgLy8gRmFsbGJhY2sgdG8gYHdoZWVsRGVsdGFYYCBmb3IgV2Via2l0IGFuZCBub3JtYWxpemUgKHJpZ2h0IGlzIHBvc2l0aXZlKS5cbiAgICAgICd3aGVlbERlbHRhWCcgaW4gZXZlbnQgPyAtZXZlbnQud2hlZWxEZWx0YVggOiAwXG4gICAgKTtcbiAgfSxcbiAgZGVsdGFZOiBmdW5jdGlvbihldmVudCkge1xuICAgIHJldHVybiAoXG4gICAgICAnZGVsdGFZJyBpbiBldmVudCA/IGV2ZW50LmRlbHRhWSA6XG4gICAgICAvLyBGYWxsYmFjayB0byBgd2hlZWxEZWx0YVlgIGZvciBXZWJraXQgYW5kIG5vcm1hbGl6ZSAoZG93biBpcyBwb3NpdGl2ZSkuXG4gICAgICAnd2hlZWxEZWx0YVknIGluIGV2ZW50ID8gLWV2ZW50LndoZWVsRGVsdGFZIDpcbiAgICAgIC8vIEZhbGxiYWNrIHRvIGB3aGVlbERlbHRhYCBmb3IgSUU8OSBhbmQgbm9ybWFsaXplIChkb3duIGlzIHBvc2l0aXZlKS5cbiAgICAgICd3aGVlbERlbHRhJyBpbiBldmVudCA/IC1ldmVudC53aGVlbERlbHRhIDogMFxuICAgICk7XG4gIH0sXG4gIGRlbHRhWjogbnVsbCxcblxuICAvLyBCcm93c2VycyB3aXRob3V0IFwiZGVsdGFNb2RlXCIgaXMgcmVwb3J0aW5nIGluIHJhdyB3aGVlbCBkZWx0YSB3aGVyZSBvbmVcbiAgLy8gbm90Y2ggb24gdGhlIHNjcm9sbCBpcyBhbHdheXMgKy8tIDEyMCwgcm91Z2hseSBlcXVpdmFsZW50IHRvIHBpeGVscy5cbiAgLy8gQSBnb29kIGFwcHJveGltYXRpb24gb2YgRE9NX0RFTFRBX0xJTkUgKDEpIGlzIDUlIG9mIHZpZXdwb3J0IHNpemUgb3JcbiAgLy8gfjQwIHBpeGVscywgZm9yIERPTV9ERUxUQV9TQ1JFRU4gKDIpIGl0IGlzIDg3LjUlIG9mIHZpZXdwb3J0IHNpemUuXG4gIGRlbHRhTW9kZTogbnVsbFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljTW91c2VFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljV2hlZWxFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KSB7XG4gIFN5bnRoZXRpY01vdXNlRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50KTtcbn1cblxuU3ludGhldGljTW91c2VFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljV2hlZWxFdmVudCwgV2hlZWxFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljV2hlZWxFdmVudDtcblxufSx7XCIuL1N5bnRoZXRpY01vdXNlRXZlbnRcIjoxNjB9XSwxNjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBUcmFuc2FjdGlvblxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIGBUcmFuc2FjdGlvbmAgY3JlYXRlcyBhIGJsYWNrIGJveCB0aGF0IGlzIGFibGUgdG8gd3JhcCBhbnkgbWV0aG9kIHN1Y2ggdGhhdFxuICogY2VydGFpbiBpbnZhcmlhbnRzIGFyZSBtYWludGFpbmVkIGJlZm9yZSBhbmQgYWZ0ZXIgdGhlIG1ldGhvZCBpcyBpbnZva2VkXG4gKiAoRXZlbiBpZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIHdoaWxlIGludm9raW5nIHRoZSB3cmFwcGVkIG1ldGhvZCkuIFdob2V2ZXJcbiAqIGluc3RhbnRpYXRlcyBhIHRyYW5zYWN0aW9uIGNhbiBwcm92aWRlIGVuZm9yY2VycyBvZiB0aGUgaW52YXJpYW50cyBhdFxuICogY3JlYXRpb24gdGltZS4gVGhlIGBUcmFuc2FjdGlvbmAgY2xhc3MgaXRzZWxmIHdpbGwgc3VwcGx5IG9uZSBhZGRpdGlvbmFsXG4gKiBhdXRvbWF0aWMgaW52YXJpYW50IGZvciB5b3UgLSB0aGUgaW52YXJpYW50IHRoYXQgYW55IHRyYW5zYWN0aW9uIGluc3RhbmNlXG4gKiBzaG91bGQgbm90IGJlIHJ1biB3aGlsZSBpdCBpcyBhbHJlYWR5IGJlaW5nIHJ1bi4gWW91IHdvdWxkIHR5cGljYWxseSBjcmVhdGUgYVxuICogc2luZ2xlIGluc3RhbmNlIG9mIGEgYFRyYW5zYWN0aW9uYCBmb3IgcmV1c2UgbXVsdGlwbGUgdGltZXMsIHRoYXQgcG90ZW50aWFsbHlcbiAqIGlzIHVzZWQgdG8gd3JhcCBzZXZlcmFsIGRpZmZlcmVudCBtZXRob2RzLiBXcmFwcGVycyBhcmUgZXh0cmVtZWx5IHNpbXBsZSAtXG4gKiB0aGV5IG9ubHkgcmVxdWlyZSBpbXBsZW1lbnRpbmcgdHdvIG1ldGhvZHMuXG4gKlxuICogPHByZT5cbiAqICAgICAgICAgICAgICAgICAgICAgICB3cmFwcGVycyAoaW5qZWN0ZWQgYXQgY3JlYXRpb24gdGltZSlcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICAgICAgICArXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLXwtLS0tLS0tLS0tLS0tLStcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICB2ICAgICAgICB8ICAgICAgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgICAgICstLS0tLS0tLS0tLS0tLS0rICAgfCAgICAgICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICArLS18ICAgIHdyYXBwZXIxICAgfC0tLXwtLS0tKyAgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgfCAgKy0tLS0tLS0tLS0tLS0tLSsgICB2ICAgIHwgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgIHwgICAgICAgICAgKy0tLS0tLS0tLS0tLS0rICB8ICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICB8ICAgICArLS0tLXwgICB3cmFwcGVyMiAgfC0tLS0tLS0tKyAgIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgfCAgICAgfCAgICArLS0tLS0tLS0tLS0tLSsgIHwgICAgIHwgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgIHwgICAgIHwgICAgICAgICAgICAgICAgICAgICB8ICAgICB8ICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICB2ICAgICB2ICAgICAgICAgICAgICAgICAgICAgdiAgICAgdiAgIHwgd3JhcHBlclxuICogICAgICAgICAgICAgICAgICAgIHwgKy0tLSsgKy0tLSsgICArLS0tLS0tLS0tKyAgICstLS0rICstLS0rIHwgaW52YXJpYW50c1xuICogcGVyZm9ybShhbnlNZXRob2QpIHwgfCAgIHwgfCAgIHwgICB8ICAgICAgICAgfCAgIHwgICB8IHwgICB8IHwgbWFpbnRhaW5lZFxuICogKy0tLS0tLS0tLS0tLS0tLS0tPnwtfC0tLXwtfC0tLXwtLT58YW55TWV0aG9kfC0tLXwtLS18LXwtLS18LXwtLS0tLS0tLT5cbiAqICAgICAgICAgICAgICAgICAgICB8IHwgICB8IHwgICB8ICAgfCAgICAgICAgIHwgICB8ICAgfCB8ICAgfCB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCB8ICAgfCB8ICAgfCAgIHwgICAgICAgICB8ICAgfCAgIHwgfCAgIHwgfFxuICogICAgICAgICAgICAgICAgICAgIHwgfCAgIHwgfCAgIHwgICB8ICAgICAgICAgfCAgIHwgICB8IHwgICB8IHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICstLS0rICstLS0rICAgKy0tLS0tLS0tLSsgICArLS0tKyArLS0tKyB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgaW5pdGlhbGl6ZSAgICAgICAgICAgICAgICAgICAgY2xvc2UgICAgfFxuICogICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLStcbiAqIDwvcHJlPlxuICpcbiAqIFVzZSBjYXNlczpcbiAqIC0gUHJlc2VydmluZyB0aGUgaW5wdXQgc2VsZWN0aW9uIHJhbmdlcyBiZWZvcmUvYWZ0ZXIgcmVjb25jaWxpYXRpb24uXG4gKiAgIFJlc3RvcmluZyBzZWxlY3Rpb24gZXZlbiBpbiB0aGUgZXZlbnQgb2YgYW4gdW5leHBlY3RlZCBlcnJvci5cbiAqIC0gRGVhY3RpdmF0aW5nIGV2ZW50cyB3aGlsZSByZWFycmFuZ2luZyB0aGUgRE9NLCBwcmV2ZW50aW5nIGJsdXJzL2ZvY3VzZXMsXG4gKiAgIHdoaWxlIGd1YXJhbnRlZWluZyB0aGF0IGFmdGVyd2FyZHMsIHRoZSBldmVudCBzeXN0ZW0gaXMgcmVhY3RpdmF0ZWQuXG4gKiAtIEZsdXNoaW5nIGEgcXVldWUgb2YgY29sbGVjdGVkIERPTSBtdXRhdGlvbnMgdG8gdGhlIG1haW4gVUkgdGhyZWFkIGFmdGVyIGFcbiAqICAgcmVjb25jaWxpYXRpb24gdGFrZXMgcGxhY2UgaW4gYSB3b3JrZXIgdGhyZWFkLlxuICogLSBJbnZva2luZyBhbnkgY29sbGVjdGVkIGBjb21wb25lbnREaWRVcGRhdGVgIGNhbGxiYWNrcyBhZnRlciByZW5kZXJpbmcgbmV3XG4gKiAgIGNvbnRlbnQuXG4gKiAtIChGdXR1cmUgdXNlIGNhc2UpOiBXcmFwcGluZyBwYXJ0aWN1bGFyIGZsdXNoZXMgb2YgdGhlIGBSZWFjdFdvcmtlcmAgcXVldWVcbiAqICAgdG8gcHJlc2VydmUgdGhlIGBzY3JvbGxUb3BgIChhbiBhdXRvbWF0aWMgc2Nyb2xsIGF3YXJlIERPTSkuXG4gKiAtIChGdXR1cmUgdXNlIGNhc2UpOiBMYXlvdXQgY2FsY3VsYXRpb25zIGJlZm9yZSBhbmQgYWZ0ZXIgRE9NIHVwYXRlcy5cbiAqXG4gKiBUcmFuc2FjdGlvbmFsIHBsdWdpbiBBUEk6XG4gKiAtIEEgbW9kdWxlIHRoYXQgaGFzIGFuIGBpbml0aWFsaXplYCBtZXRob2QgdGhhdCByZXR1cm5zIGFueSBwcmVjb21wdXRhdGlvbi5cbiAqIC0gYW5kIGEgYGNsb3NlYCBtZXRob2QgdGhhdCBhY2NlcHRzIHRoZSBwcmVjb21wdXRhdGlvbi4gYGNsb3NlYCBpcyBpbnZva2VkXG4gKiAgIHdoZW4gdGhlIHdyYXBwZWQgcHJvY2VzcyBpcyBjb21wbGV0ZWQsIG9yIGhhcyBmYWlsZWQuXG4gKlxuICogQHBhcmFtIHtBcnJheTxUcmFuc2FjdGlvbmFsV3JhcHBlcj59IHRyYW5zYWN0aW9uV3JhcHBlciBXcmFwcGVyIG1vZHVsZXNcbiAqIHRoYXQgaW1wbGVtZW50IGBpbml0aWFsaXplYCBhbmQgYGNsb3NlYC5cbiAqIEByZXR1cm4ge1RyYW5zYWN0aW9ufSBTaW5nbGUgdHJhbnNhY3Rpb24gZm9yIHJldXNlIGluIHRocmVhZC5cbiAqXG4gKiBAY2xhc3MgVHJhbnNhY3Rpb25cbiAqL1xudmFyIE1peGluID0ge1xuICAvKipcbiAgICogU2V0cyB1cCB0aGlzIGluc3RhbmNlIHNvIHRoYXQgaXQgaXMgcHJlcGFyZWQgZm9yIGNvbGxlY3RpbmcgbWV0cmljcy4gRG9lc1xuICAgKiBzbyBzdWNoIHRoYXQgdGhpcyBzZXR1cCBtZXRob2QgbWF5IGJlIHVzZWQgb24gYW4gaW5zdGFuY2UgdGhhdCBpcyBhbHJlYWR5XG4gICAqIGluaXRpYWxpemVkLCBpbiBhIHdheSB0aGF0IGRvZXMgbm90IGNvbnN1bWUgYWRkaXRpb25hbCBtZW1vcnkgdXBvbiByZXVzZS5cbiAgICogVGhhdCBjYW4gYmUgdXNlZnVsIGlmIHlvdSBkZWNpZGUgdG8gbWFrZSB5b3VyIHN1YmNsYXNzIG9mIHRoaXMgbWl4aW4gYVxuICAgKiBcIlBvb2xlZENsYXNzXCIuXG4gICAqL1xuICByZWluaXRpYWxpemVUcmFuc2FjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50cmFuc2FjdGlvbldyYXBwZXJzID0gdGhpcy5nZXRUcmFuc2FjdGlvbldyYXBwZXJzKCk7XG4gICAgaWYgKCF0aGlzLndyYXBwZXJJbml0RGF0YSkge1xuICAgICAgdGhpcy53cmFwcGVySW5pdERhdGEgPSBbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53cmFwcGVySW5pdERhdGEubGVuZ3RoID0gMDtcbiAgICB9XG4gICAgdGhpcy5faXNJblRyYW5zYWN0aW9uID0gZmFsc2U7XG4gIH0sXG5cbiAgX2lzSW5UcmFuc2FjdGlvbjogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEBhYnN0cmFjdFxuICAgKiBAcmV0dXJuIHtBcnJheTxUcmFuc2FjdGlvbldyYXBwZXI+fSBBcnJheSBvZiB0cmFuc2FjdGlvbiB3cmFwcGVycy5cbiAgICovXG4gIGdldFRyYW5zYWN0aW9uV3JhcHBlcnM6IG51bGwsXG5cbiAgaXNJblRyYW5zYWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gISF0aGlzLl9pc0luVHJhbnNhY3Rpb247XG4gIH0sXG5cbiAgLyoqXG4gICAqIEV4ZWN1dGVzIHRoZSBmdW5jdGlvbiB3aXRoaW4gYSBzYWZldHkgd2luZG93LiBVc2UgdGhpcyBmb3IgdGhlIHRvcCBsZXZlbFxuICAgKiBtZXRob2RzIHRoYXQgcmVzdWx0IGluIGxhcmdlIGFtb3VudHMgb2YgY29tcHV0YXRpb24vbXV0YXRpb25zIHRoYXQgd291bGRcbiAgICogbmVlZCB0byBiZSBzYWZldHkgY2hlY2tlZC5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gbWV0aG9kIE1lbWJlciBvZiBzY29wZSB0byBjYWxsLlxuICAgKiBAcGFyYW0ge09iamVjdH0gc2NvcGUgU2NvcGUgdG8gaW52b2tlIGZyb20uXG4gICAqIEBwYXJhbSB7T2JqZWN0Pz19IGFyZ3MuLi4gQXJndW1lbnRzIHRvIHBhc3MgdG8gdGhlIG1ldGhvZCAob3B0aW9uYWwpLlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIEhlbHBzIHByZXZlbnQgbmVlZCB0byBiaW5kIGluIG1hbnkgY2FzZXMuXG4gICAqIEByZXR1cm4gUmV0dXJuIHZhbHVlIGZyb20gYG1ldGhvZGAuXG4gICAqL1xuICBwZXJmb3JtOiBmdW5jdGlvbihtZXRob2QsIHNjb3BlLCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICF0aGlzLmlzSW5UcmFuc2FjdGlvbigpLFxuICAgICAgJ1RyYW5zYWN0aW9uLnBlcmZvcm0oLi4uKTogQ2Fubm90IGluaXRpYWxpemUgYSB0cmFuc2FjdGlvbiB3aGVuIHRoZXJlICcgK1xuICAgICAgJ2lzIGFscmVhZHkgYW4gb3V0c3RhbmRpbmcgdHJhbnNhY3Rpb24uJ1xuICAgICkgOiBpbnZhcmlhbnQoIXRoaXMuaXNJblRyYW5zYWN0aW9uKCkpKTtcbiAgICB2YXIgZXJyb3JUaHJvd247XG4gICAgdmFyIHJldDtcbiAgICB0cnkge1xuICAgICAgdGhpcy5faXNJblRyYW5zYWN0aW9uID0gdHJ1ZTtcbiAgICAgIC8vIENhdGNoaW5nIGVycm9ycyBtYWtlcyBkZWJ1Z2dpbmcgbW9yZSBkaWZmaWN1bHQsIHNvIHdlIHN0YXJ0IHdpdGhcbiAgICAgIC8vIGVycm9yVGhyb3duIHNldCB0byB0cnVlIGJlZm9yZSBzZXR0aW5nIGl0IHRvIGZhbHNlIGFmdGVyIGNhbGxpbmdcbiAgICAgIC8vIGNsb3NlIC0tIGlmIGl0J3Mgc3RpbGwgc2V0IHRvIHRydWUgaW4gdGhlIGZpbmFsbHkgYmxvY2ssIGl0IG1lYW5zXG4gICAgICAvLyBvbmUgb2YgdGhlc2UgY2FsbHMgdGhyZXcuXG4gICAgICBlcnJvclRocm93biA9IHRydWU7XG4gICAgICB0aGlzLmluaXRpYWxpemVBbGwoMCk7XG4gICAgICByZXQgPSBtZXRob2QuY2FsbChzY29wZSwgYSwgYiwgYywgZCwgZSwgZik7XG4gICAgICBlcnJvclRocm93biA9IGZhbHNlO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAvLyBJZiBgbWV0aG9kYCB0aHJvd3MsIHByZWZlciB0byBzaG93IHRoYXQgc3RhY2sgdHJhY2Ugb3ZlciBhbnkgdGhyb3duXG4gICAgICAgICAgLy8gYnkgaW52b2tpbmcgYGNsb3NlQWxsYC5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZUFsbCgwKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gU2luY2UgYG1ldGhvZGAgZGlkbid0IHRocm93LCB3ZSBkb24ndCB3YW50IHRvIHNpbGVuY2UgdGhlIGV4Y2VwdGlvblxuICAgICAgICAgIC8vIGhlcmUuXG4gICAgICAgICAgdGhpcy5jbG9zZUFsbCgwKTtcbiAgICAgICAgfVxuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGhpcy5faXNJblRyYW5zYWN0aW9uID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH0sXG5cbiAgaW5pdGlhbGl6ZUFsbDogZnVuY3Rpb24oc3RhcnRJbmRleCkge1xuICAgIHZhciB0cmFuc2FjdGlvbldyYXBwZXJzID0gdGhpcy50cmFuc2FjdGlvbldyYXBwZXJzO1xuICAgIGZvciAodmFyIGkgPSBzdGFydEluZGV4OyBpIDwgdHJhbnNhY3Rpb25XcmFwcGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHdyYXBwZXIgPSB0cmFuc2FjdGlvbldyYXBwZXJzW2ldO1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gQ2F0Y2hpbmcgZXJyb3JzIG1ha2VzIGRlYnVnZ2luZyBtb3JlIGRpZmZpY3VsdCwgc28gd2Ugc3RhcnQgd2l0aCB0aGVcbiAgICAgICAgLy8gT0JTRVJWRURfRVJST1Igc3RhdGUgYmVmb3JlIG92ZXJ3cml0aW5nIGl0IHdpdGggdGhlIHJlYWwgcmV0dXJuIHZhbHVlXG4gICAgICAgIC8vIG9mIGluaXRpYWxpemUgLS0gaWYgaXQncyBzdGlsbCBzZXQgdG8gT0JTRVJWRURfRVJST1IgaW4gdGhlIGZpbmFsbHlcbiAgICAgICAgLy8gYmxvY2ssIGl0IG1lYW5zIHdyYXBwZXIuaW5pdGlhbGl6ZSB0aHJldy5cbiAgICAgICAgdGhpcy53cmFwcGVySW5pdERhdGFbaV0gPSBUcmFuc2FjdGlvbi5PQlNFUlZFRF9FUlJPUjtcbiAgICAgICAgdGhpcy53cmFwcGVySW5pdERhdGFbaV0gPSB3cmFwcGVyLmluaXRpYWxpemUgP1xuICAgICAgICAgIHdyYXBwZXIuaW5pdGlhbGl6ZS5jYWxsKHRoaXMpIDpcbiAgICAgICAgICBudWxsO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKHRoaXMud3JhcHBlckluaXREYXRhW2ldID09PSBUcmFuc2FjdGlvbi5PQlNFUlZFRF9FUlJPUikge1xuICAgICAgICAgIC8vIFRoZSBpbml0aWFsaXplciBmb3Igd3JhcHBlciBpIHRocmV3IGFuIGVycm9yOyBpbml0aWFsaXplIHRoZVxuICAgICAgICAgIC8vIHJlbWFpbmluZyB3cmFwcGVycyBidXQgc2lsZW5jZSBhbnkgZXhjZXB0aW9ucyBmcm9tIHRoZW0gdG8gZW5zdXJlXG4gICAgICAgICAgLy8gdGhhdCB0aGUgZmlyc3QgZXJyb3IgaXMgdGhlIG9uZSB0byBidWJibGUgdXAuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZUFsbChpICsgMSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBJbnZva2VzIGVhY2ggb2YgYHRoaXMudHJhbnNhY3Rpb25XcmFwcGVycy5jbG9zZVtpXWAgZnVuY3Rpb25zLCBwYXNzaW5nIGludG9cbiAgICogdGhlbSB0aGUgcmVzcGVjdGl2ZSByZXR1cm4gdmFsdWVzIG9mIGB0aGlzLnRyYW5zYWN0aW9uV3JhcHBlcnMuaW5pdFtpXWBcbiAgICogKGBjbG9zZWBycyB0aGF0IGNvcnJlc3BvbmQgdG8gaW5pdGlhbGl6ZXJzIHRoYXQgZmFpbGVkIHdpbGwgbm90IGJlXG4gICAqIGludm9rZWQpLlxuICAgKi9cbiAgY2xvc2VBbGw6IGZ1bmN0aW9uKHN0YXJ0SW5kZXgpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgdGhpcy5pc0luVHJhbnNhY3Rpb24oKSxcbiAgICAgICdUcmFuc2FjdGlvbi5jbG9zZUFsbCgpOiBDYW5ub3QgY2xvc2UgdHJhbnNhY3Rpb24gd2hlbiBub25lIGFyZSBvcGVuLidcbiAgICApIDogaW52YXJpYW50KHRoaXMuaXNJblRyYW5zYWN0aW9uKCkpKTtcbiAgICB2YXIgdHJhbnNhY3Rpb25XcmFwcGVycyA9IHRoaXMudHJhbnNhY3Rpb25XcmFwcGVycztcbiAgICBmb3IgKHZhciBpID0gc3RhcnRJbmRleDsgaSA8IHRyYW5zYWN0aW9uV3JhcHBlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3cmFwcGVyID0gdHJhbnNhY3Rpb25XcmFwcGVyc1tpXTtcbiAgICAgIHZhciBpbml0RGF0YSA9IHRoaXMud3JhcHBlckluaXREYXRhW2ldO1xuICAgICAgdmFyIGVycm9yVGhyb3duO1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gQ2F0Y2hpbmcgZXJyb3JzIG1ha2VzIGRlYnVnZ2luZyBtb3JlIGRpZmZpY3VsdCwgc28gd2Ugc3RhcnQgd2l0aFxuICAgICAgICAvLyBlcnJvclRocm93biBzZXQgdG8gdHJ1ZSBiZWZvcmUgc2V0dGluZyBpdCB0byBmYWxzZSBhZnRlciBjYWxsaW5nXG4gICAgICAgIC8vIGNsb3NlIC0tIGlmIGl0J3Mgc3RpbGwgc2V0IHRvIHRydWUgaW4gdGhlIGZpbmFsbHkgYmxvY2ssIGl0IG1lYW5zXG4gICAgICAgIC8vIHdyYXBwZXIuY2xvc2UgdGhyZXcuXG4gICAgICAgIGVycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgICAgaWYgKGluaXREYXRhICE9PSBUcmFuc2FjdGlvbi5PQlNFUlZFRF9FUlJPUikge1xuICAgICAgICAgIHdyYXBwZXIuY2xvc2UgJiYgd3JhcHBlci5jbG9zZS5jYWxsKHRoaXMsIGluaXREYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBlcnJvclRocm93biA9IGZhbHNlO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgLy8gVGhlIGNsb3NlciBmb3Igd3JhcHBlciBpIHRocmV3IGFuIGVycm9yOyBjbG9zZSB0aGUgcmVtYWluaW5nXG4gICAgICAgICAgLy8gd3JhcHBlcnMgYnV0IHNpbGVuY2UgYW55IGV4Y2VwdGlvbnMgZnJvbSB0aGVtIHRvIGVuc3VyZSB0aGF0IHRoZVxuICAgICAgICAgIC8vIGZpcnN0IGVycm9yIGlzIHRoZSBvbmUgdG8gYnViYmxlIHVwLlxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlQWxsKGkgKyAxKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMud3JhcHBlckluaXREYXRhLmxlbmd0aCA9IDA7XG4gIH1cbn07XG5cbnZhciBUcmFuc2FjdGlvbiA9IHtcblxuICBNaXhpbjogTWl4aW4sXG5cbiAgLyoqXG4gICAqIFRva2VuIHRvIGxvb2sgZm9yIHRvIGRldGVybWluZSBpZiBhbiBlcnJvciBvY2N1cmVkLlxuICAgKi9cbiAgT0JTRVJWRURfRVJST1I6IHt9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNhY3Rpb247XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL2ludmFyaWFudFwiOjE5NixcIl9wcm9jZXNzXCI6MTl9XSwxNjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFZpZXdwb3J0TWV0cmljc1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb24gPSByZXF1aXJlKFwiLi9nZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvblwiKTtcblxudmFyIFZpZXdwb3J0TWV0cmljcyA9IHtcblxuICBjdXJyZW50U2Nyb2xsTGVmdDogMCxcblxuICBjdXJyZW50U2Nyb2xsVG9wOiAwLFxuXG4gIHJlZnJlc2hTY3JvbGxWYWx1ZXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY3JvbGxQb3NpdGlvbiA9IGdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uKHdpbmRvdyk7XG4gICAgVmlld3BvcnRNZXRyaWNzLmN1cnJlbnRTY3JvbGxMZWZ0ID0gc2Nyb2xsUG9zaXRpb24ueDtcbiAgICBWaWV3cG9ydE1ldHJpY3MuY3VycmVudFNjcm9sbFRvcCA9IHNjcm9sbFBvc2l0aW9uLnk7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBWaWV3cG9ydE1ldHJpY3M7XG5cbn0se1wiLi9nZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvblwiOjE5Mn1dLDE2NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBhY2N1bXVsYXRlSW50b1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqXG4gKiBBY2N1bXVsYXRlcyBpdGVtcyB0aGF0IG11c3Qgbm90IGJlIG51bGwgb3IgdW5kZWZpbmVkIGludG8gdGhlIGZpcnN0IG9uZS4gVGhpc1xuICogaXMgdXNlZCB0byBjb25zZXJ2ZSBtZW1vcnkgYnkgYXZvaWRpbmcgYXJyYXkgYWxsb2NhdGlvbnMsIGFuZCB0aHVzIHNhY3JpZmljZXNcbiAqIEFQSSBjbGVhbm5lc3MuIFNpbmNlIGBjdXJyZW50YCBjYW4gYmUgbnVsbCBiZWZvcmUgYmVpbmcgcGFzc2VkIGluIGFuZCBub3RcbiAqIG51bGwgYWZ0ZXIgdGhpcyBmdW5jdGlvbiwgbWFrZSBzdXJlIHRvIGFzc2lnbiBpdCBiYWNrIHRvIGBjdXJyZW50YDpcbiAqXG4gKiBgYSA9IGFjY3VtdWxhdGVJbnRvKGEsIGIpO2BcbiAqXG4gKiBUaGlzIEFQSSBzaG91bGQgYmUgc3BhcmluZ2x5IHVzZWQuIFRyeSBgYWNjdW11bGF0ZWAgZm9yIHNvbWV0aGluZyBjbGVhbmVyLlxuICpcbiAqIEByZXR1cm4geyp8YXJyYXk8Kj59IEFuIGFjY3VtdWxhdGlvbiBvZiBpdGVtcy5cbiAqL1xuXG5mdW5jdGlvbiBhY2N1bXVsYXRlSW50byhjdXJyZW50LCBuZXh0KSB7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgbmV4dCAhPSBudWxsLFxuICAgICdhY2N1bXVsYXRlSW50byguLi4pOiBBY2N1bXVsYXRlZCBpdGVtcyBtdXN0IG5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZC4nXG4gICkgOiBpbnZhcmlhbnQobmV4dCAhPSBudWxsKSk7XG4gIGlmIChjdXJyZW50ID09IG51bGwpIHtcbiAgICByZXR1cm4gbmV4dDtcbiAgfVxuXG4gIC8vIEJvdGggYXJlIG5vdCBlbXB0eS4gV2FybmluZzogTmV2ZXIgY2FsbCB4LmNvbmNhdCh5KSB3aGVuIHlvdSBhcmUgbm90XG4gIC8vIGNlcnRhaW4gdGhhdCB4IGlzIGFuIEFycmF5ICh4IGNvdWxkIGJlIGEgc3RyaW5nIHdpdGggY29uY2F0IG1ldGhvZCkuXG4gIHZhciBjdXJyZW50SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoY3VycmVudCk7XG4gIHZhciBuZXh0SXNBcnJheSA9IEFycmF5LmlzQXJyYXkobmV4dCk7XG5cbiAgaWYgKGN1cnJlbnRJc0FycmF5ICYmIG5leHRJc0FycmF5KSB7XG4gICAgY3VycmVudC5wdXNoLmFwcGx5KGN1cnJlbnQsIG5leHQpO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG5cbiAgaWYgKGN1cnJlbnRJc0FycmF5KSB7XG4gICAgY3VycmVudC5wdXNoKG5leHQpO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG5cbiAgaWYgKG5leHRJc0FycmF5KSB7XG4gICAgLy8gQSBiaXQgdG9vIGRhbmdlcm91cyB0byBtdXRhdGUgYG5leHRgLlxuICAgIHJldHVybiBbY3VycmVudF0uY29uY2F0KG5leHQpO1xuICB9XG5cbiAgcmV0dXJuIFtjdXJyZW50LCBuZXh0XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhY2N1bXVsYXRlSW50bztcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vaW52YXJpYW50XCI6MTk2LFwiX3Byb2Nlc3NcIjoxOX1dLDE2NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgYWRsZXIzMlxuICovXG5cbi8qIGpzbGludCBiaXR3aXNlOnRydWUgKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBNT0QgPSA2NTUyMTtcblxuLy8gVGhpcyBpcyBhIGNsZWFuLXJvb20gaW1wbGVtZW50YXRpb24gb2YgYWRsZXIzMiBkZXNpZ25lZCBmb3IgZGV0ZWN0aW5nXG4vLyBpZiBtYXJrdXAgaXMgbm90IHdoYXQgd2UgZXhwZWN0IGl0IHRvIGJlLiBJdCBkb2VzIG5vdCBuZWVkIHRvIGJlXG4vLyBjcnlwdG9ncmFwaGljYWxseSBzdHJvbmcsIG9ubHkgcmVhc29uYWJseSBnb29kIGF0IGRldGVjdGluZyBpZiBtYXJrdXBcbi8vIGdlbmVyYXRlZCBvbiB0aGUgc2VydmVyIGlzIGRpZmZlcmVudCB0aGFuIHRoYXQgb24gdGhlIGNsaWVudC5cbmZ1bmN0aW9uIGFkbGVyMzIoZGF0YSkge1xuICB2YXIgYSA9IDE7XG4gIHZhciBiID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgYSA9IChhICsgZGF0YS5jaGFyQ29kZUF0KGkpKSAlIE1PRDtcbiAgICBiID0gKGIgKyBhKSAlIE1PRDtcbiAgfVxuICByZXR1cm4gYSB8IChiIDw8IDE2KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhZGxlcjMyO1xuXG59LHt9XSwxNjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGNhbWVsaXplXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBfaHlwaGVuUGF0dGVybiA9IC8tKC4pL2c7XG5cbi8qKlxuICogQ2FtZWxjYXNlcyBhIGh5cGhlbmF0ZWQgc3RyaW5nLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gY2FtZWxpemUoJ2JhY2tncm91bmQtY29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZENvbG9yXCJcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGNhbWVsaXplKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoX2h5cGhlblBhdHRlcm4sIGZ1bmN0aW9uKF8sIGNoYXJhY3Rlcikge1xuICAgIHJldHVybiBjaGFyYWN0ZXIudG9VcHBlckNhc2UoKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FtZWxpemU7XG5cbn0se31dLDE2OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGNhbWVsaXplU3R5bGVOYW1lXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgY2FtZWxpemUgPSByZXF1aXJlKFwiLi9jYW1lbGl6ZVwiKTtcblxudmFyIG1zUGF0dGVybiA9IC9eLW1zLS87XG5cbi8qKlxuICogQ2FtZWxjYXNlcyBhIGh5cGhlbmF0ZWQgQ1NTIHByb3BlcnR5IG5hbWUsIGZvciBleGFtcGxlOlxuICpcbiAqICAgPiBjYW1lbGl6ZVN0eWxlTmFtZSgnYmFja2dyb3VuZC1jb2xvcicpXG4gKiAgIDwgXCJiYWNrZ3JvdW5kQ29sb3JcIlxuICogICA+IGNhbWVsaXplU3R5bGVOYW1lKCctbW96LXRyYW5zaXRpb24nKVxuICogICA8IFwiTW96VHJhbnNpdGlvblwiXG4gKiAgID4gY2FtZWxpemVTdHlsZU5hbWUoJy1tcy10cmFuc2l0aW9uJylcbiAqICAgPCBcIm1zVHJhbnNpdGlvblwiXG4gKlxuICogQXMgQW5kaSBTbWl0aCBzdWdnZXN0c1xuICogKGh0dHA6Ly93d3cuYW5kaXNtaXRoLmNvbS9ibG9nLzIwMTIvMDIvbW9kZXJuaXpyLXByZWZpeGVkLyksIGFuIGAtbXNgIHByZWZpeFxuICogaXMgY29udmVydGVkIHRvIGxvd2VyY2FzZSBgbXNgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gY2FtZWxpemVTdHlsZU5hbWUoc3RyaW5nKSB7XG4gIHJldHVybiBjYW1lbGl6ZShzdHJpbmcucmVwbGFjZShtc1BhdHRlcm4sICdtcy0nKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FtZWxpemVTdHlsZU5hbWU7XG5cbn0se1wiLi9jYW1lbGl6ZVwiOjE2OH1dLDE3MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgY29udGFpbnNOb2RlXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBpc1RleHROb2RlID0gcmVxdWlyZShcIi4vaXNUZXh0Tm9kZVwiKTtcblxuLypqc2xpbnQgYml0d2lzZTp0cnVlICovXG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgZ2l2ZW4gRE9NIG5vZGUgY29udGFpbnMgb3IgaXMgYW5vdGhlciBET00gbm9kZS5cbiAqXG4gKiBAcGFyYW0gez9ET01Ob2RlfSBvdXRlck5vZGUgT3V0ZXIgRE9NIG5vZGUuXG4gKiBAcGFyYW0gez9ET01Ob2RlfSBpbm5lck5vZGUgSW5uZXIgRE9NIG5vZGUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGBvdXRlck5vZGVgIGNvbnRhaW5zIG9yIGlzIGBpbm5lck5vZGVgLlxuICovXG5mdW5jdGlvbiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUpIHtcbiAgaWYgKCFvdXRlck5vZGUgfHwgIWlubmVyTm9kZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUgPT09IGlubmVyTm9kZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUob3V0ZXJOb2RlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKGlubmVyTm9kZSkpIHtcbiAgICByZXR1cm4gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlLnBhcmVudE5vZGUpO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZS5jb250YWlucykge1xuICAgIHJldHVybiBvdXRlck5vZGUuY29udGFpbnMoaW5uZXJOb2RlKTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24pIHtcbiAgICByZXR1cm4gISEob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGlubmVyTm9kZSkgJiAxNik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29udGFpbnNOb2RlO1xuXG59LHtcIi4vaXNUZXh0Tm9kZVwiOjIwMH1dLDE3MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgY3JlYXRlQXJyYXlGcm9tXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciB0b0FycmF5ID0gcmVxdWlyZShcIi4vdG9BcnJheVwiKTtcblxuLyoqXG4gKiBQZXJmb3JtIGEgaGV1cmlzdGljIHRlc3QgdG8gZGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBcImFycmF5LWxpa2VcIi5cbiAqXG4gKiAgIEEgbW9uayBhc2tlZCBKb3NodSwgYSBaZW4gbWFzdGVyLCBcIkhhcyBhIGRvZyBCdWRkaGEgbmF0dXJlP1wiXG4gKiAgIEpvc2h1IHJlcGxpZWQ6IFwiTXUuXCJcbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGRldGVybWluZXMgaWYgaXRzIGFyZ3VtZW50IGhhcyBcImFycmF5IG5hdHVyZVwiOiBpdCByZXR1cm5zXG4gKiB0cnVlIGlmIHRoZSBhcmd1bWVudCBpcyBhbiBhY3R1YWwgYXJyYXksIGFuIGBhcmd1bWVudHMnIG9iamVjdCwgb3IgYW5cbiAqIEhUTUxDb2xsZWN0aW9uIChlLmcuIG5vZGUuY2hpbGROb2RlcyBvciBub2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCkpLlxuICpcbiAqIEl0IHdpbGwgcmV0dXJuIGZhbHNlIGZvciBvdGhlciBhcnJheS1saWtlIG9iamVjdHMgbGlrZSBGaWxlbGlzdC5cbiAqXG4gKiBAcGFyYW0geyp9IG9ialxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaGFzQXJyYXlOYXR1cmUob2JqKSB7XG4gIHJldHVybiAoXG4gICAgLy8gbm90IG51bGwvZmFsc2VcbiAgICAhIW9iaiAmJlxuICAgIC8vIGFycmF5cyBhcmUgb2JqZWN0cywgTm9kZUxpc3RzIGFyZSBmdW5jdGlvbnMgaW4gU2FmYXJpXG4gICAgKHR5cGVvZiBvYmogPT0gJ29iamVjdCcgfHwgdHlwZW9mIG9iaiA9PSAnZnVuY3Rpb24nKSAmJlxuICAgIC8vIHF1YWNrcyBsaWtlIGFuIGFycmF5XG4gICAgKCdsZW5ndGgnIGluIG9iaikgJiZcbiAgICAvLyBub3Qgd2luZG93XG4gICAgISgnc2V0SW50ZXJ2YWwnIGluIG9iaikgJiZcbiAgICAvLyBubyBET00gbm9kZSBzaG91bGQgYmUgY29uc2lkZXJlZCBhbiBhcnJheS1saWtlXG4gICAgLy8gYSAnc2VsZWN0JyBlbGVtZW50IGhhcyAnbGVuZ3RoJyBhbmQgJ2l0ZW0nIHByb3BlcnRpZXMgb24gSUU4XG4gICAgKHR5cGVvZiBvYmoubm9kZVR5cGUgIT0gJ251bWJlcicpICYmXG4gICAgKFxuICAgICAgLy8gYSByZWFsIGFycmF5XG4gICAgICAoLy8gSFRNTENvbGxlY3Rpb24vTm9kZUxpc3RcbiAgICAgIChBcnJheS5pc0FycmF5KG9iaikgfHxcbiAgICAgIC8vIGFyZ3VtZW50c1xuICAgICAgKCdjYWxsZWUnIGluIG9iaikgfHwgJ2l0ZW0nIGluIG9iaikpXG4gICAgKVxuICApO1xufVxuXG4vKipcbiAqIEVuc3VyZSB0aGF0IHRoZSBhcmd1bWVudCBpcyBhbiBhcnJheSBieSB3cmFwcGluZyBpdCBpbiBhbiBhcnJheSBpZiBpdCBpcyBub3QuXG4gKiBDcmVhdGVzIGEgY29weSBvZiB0aGUgYXJndW1lbnQgaWYgaXQgaXMgYWxyZWFkeSBhbiBhcnJheS5cbiAqXG4gKiBUaGlzIGlzIG1vc3RseSB1c2VmdWwgaWRpb21hdGljYWxseTpcbiAqXG4gKiAgIHZhciBjcmVhdGVBcnJheUZyb20gPSByZXF1aXJlKCdjcmVhdGVBcnJheUZyb20nKTtcbiAqXG4gKiAgIGZ1bmN0aW9uIHRha2VzT25lT3JNb3JlVGhpbmdzKHRoaW5ncykge1xuICogICAgIHRoaW5ncyA9IGNyZWF0ZUFycmF5RnJvbSh0aGluZ3MpO1xuICogICAgIC4uLlxuICogICB9XG4gKlxuICogVGhpcyBhbGxvd3MgeW91IHRvIHRyZWF0IGB0aGluZ3MnIGFzIGFuIGFycmF5LCBidXQgYWNjZXB0IHNjYWxhcnMgaW4gdGhlIEFQSS5cbiAqXG4gKiBJZiB5b3UgbmVlZCB0byBjb252ZXJ0IGFuIGFycmF5LWxpa2Ugb2JqZWN0LCBsaWtlIGBhcmd1bWVudHNgLCBpbnRvIGFuIGFycmF5XG4gKiB1c2UgdG9BcnJheSBpbnN0ZWFkLlxuICpcbiAqIEBwYXJhbSB7Kn0gb2JqXG4gKiBAcmV0dXJuIHthcnJheX1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXJyYXlGcm9tKG9iaikge1xuICBpZiAoIWhhc0FycmF5TmF0dXJlKG9iaikpIHtcbiAgICByZXR1cm4gW29ial07XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgcmV0dXJuIG9iai5zbGljZSgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0b0FycmF5KG9iaik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVBcnJheUZyb207XG5cbn0se1wiLi90b0FycmF5XCI6MjEzfV0sMTcyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgY3JlYXRlRnVsbFBhZ2VDb21wb25lbnRcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIERlZmVhdCBjaXJjdWxhciByZWZlcmVuY2VzIGJ5IHJlcXVpcmluZyB0aGlzIGRpcmVjdGx5LlxudmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIik7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIENyZWF0ZSBhIGNvbXBvbmVudCB0aGF0IHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIHdoZW4gdW5tb3VudGVkLlxuICpcbiAqIENvbXBvbmVudHMgbGlrZSA8aHRtbD4gPGhlYWQ+IGFuZCA8Ym9keT4gY2FuJ3QgYmUgcmVtb3ZlZCBvciBhZGRlZFxuICogZWFzaWx5IGluIGEgY3Jvc3MtYnJvd3NlciB3YXksIGhvd2V2ZXIgaXQncyB2YWx1YWJsZSB0byBiZSBhYmxlIHRvXG4gKiB0YWtlIGFkdmFudGFnZSBvZiBSZWFjdCdzIHJlY29uY2lsaWF0aW9uIGZvciBzdHlsaW5nIGFuZCA8dGl0bGU+XG4gKiBtYW5hZ2VtZW50LiBTbyB3ZSBqdXN0IGRvY3VtZW50IGl0IGFuZCB0aHJvdyBpbiBkYW5nZXJvdXMgY2FzZXMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgdGFnIHRvIHdyYXBcbiAqIEByZXR1cm4ge2Z1bmN0aW9ufSBjb252ZW5pZW5jZSBjb25zdHJ1Y3RvciBvZiBuZXcgY29tcG9uZW50XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUZ1bGxQYWdlQ29tcG9uZW50KHRhZykge1xuICB2YXIgZWxlbWVudEZhY3RvcnkgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSh0YWcpO1xuXG4gIHZhciBGdWxsUGFnZUNvbXBvbmVudCA9IFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50LmNyZWF0ZUNsYXNzKHtcbiAgICBkaXNwbGF5TmFtZTogJ1JlYWN0RnVsbFBhZ2VDb21wb25lbnQnICsgdGFnLFxuXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICAgICAgZmFsc2UsXG4gICAgICAgICclcyB0cmllZCB0byB1bm1vdW50LiBCZWNhdXNlIG9mIGNyb3NzLWJyb3dzZXIgcXVpcmtzIGl0IGlzICcgK1xuICAgICAgICAnaW1wb3NzaWJsZSB0byB1bm1vdW50IHNvbWUgdG9wLWxldmVsIGNvbXBvbmVudHMgKGVnIDxodG1sPiwgPGhlYWQ+LCAnICtcbiAgICAgICAgJ2FuZCA8Ym9keT4pIHJlbGlhYmx5IGFuZCBlZmZpY2llbnRseS4gVG8gZml4IHRoaXMsIGhhdmUgYSBzaW5nbGUgJyArXG4gICAgICAgICd0b3AtbGV2ZWwgY29tcG9uZW50IHRoYXQgbmV2ZXIgdW5tb3VudHMgcmVuZGVyIHRoZXNlIGVsZW1lbnRzLicsXG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IuZGlzcGxheU5hbWVcbiAgICAgICkgOiBpbnZhcmlhbnQoZmFsc2UpKTtcbiAgICB9LFxuXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBlbGVtZW50RmFjdG9yeSh0aGlzLnByb3BzKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBGdWxsUGFnZUNvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVGdWxsUGFnZUNvbXBvbmVudDtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIjoxMDMsXCIuL1JlYWN0RWxlbWVudFwiOjEyMSxcIi4vaW52YXJpYW50XCI6MTk2LFwiX3Byb2Nlc3NcIjoxOX1dLDE3MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGNyZWF0ZU5vZGVzRnJvbU1hcmt1cFxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKmpzbGludCBldmlsOiB0cnVlLCBzdWI6IHRydWUgKi9cblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG5cbnZhciBjcmVhdGVBcnJheUZyb20gPSByZXF1aXJlKFwiLi9jcmVhdGVBcnJheUZyb21cIik7XG52YXIgZ2V0TWFya3VwV3JhcCA9IHJlcXVpcmUoXCIuL2dldE1hcmt1cFdyYXBcIik7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIER1bW15IGNvbnRhaW5lciB1c2VkIHRvIHJlbmRlciBhbGwgbWFya3VwLlxuICovXG52YXIgZHVtbXlOb2RlID1cbiAgRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykgOiBudWxsO1xuXG4vKipcbiAqIFBhdHRlcm4gdXNlZCBieSBgZ2V0Tm9kZU5hbWVgLlxuICovXG52YXIgbm9kZU5hbWVQYXR0ZXJuID0gL15cXHMqPChcXHcrKS87XG5cbi8qKlxuICogRXh0cmFjdHMgdGhlIGBub2RlTmFtZWAgb2YgdGhlIGZpcnN0IGVsZW1lbnQgaW4gYSBzdHJpbmcgb2YgbWFya3VwLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgU3RyaW5nIG9mIG1hcmt1cC5cbiAqIEByZXR1cm4gez9zdHJpbmd9IE5vZGUgbmFtZSBvZiB0aGUgc3VwcGxpZWQgbWFya3VwLlxuICovXG5mdW5jdGlvbiBnZXROb2RlTmFtZShtYXJrdXApIHtcbiAgdmFyIG5vZGVOYW1lTWF0Y2ggPSBtYXJrdXAubWF0Y2gobm9kZU5hbWVQYXR0ZXJuKTtcbiAgcmV0dXJuIG5vZGVOYW1lTWF0Y2ggJiYgbm9kZU5hbWVNYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgbm9kZXMgcmVuZGVyZWQgZnJvbSB0aGUgc3VwcGxpZWQgbWFya3VwLiBUaGVcbiAqIG9wdGlvbmFsbHkgc3VwcGxpZWQgYGhhbmRsZVNjcmlwdGAgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIG9uY2UgZm9yIGVhY2hcbiAqIDxzY3JpcHQ+IGVsZW1lbnQgdGhhdCBpcyByZW5kZXJlZC4gSWYgbm8gYGhhbmRsZVNjcmlwdGAgZnVuY3Rpb24gaXMgc3VwcGxpZWQsXG4gKiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGlmIGFueSA8c2NyaXB0PiBlbGVtZW50cyBhcmUgcmVuZGVyZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBBIHN0cmluZyBvZiB2YWxpZCBIVE1MIG1hcmt1cC5cbiAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBoYW5kbGVTY3JpcHQgSW52b2tlZCBvbmNlIGZvciBlYWNoIHJlbmRlcmVkIDxzY3JpcHQ+LlxuICogQHJldHVybiB7YXJyYXk8RE9NRWxlbWVudHxET01UZXh0Tm9kZT59IEFuIGFycmF5IG9mIHJlbmRlcmVkIG5vZGVzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVOb2Rlc0Zyb21NYXJrdXAobWFya3VwLCBoYW5kbGVTY3JpcHQpIHtcbiAgdmFyIG5vZGUgPSBkdW1teU5vZGU7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoISFkdW1teU5vZGUsICdjcmVhdGVOb2Rlc0Zyb21NYXJrdXAgZHVtbXkgbm90IGluaXRpYWxpemVkJykgOiBpbnZhcmlhbnQoISFkdW1teU5vZGUpKTtcbiAgdmFyIG5vZGVOYW1lID0gZ2V0Tm9kZU5hbWUobWFya3VwKTtcblxuICB2YXIgd3JhcCA9IG5vZGVOYW1lICYmIGdldE1hcmt1cFdyYXAobm9kZU5hbWUpO1xuICBpZiAod3JhcCkge1xuICAgIG5vZGUuaW5uZXJIVE1MID0gd3JhcFsxXSArIG1hcmt1cCArIHdyYXBbMl07XG5cbiAgICB2YXIgd3JhcERlcHRoID0gd3JhcFswXTtcbiAgICB3aGlsZSAod3JhcERlcHRoLS0pIHtcbiAgICAgIG5vZGUgPSBub2RlLmxhc3RDaGlsZDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbm9kZS5pbm5lckhUTUwgPSBtYXJrdXA7XG4gIH1cblxuICB2YXIgc2NyaXB0cyA9IG5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpO1xuICBpZiAoc2NyaXB0cy5sZW5ndGgpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICAgaGFuZGxlU2NyaXB0LFxuICAgICAgJ2NyZWF0ZU5vZGVzRnJvbU1hcmt1cCguLi4pOiBVbmV4cGVjdGVkIDxzY3JpcHQ+IGVsZW1lbnQgcmVuZGVyZWQuJ1xuICAgICkgOiBpbnZhcmlhbnQoaGFuZGxlU2NyaXB0KSk7XG4gICAgY3JlYXRlQXJyYXlGcm9tKHNjcmlwdHMpLmZvckVhY2goaGFuZGxlU2NyaXB0KTtcbiAgfVxuXG4gIHZhciBub2RlcyA9IGNyZWF0ZUFycmF5RnJvbShub2RlLmNoaWxkTm9kZXMpO1xuICB3aGlsZSAobm9kZS5sYXN0Q2hpbGQpIHtcbiAgICBub2RlLnJlbW92ZUNoaWxkKG5vZGUubGFzdENoaWxkKTtcbiAgfVxuICByZXR1cm4gbm9kZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlTm9kZXNGcm9tTWFya3VwO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOjkwLFwiLi9jcmVhdGVBcnJheUZyb21cIjoxNzEsXCIuL2dldE1hcmt1cFdyYXBcIjoxODgsXCIuL2ludmFyaWFudFwiOjE5NixcIl9wcm9jZXNzXCI6MTl9XSwxNzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGN4XG4gKi9cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gbWFyayBzdHJpbmcgbGl0ZXJhbHMgcmVwcmVzZW50aW5nIENTUyBjbGFzcyBuYW1lc1xuICogc28gdGhhdCB0aGV5IGNhbiBiZSB0cmFuc2Zvcm1lZCBzdGF0aWNhbGx5LiBUaGlzIGFsbG93cyBmb3IgbW9kdWxhcml6YXRpb25cbiAqIGFuZCBtaW5pZmljYXRpb24gb2YgQ1NTIGNsYXNzIG5hbWVzLlxuICpcbiAqIEluIHN0YXRpY191cHN0cmVhbSwgdGhpcyBmdW5jdGlvbiBpcyBhY3R1YWxseSBpbXBsZW1lbnRlZCwgYnV0IGl0IHNob3VsZFxuICogZXZlbnR1YWxseSBiZSByZXBsYWNlZCB3aXRoIHNvbWV0aGluZyBtb3JlIGRlc2NyaXB0aXZlLCBhbmQgdGhlIHRyYW5zZm9ybVxuICogdGhhdCBpcyB1c2VkIGluIHRoZSBtYWluIHN0YWNrIHNob3VsZCBiZSBwb3J0ZWQgZm9yIHVzZSBlbHNld2hlcmUuXG4gKlxuICogQHBhcmFtIHN0cmluZ3xvYmplY3QgY2xhc3NOYW1lIHRvIG1vZHVsYXJpemUsIG9yIGFuIG9iamVjdCBvZiBrZXkvdmFsdWVzLlxuICogICAgICAgICAgICAgICAgICAgICAgSW4gdGhlIG9iamVjdCBjYXNlLCB0aGUgdmFsdWVzIGFyZSBjb25kaXRpb25zIHRoYXRcbiAqICAgICAgICAgICAgICAgICAgICAgIGRldGVybWluZSBpZiB0aGUgY2xhc3NOYW1lIGtleXMgc2hvdWxkIGJlIGluY2x1ZGVkLlxuICogQHBhcmFtIFtzdHJpbmcgLi4uXSAgVmFyaWFibGUgbGlzdCBvZiBjbGFzc05hbWVzIGluIHRoZSBzdHJpbmcgY2FzZS5cbiAqIEByZXR1cm4gc3RyaW5nICAgICAgIFJlbmRlcmFibGUgc3BhY2Utc2VwYXJhdGVkIENTUyBjbGFzc05hbWUuXG4gKi9cbmZ1bmN0aW9uIGN4KGNsYXNzTmFtZXMpIHtcbiAgaWYgKHR5cGVvZiBjbGFzc05hbWVzID09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGNsYXNzTmFtZXMpLmZpbHRlcihmdW5jdGlvbihjbGFzc05hbWUpIHtcbiAgICAgIHJldHVybiBjbGFzc05hbWVzW2NsYXNzTmFtZV07XG4gICAgfSkuam9pbignICcpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuam9pbi5jYWxsKGFyZ3VtZW50cywgJyAnKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGN4O1xuXG59LHt9XSwxNzU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGRhbmdlcm91c1N0eWxlVmFsdWVcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBDU1NQcm9wZXJ0eSA9IHJlcXVpcmUoXCIuL0NTU1Byb3BlcnR5XCIpO1xuXG52YXIgaXNVbml0bGVzc051bWJlciA9IENTU1Byb3BlcnR5LmlzVW5pdGxlc3NOdW1iZXI7XG5cbi8qKlxuICogQ29udmVydCBhIHZhbHVlIGludG8gdGhlIHByb3BlciBjc3Mgd3JpdGFibGUgdmFsdWUuIFRoZSBzdHlsZSBuYW1lIGBuYW1lYFxuICogc2hvdWxkIGJlIGxvZ2ljYWwgKG5vIGh5cGhlbnMpLCBhcyBzcGVjaWZpZWRcbiAqIGluIGBDU1NQcm9wZXJ0eS5pc1VuaXRsZXNzTnVtYmVyYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBDU1MgcHJvcGVydHkgbmFtZSBzdWNoIGFzIGB0b3BNYXJnaW5gLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBDU1MgcHJvcGVydHkgdmFsdWUgc3VjaCBhcyBgMTBweGAuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IE5vcm1hbGl6ZWQgc3R5bGUgdmFsdWUgd2l0aCBkaW1lbnNpb25zIGFwcGxpZWQuXG4gKi9cbmZ1bmN0aW9uIGRhbmdlcm91c1N0eWxlVmFsdWUobmFtZSwgdmFsdWUpIHtcbiAgLy8gTm90ZSB0aGF0IHdlJ3ZlIHJlbW92ZWQgZXNjYXBlVGV4dEZvckJyb3dzZXIoKSBjYWxscyBoZXJlIHNpbmNlIHRoZVxuICAvLyB3aG9sZSBzdHJpbmcgd2lsbCBiZSBlc2NhcGVkIHdoZW4gdGhlIGF0dHJpYnV0ZSBpcyBpbmplY3RlZCBpbnRvXG4gIC8vIHRoZSBtYXJrdXAuIElmIHlvdSBwcm92aWRlIHVuc2FmZSB1c2VyIGRhdGEgaGVyZSB0aGV5IGNhbiBpbmplY3RcbiAgLy8gYXJiaXRyYXJ5IENTUyB3aGljaCBtYXkgYmUgcHJvYmxlbWF0aWMgKEkgY291bGRuJ3QgcmVwcm8gdGhpcyk6XG4gIC8vIGh0dHBzOi8vd3d3Lm93YXNwLm9yZy9pbmRleC5waHAvWFNTX0ZpbHRlcl9FdmFzaW9uX0NoZWF0X1NoZWV0XG4gIC8vIGh0dHA6Ly93d3cudGhlc3Bhbm5lci5jby51ay8yMDA3LzExLzI2L3VsdGltYXRlLXhzcy1jc3MtaW5qZWN0aW9uL1xuICAvLyBUaGlzIGlzIG5vdCBhbiBYU1MgaG9sZSBidXQgaW5zdGVhZCBhIHBvdGVudGlhbCBDU1MgaW5qZWN0aW9uIGlzc3VlXG4gIC8vIHdoaWNoIGhhcyBsZWFkIHRvIGEgZ3JlYXRlciBkaXNjdXNzaW9uIGFib3V0IGhvdyB3ZSdyZSBnb2luZyB0b1xuICAvLyB0cnVzdCBVUkxzIG1vdmluZyBmb3J3YXJkLiBTZWUgIzIxMTU5MDFcblxuICB2YXIgaXNFbXB0eSA9IHZhbHVlID09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgfHwgdmFsdWUgPT09ICcnO1xuICBpZiAoaXNFbXB0eSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHZhciBpc05vbk51bWVyaWMgPSBpc05hTih2YWx1ZSk7XG4gIGlmIChpc05vbk51bWVyaWMgfHwgdmFsdWUgPT09IDAgfHxcbiAgICAgIGlzVW5pdGxlc3NOdW1iZXIuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgaXNVbml0bGVzc051bWJlcltuYW1lXSkge1xuICAgIHJldHVybiAnJyArIHZhbHVlOyAvLyBjYXN0IHRvIHN0cmluZ1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWx1ZSA9IHZhbHVlLnRyaW0oKTtcbiAgfVxuICByZXR1cm4gdmFsdWUgKyAncHgnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRhbmdlcm91c1N0eWxlVmFsdWU7XG5cbn0se1wiLi9DU1NQcm9wZXJ0eVwiOjcyfV0sMTc2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZGVwcmVjYXRlZFxuICovXG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKFwiLi9PYmplY3QuYXNzaWduXCIpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiLi93YXJuaW5nXCIpO1xuXG4vKipcbiAqIFRoaXMgd2lsbCBsb2cgYSBzaW5nbGUgZGVwcmVjYXRpb24gbm90aWNlIHBlciBmdW5jdGlvbiBhbmQgZm9yd2FyZCB0aGUgY2FsbFxuICogb24gdG8gdGhlIG5ldyBBUEkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVzcGFjZSBUaGUgbmFtZXNwYWNlIG9mIHRoZSBjYWxsLCBlZyAnUmVhY3QnXG4gKiBAcGFyYW0ge3N0cmluZ30gb2xkTmFtZSBUaGUgb2xkIGZ1bmN0aW9uIG5hbWUsIGVnICdyZW5kZXJDb21wb25lbnQnXG4gKiBAcGFyYW0ge3N0cmluZ30gbmV3TmFtZSBUaGUgbmV3IGZ1bmN0aW9uIG5hbWUsIGVnICdyZW5kZXInXG4gKiBAcGFyYW0geyp9IGN0eCBUaGUgY29udGV4dCB0aGlzIGZvcndhcmRlZCBjYWxsIHNob3VsZCBydW4gaW5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBmb3J3YXJkIG9uIHRvXG4gKiBAcmV0dXJuIHsqfSBXaWxsIGJlIHRoZSB2YWx1ZSBhcyByZXR1cm5lZCBmcm9tIGBmbmBcbiAqL1xuZnVuY3Rpb24gZGVwcmVjYXRlZChuYW1lc3BhY2UsIG9sZE5hbWUsIG5ld05hbWUsIGN0eCwgZm4pIHtcbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgdmFyIG5ld0ZuID0gZnVuY3Rpb24oKSB7XG4gICAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgICAgd2FybmVkLFxuICAgICAgICAobmFtZXNwYWNlICsgXCIuXCIgKyBvbGROYW1lICsgXCIgd2lsbCBiZSBkZXByZWNhdGVkIGluIGEgZnV0dXJlIHZlcnNpb24uIFwiKSArXG4gICAgICAgIChcIlVzZSBcIiArIG5hbWVzcGFjZSArIFwiLlwiICsgbmV3TmFtZSArIFwiIGluc3RlYWQuXCIpXG4gICAgICApIDogbnVsbCk7XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKTtcbiAgICB9O1xuICAgIG5ld0ZuLmRpc3BsYXlOYW1lID0gKG5hbWVzcGFjZSArIFwiX1wiICsgb2xkTmFtZSk7XG4gICAgLy8gV2UgbmVlZCB0byBtYWtlIHN1cmUgYWxsIHByb3BlcnRpZXMgb2YgdGhlIG9yaWdpbmFsIGZuIGFyZSBjb3BpZWQgb3Zlci5cbiAgICAvLyBJbiBwYXJ0aWN1bGFyLCB0aGlzIGlzIG5lZWRlZCB0byBzdXBwb3J0IFByb3BUeXBlc1xuICAgIHJldHVybiBhc3NpZ24obmV3Rm4sIGZuKTtcbiAgfVxuXG4gIHJldHVybiBmbjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkZXByZWNhdGVkO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9PYmplY3QuYXNzaWduXCI6OTUsXCIuL3dhcm5pbmdcIjoyMTUsXCJfcHJvY2Vzc1wiOjE5fV0sMTc3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBlbXB0eUZ1bmN0aW9uXG4gKi9cblxuZnVuY3Rpb24gbWFrZUVtcHR5RnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYXJnO1xuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhbmQgZGlzY2FyZHMgaW5wdXRzOyBpdCBoYXMgbm8gc2lkZSBlZmZlY3RzLiBUaGlzIGlzXG4gKiBwcmltYXJpbHkgdXNlZnVsIGlkaW9tYXRpY2FsbHkgZm9yIG92ZXJyaWRhYmxlIGZ1bmN0aW9uIGVuZHBvaW50cyB3aGljaFxuICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cbiAqL1xuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5cbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnMgPSBtYWtlRW1wdHlGdW5jdGlvbjtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKGZhbHNlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlID0gbWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCA9IG1ha2VFbXB0eUZ1bmN0aW9uKG51bGwpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH07XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQgPSBmdW5jdGlvbihhcmcpIHsgcmV0dXJuIGFyZzsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eUZ1bmN0aW9uO1xuXG59LHt9XSwxNzg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBlbXB0eU9iamVjdFxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgZW1wdHlPYmplY3QgPSB7fTtcblxuaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICBPYmplY3QuZnJlZXplKGVtcHR5T2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eU9iamVjdDtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIl9wcm9jZXNzXCI6MTl9XSwxNzk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGVzY2FwZVRleHRGb3JCcm93c2VyXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRVNDQVBFX0xPT0tVUCA9IHtcbiAgXCImXCI6IFwiJmFtcDtcIixcbiAgXCI+XCI6IFwiJmd0O1wiLFxuICBcIjxcIjogXCImbHQ7XCIsXG4gIFwiXFxcIlwiOiBcIiZxdW90O1wiLFxuICBcIidcIjogXCImI3gyNztcIlxufTtcblxudmFyIEVTQ0FQRV9SRUdFWCA9IC9bJj48XCInXS9nO1xuXG5mdW5jdGlvbiBlc2NhcGVyKG1hdGNoKSB7XG4gIHJldHVybiBFU0NBUEVfTE9PS1VQW21hdGNoXTtcbn1cblxuLyoqXG4gKiBFc2NhcGVzIHRleHQgdG8gcHJldmVudCBzY3JpcHRpbmcgYXR0YWNrcy5cbiAqXG4gKiBAcGFyYW0geyp9IHRleHQgVGV4dCB2YWx1ZSB0byBlc2NhcGUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEFuIGVzY2FwZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBlc2NhcGVUZXh0Rm9yQnJvd3Nlcih0ZXh0KSB7XG4gIHJldHVybiAoJycgKyB0ZXh0KS5yZXBsYWNlKEVTQ0FQRV9SRUdFWCwgZXNjYXBlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXNjYXBlVGV4dEZvckJyb3dzZXI7XG5cbn0se31dLDE4MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGZsYXR0ZW5DaGlsZHJlblxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgUmVhY3RUZXh0Q29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3RUZXh0Q29tcG9uZW50XCIpO1xuXG52YXIgdHJhdmVyc2VBbGxDaGlsZHJlbiA9IHJlcXVpcmUoXCIuL3RyYXZlcnNlQWxsQ2hpbGRyZW5cIik7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbi8qKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gdHJhdmVyc2VDb250ZXh0IENvbnRleHQgcGFzc2VkIHRocm91Z2ggdHJhdmVyc2FsLlxuICogQHBhcmFtIHs/UmVhY3RDb21wb25lbnR9IGNoaWxkIFJlYWN0IGNoaWxkIGNvbXBvbmVudC5cbiAqIEBwYXJhbSB7IXN0cmluZ30gbmFtZSBTdHJpbmcgbmFtZSBvZiBrZXkgcGF0aCB0byBjaGlsZC5cbiAqL1xuZnVuY3Rpb24gZmxhdHRlblNpbmdsZUNoaWxkSW50b0NvbnRleHQodHJhdmVyc2VDb250ZXh0LCBjaGlsZCwgbmFtZSkge1xuICAvLyBXZSBmb3VuZCBhIGNvbXBvbmVudCBpbnN0YW5jZS5cbiAgdmFyIHJlc3VsdCA9IHRyYXZlcnNlQ29udGV4dDtcbiAgdmFyIGtleVVuaXF1ZSA9ICFyZXN1bHQuaGFzT3duUHJvcGVydHkobmFtZSk7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgIGtleVVuaXF1ZSxcbiAgICAnZmxhdHRlbkNoaWxkcmVuKC4uLik6IEVuY291bnRlcmVkIHR3byBjaGlsZHJlbiB3aXRoIHRoZSBzYW1lIGtleSwgJyArXG4gICAgJ2Alc2AuIENoaWxkIGtleXMgbXVzdCBiZSB1bmlxdWU7IHdoZW4gdHdvIGNoaWxkcmVuIHNoYXJlIGEga2V5LCBvbmx5ICcgK1xuICAgICd0aGUgZmlyc3QgY2hpbGQgd2lsbCBiZSB1c2VkLicsXG4gICAgbmFtZVxuICApIDogbnVsbCk7XG4gIGlmIChrZXlVbmlxdWUgJiYgY2hpbGQgIT0gbnVsbCkge1xuICAgIHZhciB0eXBlID0gdHlwZW9mIGNoaWxkO1xuICAgIHZhciBub3JtYWxpemVkVmFsdWU7XG5cbiAgICBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG5vcm1hbGl6ZWRWYWx1ZSA9IFJlYWN0VGV4dENvbXBvbmVudChjaGlsZCk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJykge1xuICAgICAgbm9ybWFsaXplZFZhbHVlID0gUmVhY3RUZXh0Q29tcG9uZW50KCcnICsgY2hpbGQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBub3JtYWxpemVkVmFsdWUgPSBjaGlsZDtcbiAgICB9XG5cbiAgICByZXN1bHRbbmFtZV0gPSBub3JtYWxpemVkVmFsdWU7XG4gIH1cbn1cblxuLyoqXG4gKiBGbGF0dGVucyBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmAuIEFueSBudWxsXG4gKiBjaGlsZHJlbiB3aWxsIG5vdCBiZSBpbmNsdWRlZCBpbiB0aGUgcmVzdWx0aW5nIG9iamVjdC5cbiAqIEByZXR1cm4geyFvYmplY3R9IGZsYXR0ZW5lZCBjaGlsZHJlbiBrZXllZCBieSBuYW1lLlxuICovXG5mdW5jdGlvbiBmbGF0dGVuQ2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHt9O1xuICB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmbGF0dGVuU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCwgcmVzdWx0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuQ2hpbGRyZW47XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL1JlYWN0VGV4dENvbXBvbmVudFwiOjE0NyxcIi4vdHJhdmVyc2VBbGxDaGlsZHJlblwiOjIxNCxcIi4vd2FybmluZ1wiOjIxNSxcIl9wcm9jZXNzXCI6MTl9XSwxODE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBmb2N1c05vZGVcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGUgaW5wdXQvdGV4dGFyZWEgdG8gZm9jdXNcbiAqL1xuZnVuY3Rpb24gZm9jdXNOb2RlKG5vZGUpIHtcbiAgLy8gSUU4IGNhbiB0aHJvdyBcIkNhbid0IG1vdmUgZm9jdXMgdG8gdGhlIGNvbnRyb2wgYmVjYXVzZSBpdCBpcyBpbnZpc2libGUsXG4gIC8vIG5vdCBlbmFibGVkLCBvciBvZiBhIHR5cGUgdGhhdCBkb2VzIG5vdCBhY2NlcHQgdGhlIGZvY3VzLlwiIGZvciBhbGwga2luZHMgb2ZcbiAgLy8gcmVhc29ucyB0aGF0IGFyZSB0b28gZXhwZW5zaXZlIGFuZCBmcmFnaWxlIHRvIHRlc3QuXG4gIHRyeSB7XG4gICAgbm9kZS5mb2N1cygpO1xuICB9IGNhdGNoKGUpIHtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZvY3VzTm9kZTtcblxufSx7fV0sMTgyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBmb3JFYWNoQWNjdW11bGF0ZWRcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBAcGFyYW0ge2FycmF5fSBhbiBcImFjY3VtdWxhdGlvblwiIG9mIGl0ZW1zIHdoaWNoIGlzIGVpdGhlciBhbiBBcnJheSBvclxuICogYSBzaW5nbGUgaXRlbS4gVXNlZnVsIHdoZW4gcGFpcmVkIHdpdGggdGhlIGBhY2N1bXVsYXRlYCBtb2R1bGUuIFRoaXMgaXMgYVxuICogc2ltcGxlIHV0aWxpdHkgdGhhdCBhbGxvd3MgdXMgdG8gcmVhc29uIGFib3V0IGEgY29sbGVjdGlvbiBvZiBpdGVtcywgYnV0XG4gKiBoYW5kbGluZyB0aGUgY2FzZSB3aGVuIHRoZXJlIGlzIGV4YWN0bHkgb25lIGl0ZW0gKGFuZCB3ZSBkbyBub3QgbmVlZCB0b1xuICogYWxsb2NhdGUgYW4gYXJyYXkpLlxuICovXG52YXIgZm9yRWFjaEFjY3VtdWxhdGVkID0gZnVuY3Rpb24oYXJyLCBjYiwgc2NvcGUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGFyci5mb3JFYWNoKGNiLCBzY29wZSk7XG4gIH0gZWxzZSBpZiAoYXJyKSB7XG4gICAgY2IuY2FsbChzY29wZSwgYXJyKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmb3JFYWNoQWNjdW11bGF0ZWQ7XG5cbn0se31dLDE4MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0QWN0aXZlRWxlbWVudFxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKipcbiAqIFNhbWUgYXMgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBidXQgd3JhcHMgaW4gYSB0cnktY2F0Y2ggYmxvY2suIEluIElFIGl0IGlzXG4gKiBub3Qgc2FmZSB0byBjYWxsIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaWYgdGhlcmUgaXMgbm90aGluZyBmb2N1c2VkLlxuICpcbiAqIFRoZSBhY3RpdmVFbGVtZW50IHdpbGwgYmUgbnVsbCBvbmx5IGlmIHRoZSBkb2N1bWVudCBib2R5IGlzIG5vdCB5ZXQgZGVmaW5lZC5cbiAqL1xuZnVuY3Rpb24gZ2V0QWN0aXZlRWxlbWVudCgpIC8qP0RPTUVsZW1lbnQqLyB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgfHwgZG9jdW1lbnQuYm9keTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5ib2R5O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWN0aXZlRWxlbWVudDtcblxufSx7fV0sMTg0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRFdmVudENoYXJDb2RlXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIGBjaGFyQ29kZWAgcmVwcmVzZW50cyB0aGUgYWN0dWFsIFwiY2hhcmFjdGVyIGNvZGVcIiBhbmQgaXMgc2FmZSB0byB1c2Ugd2l0aFxuICogYFN0cmluZy5mcm9tQ2hhckNvZGVgLiBBcyBzdWNoLCBvbmx5IGtleXMgdGhhdCBjb3JyZXNwb25kIHRvIHByaW50YWJsZVxuICogY2hhcmFjdGVycyBwcm9kdWNlIGEgdmFsaWQgYGNoYXJDb2RlYCwgdGhlIG9ubHkgZXhjZXB0aW9uIHRvIHRoaXMgaXMgRW50ZXIuXG4gKiBUaGUgVGFiLWtleSBpcyBjb25zaWRlcmVkIG5vbi1wcmludGFibGUgYW5kIGRvZXMgbm90IGhhdmUgYSBgY2hhckNvZGVgLFxuICogcHJlc3VtYWJseSBiZWNhdXNlIGl0IGRvZXMgbm90IHByb2R1Y2UgYSB0YWItY2hhcmFjdGVyIGluIGJyb3dzZXJzLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEByZXR1cm4ge3N0cmluZ30gTm9ybWFsaXplZCBgY2hhckNvZGVgIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KSB7XG4gIHZhciBjaGFyQ29kZTtcbiAgdmFyIGtleUNvZGUgPSBuYXRpdmVFdmVudC5rZXlDb2RlO1xuXG4gIGlmICgnY2hhckNvZGUnIGluIG5hdGl2ZUV2ZW50KSB7XG4gICAgY2hhckNvZGUgPSBuYXRpdmVFdmVudC5jaGFyQ29kZTtcblxuICAgIC8vIEZGIGRvZXMgbm90IHNldCBgY2hhckNvZGVgIGZvciB0aGUgRW50ZXIta2V5LCBjaGVjayBhZ2FpbnN0IGBrZXlDb2RlYC5cbiAgICBpZiAoY2hhckNvZGUgPT09IDAgJiYga2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgIGNoYXJDb2RlID0gMTM7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIElFOCBkb2VzIG5vdCBpbXBsZW1lbnQgYGNoYXJDb2RlYCwgYnV0IGBrZXlDb2RlYCBoYXMgdGhlIGNvcnJlY3QgdmFsdWUuXG4gICAgY2hhckNvZGUgPSBrZXlDb2RlO1xuICB9XG5cbiAgLy8gU29tZSBub24tcHJpbnRhYmxlIGtleXMgYXJlIHJlcG9ydGVkIGluIGBjaGFyQ29kZWAvYGtleUNvZGVgLCBkaXNjYXJkIHRoZW0uXG4gIC8vIE11c3Qgbm90IGRpc2NhcmQgdGhlIChub24tKXByaW50YWJsZSBFbnRlci1rZXkuXG4gIGlmIChjaGFyQ29kZSA+PSAzMiB8fCBjaGFyQ29kZSA9PT0gMTMpIHtcbiAgICByZXR1cm4gY2hhckNvZGU7XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRFdmVudENoYXJDb2RlO1xuXG59LHt9XSwxODU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldEV2ZW50S2V5XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgZ2V0RXZlbnRDaGFyQ29kZSA9IHJlcXVpcmUoXCIuL2dldEV2ZW50Q2hhckNvZGVcIik7XG5cbi8qKlxuICogTm9ybWFsaXphdGlvbiBvZiBkZXByZWNhdGVkIEhUTUw1IGBrZXlgIHZhbHVlc1xuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudCNLZXlfbmFtZXNcbiAqL1xudmFyIG5vcm1hbGl6ZUtleSA9IHtcbiAgJ0VzYyc6ICdFc2NhcGUnLFxuICAnU3BhY2ViYXInOiAnICcsXG4gICdMZWZ0JzogJ0Fycm93TGVmdCcsXG4gICdVcCc6ICdBcnJvd1VwJyxcbiAgJ1JpZ2h0JzogJ0Fycm93UmlnaHQnLFxuICAnRG93bic6ICdBcnJvd0Rvd24nLFxuICAnRGVsJzogJ0RlbGV0ZScsXG4gICdXaW4nOiAnT1MnLFxuICAnTWVudSc6ICdDb250ZXh0TWVudScsXG4gICdBcHBzJzogJ0NvbnRleHRNZW51JyxcbiAgJ1Njcm9sbCc6ICdTY3JvbGxMb2NrJyxcbiAgJ01velByaW50YWJsZUtleSc6ICdVbmlkZW50aWZpZWQnXG59O1xuXG4vKipcbiAqIFRyYW5zbGF0aW9uIGZyb20gbGVnYWN5IGBrZXlDb2RlYCB0byBIVE1MNSBga2V5YFxuICogT25seSBzcGVjaWFsIGtleXMgc3VwcG9ydGVkLCBhbGwgb3RoZXJzIGRlcGVuZCBvbiBrZXlib2FyZCBsYXlvdXQgb3IgYnJvd3NlclxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudCNLZXlfbmFtZXNcbiAqL1xudmFyIHRyYW5zbGF0ZVRvS2V5ID0ge1xuICA4OiAnQmFja3NwYWNlJyxcbiAgOTogJ1RhYicsXG4gIDEyOiAnQ2xlYXInLFxuICAxMzogJ0VudGVyJyxcbiAgMTY6ICdTaGlmdCcsXG4gIDE3OiAnQ29udHJvbCcsXG4gIDE4OiAnQWx0JyxcbiAgMTk6ICdQYXVzZScsXG4gIDIwOiAnQ2Fwc0xvY2snLFxuICAyNzogJ0VzY2FwZScsXG4gIDMyOiAnICcsXG4gIDMzOiAnUGFnZVVwJyxcbiAgMzQ6ICdQYWdlRG93bicsXG4gIDM1OiAnRW5kJyxcbiAgMzY6ICdIb21lJyxcbiAgMzc6ICdBcnJvd0xlZnQnLFxuICAzODogJ0Fycm93VXAnLFxuICAzOTogJ0Fycm93UmlnaHQnLFxuICA0MDogJ0Fycm93RG93bicsXG4gIDQ1OiAnSW5zZXJ0JyxcbiAgNDY6ICdEZWxldGUnLFxuICAxMTI6ICdGMScsIDExMzogJ0YyJywgMTE0OiAnRjMnLCAxMTU6ICdGNCcsIDExNjogJ0Y1JywgMTE3OiAnRjYnLFxuICAxMTg6ICdGNycsIDExOTogJ0Y4JywgMTIwOiAnRjknLCAxMjE6ICdGMTAnLCAxMjI6ICdGMTEnLCAxMjM6ICdGMTInLFxuICAxNDQ6ICdOdW1Mb2NrJyxcbiAgMTQ1OiAnU2Nyb2xsTG9jaycsXG4gIDIyNDogJ01ldGEnXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEByZXR1cm4ge3N0cmluZ30gTm9ybWFsaXplZCBga2V5YCBwcm9wZXJ0eS5cbiAqL1xuZnVuY3Rpb24gZ2V0RXZlbnRLZXkobmF0aXZlRXZlbnQpIHtcbiAgaWYgKG5hdGl2ZUV2ZW50LmtleSkge1xuICAgIC8vIE5vcm1hbGl6ZSBpbmNvbnNpc3RlbnQgdmFsdWVzIHJlcG9ydGVkIGJ5IGJyb3dzZXJzIGR1ZSB0b1xuICAgIC8vIGltcGxlbWVudGF0aW9ucyBvZiBhIHdvcmtpbmcgZHJhZnQgc3BlY2lmaWNhdGlvbi5cblxuICAgIC8vIEZpcmVGb3ggaW1wbGVtZW50cyBga2V5YCBidXQgcmV0dXJucyBgTW96UHJpbnRhYmxlS2V5YCBmb3IgYWxsXG4gICAgLy8gcHJpbnRhYmxlIGNoYXJhY3RlcnMgKG5vcm1hbGl6ZWQgdG8gYFVuaWRlbnRpZmllZGApLCBpZ25vcmUgaXQuXG4gICAgdmFyIGtleSA9IG5vcm1hbGl6ZUtleVtuYXRpdmVFdmVudC5rZXldIHx8IG5hdGl2ZUV2ZW50LmtleTtcbiAgICBpZiAoa2V5ICE9PSAnVW5pZGVudGlmaWVkJykge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cblxuICAvLyBCcm93c2VyIGRvZXMgbm90IGltcGxlbWVudCBga2V5YCwgcG9seWZpbGwgYXMgbXVjaCBvZiBpdCBhcyB3ZSBjYW4uXG4gIGlmIChuYXRpdmVFdmVudC50eXBlID09PSAna2V5cHJlc3MnKSB7XG4gICAgdmFyIGNoYXJDb2RlID0gZ2V0RXZlbnRDaGFyQ29kZShuYXRpdmVFdmVudCk7XG5cbiAgICAvLyBUaGUgZW50ZXIta2V5IGlzIHRlY2huaWNhbGx5IGJvdGggcHJpbnRhYmxlIGFuZCBub24tcHJpbnRhYmxlIGFuZCBjYW5cbiAgICAvLyB0aHVzIGJlIGNhcHR1cmVkIGJ5IGBrZXlwcmVzc2AsIG5vIG90aGVyIG5vbi1wcmludGFibGUga2V5IHNob3VsZC5cbiAgICByZXR1cm4gY2hhckNvZGUgPT09IDEzID8gJ0VudGVyJyA6IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUpO1xuICB9XG4gIGlmIChuYXRpdmVFdmVudC50eXBlID09PSAna2V5ZG93bicgfHwgbmF0aXZlRXZlbnQudHlwZSA9PT0gJ2tleXVwJykge1xuICAgIC8vIFdoaWxlIHVzZXIga2V5Ym9hcmQgbGF5b3V0IGRldGVybWluZXMgdGhlIGFjdHVhbCBtZWFuaW5nIG9mIGVhY2hcbiAgICAvLyBga2V5Q29kZWAgdmFsdWUsIGFsbW9zdCBhbGwgZnVuY3Rpb24ga2V5cyBoYXZlIGEgdW5pdmVyc2FsIHZhbHVlLlxuICAgIHJldHVybiB0cmFuc2xhdGVUb0tleVtuYXRpdmVFdmVudC5rZXlDb2RlXSB8fCAnVW5pZGVudGlmaWVkJztcbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0RXZlbnRLZXk7XG5cbn0se1wiLi9nZXRFdmVudENoYXJDb2RlXCI6MTg0fV0sMTg2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRFdmVudE1vZGlmaWVyU3RhdGVcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogVHJhbnNsYXRpb24gZnJvbSBtb2RpZmllciBrZXkgdG8gdGhlIGFzc29jaWF0ZWQgcHJvcGVydHkgaW4gdGhlIGV2ZW50LlxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2tleXMtTW9kaWZpZXJzXG4gKi9cblxudmFyIG1vZGlmaWVyS2V5VG9Qcm9wID0ge1xuICAnQWx0JzogJ2FsdEtleScsXG4gICdDb250cm9sJzogJ2N0cmxLZXknLFxuICAnTWV0YSc6ICdtZXRhS2V5JyxcbiAgJ1NoaWZ0JzogJ3NoaWZ0S2V5J1xufTtcblxuLy8gSUU4IGRvZXMgbm90IGltcGxlbWVudCBnZXRNb2RpZmllclN0YXRlIHNvIHdlIHNpbXBseSBtYXAgaXQgdG8gdGhlIG9ubHlcbi8vIG1vZGlmaWVyIGtleXMgZXhwb3NlZCBieSB0aGUgZXZlbnQgaXRzZWxmLCBkb2VzIG5vdCBzdXBwb3J0IExvY2sta2V5cy5cbi8vIEN1cnJlbnRseSwgYWxsIG1ham9yIGJyb3dzZXJzIGV4Y2VwdCBDaHJvbWUgc2VlbXMgdG8gc3VwcG9ydCBMb2NrLWtleXMuXG5mdW5jdGlvbiBtb2RpZmllclN0YXRlR2V0dGVyKGtleUFyZykge1xuICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICB2YXIgc3ludGhldGljRXZlbnQgPSB0aGlzO1xuICB2YXIgbmF0aXZlRXZlbnQgPSBzeW50aGV0aWNFdmVudC5uYXRpdmVFdmVudDtcbiAgaWYgKG5hdGl2ZUV2ZW50LmdldE1vZGlmaWVyU3RhdGUpIHtcbiAgICByZXR1cm4gbmF0aXZlRXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZShrZXlBcmcpO1xuICB9XG4gIHZhciBrZXlQcm9wID0gbW9kaWZpZXJLZXlUb1Byb3Bba2V5QXJnXTtcbiAgcmV0dXJuIGtleVByb3AgPyAhIW5hdGl2ZUV2ZW50W2tleVByb3BdIDogZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldEV2ZW50TW9kaWZpZXJTdGF0ZShuYXRpdmVFdmVudCkge1xuICByZXR1cm4gbW9kaWZpZXJTdGF0ZUdldHRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRFdmVudE1vZGlmaWVyU3RhdGU7XG5cbn0se31dLDE4NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0RXZlbnRUYXJnZXRcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogR2V0cyB0aGUgdGFyZ2V0IG5vZGUgZnJvbSBhIG5hdGl2ZSBicm93c2VyIGV2ZW50IGJ5IGFjY291bnRpbmcgZm9yXG4gKiBpbmNvbnNpc3RlbmNpZXMgaW4gYnJvd3NlciBET00gQVBJcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHtET01FdmVudFRhcmdldH0gVGFyZ2V0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KSB7XG4gIHZhciB0YXJnZXQgPSBuYXRpdmVFdmVudC50YXJnZXQgfHwgbmF0aXZlRXZlbnQuc3JjRWxlbWVudCB8fCB3aW5kb3c7XG4gIC8vIFNhZmFyaSBtYXkgZmlyZSBldmVudHMgb24gdGV4dCBub2RlcyAoTm9kZS5URVhUX05PREUgaXMgMykuXG4gIC8vIEBzZWUgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9qcy9ldmVudHNfcHJvcGVydGllcy5odG1sXG4gIHJldHVybiB0YXJnZXQubm9kZVR5cGUgPT09IDMgPyB0YXJnZXQucGFyZW50Tm9kZSA6IHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRFdmVudFRhcmdldDtcblxufSx7fV0sMTg4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0TWFya3VwV3JhcFxuICovXG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIER1bW15IGNvbnRhaW5lciB1c2VkIHRvIGRldGVjdCB3aGljaCB3cmFwcyBhcmUgbmVjZXNzYXJ5LlxuICovXG52YXIgZHVtbXlOb2RlID1cbiAgRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykgOiBudWxsO1xuXG4vKipcbiAqIFNvbWUgYnJvd3NlcnMgY2Fubm90IHVzZSBgaW5uZXJIVE1MYCB0byByZW5kZXIgY2VydGFpbiBlbGVtZW50cyBzdGFuZGFsb25lLFxuICogc28gd2Ugd3JhcCB0aGVtLCByZW5kZXIgdGhlIHdyYXBwZWQgbm9kZXMsIHRoZW4gZXh0cmFjdCB0aGUgZGVzaXJlZCBub2RlLlxuICpcbiAqIEluIElFOCwgY2VydGFpbiBlbGVtZW50cyBjYW5ub3QgcmVuZGVyIGFsb25lLCBzbyB3cmFwIGFsbCBlbGVtZW50cyAoJyonKS5cbiAqL1xudmFyIHNob3VsZFdyYXAgPSB7XG4gIC8vIEZvcmNlIHdyYXBwaW5nIGZvciBTVkcgZWxlbWVudHMgYmVjYXVzZSBpZiB0aGV5IGdldCBjcmVhdGVkIGluc2lkZSBhIDxkaXY+LFxuICAvLyB0aGV5IHdpbGwgYmUgaW5pdGlhbGl6ZWQgaW4gdGhlIHdyb25nIG5hbWVzcGFjZSAoYW5kIHdpbGwgbm90IGRpc3BsYXkpLlxuICAnY2lyY2xlJzogdHJ1ZSxcbiAgJ2RlZnMnOiB0cnVlLFxuICAnZWxsaXBzZSc6IHRydWUsXG4gICdnJzogdHJ1ZSxcbiAgJ2xpbmUnOiB0cnVlLFxuICAnbGluZWFyR3JhZGllbnQnOiB0cnVlLFxuICAncGF0aCc6IHRydWUsXG4gICdwb2x5Z29uJzogdHJ1ZSxcbiAgJ3BvbHlsaW5lJzogdHJ1ZSxcbiAgJ3JhZGlhbEdyYWRpZW50JzogdHJ1ZSxcbiAgJ3JlY3QnOiB0cnVlLFxuICAnc3RvcCc6IHRydWUsXG4gICd0ZXh0JzogdHJ1ZVxufTtcblxudmFyIHNlbGVjdFdyYXAgPSBbMSwgJzxzZWxlY3QgbXVsdGlwbGU9XCJ0cnVlXCI+JywgJzwvc2VsZWN0PiddO1xudmFyIHRhYmxlV3JhcCA9IFsxLCAnPHRhYmxlPicsICc8L3RhYmxlPiddO1xudmFyIHRyV3JhcCA9IFszLCAnPHRhYmxlPjx0Ym9keT48dHI+JywgJzwvdHI+PC90Ym9keT48L3RhYmxlPiddO1xuXG52YXIgc3ZnV3JhcCA9IFsxLCAnPHN2Zz4nLCAnPC9zdmc+J107XG5cbnZhciBtYXJrdXBXcmFwID0ge1xuICAnKic6IFsxLCAnPzxkaXY+JywgJzwvZGl2PiddLFxuXG4gICdhcmVhJzogWzEsICc8bWFwPicsICc8L21hcD4nXSxcbiAgJ2NvbCc6IFsyLCAnPHRhYmxlPjx0Ym9keT48L3Rib2R5Pjxjb2xncm91cD4nLCAnPC9jb2xncm91cD48L3RhYmxlPiddLFxuICAnbGVnZW5kJzogWzEsICc8ZmllbGRzZXQ+JywgJzwvZmllbGRzZXQ+J10sXG4gICdwYXJhbSc6IFsxLCAnPG9iamVjdD4nLCAnPC9vYmplY3Q+J10sXG4gICd0cic6IFsyLCAnPHRhYmxlPjx0Ym9keT4nLCAnPC90Ym9keT48L3RhYmxlPiddLFxuXG4gICdvcHRncm91cCc6IHNlbGVjdFdyYXAsXG4gICdvcHRpb24nOiBzZWxlY3RXcmFwLFxuXG4gICdjYXB0aW9uJzogdGFibGVXcmFwLFxuICAnY29sZ3JvdXAnOiB0YWJsZVdyYXAsXG4gICd0Ym9keSc6IHRhYmxlV3JhcCxcbiAgJ3Rmb290JzogdGFibGVXcmFwLFxuICAndGhlYWQnOiB0YWJsZVdyYXAsXG5cbiAgJ3RkJzogdHJXcmFwLFxuICAndGgnOiB0cldyYXAsXG5cbiAgJ2NpcmNsZSc6IHN2Z1dyYXAsXG4gICdkZWZzJzogc3ZnV3JhcCxcbiAgJ2VsbGlwc2UnOiBzdmdXcmFwLFxuICAnZyc6IHN2Z1dyYXAsXG4gICdsaW5lJzogc3ZnV3JhcCxcbiAgJ2xpbmVhckdyYWRpZW50Jzogc3ZnV3JhcCxcbiAgJ3BhdGgnOiBzdmdXcmFwLFxuICAncG9seWdvbic6IHN2Z1dyYXAsXG4gICdwb2x5bGluZSc6IHN2Z1dyYXAsXG4gICdyYWRpYWxHcmFkaWVudCc6IHN2Z1dyYXAsXG4gICdyZWN0Jzogc3ZnV3JhcCxcbiAgJ3N0b3AnOiBzdmdXcmFwLFxuICAndGV4dCc6IHN2Z1dyYXBcbn07XG5cbi8qKlxuICogR2V0cyB0aGUgbWFya3VwIHdyYXAgY29uZmlndXJhdGlvbiBmb3IgdGhlIHN1cHBsaWVkIGBub2RlTmFtZWAuXG4gKlxuICogTk9URTogVGhpcyBsYXppbHkgZGV0ZWN0cyB3aGljaCB3cmFwcyBhcmUgbmVjZXNzYXJ5IGZvciB0aGUgY3VycmVudCBicm93c2VyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBub2RlTmFtZSBMb3dlcmNhc2UgYG5vZGVOYW1lYC5cbiAqIEByZXR1cm4gez9hcnJheX0gTWFya3VwIHdyYXAgY29uZmlndXJhdGlvbiwgaWYgYXBwbGljYWJsZS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFya3VwV3JhcChub2RlTmFtZSkge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KCEhZHVtbXlOb2RlLCAnTWFya3VwIHdyYXBwaW5nIG5vZGUgbm90IGluaXRpYWxpemVkJykgOiBpbnZhcmlhbnQoISFkdW1teU5vZGUpKTtcbiAgaWYgKCFtYXJrdXBXcmFwLmhhc093blByb3BlcnR5KG5vZGVOYW1lKSkge1xuICAgIG5vZGVOYW1lID0gJyonO1xuICB9XG4gIGlmICghc2hvdWxkV3JhcC5oYXNPd25Qcm9wZXJ0eShub2RlTmFtZSkpIHtcbiAgICBpZiAobm9kZU5hbWUgPT09ICcqJykge1xuICAgICAgZHVtbXlOb2RlLmlubmVySFRNTCA9ICc8bGluayAvPic7XG4gICAgfSBlbHNlIHtcbiAgICAgIGR1bW15Tm9kZS5pbm5lckhUTUwgPSAnPCcgKyBub2RlTmFtZSArICc+PC8nICsgbm9kZU5hbWUgKyAnPic7XG4gICAgfVxuICAgIHNob3VsZFdyYXBbbm9kZU5hbWVdID0gIWR1bW15Tm9kZS5maXJzdENoaWxkO1xuICB9XG4gIHJldHVybiBzaG91bGRXcmFwW25vZGVOYW1lXSA/IG1hcmt1cFdyYXBbbm9kZU5hbWVdIDogbnVsbDtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hcmt1cFdyYXA7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCI6OTAsXCIuL2ludmFyaWFudFwiOjE5NixcIl9wcm9jZXNzXCI6MTl9XSwxODk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXRcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBHaXZlbiBhbnkgbm9kZSByZXR1cm4gdGhlIGZpcnN0IGxlYWYgbm9kZSB3aXRob3V0IGNoaWxkcmVuLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gbm9kZVxuICogQHJldHVybiB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX1cbiAqL1xuZnVuY3Rpb24gZ2V0TGVhZk5vZGUobm9kZSkge1xuICB3aGlsZSAobm9kZSAmJiBub2RlLmZpcnN0Q2hpbGQpIHtcbiAgICBub2RlID0gbm9kZS5maXJzdENoaWxkO1xuICB9XG4gIHJldHVybiBub2RlO1xufVxuXG4vKipcbiAqIEdldCB0aGUgbmV4dCBzaWJsaW5nIHdpdGhpbiBhIGNvbnRhaW5lci4gVGhpcyB3aWxsIHdhbGsgdXAgdGhlXG4gKiBET00gaWYgYSBub2RlJ3Mgc2libGluZ3MgaGF2ZSBiZWVuIGV4aGF1c3RlZC5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IG5vZGVcbiAqIEByZXR1cm4gez9ET01FbGVtZW50fERPTVRleHROb2RlfVxuICovXG5mdW5jdGlvbiBnZXRTaWJsaW5nTm9kZShub2RlKSB7XG4gIHdoaWxlIChub2RlKSB7XG4gICAgaWYgKG5vZGUubmV4dFNpYmxpbmcpIHtcbiAgICAgIHJldHVybiBub2RlLm5leHRTaWJsaW5nO1xuICAgIH1cbiAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICB9XG59XG5cbi8qKlxuICogR2V0IG9iamVjdCBkZXNjcmliaW5nIHRoZSBub2RlcyB3aGljaCBjb250YWluIGNoYXJhY3RlcnMgYXQgb2Zmc2V0LlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gcm9vdFxuICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICogQHJldHVybiB7P29iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChyb290LCBvZmZzZXQpIHtcbiAgdmFyIG5vZGUgPSBnZXRMZWFmTm9kZShyb290KTtcbiAgdmFyIG5vZGVTdGFydCA9IDA7XG4gIHZhciBub2RlRW5kID0gMDtcblxuICB3aGlsZSAobm9kZSkge1xuICAgIGlmIChub2RlLm5vZGVUeXBlID09IDMpIHtcbiAgICAgIG5vZGVFbmQgPSBub2RlU3RhcnQgKyBub2RlLnRleHRDb250ZW50Lmxlbmd0aDtcblxuICAgICAgaWYgKG5vZGVTdGFydCA8PSBvZmZzZXQgJiYgbm9kZUVuZCA+PSBvZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBub2RlOiBub2RlLFxuICAgICAgICAgIG9mZnNldDogb2Zmc2V0IC0gbm9kZVN0YXJ0XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG5vZGVTdGFydCA9IG5vZGVFbmQ7XG4gICAgfVxuXG4gICAgbm9kZSA9IGdldExlYWZOb2RlKGdldFNpYmxpbmdOb2RlKG5vZGUpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQ7XG5cbn0se31dLDE5MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBET0NfTk9ERV9UWVBFID0gOTtcblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NRG9jdW1lbnR9IGNvbnRhaW5lciBET00gZWxlbWVudCB0aGF0IG1heSBjb250YWluXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhIFJlYWN0IGNvbXBvbmVudFxuICogQHJldHVybiB7Pyp9IERPTSBlbGVtZW50IHRoYXQgbWF5IGhhdmUgdGhlIHJlYWN0Um9vdCBJRCwgb3IgbnVsbC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcikge1xuICBpZiAoIWNvbnRhaW5lcikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DX05PREVfVFlQRSkge1xuICAgIHJldHVybiBjb250YWluZXIuZG9jdW1lbnRFbGVtZW50O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjb250YWluZXIuZmlyc3RDaGlsZDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcjtcblxufSx7fV0sMTkxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRUZXh0Q29udGVudEFjY2Vzc29yXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpO1xuXG52YXIgY29udGVudEtleSA9IG51bGw7XG5cbi8qKlxuICogR2V0cyB0aGUga2V5IHVzZWQgdG8gYWNjZXNzIHRleHQgY29udGVudCBvbiBhIERPTSBub2RlLlxuICpcbiAqIEByZXR1cm4gez9zdHJpbmd9IEtleSB1c2VkIHRvIGFjY2VzcyB0ZXh0IGNvbnRlbnQuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcigpIHtcbiAgaWYgKCFjb250ZW50S2V5ICYmIEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICAgIC8vIFByZWZlciB0ZXh0Q29udGVudCB0byBpbm5lclRleHQgYmVjYXVzZSBtYW55IGJyb3dzZXJzIHN1cHBvcnQgYm90aCBidXRcbiAgICAvLyBTVkcgPHRleHQ+IGVsZW1lbnRzIGRvbid0IHN1cHBvcnQgaW5uZXJUZXh0IGV2ZW4gd2hlbiA8ZGl2PiBkb2VzLlxuICAgIGNvbnRlbnRLZXkgPSAndGV4dENvbnRlbnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCA/XG4gICAgICAndGV4dENvbnRlbnQnIDpcbiAgICAgICdpbm5lclRleHQnO1xuICB9XG4gIHJldHVybiBjb250ZW50S2V5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFRleHRDb250ZW50QWNjZXNzb3I7XG5cbn0se1wiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOjkwfV0sMTkyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvblxuICogQHR5cGVjaGVja3NcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBHZXRzIHRoZSBzY3JvbGwgcG9zaXRpb24gb2YgdGhlIHN1cHBsaWVkIGVsZW1lbnQgb3Igd2luZG93LlxuICpcbiAqIFRoZSByZXR1cm4gdmFsdWVzIGFyZSB1bmJvdW5kZWQsIHVubGlrZSBgZ2V0U2Nyb2xsUG9zaXRpb25gLiBUaGlzIG1lYW5zIHRoZXlcbiAqIG1heSBiZSBuZWdhdGl2ZSBvciBleGNlZWQgdGhlIGVsZW1lbnQgYm91bmRhcmllcyAod2hpY2ggaXMgcG9zc2libGUgdXNpbmdcbiAqIGluZXJ0aWFsIHNjcm9sbGluZykuXG4gKlxuICogQHBhcmFtIHtET01XaW5kb3d8RE9NRWxlbWVudH0gc2Nyb2xsYWJsZVxuICogQHJldHVybiB7b2JqZWN0fSBNYXAgd2l0aCBgeGAgYW5kIGB5YCBrZXlzLlxuICovXG5mdW5jdGlvbiBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbihzY3JvbGxhYmxlKSB7XG4gIGlmIChzY3JvbGxhYmxlID09PSB3aW5kb3cpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogd2luZG93LnBhZ2VYT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0LFxuICAgICAgeTogd2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3BcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgeDogc2Nyb2xsYWJsZS5zY3JvbGxMZWZ0LFxuICAgIHk6IHNjcm9sbGFibGUuc2Nyb2xsVG9wXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb247XG5cbn0se31dLDE5MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaHlwaGVuYXRlXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBfdXBwZXJjYXNlUGF0dGVybiA9IC8oW0EtWl0pL2c7XG5cbi8qKlxuICogSHlwaGVuYXRlcyBhIGNhbWVsY2FzZWQgc3RyaW5nLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gaHlwaGVuYXRlKCdiYWNrZ3JvdW5kQ29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZC1jb2xvclwiXG4gKlxuICogRm9yIENTUyBzdHlsZSBuYW1lcywgdXNlIGBoeXBoZW5hdGVTdHlsZU5hbWVgIGluc3RlYWQgd2hpY2ggd29ya3MgcHJvcGVybHlcbiAqIHdpdGggYWxsIHZlbmRvciBwcmVmaXhlcywgaW5jbHVkaW5nIGBtc2AuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBoeXBoZW5hdGUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShfdXBwZXJjYXNlUGF0dGVybiwgJy0kMScpLnRvTG93ZXJDYXNlKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaHlwaGVuYXRlO1xuXG59LHt9XSwxOTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGh5cGhlbmF0ZVN0eWxlTmFtZVxuICogQHR5cGVjaGVja3NcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGh5cGhlbmF0ZSA9IHJlcXVpcmUoXCIuL2h5cGhlbmF0ZVwiKTtcblxudmFyIG1zUGF0dGVybiA9IC9ebXMtLztcblxuLyoqXG4gKiBIeXBoZW5hdGVzIGEgY2FtZWxjYXNlZCBDU1MgcHJvcGVydHkgbmFtZSwgZm9yIGV4YW1wbGU6XG4gKlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnYmFja2dyb3VuZENvbG9yJylcbiAqICAgPCBcImJhY2tncm91bmQtY29sb3JcIlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnTW96VHJhbnNpdGlvbicpXG4gKiAgIDwgXCItbW96LXRyYW5zaXRpb25cIlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnbXNUcmFuc2l0aW9uJylcbiAqICAgPCBcIi1tcy10cmFuc2l0aW9uXCJcbiAqXG4gKiBBcyBNb2Rlcm5penIgc3VnZ2VzdHMgKGh0dHA6Ly9tb2Rlcm5penIuY29tL2RvY3MvI3ByZWZpeGVkKSwgYW4gYG1zYCBwcmVmaXhcbiAqIGlzIGNvbnZlcnRlZCB0byBgLW1zLWAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBoeXBoZW5hdGVTdHlsZU5hbWUoc3RyaW5nKSB7XG4gIHJldHVybiBoeXBoZW5hdGUoc3RyaW5nKS5yZXBsYWNlKG1zUGF0dGVybiwgJy1tcy0nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoeXBoZW5hdGVTdHlsZU5hbWU7XG5cbn0se1wiLi9oeXBoZW5hdGVcIjoxOTN9XSwxOTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoXCIuL3dhcm5pbmdcIik7XG5cbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RMZWdhY3lFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RMZWdhY3lFbGVtZW50XCIpO1xudmFyIFJlYWN0TmF0aXZlQ29tcG9uZW50ID0gcmVxdWlyZShcIi4vUmVhY3ROYXRpdmVDb21wb25lbnRcIik7XG52YXIgUmVhY3RFbXB0eUNvbXBvbmVudCA9IHJlcXVpcmUoXCIuL1JlYWN0RW1wdHlDb21wb25lbnRcIik7XG5cbi8qKlxuICogR2l2ZW4gYW4gYGVsZW1lbnRgIGNyZWF0ZSBhbiBpbnN0YW5jZSB0aGF0IHdpbGwgYWN0dWFsbHkgYmUgbW91bnRlZC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gZWxlbWVudFxuICogQHBhcmFtIHsqfSBwYXJlbnRDb21wb3NpdGVUeXBlIFRoZSBjb21wb3NpdGUgdHlwZSB0aGF0IHJlc29sdmVkIHRoaXMuXG4gKiBAcmV0dXJuIHtvYmplY3R9IEEgbmV3IGluc3RhbmNlIG9mIHRoZSBlbGVtZW50J3MgY29uc3RydWN0b3IuXG4gKiBAcHJvdGVjdGVkXG4gKi9cbmZ1bmN0aW9uIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQoZWxlbWVudCwgcGFyZW50Q29tcG9zaXRlVHlwZSkge1xuICB2YXIgaW5zdGFuY2U7XG5cbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyB3YXJuaW5nKFxuICAgICAgZWxlbWVudCAmJiAodHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gJ3N0cmluZycpLFxuICAgICAgJ09ubHkgZnVuY3Rpb25zIG9yIHN0cmluZ3MgY2FuIGJlIG1vdW50ZWQgYXMgUmVhY3QgY29tcG9uZW50cy4nXG4gICAgKSA6IG51bGwpO1xuXG4gICAgLy8gUmVzb2x2ZSBtb2NrIGluc3RhbmNlc1xuICAgIGlmIChlbGVtZW50LnR5cGUuX21vY2tlZFJlYWN0Q2xhc3NDb25zdHJ1Y3Rvcikge1xuICAgICAgLy8gSWYgdGhpcyBpcyBhIG1vY2tlZCBjbGFzcywgd2UgdHJlYXQgdGhlIGxlZ2FjeSBmYWN0b3J5IGFzIGlmIGl0IHdhcyB0aGVcbiAgICAgIC8vIGNsYXNzIGNvbnN0cnVjdG9yIGZvciBmdXR1cmUgcHJvb2ZpbmcgdW5pdCB0ZXN0cy4gQmVjYXVzZSB0aGlzIG1pZ2h0XG4gICAgICAvLyBiZSBtb2NrZWQgYXMgYSBsZWdhY3kgZmFjdG9yeSwgd2UgaWdub3JlIGFueSB3YXJuaW5ncyB0cmlnZ2VyZCBieVxuICAgICAgLy8gdGhpcyB0ZW1wb3JhcnkgaGFjay5cbiAgICAgIFJlYWN0TGVnYWN5RWxlbWVudC5faXNMZWdhY3lDYWxsV2FybmluZ0VuYWJsZWQgPSBmYWxzZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGluc3RhbmNlID0gbmV3IGVsZW1lbnQudHlwZS5fbW9ja2VkUmVhY3RDbGFzc0NvbnN0cnVjdG9yKFxuICAgICAgICAgIGVsZW1lbnQucHJvcHNcbiAgICAgICAgKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIFJlYWN0TGVnYWN5RWxlbWVudC5faXNMZWdhY3lDYWxsV2FybmluZ0VuYWJsZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGUgbW9jayBpbXBsZW1lbnRhdGlvbiB3YXMgYSBsZWdhY3kgZmFjdG9yeSwgdGhlbiBpdCByZXR1cm5zIGFcbiAgICAgIC8vIGVsZW1lbnQuIFdlIG5lZWQgdG8gdHVybiB0aGlzIGludG8gYSByZWFsIGNvbXBvbmVudCBpbnN0YW5jZS5cbiAgICAgIGlmIChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoaW5zdGFuY2UpKSB7XG4gICAgICAgIGluc3RhbmNlID0gbmV3IGluc3RhbmNlLnR5cGUoaW5zdGFuY2UucHJvcHMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVuZGVyID0gaW5zdGFuY2UucmVuZGVyO1xuICAgICAgaWYgKCFyZW5kZXIpIHtcbiAgICAgICAgLy8gRm9yIGF1dG8tbW9ja2VkIGZhY3RvcmllcywgdGhlIHByb3RvdHlwZSBpc24ndCBzaGltbWVkIGFuZCB0aGVyZWZvcmVcbiAgICAgICAgLy8gdGhlcmUgaXMgbm8gcmVuZGVyIGZ1bmN0aW9uIG9uIHRoZSBpbnN0YW5jZS4gV2UgcmVwbGFjZSB0aGUgd2hvbGVcbiAgICAgICAgLy8gY29tcG9uZW50IHdpdGggYW4gZW1wdHkgY29tcG9uZW50IGluc3RhbmNlIGluc3RlYWQuXG4gICAgICAgIGVsZW1lbnQgPSBSZWFjdEVtcHR5Q29tcG9uZW50LmdldEVtcHR5Q29tcG9uZW50KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocmVuZGVyLl9pc01vY2tGdW5jdGlvbiAmJiAhcmVuZGVyLl9nZXRNb2NrSW1wbGVtZW50YXRpb24oKSkge1xuICAgICAgICAgIC8vIEF1dG8tbW9ja2VkIGNvbXBvbmVudHMgbWF5IGhhdmUgYSBwcm90b3R5cGUgd2l0aCBhIG1vY2tlZCByZW5kZXJcbiAgICAgICAgICAvLyBmdW5jdGlvbi4gRm9yIHRob3NlLCB3ZSdsbCBuZWVkIHRvIG1vY2sgdGhlIHJlc3VsdCBvZiB0aGUgcmVuZGVyXG4gICAgICAgICAgLy8gc2luY2Ugd2UgY29uc2lkZXIgdW5kZWZpbmVkIHRvIGJlIGludmFsaWQgcmVzdWx0cyBmcm9tIHJlbmRlci5cbiAgICAgICAgICByZW5kZXIubW9ja0ltcGxlbWVudGF0aW9uKFxuICAgICAgICAgICAgUmVhY3RFbXB0eUNvbXBvbmVudC5nZXRFbXB0eUNvbXBvbmVudFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zdGFuY2UuY29uc3RydWN0KGVsZW1lbnQpO1xuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gU3BlY2lhbCBjYXNlIHN0cmluZyB2YWx1ZXNcbiAgaWYgKHR5cGVvZiBlbGVtZW50LnR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgaW5zdGFuY2UgPSBSZWFjdE5hdGl2ZUNvbXBvbmVudC5jcmVhdGVJbnN0YW5jZUZvclRhZyhcbiAgICAgIGVsZW1lbnQudHlwZSxcbiAgICAgIGVsZW1lbnQucHJvcHMsXG4gICAgICBwYXJlbnRDb21wb3NpdGVUeXBlXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBOb3JtYWwgY2FzZSBmb3Igbm9uLW1vY2tzIGFuZCBub24tc3RyaW5nc1xuICAgIGluc3RhbmNlID0gbmV3IGVsZW1lbnQudHlwZShlbGVtZW50LnByb3BzKTtcbiAgfVxuXG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gd2FybmluZyhcbiAgICAgIHR5cGVvZiBpbnN0YW5jZS5jb25zdHJ1Y3QgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIHR5cGVvZiBpbnN0YW5jZS5tb3VudENvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgdHlwZW9mIGluc3RhbmNlLnJlY2VpdmVDb21wb25lbnQgPT09ICdmdW5jdGlvbicsXG4gICAgICAnT25seSBSZWFjdCBDb21wb25lbnRzIGNhbiBiZSBtb3VudGVkLidcbiAgICApIDogbnVsbCk7XG4gIH1cblxuICAvLyBUaGlzIGFjdHVhbGx5IHNldHMgdXAgdGhlIGludGVybmFsIGluc3RhbmNlLiBUaGlzIHdpbGwgYmVjb21lIGRlY291cGxlZFxuICAvLyBmcm9tIHRoZSBwdWJsaWMgaW5zdGFuY2UgaW4gYSBmdXR1cmUgZGlmZi5cbiAgaW5zdGFuY2UuY29uc3RydWN0KGVsZW1lbnQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9SZWFjdEVsZW1lbnRcIjoxMjEsXCIuL1JlYWN0RW1wdHlDb21wb25lbnRcIjoxMjMsXCIuL1JlYWN0TGVnYWN5RWxlbWVudFwiOjEzMCxcIi4vUmVhY3ROYXRpdmVDb21wb25lbnRcIjoxMzUsXCIuL3dhcm5pbmdcIjoyMTUsXCJfcHJvY2Vzc1wiOjE5fV0sMTk2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaW52YXJpYW50XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ0ludmFyaWFudCBWaW9sYXRpb246ICcgK1xuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7IHJldHVybiBhcmdzW2FyZ0luZGV4KytdOyB9KVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiX3Byb2Nlc3NcIjoxOX1dLDE5NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaXNFdmVudFN1cHBvcnRlZFxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKTtcblxudmFyIHVzZUhhc0ZlYXR1cmU7XG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIHVzZUhhc0ZlYXR1cmUgPVxuICAgIGRvY3VtZW50LmltcGxlbWVudGF0aW9uICYmXG4gICAgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSAmJlxuICAgIC8vIGFsd2F5cyByZXR1cm5zIHRydWUgaW4gbmV3ZXIgYnJvd3NlcnMgYXMgcGVyIHRoZSBzdGFuZGFyZC5cbiAgICAvLyBAc2VlIGh0dHA6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tZG9taW1wbGVtZW50YXRpb24taGFzZmVhdHVyZVxuICAgIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoJycsICcnKSAhPT0gdHJ1ZTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYW4gZXZlbnQgaXMgc3VwcG9ydGVkIGluIHRoZSBjdXJyZW50IGV4ZWN1dGlvbiBlbnZpcm9ubWVudC5cbiAqXG4gKiBOT1RFOiBUaGlzIHdpbGwgbm90IHdvcmsgY29ycmVjdGx5IGZvciBub24tZ2VuZXJpYyBldmVudHMgc3VjaCBhcyBgY2hhbmdlYCxcbiAqIGByZXNldGAsIGBsb2FkYCwgYGVycm9yYCwgYW5kIGBzZWxlY3RgLlxuICpcbiAqIEJvcnJvd3MgZnJvbSBNb2Rlcm5penIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVN1ZmZpeCBFdmVudCBuYW1lLCBlLmcuIFwiY2xpY2tcIi5cbiAqIEBwYXJhbSB7P2Jvb2xlYW59IGNhcHR1cmUgQ2hlY2sgaWYgdGhlIGNhcHR1cmUgcGhhc2UgaXMgc3VwcG9ydGVkLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZXZlbnQgaXMgc3VwcG9ydGVkLlxuICogQGludGVybmFsXG4gKiBAbGljZW5zZSBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiAqL1xuZnVuY3Rpb24gaXNFdmVudFN1cHBvcnRlZChldmVudE5hbWVTdWZmaXgsIGNhcHR1cmUpIHtcbiAgaWYgKCFFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gfHxcbiAgICAgIGNhcHR1cmUgJiYgISgnYWRkRXZlbnRMaXN0ZW5lcicgaW4gZG9jdW1lbnQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGV2ZW50TmFtZSA9ICdvbicgKyBldmVudE5hbWVTdWZmaXg7XG4gIHZhciBpc1N1cHBvcnRlZCA9IGV2ZW50TmFtZSBpbiBkb2N1bWVudDtcblxuICBpZiAoIWlzU3VwcG9ydGVkKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShldmVudE5hbWUsICdyZXR1cm47Jyk7XG4gICAgaXNTdXBwb3J0ZWQgPSB0eXBlb2YgZWxlbWVudFtldmVudE5hbWVdID09PSAnZnVuY3Rpb24nO1xuICB9XG5cbiAgaWYgKCFpc1N1cHBvcnRlZCAmJiB1c2VIYXNGZWF0dXJlICYmIGV2ZW50TmFtZVN1ZmZpeCA9PT0gJ3doZWVsJykge1xuICAgIC8vIFRoaXMgaXMgdGhlIG9ubHkgd2F5IHRvIHRlc3Qgc3VwcG9ydCBmb3IgdGhlIGB3aGVlbGAgZXZlbnQgaW4gSUU5Ky5cbiAgICBpc1N1cHBvcnRlZCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoJ0V2ZW50cy53aGVlbCcsICczLjAnKTtcbiAgfVxuXG4gIHJldHVybiBpc1N1cHBvcnRlZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0V2ZW50U3VwcG9ydGVkO1xuXG59LHtcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIjo5MH1dLDE5ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaXNOb2RlXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gbm9kZS5cbiAqL1xuZnVuY3Rpb24gaXNOb2RlKG9iamVjdCkge1xuICByZXR1cm4gISEob2JqZWN0ICYmIChcbiAgICB0eXBlb2YgTm9kZSA9PT0gJ2Z1bmN0aW9uJyA/IG9iamVjdCBpbnN0YW5jZW9mIE5vZGUgOlxuICAgICAgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgIHR5cGVvZiBvYmplY3Qubm9kZVR5cGUgPT09ICdudW1iZXInICYmXG4gICAgICB0eXBlb2Ygb2JqZWN0Lm5vZGVOYW1lID09PSAnc3RyaW5nJ1xuICApKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc05vZGU7XG5cbn0se31dLDE5OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaXNUZXh0SW5wdXRFbGVtZW50XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQHNlZSBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS90aGUtaW5wdXQtZWxlbWVudC5odG1sI2lucHV0LXR5cGUtYXR0ci1zdW1tYXJ5XG4gKi9cbnZhciBzdXBwb3J0ZWRJbnB1dFR5cGVzID0ge1xuICAnY29sb3InOiB0cnVlLFxuICAnZGF0ZSc6IHRydWUsXG4gICdkYXRldGltZSc6IHRydWUsXG4gICdkYXRldGltZS1sb2NhbCc6IHRydWUsXG4gICdlbWFpbCc6IHRydWUsXG4gICdtb250aCc6IHRydWUsXG4gICdudW1iZXInOiB0cnVlLFxuICAncGFzc3dvcmQnOiB0cnVlLFxuICAncmFuZ2UnOiB0cnVlLFxuICAnc2VhcmNoJzogdHJ1ZSxcbiAgJ3RlbCc6IHRydWUsXG4gICd0ZXh0JzogdHJ1ZSxcbiAgJ3RpbWUnOiB0cnVlLFxuICAndXJsJzogdHJ1ZSxcbiAgJ3dlZWsnOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBpc1RleHRJbnB1dEVsZW1lbnQoZWxlbSkge1xuICByZXR1cm4gZWxlbSAmJiAoXG4gICAgKGVsZW0ubm9kZU5hbWUgPT09ICdJTlBVVCcgJiYgc3VwcG9ydGVkSW5wdXRUeXBlc1tlbGVtLnR5cGVdKSB8fFxuICAgIGVsZW0ubm9kZU5hbWUgPT09ICdURVhUQVJFQSdcbiAgKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1RleHRJbnB1dEVsZW1lbnQ7XG5cbn0se31dLDIwMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaXNUZXh0Tm9kZVxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgaXNOb2RlID0gcmVxdWlyZShcIi4vaXNOb2RlXCIpO1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIHRleHQgbm9kZS5cbiAqL1xuZnVuY3Rpb24gaXNUZXh0Tm9kZShvYmplY3QpIHtcbiAgcmV0dXJuIGlzTm9kZShvYmplY3QpICYmIG9iamVjdC5ub2RlVHlwZSA9PSAzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVGV4dE5vZGU7XG5cbn0se1wiLi9pc05vZGVcIjoxOTh9XSwyMDE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGpvaW5DbGFzc2VzXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvbWJpbmVzIG11bHRpcGxlIGNsYXNzTmFtZSBzdHJpbmdzIGludG8gb25lLlxuICogaHR0cDovL2pzcGVyZi5jb20vam9pbmNsYXNzZXMtYXJncy12cy1hcnJheVxuICpcbiAqIEBwYXJhbSB7Li4uP3N0cmluZ30gY2xhc3Nlc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBqb2luQ2xhc3NlcyhjbGFzc05hbWUvKiwgLi4uICovKSB7XG4gIGlmICghY2xhc3NOYW1lKSB7XG4gICAgY2xhc3NOYW1lID0gJyc7XG4gIH1cbiAgdmFyIG5leHRDbGFzcztcbiAgdmFyIGFyZ0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIGlmIChhcmdMZW5ndGggPiAxKSB7XG4gICAgZm9yICh2YXIgaWkgPSAxOyBpaSA8IGFyZ0xlbmd0aDsgaWkrKykge1xuICAgICAgbmV4dENsYXNzID0gYXJndW1lbnRzW2lpXTtcbiAgICAgIGlmIChuZXh0Q2xhc3MpIHtcbiAgICAgICAgY2xhc3NOYW1lID0gKGNsYXNzTmFtZSA/IGNsYXNzTmFtZSArICcgJyA6ICcnKSArIG5leHRDbGFzcztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNsYXNzTmFtZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBqb2luQ2xhc3NlcztcblxufSx7fV0sMjAyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUga2V5TWlycm9yXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYW4gZW51bWVyYXRpb24gd2l0aCBrZXlzIGVxdWFsIHRvIHRoZWlyIHZhbHVlLlxuICpcbiAqIEZvciBleGFtcGxlOlxuICpcbiAqICAgdmFyIENPTE9SUyA9IGtleU1pcnJvcih7Ymx1ZTogbnVsbCwgcmVkOiBudWxsfSk7XG4gKiAgIHZhciBteUNvbG9yID0gQ09MT1JTLmJsdWU7XG4gKiAgIHZhciBpc0NvbG9yVmFsaWQgPSAhIUNPTE9SU1tteUNvbG9yXTtcbiAqXG4gKiBUaGUgbGFzdCBsaW5lIGNvdWxkIG5vdCBiZSBwZXJmb3JtZWQgaWYgdGhlIHZhbHVlcyBvZiB0aGUgZ2VuZXJhdGVkIGVudW0gd2VyZVxuICogbm90IGVxdWFsIHRvIHRoZWlyIGtleXMuXG4gKlxuICogICBJbnB1dDogIHtrZXkxOiB2YWwxLCBrZXkyOiB2YWwyfVxuICogICBPdXRwdXQ6IHtrZXkxOiBrZXkxLCBrZXkyOiBrZXkyfVxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xudmFyIGtleU1pcnJvciA9IGZ1bmN0aW9uKG9iaikge1xuICB2YXIgcmV0ID0ge307XG4gIHZhciBrZXk7XG4gIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgb2JqIGluc3RhbmNlb2YgT2JqZWN0ICYmICFBcnJheS5pc0FycmF5KG9iaiksXG4gICAgJ2tleU1pcnJvciguLi4pOiBBcmd1bWVudCBtdXN0IGJlIGFuIG9iamVjdC4nXG4gICkgOiBpbnZhcmlhbnQob2JqIGluc3RhbmNlb2YgT2JqZWN0ICYmICFBcnJheS5pc0FycmF5KG9iaikpKTtcbiAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgaWYgKCFvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHJldFtrZXldID0ga2V5O1xuICB9XG4gIHJldHVybiByZXQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGtleU1pcnJvcjtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vaW52YXJpYW50XCI6MTk2LFwiX3Byb2Nlc3NcIjoxOX1dLDIwMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUga2V5T2ZcbiAqL1xuXG4vKipcbiAqIEFsbG93cyBleHRyYWN0aW9uIG9mIGEgbWluaWZpZWQga2V5LiBMZXQncyB0aGUgYnVpbGQgc3lzdGVtIG1pbmlmeSBrZXlzXG4gKiB3aXRob3V0IGxvb3NpbmcgdGhlIGFiaWxpdHkgdG8gZHluYW1pY2FsbHkgdXNlIGtleSBzdHJpbmdzIGFzIHZhbHVlc1xuICogdGhlbXNlbHZlcy4gUGFzcyBpbiBhbiBvYmplY3Qgd2l0aCBhIHNpbmdsZSBrZXkvdmFsIHBhaXIgYW5kIGl0IHdpbGwgcmV0dXJuXG4gKiB5b3UgdGhlIHN0cmluZyBrZXkgb2YgdGhhdCBzaW5nbGUgcmVjb3JkLiBTdXBwb3NlIHlvdSB3YW50IHRvIGdyYWIgdGhlXG4gKiB2YWx1ZSBmb3IgYSBrZXkgJ2NsYXNzTmFtZScgaW5zaWRlIG9mIGFuIG9iamVjdC4gS2V5L3ZhbCBtaW5pZmljYXRpb24gbWF5XG4gKiBoYXZlIGFsaWFzZWQgdGhhdCBrZXkgdG8gYmUgJ3hhMTInLiBrZXlPZih7Y2xhc3NOYW1lOiBudWxsfSkgd2lsbCByZXR1cm5cbiAqICd4YTEyJyBpbiB0aGF0IGNhc2UuIFJlc29sdmUga2V5cyB5b3Ugd2FudCB0byB1c2Ugb25jZSBhdCBzdGFydHVwIHRpbWUsIHRoZW5cbiAqIHJldXNlIHRob3NlIHJlc29sdXRpb25zLlxuICovXG52YXIga2V5T2YgPSBmdW5jdGlvbihvbmVLZXlPYmopIHtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gb25lS2V5T2JqKSB7XG4gICAgaWYgKCFvbmVLZXlPYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHJldHVybiBrZXk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0ga2V5T2Y7XG5cbn0se31dLDIwNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgbWFwT2JqZWN0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEV4ZWN1dGVzIHRoZSBwcm92aWRlZCBgY2FsbGJhY2tgIG9uY2UgZm9yIGVhY2ggZW51bWVyYWJsZSBvd24gcHJvcGVydHkgaW4gdGhlXG4gKiBvYmplY3QgYW5kIGNvbnN0cnVjdHMgYSBuZXcgb2JqZWN0IGZyb20gdGhlIHJlc3VsdHMuIFRoZSBgY2FsbGJhY2tgIGlzXG4gKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICpcbiAqICAtIHRoZSBwcm9wZXJ0eSB2YWx1ZVxuICogIC0gdGhlIHByb3BlcnR5IG5hbWVcbiAqICAtIHRoZSBvYmplY3QgYmVpbmcgdHJhdmVyc2VkXG4gKlxuICogUHJvcGVydGllcyB0aGF0IGFyZSBhZGRlZCBhZnRlciB0aGUgY2FsbCB0byBgbWFwT2JqZWN0YCB3aWxsIG5vdCBiZSB2aXNpdGVkXG4gKiBieSBgY2FsbGJhY2tgLiBJZiB0aGUgdmFsdWVzIG9mIGV4aXN0aW5nIHByb3BlcnRpZXMgYXJlIGNoYW5nZWQsIHRoZSB2YWx1ZVxuICogcGFzc2VkIHRvIGBjYWxsYmFja2Agd2lsbCBiZSB0aGUgdmFsdWUgYXQgdGhlIHRpbWUgYG1hcE9iamVjdGAgdmlzaXRzIHRoZW0uXG4gKiBQcm9wZXJ0aWVzIHRoYXQgYXJlIGRlbGV0ZWQgYmVmb3JlIGJlaW5nIHZpc2l0ZWQgYXJlIG5vdCB2aXNpdGVkLlxuICpcbiAqIEBncmVwIGZ1bmN0aW9uIG9iamVjdE1hcCgpXG4gKiBAZ3JlcCBmdW5jdGlvbiBvYmpNYXAoKVxuICpcbiAqIEBwYXJhbSB7P29iamVjdH0gb2JqZWN0XG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHBhcmFtIHsqfSBjb250ZXh0XG4gKiBAcmV0dXJuIHs/b2JqZWN0fVxuICovXG5mdW5jdGlvbiBtYXBPYmplY3Qob2JqZWN0LCBjYWxsYmFjaywgY29udGV4dCkge1xuICBpZiAoIW9iamVjdCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZm9yICh2YXIgbmFtZSBpbiBvYmplY3QpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIG5hbWUpKSB7XG4gICAgICByZXN1bHRbbmFtZV0gPSBjYWxsYmFjay5jYWxsKGNvbnRleHQsIG9iamVjdFtuYW1lXSwgbmFtZSwgb2JqZWN0KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBPYmplY3Q7XG5cbn0se31dLDIwNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgbWVtb2l6ZVN0cmluZ09ubHlcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogTWVtb2l6ZXMgdGhlIHJldHVybiB2YWx1ZSBvZiBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBvbmUgc3RyaW5nIGFyZ3VtZW50LlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZVN0cmluZ09ubHkoY2FsbGJhY2spIHtcbiAgdmFyIGNhY2hlID0ge307XG4gIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICBpZiAoY2FjaGUuaGFzT3duUHJvcGVydHkoc3RyaW5nKSkge1xuICAgICAgcmV0dXJuIGNhY2hlW3N0cmluZ107XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjYWNoZVtzdHJpbmddID0gY2FsbGJhY2suY2FsbCh0aGlzLCBzdHJpbmcpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplU3RyaW5nT25seTtcblxufSx7fV0sMjA2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIG1vbml0b3JDb2RlVXNlXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiLi9pbnZhcmlhbnRcIik7XG5cbi8qKlxuICogUHJvdmlkZXMgb3Blbi1zb3VyY2UgY29tcGF0aWJsZSBpbnN0cnVtZW50YXRpb24gZm9yIG1vbml0b3JpbmcgY2VydGFpbiBBUElcbiAqIHVzZXMgYmVmb3JlIHdlJ3JlIHJlYWR5IHRvIGlzc3VlIGEgd2FybmluZyBvciByZWZhY3Rvci4gSXQgYWNjZXB0cyBhbiBldmVudFxuICogbmFtZSB3aGljaCBtYXkgb25seSBjb250YWluIHRoZSBjaGFyYWN0ZXJzIFthLXowLTlfXSBhbmQgYW4gb3B0aW9uYWwgZGF0YVxuICogb2JqZWN0IHdpdGggZnVydGhlciBpbmZvcm1hdGlvbi5cbiAqL1xuXG5mdW5jdGlvbiBtb25pdG9yQ29kZVVzZShldmVudE5hbWUsIGRhdGEpIHtcbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBldmVudE5hbWUgJiYgIS9bXmEtejAtOV9dLy50ZXN0KGV2ZW50TmFtZSksXG4gICAgJ1lvdSBtdXN0IHByb3ZpZGUgYW4gZXZlbnROYW1lIHVzaW5nIG9ubHkgdGhlIGNoYXJhY3RlcnMgW2EtejAtOV9dJ1xuICApIDogaW52YXJpYW50KGV2ZW50TmFtZSAmJiAhL1teYS16MC05X10vLnRlc3QoZXZlbnROYW1lKSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1vbml0b3JDb2RlVXNlO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9pbnZhcmlhbnRcIjoxOTYsXCJfcHJvY2Vzc1wiOjE5fV0sMjA3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgb25seUNoaWxkXG4gKi9cblwidXNlIHN0cmljdFwiO1xuXG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZShcIi4vUmVhY3RFbGVtZW50XCIpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGZpcnN0IGNoaWxkIGluIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiBhbmQgdmVyaWZpZXMgdGhhdCB0aGVyZVxuICogaXMgb25seSBvbmUgY2hpbGQgaW4gdGhlIGNvbGxlY3Rpb24uIFRoZSBjdXJyZW50IGltcGxlbWVudGF0aW9uIG9mIHRoaXNcbiAqIGZ1bmN0aW9uIGFzc3VtZXMgdGhhdCBhIHNpbmdsZSBjaGlsZCBnZXRzIHBhc3NlZCB3aXRob3V0IGEgd3JhcHBlciwgYnV0IHRoZVxuICogcHVycG9zZSBvZiB0aGlzIGhlbHBlciBmdW5jdGlvbiBpcyB0byBhYnN0cmFjdCBhd2F5IHRoZSBwYXJ0aWN1bGFyIHN0cnVjdHVyZVxuICogb2YgY2hpbGRyZW4uXG4gKlxuICogQHBhcmFtIHs/b2JqZWN0fSBjaGlsZHJlbiBDaGlsZCBjb2xsZWN0aW9uIHN0cnVjdHVyZS5cbiAqIEByZXR1cm4ge1JlYWN0Q29tcG9uZW50fSBUaGUgZmlyc3QgYW5kIG9ubHkgYFJlYWN0Q29tcG9uZW50YCBjb250YWluZWQgaW4gdGhlXG4gKiBzdHJ1Y3R1cmUuXG4gKi9cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgIFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbiksXG4gICAgJ29ubHlDaGlsZCBtdXN0IGJlIHBhc3NlZCBhIGNoaWxkcmVuIHdpdGggZXhhY3RseSBvbmUgY2hpbGQuJ1xuICApIDogaW52YXJpYW50KFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikpKTtcbiAgcmV0dXJuIGNoaWxkcmVuO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG9ubHlDaGlsZDtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vUmVhY3RFbGVtZW50XCI6MTIxLFwiLi9pbnZhcmlhbnRcIjoxOTYsXCJfcHJvY2Vzc1wiOjE5fV0sMjA4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBwZXJmb3JtYW5jZVxuICogQHR5cGVjaGVja3NcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG5cbnZhciBwZXJmb3JtYW5jZTtcblxuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICBwZXJmb3JtYW5jZSA9XG4gICAgd2luZG93LnBlcmZvcm1hbmNlIHx8XG4gICAgd2luZG93Lm1zUGVyZm9ybWFuY2UgfHxcbiAgICB3aW5kb3cud2Via2l0UGVyZm9ybWFuY2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGVyZm9ybWFuY2UgfHwge307XG5cbn0se1wiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOjkwfV0sMjA5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBwZXJmb3JtYW5jZU5vd1xuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgcGVyZm9ybWFuY2UgPSByZXF1aXJlKFwiLi9wZXJmb3JtYW5jZVwiKTtcblxuLyoqXG4gKiBEZXRlY3QgaWYgd2UgY2FuIHVzZSBgd2luZG93LnBlcmZvcm1hbmNlLm5vdygpYCBhbmQgZ3JhY2VmdWxseSBmYWxsYmFjayB0b1xuICogYERhdGUubm93KClgIGlmIGl0IGRvZXNuJ3QgZXhpc3QuIFdlIG5lZWQgdG8gc3VwcG9ydCBGaXJlZm94IDwgMTUgZm9yIG5vd1xuICogYmVjYXVzZSBvZiBGYWNlYm9vaydzIHRlc3RpbmcgaW5mcmFzdHJ1Y3R1cmUuXG4gKi9cbmlmICghcGVyZm9ybWFuY2UgfHwgIXBlcmZvcm1hbmNlLm5vdykge1xuICBwZXJmb3JtYW5jZSA9IERhdGU7XG59XG5cbnZhciBwZXJmb3JtYW5jZU5vdyA9IHBlcmZvcm1hbmNlLm5vdy5iaW5kKHBlcmZvcm1hbmNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwZXJmb3JtYW5jZU5vdztcblxufSx7XCIuL3BlcmZvcm1hbmNlXCI6MjA4fV0sMjEwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBzZXRJbm5lckhUTUxcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZShcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIik7XG5cbnZhciBXSElURVNQQUNFX1RFU1QgPSAvXlsgXFxyXFxuXFx0XFxmXS87XG52YXIgTk9OVklTSUJMRV9URVNUID0gLzwoIS0tfGxpbmt8bm9zY3JpcHR8bWV0YXxzY3JpcHR8c3R5bGUpWyBcXHJcXG5cXHRcXGZcXC8+XS87XG5cbi8qKlxuICogU2V0IHRoZSBpbm5lckhUTUwgcHJvcGVydHkgb2YgYSBub2RlLCBlbnN1cmluZyB0aGF0IHdoaXRlc3BhY2UgaXMgcHJlc2VydmVkXG4gKiBldmVuIGluIElFOC5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBodG1sXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIHNldElubmVySFRNTCA9IGZ1bmN0aW9uKG5vZGUsIGh0bWwpIHtcbiAgbm9kZS5pbm5lckhUTUwgPSBodG1sO1xufTtcblxuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICAvLyBJRTg6IFdoZW4gdXBkYXRpbmcgYSBqdXN0IGNyZWF0ZWQgbm9kZSB3aXRoIGlubmVySFRNTCBvbmx5IGxlYWRpbmdcbiAgLy8gd2hpdGVzcGFjZSBpcyByZW1vdmVkLiBXaGVuIHVwZGF0aW5nIGFuIGV4aXN0aW5nIG5vZGUgd2l0aCBpbm5lckhUTUxcbiAgLy8gd2hpdGVzcGFjZSBpbiByb290IFRleHROb2RlcyBpcyBhbHNvIGNvbGxhcHNlZC5cbiAgLy8gQHNlZSBxdWlya3Ntb2RlLm9yZy9idWdyZXBvcnRzL2FyY2hpdmVzLzIwMDQvMTEvaW5uZXJodG1sX2FuZF90Lmh0bWxcblxuICAvLyBGZWF0dXJlIGRldGVjdGlvbjsgb25seSBJRTggaXMga25vd24gdG8gYmVoYXZlIGltcHJvcGVybHkgbGlrZSB0aGlzLlxuICB2YXIgdGVzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgdGVzdEVsZW1lbnQuaW5uZXJIVE1MID0gJyAnO1xuICBpZiAodGVzdEVsZW1lbnQuaW5uZXJIVE1MID09PSAnJykge1xuICAgIHNldElubmVySFRNTCA9IGZ1bmN0aW9uKG5vZGUsIGh0bWwpIHtcbiAgICAgIC8vIE1hZ2ljIHRoZW9yeTogSUU4IHN1cHBvc2VkbHkgZGlmZmVyZW50aWF0ZXMgYmV0d2VlbiBhZGRlZCBhbmQgdXBkYXRlZFxuICAgICAgLy8gbm9kZXMgd2hlbiBwcm9jZXNzaW5nIGlubmVySFRNTCwgaW5uZXJIVE1MIG9uIHVwZGF0ZWQgbm9kZXMgc3VmZmVyc1xuICAgICAgLy8gZnJvbSB3b3JzZSB3aGl0ZXNwYWNlIGJlaGF2aW9yLiBSZS1hZGRpbmcgYSBub2RlIGxpa2UgdGhpcyB0cmlnZ2Vyc1xuICAgICAgLy8gdGhlIGluaXRpYWwgYW5kIG1vcmUgZmF2b3JhYmxlIHdoaXRlc3BhY2UgYmVoYXZpb3IuXG4gICAgICAvLyBUT0RPOiBXaGF0IHRvIGRvIG9uIGEgZGV0YWNoZWQgbm9kZT9cbiAgICAgIGlmIChub2RlLnBhcmVudE5vZGUpIHtcbiAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChub2RlLCBub2RlKTtcbiAgICAgIH1cblxuICAgICAgLy8gV2UgYWxzbyBpbXBsZW1lbnQgYSB3b3JrYXJvdW5kIGZvciBub24tdmlzaWJsZSB0YWdzIGRpc2FwcGVhcmluZyBpbnRvXG4gICAgICAvLyB0aGluIGFpciBvbiBJRTgsIHRoaXMgb25seSBoYXBwZW5zIGlmIHRoZXJlIGlzIG5vIHZpc2libGUgdGV4dFxuICAgICAgLy8gaW4tZnJvbnQgb2YgdGhlIG5vbi12aXNpYmxlIHRhZ3MuIFBpZ2d5YmFjayBvbiB0aGUgd2hpdGVzcGFjZSBmaXhcbiAgICAgIC8vIGFuZCBzaW1wbHkgY2hlY2sgaWYgYW55IG5vbi12aXNpYmxlIHRhZ3MgYXBwZWFyIGluIHRoZSBzb3VyY2UuXG4gICAgICBpZiAoV0hJVEVTUEFDRV9URVNULnRlc3QoaHRtbCkgfHxcbiAgICAgICAgICBodG1sWzBdID09PSAnPCcgJiYgTk9OVklTSUJMRV9URVNULnRlc3QoaHRtbCkpIHtcbiAgICAgICAgLy8gUmVjb3ZlciBsZWFkaW5nIHdoaXRlc3BhY2UgYnkgdGVtcG9yYXJpbHkgcHJlcGVuZGluZyBhbnkgY2hhcmFjdGVyLlxuICAgICAgICAvLyBcXHVGRUZGIGhhcyB0aGUgcG90ZW50aWFsIGFkdmFudGFnZSBvZiBiZWluZyB6ZXJvLXdpZHRoL2ludmlzaWJsZS5cbiAgICAgICAgbm9kZS5pbm5lckhUTUwgPSAnXFx1RkVGRicgKyBodG1sO1xuXG4gICAgICAgIC8vIGRlbGV0ZURhdGEgbGVhdmVzIGFuIGVtcHR5IGBUZXh0Tm9kZWAgd2hpY2ggb2Zmc2V0cyB0aGUgaW5kZXggb2YgYWxsXG4gICAgICAgIC8vIGNoaWxkcmVuLiBEZWZpbml0ZWx5IHdhbnQgdG8gYXZvaWQgdGhpcy5cbiAgICAgICAgdmFyIHRleHROb2RlID0gbm9kZS5maXJzdENoaWxkO1xuICAgICAgICBpZiAodGV4dE5vZGUuZGF0YS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICBub2RlLnJlbW92ZUNoaWxkKHRleHROb2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZXh0Tm9kZS5kZWxldGVEYXRhKDAsIDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLmlubmVySFRNTCA9IGh0bWw7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldElubmVySFRNTDtcblxufSx7XCIuL0V4ZWN1dGlvbkVudmlyb25tZW50XCI6OTB9XSwyMTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHNoYWxsb3dFcXVhbFxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIFBlcmZvcm1zIGVxdWFsaXR5IGJ5IGl0ZXJhdGluZyB0aHJvdWdoIGtleXMgb24gYW4gb2JqZWN0IGFuZCByZXR1cm5pbmdcbiAqIGZhbHNlIHdoZW4gYW55IGtleSBoYXMgdmFsdWVzIHdoaWNoIGFyZSBub3Qgc3RyaWN0bHkgZXF1YWwgYmV0d2VlblxuICogb2JqQSBhbmQgb2JqQi4gUmV0dXJucyB0cnVlIHdoZW4gdGhlIHZhbHVlcyBvZiBhbGwga2V5cyBhcmUgc3RyaWN0bHkgZXF1YWwuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKG9iakEgPT09IG9iakIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIga2V5O1xuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICBmb3IgKGtleSBpbiBvYmpBKSB7XG4gICAgaWYgKG9iakEuaGFzT3duUHJvcGVydHkoa2V5KSAmJlxuICAgICAgICAoIW9iakIuaGFzT3duUHJvcGVydHkoa2V5KSB8fCBvYmpBW2tleV0gIT09IG9iakJba2V5XSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLy8gVGVzdCBmb3IgQidzIGtleXMgbWlzc2luZyBmcm9tIEEuXG4gIGZvciAoa2V5IGluIG9iakIpIHtcbiAgICBpZiAob2JqQi5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICFvYmpBLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hhbGxvd0VxdWFsO1xuXG59LHt9XSwyMTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50XG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEdpdmVuIGEgYHByZXZFbGVtZW50YCBhbmQgYG5leHRFbGVtZW50YCwgZGV0ZXJtaW5lcyBpZiB0aGUgZXhpc3RpbmdcbiAqIGluc3RhbmNlIHNob3VsZCBiZSB1cGRhdGVkIGFzIG9wcG9zZWQgdG8gYmVpbmcgZGVzdHJveWVkIG9yIHJlcGxhY2VkIGJ5IGEgbmV3XG4gKiBpbnN0YW5jZS4gQm90aCBhcmd1bWVudHMgYXJlIGVsZW1lbnRzLiBUaGlzIGVuc3VyZXMgdGhhdCB0aGlzIGxvZ2ljIGNhblxuICogb3BlcmF0ZSBvbiBzdGF0ZWxlc3MgdHJlZXMgd2l0aG91dCBhbnkgYmFja2luZyBpbnN0YW5jZS5cbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IHByZXZFbGVtZW50XG4gKiBAcGFyYW0gez9vYmplY3R9IG5leHRFbGVtZW50XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBleGlzdGluZyBpbnN0YW5jZSBzaG91bGQgYmUgdXBkYXRlZC5cbiAqIEBwcm90ZWN0ZWRcbiAqL1xuZnVuY3Rpb24gc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQocHJldkVsZW1lbnQsIG5leHRFbGVtZW50KSB7XG4gIGlmIChwcmV2RWxlbWVudCAmJiBuZXh0RWxlbWVudCAmJlxuICAgICAgcHJldkVsZW1lbnQudHlwZSA9PT0gbmV4dEVsZW1lbnQudHlwZSAmJlxuICAgICAgcHJldkVsZW1lbnQua2V5ID09PSBuZXh0RWxlbWVudC5rZXkgJiZcbiAgICAgIHByZXZFbGVtZW50Ll9vd25lciA9PT0gbmV4dEVsZW1lbnQuX293bmVyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50O1xuXG59LHt9XSwyMTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgdG9BcnJheVxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcIi4vaW52YXJpYW50XCIpO1xuXG4vKipcbiAqIENvbnZlcnQgYXJyYXktbGlrZSBvYmplY3RzIHRvIGFycmF5cy5cbiAqXG4gKiBUaGlzIEFQSSBhc3N1bWVzIHRoZSBjYWxsZXIga25vd3MgdGhlIGNvbnRlbnRzIG9mIHRoZSBkYXRhIHR5cGUuIEZvciBsZXNzXG4gKiB3ZWxsIGRlZmluZWQgaW5wdXRzIHVzZSBjcmVhdGVBcnJheUZyb20uXG4gKlxuICogQHBhcmFtIHtvYmplY3R8ZnVuY3Rpb258ZmlsZWxpc3R9IG9ialxuICogQHJldHVybiB7YXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXkob2JqKSB7XG4gIHZhciBsZW5ndGggPSBvYmoubGVuZ3RoO1xuXG4gIC8vIFNvbWUgYnJvd3NlIGJ1aWx0aW4gb2JqZWN0cyBjYW4gcmVwb3J0IHR5cGVvZiAnZnVuY3Rpb24nIChlLmcuIE5vZGVMaXN0IGluXG4gIC8vIG9sZCB2ZXJzaW9ucyBvZiBTYWZhcmkpLlxuICAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WID8gaW52YXJpYW50KFxuICAgICFBcnJheS5pc0FycmF5KG9iaikgJiZcbiAgICAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJyksXG4gICAgJ3RvQXJyYXk6IEFycmF5LWxpa2Ugb2JqZWN0IGV4cGVjdGVkJ1xuICApIDogaW52YXJpYW50KCFBcnJheS5pc0FycmF5KG9iaikgJiZcbiAgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnIHx8IHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpKSk7XG5cbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICB0eXBlb2YgbGVuZ3RoID09PSAnbnVtYmVyJyxcbiAgICAndG9BcnJheTogT2JqZWN0IG5lZWRzIGEgbGVuZ3RoIHByb3BlcnR5J1xuICApIDogaW52YXJpYW50KHR5cGVvZiBsZW5ndGggPT09ICdudW1iZXInKSk7XG5cbiAgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViA/IGludmFyaWFudChcbiAgICBsZW5ndGggPT09IDAgfHxcbiAgICAobGVuZ3RoIC0gMSkgaW4gb2JqLFxuICAgICd0b0FycmF5OiBPYmplY3Qgc2hvdWxkIGhhdmUga2V5cyBmb3IgaW5kaWNlcydcbiAgKSA6IGludmFyaWFudChsZW5ndGggPT09IDAgfHxcbiAgKGxlbmd0aCAtIDEpIGluIG9iaikpO1xuXG4gIC8vIE9sZCBJRSBkb2Vzbid0IGdpdmUgY29sbGVjdGlvbnMgYWNjZXNzIHRvIGhhc093blByb3BlcnR5LiBBc3N1bWUgaW5wdXRzXG4gIC8vIHdpdGhvdXQgbWV0aG9kIHdpbGwgdGhyb3cgZHVyaW5nIHRoZSBzbGljZSBjYWxsIGFuZCBza2lwIHN0cmFpZ2h0IHRvIHRoZVxuICAvLyBmYWxsYmFjay5cbiAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eSkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwob2JqKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJRSA8IDkgZG9lcyBub3Qgc3VwcG9ydCBBcnJheSNzbGljZSBvbiBjb2xsZWN0aW9ucyBvYmplY3RzXG4gICAgfVxuICB9XG5cbiAgLy8gRmFsbCBiYWNrIHRvIGNvcHlpbmcga2V5IGJ5IGtleS4gVGhpcyBhc3N1bWVzIGFsbCBrZXlzIGhhdmUgYSB2YWx1ZSxcbiAgLy8gc28gd2lsbCBub3QgcHJlc2VydmUgc3BhcnNlbHkgcG9wdWxhdGVkIGlucHV0cy5cbiAgdmFyIHJldCA9IEFycmF5KGxlbmd0aCk7XG4gIGZvciAodmFyIGlpID0gMDsgaWkgPCBsZW5ndGg7IGlpKyspIHtcbiAgICByZXRbaWldID0gb2JqW2lpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvQXJyYXk7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL2ludmFyaWFudFwiOjE5NixcIl9wcm9jZXNzXCI6MTl9XSwyMTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSB0cmF2ZXJzZUFsbENoaWxkcmVuXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKFwiLi9SZWFjdEVsZW1lbnRcIik7XG52YXIgUmVhY3RJbnN0YW5jZUhhbmRsZXMgPSByZXF1aXJlKFwiLi9SZWFjdEluc3RhbmNlSGFuZGxlc1wiKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCIuL2ludmFyaWFudFwiKTtcblxudmFyIFNFUEFSQVRPUiA9IFJlYWN0SW5zdGFuY2VIYW5kbGVzLlNFUEFSQVRPUjtcbnZhciBTVUJTRVBBUkFUT1IgPSAnOic7XG5cbi8qKlxuICogVE9ETzogVGVzdCB0aGF0OlxuICogMS4gYG1hcENoaWxkcmVuYCB0cmFuc2Zvcm1zIHN0cmluZ3MgYW5kIG51bWJlcnMgaW50byBgUmVhY3RUZXh0Q29tcG9uZW50YC5cbiAqIDIuIGl0KCdzaG91bGQgZmFpbCB3aGVuIHN1cHBsaWVkIGR1cGxpY2F0ZSBrZXknLCBmdW5jdGlvbigpIHtcbiAqIDMuIFRoYXQgYSBzaW5nbGUgY2hpbGQgYW5kIGFuIGFycmF5IHdpdGggb25lIGl0ZW0gaGF2ZSB0aGUgc2FtZSBrZXkgcGF0dGVybi5cbiAqIH0pO1xuICovXG5cbnZhciB1c2VyUHJvdmlkZWRLZXlFc2NhcGVyTG9va3VwID0ge1xuICAnPSc6ICc9MCcsXG4gICcuJzogJz0xJyxcbiAgJzonOiAnPTInXG59O1xuXG52YXIgdXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXggPSAvWz0uOl0vZztcblxuZnVuY3Rpb24gdXNlclByb3ZpZGVkS2V5RXNjYXBlcihtYXRjaCkge1xuICByZXR1cm4gdXNlclByb3ZpZGVkS2V5RXNjYXBlckxvb2t1cFttYXRjaF07XG59XG5cbi8qKlxuICogR2VuZXJhdGUgYSBrZXkgc3RyaW5nIHRoYXQgaWRlbnRpZmllcyBhIGNvbXBvbmVudCB3aXRoaW4gYSBzZXQuXG4gKlxuICogQHBhcmFtIHsqfSBjb21wb25lbnQgQSBjb21wb25lbnQgdGhhdCBjb3VsZCBjb250YWluIGEgbWFudWFsIGtleS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBJbmRleCB0aGF0IGlzIHVzZWQgaWYgYSBtYW51YWwga2V5IGlzIG5vdCBwcm92aWRlZC5cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZ2V0Q29tcG9uZW50S2V5KGNvbXBvbmVudCwgaW5kZXgpIHtcbiAgaWYgKGNvbXBvbmVudCAmJiBjb21wb25lbnQua2V5ICE9IG51bGwpIHtcbiAgICAvLyBFeHBsaWNpdCBrZXlcbiAgICByZXR1cm4gd3JhcFVzZXJQcm92aWRlZEtleShjb21wb25lbnQua2V5KTtcbiAgfVxuICAvLyBJbXBsaWNpdCBrZXkgZGV0ZXJtaW5lZCBieSB0aGUgaW5kZXggaW4gdGhlIHNldFxuICByZXR1cm4gaW5kZXgudG9TdHJpbmcoMzYpO1xufVxuXG4vKipcbiAqIEVzY2FwZSBhIGNvbXBvbmVudCBrZXkgc28gdGhhdCBpdCBpcyBzYWZlIHRvIHVzZSBpbiBhIHJlYWN0aWQuXG4gKlxuICogQHBhcmFtIHsqfSBrZXkgQ29tcG9uZW50IGtleSB0byBiZSBlc2NhcGVkLlxuICogQHJldHVybiB7c3RyaW5nfSBBbiBlc2NhcGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZXNjYXBlVXNlclByb3ZpZGVkS2V5KHRleHQpIHtcbiAgcmV0dXJuICgnJyArIHRleHQpLnJlcGxhY2UoXG4gICAgdXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXgsXG4gICAgdXNlclByb3ZpZGVkS2V5RXNjYXBlclxuICApO1xufVxuXG4vKipcbiAqIFdyYXAgYSBga2V5YCB2YWx1ZSBleHBsaWNpdGx5IHByb3ZpZGVkIGJ5IHRoZSB1c2VyIHRvIGRpc3Rpbmd1aXNoIGl0IGZyb21cbiAqIGltcGxpY2l0bHktZ2VuZXJhdGVkIGtleXMgZ2VuZXJhdGVkIGJ5IGEgY29tcG9uZW50J3MgaW5kZXggaW4gaXRzIHBhcmVudC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFZhbHVlIG9mIGEgdXNlci1wcm92aWRlZCBga2V5YCBhdHRyaWJ1dGVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gd3JhcFVzZXJQcm92aWRlZEtleShrZXkpIHtcbiAgcmV0dXJuICckJyArIGVzY2FwZVVzZXJQcm92aWRlZEtleShrZXkpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHBhcmFtIHshc3RyaW5nfSBuYW1lU29GYXIgTmFtZSBvZiB0aGUga2V5IHBhdGggc28gZmFyLlxuICogQHBhcmFtIHshbnVtYmVyfSBpbmRleFNvRmFyIE51bWJlciBvZiBjaGlsZHJlbiBlbmNvdW50ZXJlZCB1bnRpbCB0aGlzIHBvaW50LlxuICogQHBhcmFtIHshZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIHRvIGludm9rZSB3aXRoIGVhY2ggY2hpbGQgZm91bmQuXG4gKiBAcGFyYW0gez8qfSB0cmF2ZXJzZUNvbnRleHQgVXNlZCB0byBwYXNzIGluZm9ybWF0aW9uIHRocm91Z2hvdXQgdGhlIHRyYXZlcnNhbFxuICogcHJvY2Vzcy5cbiAqIEByZXR1cm4geyFudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hpbGRyZW4gaW4gdGhpcyBzdWJ0cmVlLlxuICovXG52YXIgdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwgPVxuICBmdW5jdGlvbihjaGlsZHJlbiwgbmFtZVNvRmFyLCBpbmRleFNvRmFyLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KSB7XG4gICAgdmFyIG5leHROYW1lLCBuZXh0SW5kZXg7XG4gICAgdmFyIHN1YnRyZWVDb3VudCA9IDA7ICAvLyBDb3VudCBvZiBjaGlsZHJlbiBmb3VuZCBpbiB0aGUgY3VycmVudCBzdWJ0cmVlLlxuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgbmV4dE5hbWUgPSAoXG4gICAgICAgICAgbmFtZVNvRmFyICtcbiAgICAgICAgICAobmFtZVNvRmFyID8gU1VCU0VQQVJBVE9SIDogU0VQQVJBVE9SKSArXG4gICAgICAgICAgZ2V0Q29tcG9uZW50S2V5KGNoaWxkLCBpKVxuICAgICAgICApO1xuICAgICAgICBuZXh0SW5kZXggPSBpbmRleFNvRmFyICsgc3VidHJlZUNvdW50O1xuICAgICAgICBzdWJ0cmVlQ291bnQgKz0gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoXG4gICAgICAgICAgY2hpbGQsXG4gICAgICAgICAgbmV4dE5hbWUsXG4gICAgICAgICAgbmV4dEluZGV4LFxuICAgICAgICAgIGNhbGxiYWNrLFxuICAgICAgICAgIHRyYXZlcnNlQ29udGV4dFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiBjaGlsZHJlbjtcbiAgICAgIHZhciBpc09ubHlDaGlsZCA9IG5hbWVTb0ZhciA9PT0gJyc7XG4gICAgICAvLyBJZiBpdCdzIHRoZSBvbmx5IGNoaWxkLCB0cmVhdCB0aGUgbmFtZSBhcyBpZiBpdCB3YXMgd3JhcHBlZCBpbiBhbiBhcnJheVxuICAgICAgLy8gc28gdGhhdCBpdCdzIGNvbnNpc3RlbnQgaWYgdGhlIG51bWJlciBvZiBjaGlsZHJlbiBncm93c1xuICAgICAgdmFyIHN0b3JhZ2VOYW1lID1cbiAgICAgICAgaXNPbmx5Q2hpbGQgPyBTRVBBUkFUT1IgKyBnZXRDb21wb25lbnRLZXkoY2hpbGRyZW4sIDApIDogbmFtZVNvRmFyO1xuICAgICAgaWYgKGNoaWxkcmVuID09IG51bGwgfHwgdHlwZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIC8vIEFsbCBvZiB0aGUgYWJvdmUgYXJlIHBlcmNlaXZlZCBhcyBudWxsLlxuICAgICAgICBjYWxsYmFjayh0cmF2ZXJzZUNvbnRleHQsIG51bGwsIHN0b3JhZ2VOYW1lLCBpbmRleFNvRmFyKTtcbiAgICAgICAgc3VidHJlZUNvdW50ID0gMTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3N0cmluZycgfHwgdHlwZSA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgICAgICAgICAgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSkge1xuICAgICAgICBjYWxsYmFjayh0cmF2ZXJzZUNvbnRleHQsIGNoaWxkcmVuLCBzdG9yYWdlTmFtZSwgaW5kZXhTb0Zhcik7XG4gICAgICAgIHN1YnRyZWVDb3VudCA9IDE7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPyBpbnZhcmlhbnQoXG4gICAgICAgICAgIWNoaWxkcmVuIHx8IGNoaWxkcmVuLm5vZGVUeXBlICE9PSAxLFxuICAgICAgICAgICd0cmF2ZXJzZUFsbENoaWxkcmVuKC4uLik6IEVuY291bnRlcmVkIGFuIGludmFsaWQgY2hpbGQ7IERPTSAnICtcbiAgICAgICAgICAnZWxlbWVudHMgYXJlIG5vdCB2YWxpZCBjaGlsZHJlbiBvZiBSZWFjdCBjb21wb25lbnRzLidcbiAgICAgICAgKSA6IGludmFyaWFudCghY2hpbGRyZW4gfHwgY2hpbGRyZW4ubm9kZVR5cGUgIT09IDEpKTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGNoaWxkcmVuKSB7XG4gICAgICAgICAgaWYgKGNoaWxkcmVuLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIG5leHROYW1lID0gKFxuICAgICAgICAgICAgICBuYW1lU29GYXIgKyAobmFtZVNvRmFyID8gU1VCU0VQQVJBVE9SIDogU0VQQVJBVE9SKSArXG4gICAgICAgICAgICAgIHdyYXBVc2VyUHJvdmlkZWRLZXkoa2V5KSArIFNVQlNFUEFSQVRPUiArXG4gICAgICAgICAgICAgIGdldENvbXBvbmVudEtleShjaGlsZHJlbltrZXldLCAwKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIG5leHRJbmRleCA9IGluZGV4U29GYXIgKyBzdWJ0cmVlQ291bnQ7XG4gICAgICAgICAgICBzdWJ0cmVlQ291bnQgKz0gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoXG4gICAgICAgICAgICAgIGNoaWxkcmVuW2tleV0sXG4gICAgICAgICAgICAgIG5leHROYW1lLFxuICAgICAgICAgICAgICBuZXh0SW5kZXgsXG4gICAgICAgICAgICAgIGNhbGxiYWNrLFxuICAgICAgICAgICAgICB0cmF2ZXJzZUNvbnRleHRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdWJ0cmVlQ291bnQ7XG4gIH07XG5cbi8qKlxuICogVHJhdmVyc2VzIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYCwgYnV0XG4gKiBtaWdodCBhbHNvIGJlIHNwZWNpZmllZCB0aHJvdWdoIGF0dHJpYnV0ZXM6XG4gKlxuICogLSBgdHJhdmVyc2VBbGxDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuLCAuLi4pYFxuICogLSBgdHJhdmVyc2VBbGxDaGlsZHJlbih0aGlzLnByb3BzLmxlZnRQYW5lbENoaWxkcmVuLCAuLi4pYFxuICpcbiAqIFRoZSBgdHJhdmVyc2VDb250ZXh0YCBpcyBhbiBvcHRpb25hbCBhcmd1bWVudCB0aGF0IGlzIHBhc3NlZCB0aHJvdWdoIHRoZVxuICogZW50aXJlIHRyYXZlcnNhbC4gSXQgY2FuIGJlIHVzZWQgdG8gc3RvcmUgYWNjdW11bGF0aW9ucyBvciBhbnl0aGluZyBlbHNlIHRoYXRcbiAqIHRoZSBjYWxsYmFjayBtaWdodCBmaW5kIHJlbGV2YW50LlxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgb2JqZWN0LlxuICogQHBhcmFtIHshZnVuY3Rpb259IGNhbGxiYWNrIFRvIGludm9rZSB1cG9uIHRyYXZlcnNpbmcgZWFjaCBjaGlsZC5cbiAqIEBwYXJhbSB7Pyp9IHRyYXZlcnNlQ29udGV4dCBDb250ZXh0IGZvciB0cmF2ZXJzYWwuXG4gKiBAcmV0dXJuIHshbnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNoaWxkcmVuIGluIHRoaXMgc3VidHJlZS5cbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2VBbGxDaGlsZHJlbihjaGlsZHJlbiwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCkge1xuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgcmV0dXJuIHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkcmVuLCAnJywgMCwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdHJhdmVyc2VBbGxDaGlsZHJlbjtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vUmVhY3RFbGVtZW50XCI6MTIxLFwiLi9SZWFjdEluc3RhbmNlSGFuZGxlc1wiOjEyOSxcIi4vaW52YXJpYW50XCI6MTk2LFwiX3Byb2Nlc3NcIjoxOX1dLDIxNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSB3YXJuaW5nXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZShcIi4vZW1wdHlGdW5jdGlvblwiKTtcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmcgPSBlbXB0eUZ1bmN0aW9uO1xuXG5pZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCApIHtmb3IgKHZhciBhcmdzPVtdLCRfXzA9MiwkX18xPWFyZ3VtZW50cy5sZW5ndGg7JF9fMDwkX18xOyRfXzArKykgYXJncy5wdXNoKGFyZ3VtZW50c1skX18wXSk7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgY29uc29sZS53YXJuKCdXYXJuaW5nOiAnICsgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkgIHtyZXR1cm4gYXJnc1thcmdJbmRleCsrXTt9KSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL2VtcHR5RnVuY3Rpb25cIjoxNzcsXCJfcHJvY2Vzc1wiOjE5fV0sMjE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvUmVhY3QnKTtcblxufSx7XCIuL2xpYi9SZWFjdFwiOjk3fV0sMjE3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qIVxuICogUmVhY3RGaXJlIGlzIGFuIG9wZW4tc291cmNlIEphdmFTY3JpcHQgbGlicmFyeSB0aGF0IGFsbG93cyB5b3UgdG8gYWRkIGFcbiAqIHJlYWx0aW1lIGRhdGEgc291cmNlIHRvIHlvdXIgUmVhY3QgYXBwcyBieSBwcm92aWRpbmcgYW5kIGVhc3kgd2F5IHRvIGxldFxuICogRmlyZWJhc2UgcG9wdWxhdGUgdGhlIHN0YXRlIG9mIFJlYWN0IGNvbXBvbmVudHMuXG4gKlxuICogUmVhY3RGaXJlIDAuNC4wXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmlyZWJhc2UvcmVhY3RmaXJlL1xuICogTGljZW5zZTogTUlUXG4gKi9cblxuOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKFtdLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAocm9vdC5SZWFjdEZpcmVNaXhpbiA9IGZhY3RvcnkoKSk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICB9IGVsc2Uge1xuICAgIC8vIEdsb2JhbCB2YXJpYWJsZXNcbiAgICByb290LlJlYWN0RmlyZU1peGluID0gZmFjdG9yeSgpO1xuICB9XG59KHRoaXMsIGZ1bmN0aW9uKCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxudmFyIFJlYWN0RmlyZU1peGluID0ge1xuICAvKioqKioqKioqKioqKioqKioqKiovXG4gIC8qICBNSVhJTiBMSUZFVElNRSAgKi9cbiAgLyoqKioqKioqKioqKioqKioqKioqL1xuICAvKiBJbml0aWFsaXplcyB0aGUgRmlyZWJhc2UgYmluZGluZyByZWZzIGFycmF5ICovXG4gIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5maXJlYmFzZVJlZnMgPSB7fTtcbiAgICB0aGlzLmZpcmViYXNlTGlzdGVuZXJzID0ge307XG4gIH0sXG5cbiAgLyogUmVtb3ZlcyBhbnkgcmVtYWluaW5nIEZpcmViYXNlIGJpbmRpbmdzICovXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5maXJlYmFzZVJlZnMpIHtcbiAgICAgIGlmICh0aGlzLmZpcmViYXNlUmVmcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIHRoaXMudW5iaW5kKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG5cbiAgLyoqKioqKioqKioqKiovXG4gIC8qICBCSU5ESU5HICAqL1xuICAvKioqKioqKioqKioqKi9cbiAgLyogQ3JlYXRlcyBhIGJpbmRpbmcgYmV0d2VlbiBGaXJlYmFzZSBhbmQgdGhlIGlucHV0dGVkIGJpbmQgdmFyaWFibGUgYXMgYW4gYXJyYXkgKi9cbiAgYmluZEFzQXJyYXk6IGZ1bmN0aW9uKGZpcmViYXNlUmVmLCBiaW5kVmFyLCBjYW5jZWxDYWxsYmFjaykge1xuICAgIHRoaXMuX2JpbmQoZmlyZWJhc2VSZWYsIGJpbmRWYXIsIGNhbmNlbENhbGxiYWNrLCB0cnVlKTtcbiAgfSxcblxuICAvKiBDcmVhdGVzIGEgYmluZGluZyBiZXR3ZWVuIEZpcmViYXNlIGFuZCB0aGUgaW5wdXR0ZWQgYmluZCB2YXJpYWJsZSBhcyBhbiBvYmplY3QgKi9cbiAgYmluZEFzT2JqZWN0OiBmdW5jdGlvbihmaXJlYmFzZVJlZiwgYmluZFZhciwgY2FuY2VsQ2FsbGJhY2spIHtcbiAgICB0aGlzLl9iaW5kKGZpcmViYXNlUmVmLCBiaW5kVmFyLCBjYW5jZWxDYWxsYmFjaywgZmFsc2UpO1xuICB9LFxuXG4gIC8qIENyZWF0ZXMgYSBiaW5kaW5nIGJldHdlZW4gRmlyZWJhc2UgYW5kIHRoZSBpbnB1dHRlZCBiaW5kIHZhcmlhYmxlIGFzIGVpdGhlciBhbiBhcnJheSBvciBvYmplY3QgKi9cbiAgX2JpbmQ6IGZ1bmN0aW9uKGZpcmViYXNlUmVmLCBiaW5kVmFyLCBjYW5jZWxDYWxsYmFjaywgYmluZEFzQXJyYXkpIHtcbiAgICB0aGlzLl92YWxpZGF0ZUJpbmRWYXIoYmluZFZhcik7XG5cbiAgICB2YXIgZXJyb3JNZXNzYWdlLCBlcnJvckNvZGU7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChmaXJlYmFzZVJlZikgIT09IFwiW29iamVjdCBPYmplY3RdXCIpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiZmlyZWJhc2VSZWYgbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBGaXJlYmFzZVwiO1xuICAgICAgZXJyb3JDb2RlID0gXCJJTlZBTElEX0ZJUkVCQVNFX1JFRlwiO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgYmluZEFzQXJyYXkgIT09IFwiYm9vbGVhblwiKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcImJpbmRBc0FycmF5IG11c3QgYmUgYSBib29sZWFuLiBHb3Q6IFwiICsgYmluZEFzQXJyYXk7XG4gICAgICBlcnJvckNvZGUgPSBcIklOVkFMSURfQklORF9BU19BUlJBWVwiO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZXJyb3JNZXNzYWdlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoXCJSZWFjdEZpcmU6IFwiICsgZXJyb3JNZXNzYWdlKTtcbiAgICAgIGVycm9yLmNvZGUgPSBlcnJvckNvZGU7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG5cbiAgICB0aGlzLmZpcmViYXNlUmVmc1tiaW5kVmFyXSA9IGZpcmViYXNlUmVmLnJlZigpO1xuICAgIHRoaXMuZmlyZWJhc2VMaXN0ZW5lcnNbYmluZFZhcl0gPSBmaXJlYmFzZVJlZi5vbihcInZhbHVlXCIsIGZ1bmN0aW9uKGRhdGFTbmFwc2hvdCkge1xuICAgICAgdmFyIG5ld1N0YXRlID0ge307XG4gICAgICBpZiAoYmluZEFzQXJyYXkpIHtcbiAgICAgICAgbmV3U3RhdGVbYmluZFZhcl0gPSB0aGlzLl90b0FycmF5KGRhdGFTbmFwc2hvdC52YWwoKSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbmV3U3RhdGVbYmluZFZhcl0gPSBkYXRhU25hcHNob3QudmFsKCk7XG4gICAgICB9XG4gICAgICB0aGlzLnNldFN0YXRlKG5ld1N0YXRlKTtcbiAgICB9LmJpbmQodGhpcyksIGNhbmNlbENhbGxiYWNrKTtcbiAgfSxcblxuICAvKiBSZW1vdmVzIHRoZSBiaW5kaW5nIGJldHdlZW4gRmlyZWJhc2UgYW5kIHRoZSBpbnB1dHRlZCBiaW5kIHZhcmlhYmxlICovXG4gIHVuYmluZDogZnVuY3Rpb24oYmluZFZhcikge1xuICAgIHRoaXMuX3ZhbGlkYXRlQmluZFZhcihiaW5kVmFyKTtcblxuICAgIGlmICh0eXBlb2YgdGhpcy5maXJlYmFzZVJlZnNbYmluZFZhcl0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihcIlJlYWN0RmlyZTogdW5leHBlY3RlZCB2YWx1ZSBmb3IgYmluZFZhci4gXFxcIlwiICsgYmluZFZhciArIFwiXFxcIiB3YXMgZWl0aGVyIG5ldmVyIGJvdW5kIG9yIGhhcyBhbHJlYWR5IGJlZW4gdW5ib3VuZFwiKTtcbiAgICAgIGVycm9yLmNvZGUgPSBcIlVOQk9VTkRfQklORF9WQVJJQUJMRVwiO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuXG4gICAgdGhpcy5maXJlYmFzZVJlZnNbYmluZFZhcl0ub2ZmKFwidmFsdWVcIiwgdGhpcy5maXJlYmFzZUxpc3RlbmVyc1tiaW5kVmFyXSk7XG4gICAgZGVsZXRlIHRoaXMuZmlyZWJhc2VSZWZzW2JpbmRWYXJdO1xuICAgIGRlbGV0ZSB0aGlzLmZpcmViYXNlTGlzdGVuZXJzW2JpbmRWYXJdO1xuICB9LFxuXG5cbiAgLyoqKioqKioqKioqKiovXG4gIC8qICBIRUxQRVJTICAqL1xuICAvKioqKioqKioqKioqKi9cbiAgLyogVmFsaWRhdGVzIHRoZSBuYW1lIG9mIHRoZSB2YXJpYWJsZSB3aGljaCBpcyBiZWluZyBib3VuZCAqL1xuICBfdmFsaWRhdGVCaW5kVmFyOiBmdW5jdGlvbihiaW5kVmFyKSB7XG4gICAgdmFyIGVycm9yTWVzc2FnZTtcblxuICAgIGlmICh0eXBlb2YgYmluZFZhciAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJiaW5kVmFyIG11c3QgYmUgYSBzdHJpbmcuIEdvdDogXCIgKyBiaW5kVmFyO1xuICAgIH1cbiAgICBlbHNlIGlmIChiaW5kVmFyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJiaW5kVmFyIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nLiBHb3Q6IFxcXCJcXFwiXCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKGJpbmRWYXIubGVuZ3RoID4gNzY4KSB7XG4gICAgICAvLyBGaXJlYmFzZSBjYW4gb25seSBzdG9yZWQgY2hpbGQgcGF0aHMgdXAgdG8gNzY4IGNoYXJhY3RlcnNcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiYmluZFZhciBpcyB0b28gbG9uZyB0byBiZSBzdG9yZWQgaW4gRmlyZWJhc2UuIEdvdDogXCIgKyBiaW5kVmFyO1xuICAgIH1cbiAgICBlbHNlIGlmICgvW1xcW1xcXS4jJFxcL1xcdTAwMDAtXFx1MDAxRlxcdTAwN0ZdLy50ZXN0KGJpbmRWYXIpKSB7XG4gICAgICAvLyBGaXJlYmFzZSBkb2VzIG5vdCBhbGxvdyBub2RlIGtleXMgdG8gY29udGFpbiB0aGUgZm9sbG93aW5nIGNoYXJhY3RlcnNcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiYmluZFZhciBjYW5ub3QgY29udGFpbiBhbnkgb2YgdGhlIGZvbGxvd2luZyBjaGFyYWN0ZXJzOiAuICMgJCBdIFsgLy4gR290OiBcIiArIGJpbmRWYXI7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBlcnJvck1lc3NhZ2UgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihcIlJlYWN0RmlyZTogXCIgKyBlcnJvck1lc3NhZ2UpO1xuICAgICAgZXJyb3IuY29kZSA9IFwiSU5WQUxJRF9CSU5EX1ZBUklBQkxFXCI7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG5cblxuICAvKiBSZXR1cm5zIHRydWUgaWYgdGhlIGlucHV0dGVkIG9iamVjdCBpcyBhIEphdmFTY3JpcHQgYXJyYXkgKi9cbiAgX2lzQXJyYXk6IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09IFwiW29iamVjdCBBcnJheV1cIik7XG4gIH0sXG5cbiAgLyogQ29udmVydHMgYSBGaXJlYmFzZSBvYmplY3QgdG8gYSBKYXZhU2NyaXB0IGFycmF5ICovXG4gIF90b0FycmF5OiBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgb3V0ID0gW107XG4gICAgaWYgKG9iaikge1xuICAgICAgaWYgKHRoaXMuX2lzQXJyYXkob2JqKSkge1xuICAgICAgICBvdXQgPSBvYmo7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh0eXBlb2Yob2JqKSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICBvdXQucHVzaChvYmpba2V5XSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH1cbn07XG5cbiAgcmV0dXJuIFJlYWN0RmlyZU1peGluO1xufSkpO1xufSx7fV19LHt9LFs0XSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=